{"id":"b633704a43d74f54a18bcf3e91da1cfa","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {ERC165Upgradeable} from \"../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role => RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\n    struct PausableStorage {\n        bool _paused;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Pausable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\n\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\n        assembly {\n            $.slot := PausableStorageLocation\n        }\n    }\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        PausableStorage storage $ = _getPausableStorage();\n        return $._paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\n    struct ReentrancyGuardStorage {\n        uint256 _status;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\n\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\n        assembly {\n            $.slot := ReentrancyGuardStorageLocation\n        }\n    }\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if ($._status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        $._status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        return $._status == ENTERED;\n    }\n}\n"},"@openzeppelin/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"},"@openzeppelin/contracts/access/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Base64.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Base64.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/BaseHelper.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nabstract contract BaseHelper is\n    Initializable,\n    AccessControlUpgradeable,\n    PausableUpgradeable,\n    ReentrancyGuardUpgradeable\n{\n    /** ROLES **/\n    bytes32 public constant OWNER_ROLE = keccak256(\"OWNER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant UTILITY_ROLE = keccak256(\"UTILITY_ROLE\");\n\n    /** ERRORS **/\n\n    error InvalidValues();\n\n    /** MODIFIERS **/\n\n    /** FUNCTIONS **/\n\n    function _baseInitialize(address initialOwner) internal onlyInitializing {\n        __Pausable_init();\n        __AccessControl_init();\n        __ReentrancyGuard_init();\n\n        // Grant default admin role to initialOwner\n        _grantRole(DEFAULT_ADMIN_ROLE, initialOwner);\n        // Grant pauser role to initialOwner\n        _grantRole(PAUSER_ROLE, initialOwner);\n        _grantRole(OWNER_ROLE, initialOwner);\n        _grantRole(MINTER_ROLE, initialOwner);\n        _grantRole(ADMIN_ROLE, initialOwner);\n        _grantRole(UTILITY_ROLE, initialOwner);\n    }\n\n    function pause() public onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    function unpause() public onlyRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    // The gap is needed to avoid overwriting storage variables in future upgrades\n    uint256[50] private __gap;\n}\n"},"contracts/erc721/CharacterNFT.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"./CharacterNFTManager.sol\";\nimport \"./CharacterNFTTokenURI.sol\";\n\ncontract CharacterNFT is ERC721, AccessControl {\n    using Strings for uint256;\n\n    /** VARIABLES **/\n\n    struct CharacterData {\n        string className;\n        string classImage;\n        string classDescription;\n    }\n\n    mapping(uint256 => CharacterData) public classIdToCharacterData;\n    address public characterNFTManagerContract;\n    address public tokenUriContract;\n\n    /** ROLES **/\n\n    bytes32 public constant OWNER_ROLE = keccak256(\"OWNER_ROLE\");\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\");\n\n    /** ERRORS **/\n\n    error InvalidValues();\n\n    /** MODIFIERS **/\n\n    /** FUNCTIONS **/\n\n    constructor() ERC721(\"Diablo\", \"D2NFT\") {\n        // DEFAULT_ADMIN_ROLE is a special role that acts as the default admin role for all roles\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(OWNER_ROLE, msg.sender);\n        _grantRole(MINTER_ROLE, msg.sender);\n        _grantRole(BURNER_ROLE, msg.sender);\n\n        classIdToCharacterData[1].className = \"BARBARIAN\";\n        classIdToCharacterData[2].className = \"NECROMANCER\";\n        classIdToCharacterData[3].className = \"PALADIN\";\n        classIdToCharacterData[4].className = \"SORCERESS\";\n        classIdToCharacterData[5].className = \"AMAZON\";\n        classIdToCharacterData[6].className = \"ASSASSIN\";\n        classIdToCharacterData[7].className = \"DRUID\";\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view override(ERC721, AccessControl) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Set the address of the CharacterNFTManager contract\n     */\n    function setCharacterNFTManager(\n        address characterNFTManagerAddress\n    ) public onlyRole(OWNER_ROLE) {\n        characterNFTManagerContract = characterNFTManagerAddress;\n    }\n\n    /**\n     * @dev Set the address of the CharacterNFTTokenURI contract\n     */\n    function setTokenUriContract(\n        address tokenUriContractAddress\n    ) public onlyRole(OWNER_ROLE) {\n        tokenUriContract = tokenUriContractAddress;\n    }\n\n    /**\n     * @dev Returns the name of a given token ID\n     */\n    function tokenName(uint256 tokenId) public view returns (string memory) {\n        uint256 classEnumValue = uint256(\n            CharacterNFTManager(characterNFTManagerContract)\n                .tokenIdToCharacterClass(tokenId)\n        );\n        string memory className = classIdToCharacterData[classEnumValue]\n            .className;\n        return string(abi.encodePacked(className, \" #\", tokenId.toString()));\n    }\n\n    /**\n     * @dev Returns the URI for a given token ID\n     */\n    function tokenURI(\n        uint256 tokenId\n    ) public view override returns (string memory) {\n        _requireOwned(tokenId);\n        if (tokenUriContract == address(0)) {\n            return \"\";\n        }\n        return CharacterNFTTokenURI(tokenUriContract).tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Update the class names\n     */\n    function updateClassNames(\n        uint256 classEnumValue,\n        string memory classNames\n    ) public onlyRole(OWNER_ROLE) {\n        classIdToCharacterData[classEnumValue].className = classNames;\n    }\n\n    /**\n     * @dev Update the class images\n     */\n    function updateClassImages(\n        uint256 classEnumValue,\n        string memory classImages\n    ) public onlyRole(OWNER_ROLE) {\n        classIdToCharacterData[classEnumValue].classImage = classImages;\n    }\n\n    /**\n     * @dev Update the class descriptions\n     */\n    function updateClassDescriptions(\n        uint256 classEnumValue,\n        string memory classDescriptions\n    ) public onlyRole(OWNER_ROLE) {\n        classIdToCharacterData[classEnumValue]\n            .classDescription = classDescriptions;\n    }\n\n    /**\n     * @dev Mint a new token, only a minter can call this function\n     */\n    function mint(uint256 tokenId, address to) public onlyRole(MINTER_ROLE) {\n        if (tokenId == 0 || to == address(0)) {\n            revert InvalidValues();\n        }\n        _safeMint(to, tokenId);\n    }\n\n    /**\n     * @dev Burn a token, only a burner can call this function\n     */\n    function burn(uint256 tokenId) public onlyRole(BURNER_ROLE) {\n        if (tokenId == 0) {\n            revert InvalidValues();\n        }\n        _burn(tokenId);\n    }\n\n    function getClassDescription(\n        uint256 tokenId\n    ) public view returns (string memory) {\n        uint256 classEnumValue = uint256(\n            CharacterNFTManager(characterNFTManagerContract)\n                .tokenIdToCharacterClass(tokenId)\n        );\n        return classIdToCharacterData[classEnumValue].classDescription;\n    }\n\n    function getClassImage(\n        uint256 tokenId\n    ) public view returns (string memory) {\n        uint256 classEnumValue = uint256(\n            CharacterNFTManager(characterNFTManagerContract)\n                .tokenIdToCharacterClass(tokenId)\n        );\n        return classIdToCharacterData[classEnumValue].classImage;\n    }\n\n    function getClassName(uint256 tokenId) public view returns (string memory) {\n        uint256 classEnumValue = uint256(\n            CharacterNFTManager(characterNFTManagerContract)\n                .tokenIdToCharacterClass(tokenId)\n        );\n        return classIdToCharacterData[classEnumValue].className;\n    }\n}\n"},"contracts/erc721/CharacterNFTManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"../BaseHelper.sol\";\nimport \"./CharacterNFT.sol\";\n\ncontract CharacterNFTManager is BaseHelper {\n    /** ENUMS **/\n    enum CharacterClass {\n        NULL,\n        BARBARIAN,\n        NECROMANCER,\n        PALADIN,\n        SORCERESS,\n        AMAZON,\n        ASSASSIN,\n        DRUID\n    }\n\n    /** VARIABLES **/\n\n    // Track the last token ID minted\n    uint256 public tokenIdCounter;\n    // Track the character class of each token ID\n    mapping(uint256 => CharacterClass) public tokenIdToCharacterClass;\n    // Price per mint\n    uint256 public pricePerMint;\n    // CharacterNFT contract\n    address public characterNFT;\n\n    /** ERRORS **/\n\n    error InsufficientFunds(uint256 pricePerMint, uint256 amount);\n    error InvalidCharacterClass();\n\n    /** MODIFIERS **/\n\n    /** FUNCTIONS **/\n\n    function initialize(address initialOwner) public initializer {\n        _baseInitialize(initialOwner);\n    }\n\n    /**\n     * @dev Set the price per mint\n     */\n    function setPricePerMint(\n        uint256 _pricePerMint\n    ) public onlyRole(OWNER_ROLE) {\n        pricePerMint = _pricePerMint;\n    }\n\n    /**\n     * @dev Set the address of the CharacterNFT contract\n     */\n    function setCharacterNFT(\n        address _characterNFT\n    ) public onlyRole(OWNER_ROLE) {\n        characterNFT = _characterNFT;\n    }\n\n    /**\n     * @dev Withdraw the contract balance\n     */\n    function withdraw() public onlyRole(OWNER_ROLE) {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n\n    /**\n     * @dev Mint a character NFT, open for public use, requires payment\n     */\n    function mintCharacterPublic(\n        uint256 amount,\n        CharacterClass charType\n    ) public payable whenNotPaused nonReentrant {\n        if (charType == CharacterClass.NULL) {\n            revert InvalidCharacterClass();\n        }\n        if (amount == 0) {\n            revert InvalidValues();\n        }\n        if (msg.value < pricePerMint * amount) {\n            revert InsufficientFunds(pricePerMint, amount);\n        }\n        for (uint256 i = 0; i < amount; i++) {\n            tokenIdCounter++;\n            uint256 newTokenId = tokenIdCounter;\n            tokenIdToCharacterClass[newTokenId] = charType;\n            CharacterNFT(characterNFT).mint(newTokenId, msg.sender);\n        }\n    }\n\n    /**\n     * @dev Mint a character NFT, only for MINTER use, no payment required\n     */\n    function mintCharacterPrivate(\n        uint256 amount,\n        address to,\n        CharacterClass charType\n    ) public onlyRole(MINTER_ROLE) {\n        _mintChar(amount, to, charType);\n    }\n\n    /**\n     * @dev Mint a batch of character NFTs, only for owner use, no payment required\n     */\n    function mintBatch(\n        uint256[] calldata amounts,\n        address[] calldata toAddresses,\n        CharacterClass[] calldata charTypes\n    ) public onlyRole(MINTER_ROLE) {\n        if (\n            amounts.length != toAddresses.length ||\n            amounts.length != charTypes.length\n        ) {\n            revert InvalidValues();\n        }\n\n        for (uint256 i = 0; i < amounts.length; i++) {\n            _mintChar(amounts[i], toAddresses[i], charTypes[i]);\n        }\n    }\n\n    /**\n     * @dev Internal mint helper\n     */\n    function _mintChar(\n        uint256 amount,\n        address to,\n        CharacterClass charType\n    ) internal {\n        if (\n            charType == CharacterClass.NULL || amount == 0 || to == address(0)\n        ) {\n            revert InvalidValues();\n        }\n\n        for (uint256 i = 0; i < amount; i++) {\n            tokenIdCounter++;\n            uint256 newTokenId = tokenIdCounter;\n            tokenIdToCharacterClass[newTokenId] = charType;\n            CharacterNFT(characterNFT).mint(newTokenId, to);\n        }\n    }\n}\n"},"contracts/erc721/CharacterNFTTokenURI.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\n\nimport \"../BaseHelper.sol\";\nimport \"./CharacterNFT.sol\";\nimport \"../leveling/Level.sol\";\n\ncontract CharacterNFTTokenURI is BaseHelper {\n    using Strings for uint256;\n    /** STRUCTS **/\n\n    struct Attribute {\n        string name;\n        uint256 value;\n    }\n\n    /** VARIABLES **/\n\n    address public characterNFT;\n\n    address public levelContractAddress;\n\n    /** ERRORS **/\n\n    /** MODIFIERS **/\n\n    /** FUNCTIONS **/\n\n    function initialize(address initialOwner) public initializer {\n        _baseInitialize(initialOwner);\n    }\n\n    /**\n     * @dev Set the address of the CharacterNFT contract\n     */\n    function setCharacterNFT(\n        address _characterNFT\n    ) public onlyRole(OWNER_ROLE) {\n        characterNFT = _characterNFT;\n    }\n\n    /**\n     * @dev Set the address of the Level contract\n     */\n    function setLevelContract(\n        address _levelContract\n    ) public onlyRole(OWNER_ROLE) {\n        levelContractAddress = _levelContract;\n    }\n\n    /**\n     * @dev Returns the URI for a given token ID\n     */\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\n        return _createURI(tokenId);\n    }\n\n    /**\n     * @dev Creates the URI for a given token ID\n     */\n    function _createURI(uint256 tokenId) internal view returns (string memory) {\n        string memory attributesString = \"\";\n\n        attributesString = string.concat(\n            _addAttribute(\n                \"Character Class\",\n                CharacterNFT(characterNFT).getClassName(tokenId)\n            ),\n            \",\"\n        );\n\n        uint256 level = Level(levelContractAddress).getTokenLevel(tokenId);\n        uint256 xp = Level(levelContractAddress).getTokenXp(tokenId);\n\n        Attribute[] memory attributes = new Attribute[](2);\n        attributes[0] = Attribute(\"Level\", level);\n        attributes[1] = Attribute(\"Xp\", xp);\n\n        for (uint256 i = 0; i < attributes.length; i++) {\n            if (i == attributes.length - 1) {\n                attributesString = string.concat(\n                    attributesString,\n                    _addAttribute(\n                        attributes[i].name,\n                        Strings.toString(attributes[i].value)\n                    )\n                );\n            } else {\n                attributesString = string.concat(\n                    attributesString,\n                    _addAttribute(\n                        attributes[i].name,\n                        Strings.toString(attributes[i].value)\n                    ),\n                    \",\"\n                );\n            }\n        }\n\n        string memory propertiesJSON = string.concat(\n            '\"name\":\"',\n            CharacterNFT(characterNFT).tokenName(tokenId),\n            '\",',\n            '\"description\":\"',\n            CharacterNFT(characterNFT).getClassDescription(tokenId),\n            '\",',\n            '\"image\":\"',\n            CharacterNFT(characterNFT).getClassImage(tokenId),\n            '\",',\n            '\"external_url\":\"',\n            \"https://diablo.fandom.com/wiki/Diablo_II\",\n            '\"'\n        );\n        string memory fullOpenSeaMetadata = string.concat(\n            \"{\",\n            propertiesJSON,\n            \",\",\n            '\"attributes\":[',\n            attributesString,\n            \"]}\"\n        );\n        return\n            string.concat(\n                \"data:application/json;base64,\",\n                Base64.encode(bytes(fullOpenSeaMetadata))\n            );\n    }\n\n    function _addAttribute(\n        string memory key,\n        string memory value\n    ) internal pure returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    '{\"trait_type\": \"',\n                    key,\n                    '\", \"value\": \"',\n                    value,\n                    '\"}'\n                )\n            );\n    }\n}\n"},"contracts/leveling/Level.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"../BaseHelper.sol\";\n\ncontract Level is BaseHelper {\n    /** STRUCTS **/\n\n    // Packed struct\n    struct LevelData {\n        uint128 level;\n        uint128 xp;\n    }\n\n    /** VARIABLES **/\n\n    // Track the Level and Xp of each token ID\n    mapping(uint256 => LevelData) public tokenIdToLevelData;\n\n    // Each level has an xp requirement\n    uint256[] public xpPerLevel;\n\n    // CharacterNFT contract\n    address public characterNFT;\n\n    /** ERRORS **/\n\n    error MaxLevelReached();\n\n    /** MODIFIERS **/\n\n    /** EVENTS **/\n\n    /// @notice An event emitted when a character gets xp\n    event LevelUp(uint256 indexed tokenId, uint256 level, uint256 xp);\n\n    /** FUNCTIONS **/\n\n    function initialize(address initialOwner) public initializer {\n        _baseInitialize(initialOwner);\n        // Each level has an xp requirement, start with 10 levels, we can add more later\n        xpPerLevel.push(0); // Ignore the 0 index\n        xpPerLevel.push(0); // Everyone starts at level 1 with 0 xp so index 1 is 0\n        xpPerLevel.push(100); // Level 2 is 100 xp\n        xpPerLevel.push(200); // Level 3 is 200 xp\n        xpPerLevel.push(300); // Level 4 is 300 xp\n        xpPerLevel.push(400); // Level 5 is 400 xp\n        xpPerLevel.push(500); // Level 6 is 500 xp\n        xpPerLevel.push(600); // Level 7 is 600 xp\n        xpPerLevel.push(700); // Level 8 is 700 xp\n        xpPerLevel.push(800); // Level 9 is 800 xp\n        xpPerLevel.push(1000); // Level 10 is 1000 xp\n    }\n\n    /**\n     * @dev Update the XpPerLevel array if needed\n     */\n    function updateXpPerLevelArray(\n        uint256[] memory _xpPerLevel\n    ) external onlyRole(ADMIN_ROLE) {\n        xpPerLevel = _xpPerLevel;\n    }\n\n    /**\n     * @dev Set the address of the CharacterNFT contract\n     */\n    function setCharacterNFT(\n        address _characterNFT\n    ) public onlyRole(OWNER_ROLE) {\n        characterNFT = _characterNFT;\n    }\n\n    /**\n     * @dev Utility-contract only. Grant the user experience and increase their level if valid\n     */\n    function gainExperience(\n        uint256 tokenId,\n        uint256 xp\n    ) public onlyRole(UTILITY_ROLE) {\n        // Make sure the token ID is valid\n        require(\n            IERC721(characterNFT).ownerOf(tokenId) != address(0),\n            \"Invalid token ID\"\n        );\n        LevelData storage levelData = tokenIdToLevelData[tokenId];\n        // Update the users xp\n        levelData.xp += uint128(xp);\n        // Make sure user cannot go past max level\n        if (levelData.level >= xpPerLevel.length - 1) {\n            revert MaxLevelReached();\n        }\n        // User xp cannot surpass level 10\n        if (levelData.xp > xpPerLevel[xpPerLevel.length - 1]) {\n            revert MaxLevelReached();\n        }\n        uint256 currentLevel = levelData.level;\n        // Update the level if the new xp falls with the range\n        for (uint256 i = currentLevel + 1; i < xpPerLevel.length; i++) {\n            if (levelData.xp >= xpPerLevel[i]) {\n                levelData.level = uint128(i);\n                emit LevelUp(tokenId, i, levelData.xp);\n            }\n        }\n    }\n\n    /**\n     * @dev Helper view function returns just the level\n     */\n    function getTokenLevel(uint256 tokenId) public view returns (uint256) {\n        if (tokenIdToLevelData[tokenId].level == 0) {\n            return 1;\n        } else {\n            return tokenIdToLevelData[tokenId].level;\n        }\n    }\n\n    /**\n     * @dev Helper view function returns just the xp\n     */\n    function getTokenXp(uint256 tokenId) public view returns (uint256) {\n        return tokenIdToLevelData[tokenId].xp;\n    }\n}\n"},"contracts/skills/SkillTree.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"../BaseHelper.sol\";\nimport {CharacterNFTManager} from \"../erc721/CharacterNFTManager.sol\";\nimport {Level} from \"../leveling/Level.sol\";\n\ncontract SkillTree is BaseHelper {\n    /** STRUCTS **/\n\n    /** VARIABLES **/\n\n    // Character class to skill tree mapping\n    mapping(uint256 => uint256[]) public charClassToSkills;\n\n    // Level contract\n    address public levelContractAddress;\n    // C\n    address public characterNFTManager;\n\n    /** ERRORS **/\n\n    error SkillNotAllowed();\n\n    /** MODIFIERS **/\n\n    /** EVENTS **/\n\n    /** FUNCTIONS **/\n\n    function initialize(address initialOwner) public initializer {\n        _baseInitialize(initialOwner);\n        // Each character type has an array of skills that match to level\n        charClassToSkills[1] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // Barbarian\n        charClassToSkills[2] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // Necromancer\n        charClassToSkills[3] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // Paladin\n        charClassToSkills[4] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // Sorceress\n        charClassToSkills[5] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // Amazon\n        charClassToSkills[6] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // Assassin\n        charClassToSkills[7] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // Druid\n    }\n\n    /**\n     * @dev Set the address of the CharacterNFTManager contract\n     */\n    function setCharacterNFTManager(\n        address _characterNFTManager\n    ) public onlyRole(OWNER_ROLE) {\n        characterNFTManager = _characterNFTManager;\n    }\n\n    /**\n     * @dev Set the address of the Level contract\n     */\n    function setLevelContract(\n        address _levelContract\n    ) public onlyRole(OWNER_ROLE) {\n        levelContractAddress = _levelContract;\n    }\n\n    /**\n     * @dev Check that the character class and skill chosen are valid\n     */\n    function canUseSkill(uint256 tokenId, uint256 skillChosen) public view {\n        // Get the character class of the token ID\n        CharacterNFTManager characterNFTManagerContract = CharacterNFTManager(\n            characterNFTManager\n        );\n        CharacterNFTManager.CharacterClass classEnumValue = characterNFTManagerContract\n                .tokenIdToCharacterClass(tokenId);\n        // Get the level of the token ID\n        Level levelContract = Level(levelContractAddress);\n        uint256 tokenIdLevel = levelContract.getTokenLevel(tokenId);\n        // Get the skills of the character class\n        uint256[] memory skills = charClassToSkills[uint256(classEnumValue)];\n        if (skillChosen > skills[tokenIdLevel]) {\n            revert SkillNotAllowed();\n        }\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","exportedSymbols":{"AccessControlUpgradeable":[362],"ContextUpgradeable":[662],"ERC165Upgradeable":[1007],"IAccessControl":[1386],"Initializable":[616]},"id":363,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:0"},{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","file":"@openzeppelin/contracts/access/IAccessControl.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":363,"sourceUnit":1387,"src":"134:81:0","symbolAliases":[{"foreign":{"id":2,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"142:14:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":363,"sourceUnit":663,"src":"216:67:0","symbolAliases":[{"foreign":{"id":4,"name":"ContextUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":662,"src":"224:18:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","file":"../utils/introspection/ERC165Upgradeable.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":363,"sourceUnit":1008,"src":"284:79:0","symbolAliases":[{"foreign":{"id":6,"name":"ERC165Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"292:17:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":9,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":363,"sourceUnit":617,"src":"364:63:0","symbolAliases":[{"foreign":{"id":8,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"372:13:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":11,"name":"Initializable","nameLocations":["2136:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":616,"src":"2136:13:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"2136:13:0"},{"baseName":{"id":13,"name":"ContextUpgradeable","nameLocations":["2151:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":662,"src":"2151:18:0"},"id":14,"nodeType":"InheritanceSpecifier","src":"2151:18:0"},{"baseName":{"id":15,"name":"IAccessControl","nameLocations":["2171:14:0"],"nodeType":"IdentifierPath","referencedDeclaration":1386,"src":"2171:14:0"},"id":16,"nodeType":"InheritanceSpecifier","src":"2171:14:0"},{"baseName":{"id":17,"name":"ERC165Upgradeable","nameLocations":["2187:17:0"],"nodeType":"IdentifierPath","referencedDeclaration":1007,"src":"2187:17:0"},"id":18,"nodeType":"InheritanceSpecifier","src":"2187:17:0"}],"canonicalName":"AccessControlUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":10,"nodeType":"StructuredDocumentation","src":"429:1660:0","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```solidity\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```solidity\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n to enforce additional security measures for this role."},"fullyImplemented":true,"id":362,"linearizedBaseContracts":[362,1007,3063,1386,662,616],"name":"AccessControlUpgradeable","nameLocation":"2108:24:0","nodeType":"ContractDefinition","nodes":[{"canonicalName":"AccessControlUpgradeable.RoleData","id":25,"members":[{"constant":false,"id":22,"mutability":"mutable","name":"hasRole","nameLocation":"2270:7:0","nodeType":"VariableDeclaration","scope":25,"src":"2237:40:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":21,"keyName":"account","keyNameLocation":"2253:7:0","keyType":{"id":19,"name":"address","nodeType":"ElementaryTypeName","src":"2245:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2237:32:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":20,"name":"bool","nodeType":"ElementaryTypeName","src":"2264:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":24,"mutability":"mutable","name":"adminRole","nameLocation":"2295:9:0","nodeType":"VariableDeclaration","scope":25,"src":"2287:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":23,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2287:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2218:8:0","nodeType":"StructDefinition","scope":362,"src":"2211:100:0","visibility":"public"},{"constant":true,"functionSelector":"a217fddf","id":28,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2341:18:0","nodeType":"VariableDeclaration","scope":362,"src":"2317:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":26,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2317:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":27,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2362:4:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"canonicalName":"AccessControlUpgradeable.AccessControlStorage","documentation":{"id":29,"nodeType":"StructuredDocumentation","src":"2374:71:0","text":"@custom:storage-location erc7201:openzeppelin.storage.AccessControl"},"id":35,"members":[{"constant":false,"id":34,"mutability":"mutable","name":"_roles","nameLocation":"2522:6:0","nodeType":"VariableDeclaration","scope":35,"src":"2488:40:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$25_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"typeName":{"id":33,"keyName":"role","keyNameLocation":"2504:4:0","keyType":{"id":30,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2496:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2488:33:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$25_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":32,"nodeType":"UserDefinedTypeName","pathNode":{"id":31,"name":"RoleData","nameLocations":["2512:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":25,"src":"2512:8:0"},"referencedDeclaration":25,"src":"2512:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$25_storage_ptr","typeString":"struct AccessControlUpgradeable.RoleData"}}},"visibility":"internal"}],"name":"AccessControlStorage","nameLocation":"2457:20:0","nodeType":"StructDefinition","scope":362,"src":"2450:85:0","visibility":"public"},{"constant":true,"id":38,"mutability":"constant","name":"AccessControlStorageLocation","nameLocation":"2683:28:0","nodeType":"VariableDeclaration","scope":362,"src":"2658:122:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":36,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2658:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307830326464376263376465633464636565646461373735653538646435343165303861313136633663353338313563306264303238313932663762363236383030","id":37,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2714:66:0","typeDescriptions":{"typeIdentifier":"t_rational_1295953201772911215391058989745868821651057887752387839782086074958115661824_by_1","typeString":"int_const 1295...(68 digits omitted)...1824"},"value":"0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800"},"visibility":"private"},{"body":{"id":45,"nodeType":"Block","src":"2877:87:0","statements":[{"AST":{"nodeType":"YulBlock","src":"2896:62:0","statements":[{"nodeType":"YulAssignment","src":"2910:38:0","value":{"name":"AccessControlStorageLocation","nodeType":"YulIdentifier","src":"2920:28:0"},"variableNames":[{"name":"$.slot","nodeType":"YulIdentifier","src":"2910:6:0"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":42,"isOffset":false,"isSlot":true,"src":"2910:6:0","suffix":"slot","valueSize":1},{"declaration":38,"isOffset":false,"isSlot":false,"src":"2920:28:0","valueSize":1}],"id":44,"nodeType":"InlineAssembly","src":"2887:71:0"}]},"id":46,"implemented":true,"kind":"function","modifiers":[],"name":"_getAccessControlStorage","nameLocation":"2796:24:0","nodeType":"FunctionDefinition","parameters":{"id":39,"nodeType":"ParameterList","parameters":[],"src":"2820:2:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42,"mutability":"mutable","name":"$","nameLocation":"2874:1:0","nodeType":"VariableDeclaration","scope":46,"src":"2845:30:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$35_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"},"typeName":{"id":41,"nodeType":"UserDefinedTypeName","pathNode":{"id":40,"name":"AccessControlStorage","nameLocations":["2845:20:0"],"nodeType":"IdentifierPath","referencedDeclaration":35,"src":"2845:20:0"},"referencedDeclaration":35,"src":"2845:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$35_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"}},"visibility":"internal"}],"src":"2844:32:0"},"scope":362,"src":"2787:177:0","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":56,"nodeType":"Block","src":"3181:44:0","statements":[{"expression":{"arguments":[{"id":52,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49,"src":"3202:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":51,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[129,150],"referencedDeclaration":129,"src":"3191:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":53,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3191:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":54,"nodeType":"ExpressionStatement","src":"3191:16:0"},{"id":55,"nodeType":"PlaceholderStatement","src":"3217:1:0"}]},"documentation":{"id":47,"nodeType":"StructuredDocumentation","src":"2970:174:0","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with an {AccessControlUnauthorizedAccount} error including the required role."},"id":57,"name":"onlyRole","nameLocation":"3158:8:0","nodeType":"ModifierDefinition","parameters":{"id":50,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49,"mutability":"mutable","name":"role","nameLocation":"3175:4:0","nodeType":"VariableDeclaration","scope":57,"src":"3167:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":48,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3167:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3166:14:0"},"src":"3149:76:0","virtual":false,"visibility":"internal"},{"body":{"id":62,"nodeType":"Block","src":"3289:7:0","statements":[]},"id":63,"implemented":true,"kind":"function","modifiers":[{"id":60,"kind":"modifierInvocation","modifierName":{"id":59,"name":"onlyInitializing","nameLocations":["3272:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"3272:16:0"},"nodeType":"ModifierInvocation","src":"3272:16:0"}],"name":"__AccessControl_init","nameLocation":"3240:20:0","nodeType":"FunctionDefinition","parameters":{"id":58,"nodeType":"ParameterList","parameters":[],"src":"3260:2:0"},"returnParameters":{"id":61,"nodeType":"ParameterList","parameters":[],"src":"3289:0:0"},"scope":362,"src":"3231:65:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":68,"nodeType":"Block","src":"3370:7:0","statements":[]},"id":69,"implemented":true,"kind":"function","modifiers":[{"id":66,"kind":"modifierInvocation","modifierName":{"id":65,"name":"onlyInitializing","nameLocations":["3353:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"3353:16:0"},"nodeType":"ModifierInvocation","src":"3353:16:0"}],"name":"__AccessControl_init_unchained","nameLocation":"3311:30:0","nodeType":"FunctionDefinition","parameters":{"id":64,"nodeType":"ParameterList","parameters":[],"src":"3341:2:0"},"returnParameters":{"id":67,"nodeType":"ParameterList","parameters":[],"src":"3370:0:0"},"scope":362,"src":"3302:75:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1006],"body":{"id":90,"nodeType":"Block","src":"3534:111:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":83,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":78,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":72,"src":"3551:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":80,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"3571:14:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$1386_$","typeString":"type(contract IAccessControl)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$1386_$","typeString":"type(contract IAccessControl)"}],"id":79,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"3566:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":81,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3566:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControl_$1386","typeString":"type(contract IAccessControl)"}},"id":82,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3587:11:0","memberName":"interfaceId","nodeType":"MemberAccess","src":"3566:32:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"3551:47:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":86,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":72,"src":"3626:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":84,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967271,"src":"3602:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControlUpgradeable_$362_$","typeString":"type(contract super AccessControlUpgradeable)"}},"id":85,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3608:17:0","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1006,"src":"3602:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":87,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3602:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3551:87:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":77,"id":89,"nodeType":"Return","src":"3544:94:0"}]},"documentation":{"id":70,"nodeType":"StructuredDocumentation","src":"3382:56:0","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":91,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"3452:17:0","nodeType":"FunctionDefinition","overrides":{"id":74,"nodeType":"OverrideSpecifier","overrides":[],"src":"3510:8:0"},"parameters":{"id":73,"nodeType":"ParameterList","parameters":[{"constant":false,"id":72,"mutability":"mutable","name":"interfaceId","nameLocation":"3477:11:0","nodeType":"VariableDeclaration","scope":91,"src":"3470:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":71,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3470:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"3469:20:0"},"returnParameters":{"id":77,"nodeType":"ParameterList","parameters":[{"constant":false,"id":76,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":91,"src":"3528:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":75,"name":"bool","nodeType":"ElementaryTypeName","src":"3528:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3527:6:0"},"scope":362,"src":"3443:202:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1353],"body":{"id":115,"nodeType":"Block","src":"3815:124:0","statements":[{"assignments":[103],"declarations":[{"constant":false,"id":103,"mutability":"mutable","name":"$","nameLocation":"3854:1:0","nodeType":"VariableDeclaration","scope":115,"src":"3825:30:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$35_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"},"typeName":{"id":102,"nodeType":"UserDefinedTypeName","pathNode":{"id":101,"name":"AccessControlStorage","nameLocations":["3825:20:0"],"nodeType":"IdentifierPath","referencedDeclaration":35,"src":"3825:20:0"},"referencedDeclaration":35,"src":"3825:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$35_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"}},"visibility":"internal"}],"id":106,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":104,"name":"_getAccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"3858:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_AccessControlStorage_$35_storage_ptr_$","typeString":"function () pure returns (struct AccessControlUpgradeable.AccessControlStorage storage pointer)"}},"id":105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3858:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$35_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"3825:59:0"},{"expression":{"baseExpression":{"expression":{"baseExpression":{"expression":{"id":107,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":103,"src":"3901:1:0","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$35_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage storage pointer"}},"id":108,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3903:6:0","memberName":"_roles","nodeType":"MemberAccess","referencedDeclaration":34,"src":"3901:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$25_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":110,"indexExpression":{"id":109,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"3910:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3901:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$25_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":111,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3916:7:0","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":22,"src":"3901:22:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":113,"indexExpression":{"id":112,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":96,"src":"3924:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3901:31:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":100,"id":114,"nodeType":"Return","src":"3894:38:0"}]},"documentation":{"id":92,"nodeType":"StructuredDocumentation","src":"3651:76:0","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":116,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"3741:7:0","nodeType":"FunctionDefinition","parameters":{"id":97,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"role","nameLocation":"3757:4:0","nodeType":"VariableDeclaration","scope":116,"src":"3749:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":93,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3749:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":96,"mutability":"mutable","name":"account","nameLocation":"3771:7:0","nodeType":"VariableDeclaration","scope":116,"src":"3763:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":95,"name":"address","nodeType":"ElementaryTypeName","src":"3763:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3748:31:0"},"returnParameters":{"id":100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":99,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":116,"src":"3809:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":98,"name":"bool","nodeType":"ElementaryTypeName","src":"3809:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3808:6:0"},"scope":362,"src":"3732:207:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":128,"nodeType":"Block","src":"4204:47:0","statements":[{"expression":{"arguments":[{"id":123,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"4225:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":124,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"4231:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4231:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":122,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[129,150],"referencedDeclaration":150,"src":"4214:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4214:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":127,"nodeType":"ExpressionStatement","src":"4214:30:0"}]},"documentation":{"id":117,"nodeType":"StructuredDocumentation","src":"3945:198:0","text":" @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier."},"id":129,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"4157:10:0","nodeType":"FunctionDefinition","parameters":{"id":120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":119,"mutability":"mutable","name":"role","nameLocation":"4176:4:0","nodeType":"VariableDeclaration","scope":129,"src":"4168:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":118,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4168:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4167:14:0"},"returnParameters":{"id":121,"nodeType":"ParameterList","parameters":[],"src":"4204:0:0"},"scope":362,"src":"4148:103:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":149,"nodeType":"Block","src":"4454:124:0","statements":[{"condition":{"id":141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4468:23:0","subExpression":{"arguments":[{"id":138,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":132,"src":"4477:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":139,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"4483:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":137,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"4469:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4469:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":148,"nodeType":"IfStatement","src":"4464:108:0","trueBody":{"id":147,"nodeType":"Block","src":"4493:79:0","statements":[{"errorCall":{"arguments":[{"id":143,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"4547:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":144,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":132,"src":"4556:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":142,"name":"AccessControlUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"4514:32:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_bytes32_$returns$__$","typeString":"function (address,bytes32) pure"}},"id":145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4514:47:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":146,"nodeType":"RevertStatement","src":"4507:54:0"}]}}]},"documentation":{"id":130,"nodeType":"StructuredDocumentation","src":"4257:119:0","text":" @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n is missing `role`."},"id":150,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"4390:10:0","nodeType":"FunctionDefinition","parameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":132,"mutability":"mutable","name":"role","nameLocation":"4409:4:0","nodeType":"VariableDeclaration","scope":150,"src":"4401:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":131,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4401:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":134,"mutability":"mutable","name":"account","nameLocation":"4423:7:0","nodeType":"VariableDeclaration","scope":150,"src":"4415:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":133,"name":"address","nodeType":"ElementaryTypeName","src":"4415:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4400:31:0"},"returnParameters":{"id":136,"nodeType":"ParameterList","parameters":[],"src":"4454:0:0"},"scope":362,"src":"4381:197:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1361],"body":{"id":170,"nodeType":"Block","src":"4833:117:0","statements":[{"assignments":[160],"declarations":[{"constant":false,"id":160,"mutability":"mutable","name":"$","nameLocation":"4872:1:0","nodeType":"VariableDeclaration","scope":170,"src":"4843:30:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$35_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"},"typeName":{"id":159,"nodeType":"UserDefinedTypeName","pathNode":{"id":158,"name":"AccessControlStorage","nameLocations":["4843:20:0"],"nodeType":"IdentifierPath","referencedDeclaration":35,"src":"4843:20:0"},"referencedDeclaration":35,"src":"4843:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$35_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"}},"visibility":"internal"}],"id":163,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":161,"name":"_getAccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"4876:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_AccessControlStorage_$35_storage_ptr_$","typeString":"function () pure returns (struct AccessControlUpgradeable.AccessControlStorage storage pointer)"}},"id":162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4876:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$35_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"4843:59:0"},{"expression":{"expression":{"baseExpression":{"expression":{"id":164,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":160,"src":"4919:1:0","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$35_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage storage pointer"}},"id":165,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4921:6:0","memberName":"_roles","nodeType":"MemberAccess","referencedDeclaration":34,"src":"4919:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$25_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":167,"indexExpression":{"id":166,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":153,"src":"4928:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4919:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$25_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":168,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4934:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":24,"src":"4919:24:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":157,"id":169,"nodeType":"Return","src":"4912:31:0"}]},"documentation":{"id":151,"nodeType":"StructuredDocumentation","src":"4584:170:0","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":171,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"4768:12:0","nodeType":"FunctionDefinition","parameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"role","nameLocation":"4789:4:0","nodeType":"VariableDeclaration","scope":171,"src":"4781:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":152,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4781:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4780:14:0"},"returnParameters":{"id":157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":156,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":171,"src":"4824:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":155,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4824:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4823:9:0"},"scope":362,"src":"4759:191:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1369],"body":{"id":189,"nodeType":"Block","src":"5340:42:0","statements":[{"expression":{"arguments":[{"id":185,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":174,"src":"5361:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":186,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"5367:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":184,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"5350:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5350:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":188,"nodeType":"ExpressionStatement","src":"5350:25:0"}]},"documentation":{"id":172,"nodeType":"StructuredDocumentation","src":"4956:285:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":190,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":180,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":174,"src":"5333:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":179,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"5320:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5320:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":182,"kind":"modifierInvocation","modifierName":{"id":178,"name":"onlyRole","nameLocations":["5311:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"5311:8:0"},"nodeType":"ModifierInvocation","src":"5311:28:0"}],"name":"grantRole","nameLocation":"5255:9:0","nodeType":"FunctionDefinition","parameters":{"id":177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":174,"mutability":"mutable","name":"role","nameLocation":"5273:4:0","nodeType":"VariableDeclaration","scope":190,"src":"5265:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":173,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5265:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":176,"mutability":"mutable","name":"account","nameLocation":"5287:7:0","nodeType":"VariableDeclaration","scope":190,"src":"5279:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":175,"name":"address","nodeType":"ElementaryTypeName","src":"5279:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5264:31:0"},"returnParameters":{"id":183,"nodeType":"ParameterList","parameters":[],"src":"5340:0:0"},"scope":362,"src":"5246:136:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1377],"body":{"id":208,"nodeType":"Block","src":"5757:43:0","statements":[{"expression":{"arguments":[{"id":204,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"5779:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":205,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"5785:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":203,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"5767:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5767:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":207,"nodeType":"ExpressionStatement","src":"5767:26:0"}]},"documentation":{"id":191,"nodeType":"StructuredDocumentation","src":"5388:269:0","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":209,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":199,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"5750:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":198,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"5737:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5737:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":201,"kind":"modifierInvocation","modifierName":{"id":197,"name":"onlyRole","nameLocations":["5728:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"5728:8:0"},"nodeType":"ModifierInvocation","src":"5728:28:0"}],"name":"revokeRole","nameLocation":"5671:10:0","nodeType":"FunctionDefinition","parameters":{"id":196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":193,"mutability":"mutable","name":"role","nameLocation":"5690:4:0","nodeType":"VariableDeclaration","scope":209,"src":"5682:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":192,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5682:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":195,"mutability":"mutable","name":"account","nameLocation":"5704:7:0","nodeType":"VariableDeclaration","scope":209,"src":"5696:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":194,"name":"address","nodeType":"ElementaryTypeName","src":"5696:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5681:31:0"},"returnParameters":{"id":202,"nodeType":"ParameterList","parameters":[],"src":"5757:0:0"},"scope":362,"src":"5662:138:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1385],"body":{"id":231,"nodeType":"Block","src":"6427:166:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":217,"name":"callerConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"6441:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":218,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"6463:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6463:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6441:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":225,"nodeType":"IfStatement","src":"6437:102:0","trueBody":{"id":224,"nodeType":"Block","src":"6477:62:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":221,"name":"AccessControlBadConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1316,"src":"6498:28:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6498:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":223,"nodeType":"RevertStatement","src":"6491:37:0"}]}},{"expression":{"arguments":[{"id":227,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"6561:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":228,"name":"callerConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"6567:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":226,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"6549:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6549:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":230,"nodeType":"ExpressionStatement","src":"6549:37:0"}]},"documentation":{"id":210,"nodeType":"StructuredDocumentation","src":"5806:537:0","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `callerConfirmation`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":232,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"6357:12:0","nodeType":"FunctionDefinition","parameters":{"id":215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":212,"mutability":"mutable","name":"role","nameLocation":"6378:4:0","nodeType":"VariableDeclaration","scope":232,"src":"6370:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":211,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6370:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":214,"mutability":"mutable","name":"callerConfirmation","nameLocation":"6392:18:0","nodeType":"VariableDeclaration","scope":232,"src":"6384:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":213,"name":"address","nodeType":"ElementaryTypeName","src":"6384:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6369:42:0"},"returnParameters":{"id":216,"nodeType":"ParameterList","parameters":[],"src":"6427:0:0"},"scope":362,"src":"6348:245:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":267,"nodeType":"Block","src":"6791:245:0","statements":[{"assignments":[242],"declarations":[{"constant":false,"id":242,"mutability":"mutable","name":"$","nameLocation":"6830:1:0","nodeType":"VariableDeclaration","scope":267,"src":"6801:30:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$35_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"},"typeName":{"id":241,"nodeType":"UserDefinedTypeName","pathNode":{"id":240,"name":"AccessControlStorage","nameLocations":["6801:20:0"],"nodeType":"IdentifierPath","referencedDeclaration":35,"src":"6801:20:0"},"referencedDeclaration":35,"src":"6801:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$35_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"}},"visibility":"internal"}],"id":245,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":243,"name":"_getAccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"6834:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_AccessControlStorage_$35_storage_ptr_$","typeString":"function () pure returns (struct AccessControlUpgradeable.AccessControlStorage storage pointer)"}},"id":244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6834:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$35_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"6801:59:0"},{"assignments":[247],"declarations":[{"constant":false,"id":247,"mutability":"mutable","name":"previousAdminRole","nameLocation":"6878:17:0","nodeType":"VariableDeclaration","scope":267,"src":"6870:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":246,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6870:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":251,"initialValue":{"arguments":[{"id":249,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"6911:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":248,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"6898:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6898:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6870:46:0"},{"expression":{"id":259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"expression":{"id":252,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"6926:1:0","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$35_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage storage pointer"}},"id":255,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6928:6:0","memberName":"_roles","nodeType":"MemberAccess","referencedDeclaration":34,"src":"6926:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$25_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":256,"indexExpression":{"id":254,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"6935:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6926:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$25_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":257,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6941:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":24,"src":"6926:24:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":258,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"6953:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6926:36:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":260,"nodeType":"ExpressionStatement","src":"6926:36:0"},{"eventCall":{"arguments":[{"id":262,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"6994:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":263,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"7000:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":264,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"7019:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":261,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"6977:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6977:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":266,"nodeType":"EmitStatement","src":"6972:57:0"}]},"documentation":{"id":233,"nodeType":"StructuredDocumentation","src":"6599:114:0","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":268,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"6727:13:0","nodeType":"FunctionDefinition","parameters":{"id":238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":235,"mutability":"mutable","name":"role","nameLocation":"6749:4:0","nodeType":"VariableDeclaration","scope":268,"src":"6741:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":234,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6741:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":237,"mutability":"mutable","name":"adminRole","nameLocation":"6763:9:0","nodeType":"VariableDeclaration","scope":268,"src":"6755:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":236,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6755:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6740:33:0"},"returnParameters":{"id":239,"nodeType":"ParameterList","parameters":[],"src":"6791:0:0"},"scope":362,"src":"6718:318:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":314,"nodeType":"Block","src":"7353:304:0","statements":[{"assignments":[280],"declarations":[{"constant":false,"id":280,"mutability":"mutable","name":"$","nameLocation":"7392:1:0","nodeType":"VariableDeclaration","scope":314,"src":"7363:30:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$35_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"},"typeName":{"id":279,"nodeType":"UserDefinedTypeName","pathNode":{"id":278,"name":"AccessControlStorage","nameLocations":["7363:20:0"],"nodeType":"IdentifierPath","referencedDeclaration":35,"src":"7363:20:0"},"referencedDeclaration":35,"src":"7363:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$35_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"}},"visibility":"internal"}],"id":283,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":281,"name":"_getAccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"7396:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_AccessControlStorage_$35_storage_ptr_$","typeString":"function () pure returns (struct AccessControlUpgradeable.AccessControlStorage storage pointer)"}},"id":282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7396:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$35_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"7363:59:0"},{"condition":{"id":288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7436:23:0","subExpression":{"arguments":[{"id":285,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"7445:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":286,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"7451:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":284,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"7437:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7437:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":312,"nodeType":"Block","src":"7614:37:0","statements":[{"expression":{"hexValue":"66616c7365","id":310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7635:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":277,"id":311,"nodeType":"Return","src":"7628:12:0"}]},"id":313,"nodeType":"IfStatement","src":"7432:219:0","trueBody":{"id":309,"nodeType":"Block","src":"7461:147:0","statements":[{"expression":{"id":298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"expression":{"id":289,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"7475:1:0","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$35_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage storage pointer"}},"id":292,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7477:6:0","memberName":"_roles","nodeType":"MemberAccess","referencedDeclaration":34,"src":"7475:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$25_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":293,"indexExpression":{"id":291,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"7484:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7475:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$25_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":294,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7490:7:0","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":22,"src":"7475:22:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":296,"indexExpression":{"id":295,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"7498:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7475:31:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7509:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7475:38:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":299,"nodeType":"ExpressionStatement","src":"7475:38:0"},{"eventCall":{"arguments":[{"id":301,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"7544:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":302,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":273,"src":"7550:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":303,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"7559:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7559:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":300,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1334,"src":"7532:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7532:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":306,"nodeType":"EmitStatement","src":"7527:45:0"},{"expression":{"hexValue":"74727565","id":307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7593:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":277,"id":308,"nodeType":"Return","src":"7586:11:0"}]}}]},"documentation":{"id":269,"nodeType":"StructuredDocumentation","src":"7042:223:0","text":" @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":315,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"7279:10:0","nodeType":"FunctionDefinition","parameters":{"id":274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":271,"mutability":"mutable","name":"role","nameLocation":"7298:4:0","nodeType":"VariableDeclaration","scope":315,"src":"7290:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":270,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7290:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":273,"mutability":"mutable","name":"account","nameLocation":"7312:7:0","nodeType":"VariableDeclaration","scope":315,"src":"7304:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":272,"name":"address","nodeType":"ElementaryTypeName","src":"7304:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7289:31:0"},"returnParameters":{"id":277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":276,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":315,"src":"7347:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":275,"name":"bool","nodeType":"ElementaryTypeName","src":"7347:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7346:6:0"},"scope":362,"src":"7270:387:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":360,"nodeType":"Block","src":"7976:304:0","statements":[{"assignments":[327],"declarations":[{"constant":false,"id":327,"mutability":"mutable","name":"$","nameLocation":"8015:1:0","nodeType":"VariableDeclaration","scope":360,"src":"7986:30:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$35_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"},"typeName":{"id":326,"nodeType":"UserDefinedTypeName","pathNode":{"id":325,"name":"AccessControlStorage","nameLocations":["7986:20:0"],"nodeType":"IdentifierPath","referencedDeclaration":35,"src":"7986:20:0"},"referencedDeclaration":35,"src":"7986:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$35_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage"}},"visibility":"internal"}],"id":330,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":328,"name":"_getAccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"8019:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_AccessControlStorage_$35_storage_ptr_$","typeString":"function () pure returns (struct AccessControlUpgradeable.AccessControlStorage storage pointer)"}},"id":329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8019:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$35_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"7986:59:0"},{"condition":{"arguments":[{"id":332,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"8067:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":333,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":320,"src":"8073:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":331,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"8059:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8059:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":358,"nodeType":"Block","src":"8237:37:0","statements":[{"expression":{"hexValue":"66616c7365","id":356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8258:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":324,"id":357,"nodeType":"Return","src":"8251:12:0"}]},"id":359,"nodeType":"IfStatement","src":"8055:219:0","trueBody":{"id":355,"nodeType":"Block","src":"8083:148:0","statements":[{"expression":{"id":344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"expression":{"id":335,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"8097:1:0","typeDescriptions":{"typeIdentifier":"t_struct$_AccessControlStorage_$35_storage_ptr","typeString":"struct AccessControlUpgradeable.AccessControlStorage storage pointer"}},"id":338,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8099:6:0","memberName":"_roles","nodeType":"MemberAccess","referencedDeclaration":34,"src":"8097:8:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$25_storage_$","typeString":"mapping(bytes32 => struct AccessControlUpgradeable.RoleData storage ref)"}},"id":339,"indexExpression":{"id":337,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"8106:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8097:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$25_storage","typeString":"struct AccessControlUpgradeable.RoleData storage ref"}},"id":340,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8112:7:0","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":22,"src":"8097:22:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":342,"indexExpression":{"id":341,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":320,"src":"8120:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8097:31:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8131:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"8097:39:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":345,"nodeType":"ExpressionStatement","src":"8097:39:0"},{"eventCall":{"arguments":[{"id":347,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"8167:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":348,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":320,"src":"8173:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":349,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"8182:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8182:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":346,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1343,"src":"8155:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8155:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":352,"nodeType":"EmitStatement","src":"8150:45:0"},{"expression":{"hexValue":"74727565","id":353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8216:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":324,"id":354,"nodeType":"Return","src":"8209:11:0"}]}}]},"documentation":{"id":316,"nodeType":"StructuredDocumentation","src":"7663:224:0","text":" @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":361,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"7901:11:0","nodeType":"FunctionDefinition","parameters":{"id":321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":318,"mutability":"mutable","name":"role","nameLocation":"7921:4:0","nodeType":"VariableDeclaration","scope":361,"src":"7913:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":317,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7913:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":320,"mutability":"mutable","name":"account","nameLocation":"7935:7:0","nodeType":"VariableDeclaration","scope":361,"src":"7927:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":319,"name":"address","nodeType":"ElementaryTypeName","src":"7927:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7912:31:0"},"returnParameters":{"id":324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":323,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":361,"src":"7970:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":322,"name":"bool","nodeType":"ElementaryTypeName","src":"7970:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7969:6:0"},"scope":362,"src":"7892:388:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":363,"src":"2090:6192:0","usedErrors":[379,382,1313,1316],"usedEvents":[387,1325,1334,1343]}],"src":"108:8175:0"},"id":0},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"Initializable":[616]},"id":617,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":364,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"113:24:1"},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":365,"nodeType":"StructuredDocumentation","src":"139:2209:1","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":616,"linearizedBaseContracts":[616],"name":"Initializable","nameLocation":"2367:13:1","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Initializable.InitializableStorage","documentation":{"id":366,"nodeType":"StructuredDocumentation","src":"2387:293:1","text":" @dev Storage of the initializable contract.\n It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n when using with upgradeable contracts.\n @custom:storage-location erc7201:openzeppelin.storage.Initializable"},"id":373,"members":[{"constant":false,"id":369,"mutability":"mutable","name":"_initialized","nameLocation":"2820:12:1","nodeType":"VariableDeclaration","scope":373,"src":"2813:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":368,"name":"uint64","nodeType":"ElementaryTypeName","src":"2813:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":372,"mutability":"mutable","name":"_initializing","nameLocation":"2955:13:1","nodeType":"VariableDeclaration","scope":373,"src":"2950:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":371,"name":"bool","nodeType":"ElementaryTypeName","src":"2950:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"InitializableStorage","nameLocation":"2692:20:1","nodeType":"StructDefinition","scope":616,"src":"2685:290:1","visibility":"public"},{"constant":true,"id":376,"mutability":"constant","name":"INITIALIZABLE_STORAGE","nameLocation":"3123:21:1","nodeType":"VariableDeclaration","scope":616,"src":"3098:115:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":374,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3098:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307866306335376531363834306466303430663135303838646332663831666533393163333932336265633733653233613936363265666339633232396336613030","id":375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3147:66:1","typeDescriptions":{"typeIdentifier":"t_rational_108904022758810753673719992590105913556127789646572562039383141376366747609600_by_1","typeString":"int_const 1089...(70 digits omitted)...9600"},"value":"0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00"},"visibility":"private"},{"documentation":{"id":377,"nodeType":"StructuredDocumentation","src":"3220:60:1","text":" @dev The contract is already initialized."},"errorSelector":"f92ee8a9","id":379,"name":"InvalidInitialization","nameLocation":"3291:21:1","nodeType":"ErrorDefinition","parameters":{"id":378,"nodeType":"ParameterList","parameters":[],"src":"3312:2:1"},"src":"3285:30:1"},{"documentation":{"id":380,"nodeType":"StructuredDocumentation","src":"3321:57:1","text":" @dev The contract is not initializing."},"errorSelector":"d7e6bcf8","id":382,"name":"NotInitializing","nameLocation":"3389:15:1","nodeType":"ErrorDefinition","parameters":{"id":381,"nodeType":"ParameterList","parameters":[],"src":"3404:2:1"},"src":"3383:24:1"},{"anonymous":false,"documentation":{"id":383,"nodeType":"StructuredDocumentation","src":"3413:90:1","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"c7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2","id":387,"name":"Initialized","nameLocation":"3514:11:1","nodeType":"EventDefinition","parameters":{"id":386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":385,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"3533:7:1","nodeType":"VariableDeclaration","scope":387,"src":"3526:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":384,"name":"uint64","nodeType":"ElementaryTypeName","src":"3526:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3525:16:1"},"src":"3508:34:1"},{"body":{"id":469,"nodeType":"Block","src":"4092:1081:1","statements":[{"assignments":[392],"declarations":[{"constant":false,"id":392,"mutability":"mutable","name":"$","nameLocation":"4187:1:1","nodeType":"VariableDeclaration","scope":469,"src":"4158:30:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage"},"typeName":{"id":391,"nodeType":"UserDefinedTypeName","pathNode":{"id":390,"name":"InitializableStorage","nameLocations":["4158:20:1"],"nodeType":"IdentifierPath","referencedDeclaration":373,"src":"4158:20:1"},"referencedDeclaration":373,"src":"4158:20:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage"}},"visibility":"internal"}],"id":395,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":393,"name":"_getInitializableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"4191:24:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$373_storage_ptr_$","typeString":"function () pure returns (struct Initializable.InitializableStorage storage pointer)"}},"id":394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4191:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"4158:59:1"},{"assignments":[397],"declarations":[{"constant":false,"id":397,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"4284:14:1","nodeType":"VariableDeclaration","scope":469,"src":"4279:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":396,"name":"bool","nodeType":"ElementaryTypeName","src":"4279:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":401,"initialValue":{"id":400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4301:16:1","subExpression":{"expression":{"id":398,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"4302:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":399,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4304:13:1","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":372,"src":"4302:15:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4279:38:1"},{"assignments":[403],"declarations":[{"constant":false,"id":403,"mutability":"mutable","name":"initialized","nameLocation":"4334:11:1","nodeType":"VariableDeclaration","scope":469,"src":"4327:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":402,"name":"uint64","nodeType":"ElementaryTypeName","src":"4327:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":406,"initialValue":{"expression":{"id":404,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"4348:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":405,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4350:12:1","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":369,"src":"4348:14:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"VariableDeclarationStatement","src":"4327:35:1"},{"assignments":[408],"declarations":[{"constant":false,"id":408,"mutability":"mutable","name":"initialSetup","nameLocation":"4711:12:1","nodeType":"VariableDeclaration","scope":469,"src":"4706:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":407,"name":"bool","nodeType":"ElementaryTypeName","src":"4706:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":414,"initialValue":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":409,"name":"initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"4726:11:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4741:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4726:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":412,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":397,"src":"4746:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4726:34:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4706:54:1"},{"assignments":[416],"declarations":[{"constant":false,"id":416,"mutability":"mutable","name":"construction","nameLocation":"4775:12:1","nodeType":"VariableDeclaration","scope":469,"src":"4770:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":415,"name":"bool","nodeType":"ElementaryTypeName","src":"4770:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":429,"initialValue":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":417,"name":"initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"4790:11:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4805:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4790:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"arguments":[{"id":422,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"4818:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$616","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$616","typeString":"contract Initializable"}],"id":421,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4810:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":420,"name":"address","nodeType":"ElementaryTypeName","src":"4810:7:1","typeDescriptions":{}}},"id":423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4810:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4824:4:1","memberName":"code","nodeType":"MemberAccess","src":"4810:18:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4829:6:1","memberName":"length","nodeType":"MemberAccess","src":"4810:25:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4839:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4810:30:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4790:50:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4770:70:1"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4855:13:1","subExpression":{"id":430,"name":"initialSetup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"4856:12:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4872:13:1","subExpression":{"id":432,"name":"construction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"4873:12:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4855:30:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":439,"nodeType":"IfStatement","src":"4851:91:1","trueBody":{"id":438,"nodeType":"Block","src":"4887:55:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":435,"name":"InvalidInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"4908:21:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4908:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":437,"nodeType":"RevertStatement","src":"4901:30:1"}]}},{"expression":{"id":444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":440,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"4951:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":442,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4953:12:1","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":369,"src":"4951:14:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4968:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4951:18:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":445,"nodeType":"ExpressionStatement","src":"4951:18:1"},{"condition":{"id":446,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":397,"src":"4983:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":454,"nodeType":"IfStatement","src":"4979:67:1","trueBody":{"id":453,"nodeType":"Block","src":"4999:47:1","statements":[{"expression":{"id":451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":447,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"5013:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":449,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5015:13:1","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":372,"src":"5013:15:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5031:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5013:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":452,"nodeType":"ExpressionStatement","src":"5013:22:1"}]}},{"id":455,"nodeType":"PlaceholderStatement","src":"5055:1:1"},{"condition":{"id":456,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":397,"src":"5070:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":468,"nodeType":"IfStatement","src":"5066:101:1","trueBody":{"id":467,"nodeType":"Block","src":"5086:81:1","statements":[{"expression":{"id":461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":457,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":392,"src":"5100:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":459,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5102:13:1","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":372,"src":"5100:15:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5118:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5100:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":462,"nodeType":"ExpressionStatement","src":"5100:23:1"},{"eventCall":{"arguments":[{"hexValue":"31","id":464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5154:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":463,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"5142:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$returns$__$","typeString":"function (uint64)"}},"id":465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5142:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":466,"nodeType":"EmitStatement","src":"5137:19:1"}]}}]},"documentation":{"id":388,"nodeType":"StructuredDocumentation","src":"3548:516:1","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n production.\n Emits an {Initialized} event."},"id":470,"name":"initializer","nameLocation":"4078:11:1","nodeType":"ModifierDefinition","parameters":{"id":389,"nodeType":"ParameterList","parameters":[],"src":"4089:2:1"},"src":"4069:1104:1","virtual":false,"visibility":"internal"},{"body":{"id":516,"nodeType":"Block","src":"6291:392:1","statements":[{"assignments":[477],"declarations":[{"constant":false,"id":477,"mutability":"mutable","name":"$","nameLocation":"6386:1:1","nodeType":"VariableDeclaration","scope":516,"src":"6357:30:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage"},"typeName":{"id":476,"nodeType":"UserDefinedTypeName","pathNode":{"id":475,"name":"InitializableStorage","nameLocations":["6357:20:1"],"nodeType":"IdentifierPath","referencedDeclaration":373,"src":"6357:20:1"},"referencedDeclaration":373,"src":"6357:20:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage"}},"visibility":"internal"}],"id":480,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":478,"name":"_getInitializableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"6390:24:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$373_storage_ptr_$","typeString":"function () pure returns (struct Initializable.InitializableStorage storage pointer)"}},"id":479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"6357:59:1"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":481,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"6431:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":482,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6433:13:1","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":372,"src":"6431:15:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":483,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"6450:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":484,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6452:12:1","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":369,"src":"6450:14:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":485,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":473,"src":"6468:7:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6450:25:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6431:44:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":492,"nodeType":"IfStatement","src":"6427:105:1","trueBody":{"id":491,"nodeType":"Block","src":"6477:55:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":488,"name":"InvalidInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"6498:21:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6498:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":490,"nodeType":"RevertStatement","src":"6491:30:1"}]}},{"expression":{"id":497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":493,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"6541:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":495,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6543:12:1","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":369,"src":"6541:14:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":496,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":473,"src":"6558:7:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6541:24:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":498,"nodeType":"ExpressionStatement","src":"6541:24:1"},{"expression":{"id":503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":499,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"6575:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":501,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6577:13:1","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":372,"src":"6575:15:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6593:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6575:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":504,"nodeType":"ExpressionStatement","src":"6575:22:1"},{"id":505,"nodeType":"PlaceholderStatement","src":"6607:1:1"},{"expression":{"id":510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":506,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"6618:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":508,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6620:13:1","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":372,"src":"6618:15:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6636:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"6618:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":511,"nodeType":"ExpressionStatement","src":"6618:23:1"},{"eventCall":{"arguments":[{"id":513,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":473,"src":"6668:7:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":512,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"6656:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$returns$__$","typeString":"function (uint64)"}},"id":514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6656:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":515,"nodeType":"EmitStatement","src":"6651:25:1"}]},"documentation":{"id":471,"nodeType":"StructuredDocumentation","src":"5179:1068:1","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":517,"name":"reinitializer","nameLocation":"6261:13:1","nodeType":"ModifierDefinition","parameters":{"id":474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":473,"mutability":"mutable","name":"version","nameLocation":"6282:7:1","nodeType":"VariableDeclaration","scope":517,"src":"6275:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":472,"name":"uint64","nodeType":"ElementaryTypeName","src":"6275:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"6274:16:1"},"src":"6252:431:1","virtual":false,"visibility":"internal"},{"body":{"id":524,"nodeType":"Block","src":"6921:48:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":520,"name":"_checkInitializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":538,"src":"6931:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6931:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":522,"nodeType":"ExpressionStatement","src":"6931:20:1"},{"id":523,"nodeType":"PlaceholderStatement","src":"6961:1:1"}]},"documentation":{"id":518,"nodeType":"StructuredDocumentation","src":"6689:199:1","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":525,"name":"onlyInitializing","nameLocation":"6902:16:1","nodeType":"ModifierDefinition","parameters":{"id":519,"nodeType":"ParameterList","parameters":[],"src":"6918:2:1"},"src":"6893:76:1","virtual":false,"visibility":"internal"},{"body":{"id":537,"nodeType":"Block","src":"7136:89:1","statements":[{"condition":{"id":531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7150:18:1","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":529,"name":"_isInitializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"7151:15:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7151:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":536,"nodeType":"IfStatement","src":"7146:73:1","trueBody":{"id":535,"nodeType":"Block","src":"7170:49:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":532,"name":"NotInitializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"7191:15:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7191:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":534,"nodeType":"RevertStatement","src":"7184:24:1"}]}}]},"documentation":{"id":526,"nodeType":"StructuredDocumentation","src":"6975:104:1","text":" @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}."},"id":538,"implemented":true,"kind":"function","modifiers":[],"name":"_checkInitializing","nameLocation":"7093:18:1","nodeType":"FunctionDefinition","parameters":{"id":527,"nodeType":"ParameterList","parameters":[],"src":"7111:2:1"},"returnParameters":{"id":528,"nodeType":"ParameterList","parameters":[],"src":"7136:0:1"},"scope":616,"src":"7084:141:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":583,"nodeType":"Block","src":"7760:373:1","statements":[{"assignments":[544],"declarations":[{"constant":false,"id":544,"mutability":"mutable","name":"$","nameLocation":"7855:1:1","nodeType":"VariableDeclaration","scope":583,"src":"7826:30:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage"},"typeName":{"id":543,"nodeType":"UserDefinedTypeName","pathNode":{"id":542,"name":"InitializableStorage","nameLocations":["7826:20:1"],"nodeType":"IdentifierPath","referencedDeclaration":373,"src":"7826:20:1"},"referencedDeclaration":373,"src":"7826:20:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage"}},"visibility":"internal"}],"id":547,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":545,"name":"_getInitializableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"7859:24:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$373_storage_ptr_$","typeString":"function () pure returns (struct Initializable.InitializableStorage storage pointer)"}},"id":546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7859:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"7826:59:1"},{"condition":{"expression":{"id":548,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"7900:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":549,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7902:13:1","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":372,"src":"7900:15:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":554,"nodeType":"IfStatement","src":"7896:76:1","trueBody":{"id":553,"nodeType":"Block","src":"7917:55:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":550,"name":"InvalidInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"7938:21:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7938:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":552,"nodeType":"RevertStatement","src":"7931:30:1"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":555,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"7985:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":556,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7987:12:1","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":369,"src":"7985:14:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":559,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8008:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":558,"name":"uint64","nodeType":"ElementaryTypeName","src":"8008:6:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":557,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"8003:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8003:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":561,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8016:3:1","memberName":"max","nodeType":"MemberAccess","src":"8003:16:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"7985:34:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":582,"nodeType":"IfStatement","src":"7981:146:1","trueBody":{"id":581,"nodeType":"Block","src":"8021:106:1","statements":[{"expression":{"id":571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":563,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"8035:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":565,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8037:12:1","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":369,"src":"8035:14:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":568,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8057:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":567,"name":"uint64","nodeType":"ElementaryTypeName","src":"8057:6:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":566,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"8052:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8052:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":570,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8065:3:1","memberName":"max","nodeType":"MemberAccess","src":"8052:16:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"8035:33:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":572,"nodeType":"ExpressionStatement","src":"8035:33:1"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":576,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8104:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":575,"name":"uint64","nodeType":"ElementaryTypeName","src":"8104:6:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":574,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"8099:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8099:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":578,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8112:3:1","memberName":"max","nodeType":"MemberAccess","src":"8099:16:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":573,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"8087:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$returns$__$","typeString":"function (uint64)"}},"id":579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8087:29:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":580,"nodeType":"EmitStatement","src":"8082:34:1"}]}}]},"documentation":{"id":539,"nodeType":"StructuredDocumentation","src":"7231:475:1","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":584,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"7720:20:1","nodeType":"FunctionDefinition","parameters":{"id":540,"nodeType":"ParameterList","parameters":[],"src":"7740:2:1"},"returnParameters":{"id":541,"nodeType":"ParameterList","parameters":[],"src":"7760:0:1"},"scope":616,"src":"7711:422:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":594,"nodeType":"Block","src":"8308:63:1","statements":[{"expression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":590,"name":"_getInitializableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"8325:24:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$373_storage_ptr_$","typeString":"function () pure returns (struct Initializable.InitializableStorage storage pointer)"}},"id":591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8325:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":592,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8352:12:1","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":369,"src":"8325:39:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":589,"id":593,"nodeType":"Return","src":"8318:46:1"}]},"documentation":{"id":585,"nodeType":"StructuredDocumentation","src":"8139:99:1","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":595,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"8252:22:1","nodeType":"FunctionDefinition","parameters":{"id":586,"nodeType":"ParameterList","parameters":[],"src":"8274:2:1"},"returnParameters":{"id":589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":588,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":595,"src":"8300:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":587,"name":"uint64","nodeType":"ElementaryTypeName","src":"8300:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"8299:8:1"},"scope":616,"src":"8243:128:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":605,"nodeType":"Block","src":"8543:64:1","statements":[{"expression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":601,"name":"_getInitializableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"8560:24:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$373_storage_ptr_$","typeString":"function () pure returns (struct Initializable.InitializableStorage storage pointer)"}},"id":602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8560:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":603,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8587:13:1","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":372,"src":"8560:40:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":600,"id":604,"nodeType":"Return","src":"8553:47:1"}]},"documentation":{"id":596,"nodeType":"StructuredDocumentation","src":"8377:105:1","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":606,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"8496:15:1","nodeType":"FunctionDefinition","parameters":{"id":597,"nodeType":"ParameterList","parameters":[],"src":"8511:2:1"},"returnParameters":{"id":600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":599,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":606,"src":"8537:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":598,"name":"bool","nodeType":"ElementaryTypeName","src":"8537:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8536:6:1"},"scope":616,"src":"8487:120:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":614,"nodeType":"Block","src":"8827:80:1","statements":[{"AST":{"nodeType":"YulBlock","src":"8846:55:1","statements":[{"nodeType":"YulAssignment","src":"8860:31:1","value":{"name":"INITIALIZABLE_STORAGE","nodeType":"YulIdentifier","src":"8870:21:1"},"variableNames":[{"name":"$.slot","nodeType":"YulIdentifier","src":"8860:6:1"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":611,"isOffset":false,"isSlot":true,"src":"8860:6:1","suffix":"slot","valueSize":1},{"declaration":376,"isOffset":false,"isSlot":false,"src":"8870:21:1","valueSize":1}],"id":613,"nodeType":"InlineAssembly","src":"8837:64:1"}]},"documentation":{"id":607,"nodeType":"StructuredDocumentation","src":"8613:67:1","text":" @dev Returns a pointer to the storage namespace."},"id":615,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializableStorage","nameLocation":"8746:24:1","nodeType":"FunctionDefinition","parameters":{"id":608,"nodeType":"ParameterList","parameters":[],"src":"8770:2:1"},"returnParameters":{"id":612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":611,"mutability":"mutable","name":"$","nameLocation":"8824:1:1","nodeType":"VariableDeclaration","scope":615,"src":"8795:30:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage"},"typeName":{"id":610,"nodeType":"UserDefinedTypeName","pathNode":{"id":609,"name":"InitializableStorage","nameLocations":["8795:20:1"],"nodeType":"IdentifierPath","referencedDeclaration":373,"src":"8795:20:1"},"referencedDeclaration":373,"src":"8795:20:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$373_storage_ptr","typeString":"struct Initializable.InitializableStorage"}},"visibility":"internal"}],"src":"8794:32:1"},"scope":616,"src":"8737:170:1","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":617,"src":"2349:6560:1","usedErrors":[379,382],"usedEvents":[387]}],"src":"113:8797:1"},"id":1},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[662],"Initializable":[616]},"id":663,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":618,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:2"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":620,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":663,"sourceUnit":617,"src":"126:63:2","symbolAliases":[{"foreign":{"id":619,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"134:13:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":622,"name":"Initializable","nameLocations":["728:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":616,"src":"728:13:2"},"id":623,"nodeType":"InheritanceSpecifier","src":"728:13:2"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":621,"nodeType":"StructuredDocumentation","src":"191:496:2","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":662,"linearizedBaseContracts":[662,616],"name":"ContextUpgradeable","nameLocation":"706:18:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":628,"nodeType":"Block","src":"800:7:2","statements":[]},"id":629,"implemented":true,"kind":"function","modifiers":[{"id":626,"kind":"modifierInvocation","modifierName":{"id":625,"name":"onlyInitializing","nameLocations":["783:16:2"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"783:16:2"},"nodeType":"ModifierInvocation","src":"783:16:2"}],"name":"__Context_init","nameLocation":"757:14:2","nodeType":"FunctionDefinition","parameters":{"id":624,"nodeType":"ParameterList","parameters":[],"src":"771:2:2"},"returnParameters":{"id":627,"nodeType":"ParameterList","parameters":[],"src":"800:0:2"},"scope":662,"src":"748:59:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":634,"nodeType":"Block","src":"875:7:2","statements":[]},"id":635,"implemented":true,"kind":"function","modifiers":[{"id":632,"kind":"modifierInvocation","modifierName":{"id":631,"name":"onlyInitializing","nameLocations":["858:16:2"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"858:16:2"},"nodeType":"ModifierInvocation","src":"858:16:2"}],"name":"__Context_init_unchained","nameLocation":"822:24:2","nodeType":"FunctionDefinition","parameters":{"id":630,"nodeType":"ParameterList","parameters":[],"src":"846:2:2"},"returnParameters":{"id":633,"nodeType":"ParameterList","parameters":[],"src":"875:0:2"},"scope":662,"src":"813:69:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":643,"nodeType":"Block","src":"949:34:2","statements":[{"expression":{"expression":{"id":640,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"966:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"970:6:2","memberName":"sender","nodeType":"MemberAccess","src":"966:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":639,"id":642,"nodeType":"Return","src":"959:17:2"}]},"id":644,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"896:10:2","nodeType":"FunctionDefinition","parameters":{"id":636,"nodeType":"ParameterList","parameters":[],"src":"906:2:2"},"returnParameters":{"id":639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":638,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":644,"src":"940:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":637,"name":"address","nodeType":"ElementaryTypeName","src":"940:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"939:9:2"},"scope":662,"src":"887:96:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":652,"nodeType":"Block","src":"1056:32:2","statements":[{"expression":{"expression":{"id":649,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1073:3:2","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1077:4:2","memberName":"data","nodeType":"MemberAccess","src":"1073:8:2","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":648,"id":651,"nodeType":"Return","src":"1066:15:2"}]},"id":653,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"998:8:2","nodeType":"FunctionDefinition","parameters":{"id":645,"nodeType":"ParameterList","parameters":[],"src":"1006:2:2"},"returnParameters":{"id":648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":647,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":653,"src":"1040:14:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":646,"name":"bytes","nodeType":"ElementaryTypeName","src":"1040:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1039:16:2"},"scope":662,"src":"989:99:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":660,"nodeType":"Block","src":"1166:25:2","statements":[{"expression":{"hexValue":"30","id":658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1183:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":657,"id":659,"nodeType":"Return","src":"1176:8:2"}]},"id":661,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"1103:20:2","nodeType":"FunctionDefinition","parameters":{"id":654,"nodeType":"ParameterList","parameters":[],"src":"1123:2:2"},"returnParameters":{"id":657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":656,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":661,"src":"1157:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":655,"name":"uint256","nodeType":"ElementaryTypeName","src":"1157:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1156:9:2"},"scope":662,"src":"1094:97:2","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":663,"src":"688:505:2","usedErrors":[379,382],"usedEvents":[387]}],"src":"101:1093:2"},"id":2},"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[662],"Initializable":[616],"PausableUpgradeable":[838]},"id":839,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":664,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:3"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":666,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":839,"sourceUnit":663,"src":"128:67:3","symbolAliases":[{"foreign":{"id":665,"name":"ContextUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":662,"src":"136:18:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":668,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":839,"sourceUnit":617,"src":"196:63:3","symbolAliases":[{"foreign":{"id":667,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"204:13:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":670,"name":"Initializable","nameLocations":["742:13:3"],"nodeType":"IdentifierPath","referencedDeclaration":616,"src":"742:13:3"},"id":671,"nodeType":"InheritanceSpecifier","src":"742:13:3"},{"baseName":{"id":672,"name":"ContextUpgradeable","nameLocations":["757:18:3"],"nodeType":"IdentifierPath","referencedDeclaration":662,"src":"757:18:3"},"id":673,"nodeType":"InheritanceSpecifier","src":"757:18:3"}],"canonicalName":"PausableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":669,"nodeType":"StructuredDocumentation","src":"261:439:3","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":838,"linearizedBaseContracts":[838,662,616],"name":"PausableUpgradeable","nameLocation":"719:19:3","nodeType":"ContractDefinition","nodes":[{"canonicalName":"PausableUpgradeable.PausableStorage","documentation":{"id":674,"nodeType":"StructuredDocumentation","src":"782:66:3","text":"@custom:storage-location erc7201:openzeppelin.storage.Pausable"},"id":677,"members":[{"constant":false,"id":676,"mutability":"mutable","name":"_paused","nameLocation":"891:7:3","nodeType":"VariableDeclaration","scope":677,"src":"886:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":675,"name":"bool","nodeType":"ElementaryTypeName","src":"886:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"PausableStorage","nameLocation":"860:15:3","nodeType":"StructDefinition","scope":838,"src":"853:52:3","visibility":"public"},{"constant":true,"id":680,"mutability":"constant","name":"PausableStorageLocation","nameLocation":"1048:23:3","nodeType":"VariableDeclaration","scope":838,"src":"1023:117:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":678,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1023:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307863643565643135633665313837653737653961656538383138346332316634663231383261623538323763623362376530376662656463643633663033333030","id":679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1074:66:3","typeDescriptions":{"typeIdentifier":"t_rational_92891662540554778686986514950364265630913525426840345632122912437671245656832_by_1","typeString":"int_const 9289...(69 digits omitted)...6832"},"value":"0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300"},"visibility":"private"},{"body":{"id":687,"nodeType":"Block","src":"1227:82:3","statements":[{"AST":{"nodeType":"YulBlock","src":"1246:57:3","statements":[{"nodeType":"YulAssignment","src":"1260:33:3","value":{"name":"PausableStorageLocation","nodeType":"YulIdentifier","src":"1270:23:3"},"variableNames":[{"name":"$.slot","nodeType":"YulIdentifier","src":"1260:6:3"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":684,"isOffset":false,"isSlot":true,"src":"1260:6:3","suffix":"slot","valueSize":1},{"declaration":680,"isOffset":false,"isSlot":false,"src":"1270:23:3","valueSize":1}],"id":686,"nodeType":"InlineAssembly","src":"1237:66:3"}]},"id":688,"implemented":true,"kind":"function","modifiers":[],"name":"_getPausableStorage","nameLocation":"1156:19:3","nodeType":"FunctionDefinition","parameters":{"id":681,"nodeType":"ParameterList","parameters":[],"src":"1175:2:3"},"returnParameters":{"id":685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":684,"mutability":"mutable","name":"$","nameLocation":"1224:1:3","nodeType":"VariableDeclaration","scope":688,"src":"1200:25:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_PausableStorage_$677_storage_ptr","typeString":"struct PausableUpgradeable.PausableStorage"},"typeName":{"id":683,"nodeType":"UserDefinedTypeName","pathNode":{"id":682,"name":"PausableStorage","nameLocations":["1200:15:3"],"nodeType":"IdentifierPath","referencedDeclaration":677,"src":"1200:15:3"},"referencedDeclaration":677,"src":"1200:15:3","typeDescriptions":{"typeIdentifier":"t_struct$_PausableStorage_$677_storage_ptr","typeString":"struct PausableUpgradeable.PausableStorage"}},"visibility":"internal"}],"src":"1199:27:3"},"scope":838,"src":"1147:162:3","stateMutability":"pure","virtual":false,"visibility":"private"},{"anonymous":false,"documentation":{"id":689,"nodeType":"StructuredDocumentation","src":"1315:73:3","text":" @dev Emitted when the pause is triggered by `account`."},"eventSelector":"62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258","id":693,"name":"Paused","nameLocation":"1399:6:3","nodeType":"EventDefinition","parameters":{"id":692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":691,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"1414:7:3","nodeType":"VariableDeclaration","scope":693,"src":"1406:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":690,"name":"address","nodeType":"ElementaryTypeName","src":"1406:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1405:17:3"},"src":"1393:30:3"},{"anonymous":false,"documentation":{"id":694,"nodeType":"StructuredDocumentation","src":"1429:70:3","text":" @dev Emitted when the pause is lifted by `account`."},"eventSelector":"5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa","id":698,"name":"Unpaused","nameLocation":"1510:8:3","nodeType":"EventDefinition","parameters":{"id":697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":696,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"1527:7:3","nodeType":"VariableDeclaration","scope":698,"src":"1519:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":695,"name":"address","nodeType":"ElementaryTypeName","src":"1519:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1518:17:3"},"src":"1504:32:3"},{"documentation":{"id":699,"nodeType":"StructuredDocumentation","src":"1542:76:3","text":" @dev The operation failed because the contract is paused."},"errorSelector":"d93c0665","id":701,"name":"EnforcedPause","nameLocation":"1629:13:3","nodeType":"ErrorDefinition","parameters":{"id":700,"nodeType":"ParameterList","parameters":[],"src":"1642:2:3"},"src":"1623:22:3"},{"documentation":{"id":702,"nodeType":"StructuredDocumentation","src":"1651:80:3","text":" @dev The operation failed because the contract is not paused."},"errorSelector":"8dfc202b","id":704,"name":"ExpectedPause","nameLocation":"1742:13:3","nodeType":"ErrorDefinition","parameters":{"id":703,"nodeType":"ParameterList","parameters":[],"src":"1755:2:3"},"src":"1736:22:3"},{"body":{"id":713,"nodeType":"Block","src":"1889:44:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":710,"name":"__Pausable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"1899:25:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1899:27:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":712,"nodeType":"ExpressionStatement","src":"1899:27:3"}]},"documentation":{"id":705,"nodeType":"StructuredDocumentation","src":"1764:67:3","text":" @dev Initializes the contract in unpaused state."},"id":714,"implemented":true,"kind":"function","modifiers":[{"id":708,"kind":"modifierInvocation","modifierName":{"id":707,"name":"onlyInitializing","nameLocations":["1872:16:3"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"1872:16:3"},"nodeType":"ModifierInvocation","src":"1872:16:3"}],"name":"__Pausable_init","nameLocation":"1845:15:3","nodeType":"FunctionDefinition","parameters":{"id":706,"nodeType":"ParameterList","parameters":[],"src":"1860:2:3"},"returnParameters":{"id":709,"nodeType":"ParameterList","parameters":[],"src":"1889:0:3"},"scope":838,"src":"1836:97:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":731,"nodeType":"Block","src":"2002:93:3","statements":[{"assignments":[721],"declarations":[{"constant":false,"id":721,"mutability":"mutable","name":"$","nameLocation":"2036:1:3","nodeType":"VariableDeclaration","scope":731,"src":"2012:25:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_PausableStorage_$677_storage_ptr","typeString":"struct PausableUpgradeable.PausableStorage"},"typeName":{"id":720,"nodeType":"UserDefinedTypeName","pathNode":{"id":719,"name":"PausableStorage","nameLocations":["2012:15:3"],"nodeType":"IdentifierPath","referencedDeclaration":677,"src":"2012:15:3"},"referencedDeclaration":677,"src":"2012:15:3","typeDescriptions":{"typeIdentifier":"t_struct$_PausableStorage_$677_storage_ptr","typeString":"struct PausableUpgradeable.PausableStorage"}},"visibility":"internal"}],"id":724,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":722,"name":"_getPausableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"2040:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_PausableStorage_$677_storage_ptr_$","typeString":"function () pure returns (struct PausableUpgradeable.PausableStorage storage pointer)"}},"id":723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2040:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PausableStorage_$677_storage_ptr","typeString":"struct PausableUpgradeable.PausableStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"2012:49:3"},{"expression":{"id":729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":725,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"2071:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_PausableStorage_$677_storage_ptr","typeString":"struct PausableUpgradeable.PausableStorage storage pointer"}},"id":727,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2073:7:3","memberName":"_paused","nodeType":"MemberAccess","referencedDeclaration":676,"src":"2071:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2083:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2071:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":730,"nodeType":"ExpressionStatement","src":"2071:17:3"}]},"id":732,"implemented":true,"kind":"function","modifiers":[{"id":717,"kind":"modifierInvocation","modifierName":{"id":716,"name":"onlyInitializing","nameLocations":["1985:16:3"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"1985:16:3"},"nodeType":"ModifierInvocation","src":"1985:16:3"}],"name":"__Pausable_init_unchained","nameLocation":"1948:25:3","nodeType":"FunctionDefinition","parameters":{"id":715,"nodeType":"ParameterList","parameters":[],"src":"1973:2:3"},"returnParameters":{"id":718,"nodeType":"ParameterList","parameters":[],"src":"2002:0:3"},"scope":838,"src":"1939:156:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":739,"nodeType":"Block","src":"2306:47:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":735,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":776,"src":"2316:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2316:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":737,"nodeType":"ExpressionStatement","src":"2316:19:3"},{"id":738,"nodeType":"PlaceholderStatement","src":"2345:1:3"}]},"documentation":{"id":733,"nodeType":"StructuredDocumentation","src":"2101:175:3","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":740,"name":"whenNotPaused","nameLocation":"2290:13:3","nodeType":"ModifierDefinition","parameters":{"id":734,"nodeType":"ParameterList","parameters":[],"src":"2303:2:3"},"src":"2281:72:3","virtual":false,"visibility":"internal"},{"body":{"id":747,"nodeType":"Block","src":"2553:44:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":743,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":789,"src":"2563:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2563:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":745,"nodeType":"ExpressionStatement","src":"2563:16:3"},{"id":746,"nodeType":"PlaceholderStatement","src":"2589:1:3"}]},"documentation":{"id":741,"nodeType":"StructuredDocumentation","src":"2359:167:3","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":748,"name":"whenPaused","nameLocation":"2540:10:3","nodeType":"ModifierDefinition","parameters":{"id":742,"nodeType":"ParameterList","parameters":[],"src":"2550:2:3"},"src":"2531:66:3","virtual":false,"visibility":"internal"},{"body":{"id":763,"nodeType":"Block","src":"2745:92:3","statements":[{"assignments":[756],"declarations":[{"constant":false,"id":756,"mutability":"mutable","name":"$","nameLocation":"2779:1:3","nodeType":"VariableDeclaration","scope":763,"src":"2755:25:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_PausableStorage_$677_storage_ptr","typeString":"struct PausableUpgradeable.PausableStorage"},"typeName":{"id":755,"nodeType":"UserDefinedTypeName","pathNode":{"id":754,"name":"PausableStorage","nameLocations":["2755:15:3"],"nodeType":"IdentifierPath","referencedDeclaration":677,"src":"2755:15:3"},"referencedDeclaration":677,"src":"2755:15:3","typeDescriptions":{"typeIdentifier":"t_struct$_PausableStorage_$677_storage_ptr","typeString":"struct PausableUpgradeable.PausableStorage"}},"visibility":"internal"}],"id":759,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":757,"name":"_getPausableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"2783:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_PausableStorage_$677_storage_ptr_$","typeString":"function () pure returns (struct PausableUpgradeable.PausableStorage storage pointer)"}},"id":758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2783:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PausableStorage_$677_storage_ptr","typeString":"struct PausableUpgradeable.PausableStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"2755:49:3"},{"expression":{"expression":{"id":760,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"2821:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_PausableStorage_$677_storage_ptr","typeString":"struct PausableUpgradeable.PausableStorage storage pointer"}},"id":761,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2823:7:3","memberName":"_paused","nodeType":"MemberAccess","referencedDeclaration":676,"src":"2821:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":753,"id":762,"nodeType":"Return","src":"2814:16:3"}]},"documentation":{"id":749,"nodeType":"StructuredDocumentation","src":"2603:84:3","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":764,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"2701:6:3","nodeType":"FunctionDefinition","parameters":{"id":750,"nodeType":"ParameterList","parameters":[],"src":"2707:2:3"},"returnParameters":{"id":753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":752,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":764,"src":"2739:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":751,"name":"bool","nodeType":"ElementaryTypeName","src":"2739:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2738:6:3"},"scope":838,"src":"2692:145:3","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":775,"nodeType":"Block","src":"2956:77:3","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"id":768,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"2970:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2970:8:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":774,"nodeType":"IfStatement","src":"2966:61:3","trueBody":{"id":773,"nodeType":"Block","src":"2980:47:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":770,"name":"EnforcedPause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"3001:13:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3001:15:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":772,"nodeType":"RevertStatement","src":"2994:22:3"}]}}]},"documentation":{"id":765,"nodeType":"StructuredDocumentation","src":"2843:57:3","text":" @dev Throws if the contract is paused."},"id":776,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"2914:17:3","nodeType":"FunctionDefinition","parameters":{"id":766,"nodeType":"ParameterList","parameters":[],"src":"2931:2:3"},"returnParameters":{"id":767,"nodeType":"ParameterList","parameters":[],"src":"2956:0:3"},"scope":838,"src":"2905:128:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":788,"nodeType":"Block","src":"3153:78:3","statements":[{"condition":{"id":782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3167:9:3","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":780,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"3168:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3168:8:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":787,"nodeType":"IfStatement","src":"3163:62:3","trueBody":{"id":786,"nodeType":"Block","src":"3178:47:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":783,"name":"ExpectedPause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":704,"src":"3199:13:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3199:15:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":785,"nodeType":"RevertStatement","src":"3192:22:3"}]}}]},"documentation":{"id":777,"nodeType":"StructuredDocumentation","src":"3039:61:3","text":" @dev Throws if the contract is not paused."},"id":789,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"3114:14:3","nodeType":"FunctionDefinition","parameters":{"id":778,"nodeType":"ParameterList","parameters":[],"src":"3128:2:3"},"returnParameters":{"id":779,"nodeType":"ParameterList","parameters":[],"src":"3153:0:3"},"scope":838,"src":"3105:126:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":812,"nodeType":"Block","src":"3415:127:3","statements":[{"assignments":[797],"declarations":[{"constant":false,"id":797,"mutability":"mutable","name":"$","nameLocation":"3449:1:3","nodeType":"VariableDeclaration","scope":812,"src":"3425:25:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_PausableStorage_$677_storage_ptr","typeString":"struct PausableUpgradeable.PausableStorage"},"typeName":{"id":796,"nodeType":"UserDefinedTypeName","pathNode":{"id":795,"name":"PausableStorage","nameLocations":["3425:15:3"],"nodeType":"IdentifierPath","referencedDeclaration":677,"src":"3425:15:3"},"referencedDeclaration":677,"src":"3425:15:3","typeDescriptions":{"typeIdentifier":"t_struct$_PausableStorage_$677_storage_ptr","typeString":"struct PausableUpgradeable.PausableStorage"}},"visibility":"internal"}],"id":800,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":798,"name":"_getPausableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"3453:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_PausableStorage_$677_storage_ptr_$","typeString":"function () pure returns (struct PausableUpgradeable.PausableStorage storage pointer)"}},"id":799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3453:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PausableStorage_$677_storage_ptr","typeString":"struct PausableUpgradeable.PausableStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"3425:49:3"},{"expression":{"id":805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":801,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":797,"src":"3484:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_PausableStorage_$677_storage_ptr","typeString":"struct PausableUpgradeable.PausableStorage storage pointer"}},"id":803,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3486:7:3","memberName":"_paused","nodeType":"MemberAccess","referencedDeclaration":676,"src":"3484:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3496:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3484:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":806,"nodeType":"ExpressionStatement","src":"3484:16:3"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":808,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"3522:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3522:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":807,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"3515:6:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3515:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":811,"nodeType":"EmitStatement","src":"3510:25:3"}]},"documentation":{"id":790,"nodeType":"StructuredDocumentation","src":"3237:124:3","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":813,"implemented":true,"kind":"function","modifiers":[{"id":793,"kind":"modifierInvocation","modifierName":{"id":792,"name":"whenNotPaused","nameLocations":["3401:13:3"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"3401:13:3"},"nodeType":"ModifierInvocation","src":"3401:13:3"}],"name":"_pause","nameLocation":"3375:6:3","nodeType":"FunctionDefinition","parameters":{"id":791,"nodeType":"ParameterList","parameters":[],"src":"3381:2:3"},"returnParameters":{"id":794,"nodeType":"ParameterList","parameters":[],"src":"3415:0:3"},"scope":838,"src":"3366:176:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":836,"nodeType":"Block","src":"3722:130:3","statements":[{"assignments":[821],"declarations":[{"constant":false,"id":821,"mutability":"mutable","name":"$","nameLocation":"3756:1:3","nodeType":"VariableDeclaration","scope":836,"src":"3732:25:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_PausableStorage_$677_storage_ptr","typeString":"struct PausableUpgradeable.PausableStorage"},"typeName":{"id":820,"nodeType":"UserDefinedTypeName","pathNode":{"id":819,"name":"PausableStorage","nameLocations":["3732:15:3"],"nodeType":"IdentifierPath","referencedDeclaration":677,"src":"3732:15:3"},"referencedDeclaration":677,"src":"3732:15:3","typeDescriptions":{"typeIdentifier":"t_struct$_PausableStorage_$677_storage_ptr","typeString":"struct PausableUpgradeable.PausableStorage"}},"visibility":"internal"}],"id":824,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":822,"name":"_getPausableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"3760:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_PausableStorage_$677_storage_ptr_$","typeString":"function () pure returns (struct PausableUpgradeable.PausableStorage storage pointer)"}},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3760:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PausableStorage_$677_storage_ptr","typeString":"struct PausableUpgradeable.PausableStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"3732:49:3"},{"expression":{"id":829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":825,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"3791:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_PausableStorage_$677_storage_ptr","typeString":"struct PausableUpgradeable.PausableStorage storage pointer"}},"id":827,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3793:7:3","memberName":"_paused","nodeType":"MemberAccess","referencedDeclaration":676,"src":"3791:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3803:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3791:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":830,"nodeType":"ExpressionStatement","src":"3791:17:3"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":832,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"3832:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3832:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":831,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"3823:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3823:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":835,"nodeType":"EmitStatement","src":"3818:27:3"}]},"documentation":{"id":814,"nodeType":"StructuredDocumentation","src":"3548:121:3","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":837,"implemented":true,"kind":"function","modifiers":[{"id":817,"kind":"modifierInvocation","modifierName":{"id":816,"name":"whenPaused","nameLocations":["3711:10:3"],"nodeType":"IdentifierPath","referencedDeclaration":748,"src":"3711:10:3"},"nodeType":"ModifierInvocation","src":"3711:10:3"}],"name":"_unpause","nameLocation":"3683:8:3","nodeType":"FunctionDefinition","parameters":{"id":815,"nodeType":"ParameterList","parameters":[],"src":"3691:2:3"},"returnParameters":{"id":818,"nodeType":"ParameterList","parameters":[],"src":"3722:0:3"},"scope":838,"src":"3674:178:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":839,"src":"701:3153:3","usedErrors":[379,382,701,704],"usedEvents":[387,693,698]}],"src":"102:3753:3"},"id":3},"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol","exportedSymbols":{"Initializable":[616],"ReentrancyGuardUpgradeable":[967]},"id":968,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":840,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:4"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":842,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":968,"sourceUnit":617,"src":"134:63:4","symbolAliases":[{"foreign":{"id":841,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"142:13:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":844,"name":"Initializable","nameLocations":["998:13:4"],"nodeType":"IdentifierPath","referencedDeclaration":616,"src":"998:13:4"},"id":845,"nodeType":"InheritanceSpecifier","src":"998:13:4"}],"canonicalName":"ReentrancyGuardUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":843,"nodeType":"StructuredDocumentation","src":"199:750:4","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":967,"linearizedBaseContracts":[967,616],"name":"ReentrancyGuardUpgradeable","nameLocation":"968:26:4","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":848,"mutability":"constant","name":"NOT_ENTERED","nameLocation":"1791:11:4","nodeType":"VariableDeclaration","scope":967,"src":"1766:40:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":846,"name":"uint256","nodeType":"ElementaryTypeName","src":"1766:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1805:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":851,"mutability":"constant","name":"ENTERED","nameLocation":"1837:7:4","nodeType":"VariableDeclaration","scope":967,"src":"1812:36:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":849,"name":"uint256","nodeType":"ElementaryTypeName","src":"1812:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1847:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"canonicalName":"ReentrancyGuardUpgradeable.ReentrancyGuardStorage","documentation":{"id":852,"nodeType":"StructuredDocumentation","src":"1855:73:4","text":"@custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard"},"id":855,"members":[{"constant":false,"id":854,"mutability":"mutable","name":"_status","nameLocation":"1981:7:4","nodeType":"VariableDeclaration","scope":855,"src":"1973:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":853,"name":"uint256","nodeType":"ElementaryTypeName","src":"1973:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ReentrancyGuardStorage","nameLocation":"1940:22:4","nodeType":"StructDefinition","scope":967,"src":"1933:62:4","visibility":"public"},{"constant":true,"id":858,"mutability":"constant","name":"ReentrancyGuardStorageLocation","nameLocation":"2145:30:4","nodeType":"VariableDeclaration","scope":967,"src":"2120:124:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":856,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2120:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307839623737396231373432326430646639323232333031386233326234643166613436653037313732336436383137653234383664303033626563633535663030","id":857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2178:66:4","typeDescriptions":{"typeIdentifier":"t_rational_70319816728846589445362000750570655803700195216363692647688146666176345628416_by_1","typeString":"int_const 7031...(69 digits omitted)...8416"},"value":"0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00"},"visibility":"private"},{"body":{"id":865,"nodeType":"Block","src":"2345:89:4","statements":[{"AST":{"nodeType":"YulBlock","src":"2364:64:4","statements":[{"nodeType":"YulAssignment","src":"2378:40:4","value":{"name":"ReentrancyGuardStorageLocation","nodeType":"YulIdentifier","src":"2388:30:4"},"variableNames":[{"name":"$.slot","nodeType":"YulIdentifier","src":"2378:6:4"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":862,"isOffset":false,"isSlot":true,"src":"2378:6:4","suffix":"slot","valueSize":1},{"declaration":858,"isOffset":false,"isSlot":false,"src":"2388:30:4","valueSize":1}],"id":864,"nodeType":"InlineAssembly","src":"2355:73:4"}]},"id":866,"implemented":true,"kind":"function","modifiers":[],"name":"_getReentrancyGuardStorage","nameLocation":"2260:26:4","nodeType":"FunctionDefinition","parameters":{"id":859,"nodeType":"ParameterList","parameters":[],"src":"2286:2:4"},"returnParameters":{"id":863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":862,"mutability":"mutable","name":"$","nameLocation":"2342:1:4","nodeType":"VariableDeclaration","scope":866,"src":"2311:32:4","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$855_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage"},"typeName":{"id":861,"nodeType":"UserDefinedTypeName","pathNode":{"id":860,"name":"ReentrancyGuardStorage","nameLocations":["2311:22:4"],"nodeType":"IdentifierPath","referencedDeclaration":855,"src":"2311:22:4"},"referencedDeclaration":855,"src":"2311:22:4","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$855_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage"}},"visibility":"internal"}],"src":"2310:34:4"},"scope":967,"src":"2251:183:4","stateMutability":"pure","virtual":false,"visibility":"private"},{"documentation":{"id":867,"nodeType":"StructuredDocumentation","src":"2440:52:4","text":" @dev Unauthorized reentrant call."},"errorSelector":"3ee5aeb5","id":869,"name":"ReentrancyGuardReentrantCall","nameLocation":"2503:28:4","nodeType":"ErrorDefinition","parameters":{"id":868,"nodeType":"ParameterList","parameters":[],"src":"2531:2:4"},"src":"2497:37:4"},{"body":{"id":877,"nodeType":"Block","src":"2600:51:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":874,"name":"__ReentrancyGuard_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"2610:32:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2610:34:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":876,"nodeType":"ExpressionStatement","src":"2610:34:4"}]},"id":878,"implemented":true,"kind":"function","modifiers":[{"id":872,"kind":"modifierInvocation","modifierName":{"id":871,"name":"onlyInitializing","nameLocations":["2583:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"2583:16:4"},"nodeType":"ModifierInvocation","src":"2583:16:4"}],"name":"__ReentrancyGuard_init","nameLocation":"2549:22:4","nodeType":"FunctionDefinition","parameters":{"id":870,"nodeType":"ParameterList","parameters":[],"src":"2571:2:4"},"returnParameters":{"id":873,"nodeType":"ParameterList","parameters":[],"src":"2600:0:4"},"scope":967,"src":"2540:111:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":895,"nodeType":"Block","src":"2727:113:4","statements":[{"assignments":[885],"declarations":[{"constant":false,"id":885,"mutability":"mutable","name":"$","nameLocation":"2768:1:4","nodeType":"VariableDeclaration","scope":895,"src":"2737:32:4","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$855_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage"},"typeName":{"id":884,"nodeType":"UserDefinedTypeName","pathNode":{"id":883,"name":"ReentrancyGuardStorage","nameLocations":["2737:22:4"],"nodeType":"IdentifierPath","referencedDeclaration":855,"src":"2737:22:4"},"referencedDeclaration":855,"src":"2737:22:4","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$855_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage"}},"visibility":"internal"}],"id":888,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":886,"name":"_getReentrancyGuardStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":866,"src":"2772:26:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ReentrancyGuardStorage_$855_storage_ptr_$","typeString":"function () pure returns (struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer)"}},"id":887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2772:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$855_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"2737:63:4"},{"expression":{"id":893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":889,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"2810:1:4","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$855_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer"}},"id":891,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2812:7:4","memberName":"_status","nodeType":"MemberAccess","referencedDeclaration":854,"src":"2810:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":892,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"2822:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2810:23:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":894,"nodeType":"ExpressionStatement","src":"2810:23:4"}]},"id":896,"implemented":true,"kind":"function","modifiers":[{"id":881,"kind":"modifierInvocation","modifierName":{"id":880,"name":"onlyInitializing","nameLocations":["2710:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"2710:16:4"},"nodeType":"ModifierInvocation","src":"2710:16:4"}],"name":"__ReentrancyGuard_init_unchained","nameLocation":"2666:32:4","nodeType":"FunctionDefinition","parameters":{"id":879,"nodeType":"ParameterList","parameters":[],"src":"2698:2:4"},"returnParameters":{"id":882,"nodeType":"ParameterList","parameters":[],"src":"2727:0:4"},"scope":967,"src":"2657:183:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":906,"nodeType":"Block","src":"3241:79:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":899,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":932,"src":"3251:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3251:21:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":901,"nodeType":"ExpressionStatement","src":"3251:21:4"},{"id":902,"nodeType":"PlaceholderStatement","src":"3282:1:4"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":903,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"3293:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3293:20:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":905,"nodeType":"ExpressionStatement","src":"3293:20:4"}]},"documentation":{"id":897,"nodeType":"StructuredDocumentation","src":"2846:366:4","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":907,"name":"nonReentrant","nameLocation":"3226:12:4","nodeType":"ModifierDefinition","parameters":{"id":898,"nodeType":"ParameterList","parameters":[],"src":"3238:2:4"},"src":"3217:103:4","virtual":false,"visibility":"internal"},{"body":{"id":931,"nodeType":"Block","src":"3365:345:4","statements":[{"assignments":[912],"declarations":[{"constant":false,"id":912,"mutability":"mutable","name":"$","nameLocation":"3406:1:4","nodeType":"VariableDeclaration","scope":931,"src":"3375:32:4","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$855_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage"},"typeName":{"id":911,"nodeType":"UserDefinedTypeName","pathNode":{"id":910,"name":"ReentrancyGuardStorage","nameLocations":["3375:22:4"],"nodeType":"IdentifierPath","referencedDeclaration":855,"src":"3375:22:4"},"referencedDeclaration":855,"src":"3375:22:4","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$855_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage"}},"visibility":"internal"}],"id":915,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":913,"name":"_getReentrancyGuardStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":866,"src":"3410:26:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ReentrancyGuardStorage_$855_storage_ptr_$","typeString":"function () pure returns (struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer)"}},"id":914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3410:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$855_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"3375:63:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":916,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":912,"src":"3526:1:4","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$855_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer"}},"id":917,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3528:7:4","memberName":"_status","nodeType":"MemberAccess","referencedDeclaration":854,"src":"3526:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":918,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"3539:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3526:20:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":924,"nodeType":"IfStatement","src":"3522:88:4","trueBody":{"id":923,"nodeType":"Block","src":"3548:62:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":920,"name":"ReentrancyGuardReentrantCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":869,"src":"3569:28:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3569:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":922,"nodeType":"RevertStatement","src":"3562:37:4"}]}},{"expression":{"id":929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":925,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":912,"src":"3684:1:4","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$855_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer"}},"id":927,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3686:7:4","memberName":"_status","nodeType":"MemberAccess","referencedDeclaration":854,"src":"3684:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":928,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"3696:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3684:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":930,"nodeType":"ExpressionStatement","src":"3684:19:4"}]},"id":932,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"3335:19:4","nodeType":"FunctionDefinition","parameters":{"id":908,"nodeType":"ParameterList","parameters":[],"src":"3354:2:4"},"returnParameters":{"id":909,"nodeType":"ParameterList","parameters":[],"src":"3365:0:4"},"scope":967,"src":"3326:384:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":947,"nodeType":"Block","src":"3754:245:4","statements":[{"assignments":[937],"declarations":[{"constant":false,"id":937,"mutability":"mutable","name":"$","nameLocation":"3795:1:4","nodeType":"VariableDeclaration","scope":947,"src":"3764:32:4","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$855_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage"},"typeName":{"id":936,"nodeType":"UserDefinedTypeName","pathNode":{"id":935,"name":"ReentrancyGuardStorage","nameLocations":["3764:22:4"],"nodeType":"IdentifierPath","referencedDeclaration":855,"src":"3764:22:4"},"referencedDeclaration":855,"src":"3764:22:4","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$855_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage"}},"visibility":"internal"}],"id":940,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":938,"name":"_getReentrancyGuardStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":866,"src":"3799:26:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ReentrancyGuardStorage_$855_storage_ptr_$","typeString":"function () pure returns (struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer)"}},"id":939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3799:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$855_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"3764:63:4"},{"expression":{"id":945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":941,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"3969:1:4","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$855_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer"}},"id":943,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3971:7:4","memberName":"_status","nodeType":"MemberAccess","referencedDeclaration":854,"src":"3969:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":944,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"3981:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3969:23:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":946,"nodeType":"ExpressionStatement","src":"3969:23:4"}]},"id":948,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"3725:18:4","nodeType":"FunctionDefinition","parameters":{"id":933,"nodeType":"ParameterList","parameters":[],"src":"3743:2:4"},"returnParameters":{"id":934,"nodeType":"ParameterList","parameters":[],"src":"3754:0:4"},"scope":967,"src":"3716:283:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":965,"nodeType":"Block","src":"4242:117:4","statements":[{"assignments":[956],"declarations":[{"constant":false,"id":956,"mutability":"mutable","name":"$","nameLocation":"4283:1:4","nodeType":"VariableDeclaration","scope":965,"src":"4252:32:4","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$855_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage"},"typeName":{"id":955,"nodeType":"UserDefinedTypeName","pathNode":{"id":954,"name":"ReentrancyGuardStorage","nameLocations":["4252:22:4"],"nodeType":"IdentifierPath","referencedDeclaration":855,"src":"4252:22:4"},"referencedDeclaration":855,"src":"4252:22:4","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$855_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage"}},"visibility":"internal"}],"id":959,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":957,"name":"_getReentrancyGuardStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":866,"src":"4287:26:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ReentrancyGuardStorage_$855_storage_ptr_$","typeString":"function () pure returns (struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer)"}},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4287:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$855_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"4252:63:4"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":960,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"4332:1:4","typeDescriptions":{"typeIdentifier":"t_struct$_ReentrancyGuardStorage_$855_storage_ptr","typeString":"struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage storage pointer"}},"id":961,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4334:7:4","memberName":"_status","nodeType":"MemberAccess","referencedDeclaration":854,"src":"4332:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":962,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"4345:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4332:20:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":953,"id":964,"nodeType":"Return","src":"4325:27:4"}]},"documentation":{"id":949,"nodeType":"StructuredDocumentation","src":"4005:168:4","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":966,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"4187:23:4","nodeType":"FunctionDefinition","parameters":{"id":950,"nodeType":"ParameterList","parameters":[],"src":"4210:2:4"},"returnParameters":{"id":953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":952,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":966,"src":"4236:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":951,"name":"bool","nodeType":"ElementaryTypeName","src":"4236:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4235:6:4"},"scope":967,"src":"4178:181:4","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":968,"src":"950:3411:4","usedErrors":[379,382,869],"usedEvents":[387]}],"src":"109:4253:4"},"id":4},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","exportedSymbols":{"ERC165Upgradeable":[1007],"IERC165":[3063],"Initializable":[616]},"id":1008,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":969,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:5"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":971,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1008,"sourceUnit":3064,"src":"140:80:5","symbolAliases":[{"foreign":{"id":970,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"148:7:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":973,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1008,"sourceUnit":617,"src":"221:66:5","symbolAliases":[{"foreign":{"id":972,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"229:13:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":975,"name":"Initializable","nameLocations":["807:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":616,"src":"807:13:5"},"id":976,"nodeType":"InheritanceSpecifier","src":"807:13:5"},{"baseName":{"id":977,"name":"IERC165","nameLocations":["822:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":3063,"src":"822:7:5"},"id":978,"nodeType":"InheritanceSpecifier","src":"822:7:5"}],"canonicalName":"ERC165Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":974,"nodeType":"StructuredDocumentation","src":"289:478:5","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":1007,"linearizedBaseContracts":[1007,3063,616],"name":"ERC165Upgradeable","nameLocation":"786:17:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":983,"nodeType":"Block","src":"887:7:5","statements":[]},"id":984,"implemented":true,"kind":"function","modifiers":[{"id":981,"kind":"modifierInvocation","modifierName":{"id":980,"name":"onlyInitializing","nameLocations":["870:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"870:16:5"},"nodeType":"ModifierInvocation","src":"870:16:5"}],"name":"__ERC165_init","nameLocation":"845:13:5","nodeType":"FunctionDefinition","parameters":{"id":979,"nodeType":"ParameterList","parameters":[],"src":"858:2:5"},"returnParameters":{"id":982,"nodeType":"ParameterList","parameters":[],"src":"887:0:5"},"scope":1007,"src":"836:58:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":989,"nodeType":"Block","src":"961:7:5","statements":[]},"id":990,"implemented":true,"kind":"function","modifiers":[{"id":987,"kind":"modifierInvocation","modifierName":{"id":986,"name":"onlyInitializing","nameLocations":["944:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"944:16:5"},"nodeType":"ModifierInvocation","src":"944:16:5"}],"name":"__ERC165_init_unchained","nameLocation":"909:23:5","nodeType":"FunctionDefinition","parameters":{"id":985,"nodeType":"ParameterList","parameters":[],"src":"932:2:5"},"returnParameters":{"id":988,"nodeType":"ParameterList","parameters":[],"src":"961:0:5"},"scope":1007,"src":"900:68:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3062],"body":{"id":1005,"nodeType":"Block","src":"1116:64:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":998,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"1133:11:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1000,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"1153:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3063_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$3063_$","typeString":"type(contract IERC165)"}],"id":999,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"1148:4:5","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1148:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$3063","typeString":"type(contract IERC165)"}},"id":1002,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1162:11:5","memberName":"interfaceId","nodeType":"MemberAccess","src":"1148:25:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1133:40:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":997,"id":1004,"nodeType":"Return","src":"1126:47:5"}]},"documentation":{"id":991,"nodeType":"StructuredDocumentation","src":"973:56:5","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1006,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1043:17:5","nodeType":"FunctionDefinition","parameters":{"id":994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":993,"mutability":"mutable","name":"interfaceId","nameLocation":"1068:11:5","nodeType":"VariableDeclaration","scope":1006,"src":"1061:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":992,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1061:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1060:20:5"},"returnParameters":{"id":997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":996,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1006,"src":"1110:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":995,"name":"bool","nodeType":"ElementaryTypeName","src":"1110:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1109:6:5"},"scope":1007,"src":"1034:146:5","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":1008,"src":"768:414:5","usedErrors":[379,382],"usedEvents":[387]}],"src":"114:1069:5"},"id":5},"@openzeppelin/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[1303],"Context":[2772],"ERC165":[3051],"IAccessControl":[1386]},"id":1304,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1009,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:6"},{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","file":"./IAccessControl.sol","id":1011,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1304,"sourceUnit":1387,"src":"134:52:6","symbolAliases":[{"foreign":{"id":1010,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"142:14:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":1013,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1304,"sourceUnit":2773,"src":"187:45:6","symbolAliases":[{"foreign":{"id":1012,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2772,"src":"195:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../utils/introspection/ERC165.sol","id":1015,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1304,"sourceUnit":3052,"src":"233:57:6","symbolAliases":[{"foreign":{"id":1014,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"241:6:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1017,"name":"Context","nameLocations":["1988:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":2772,"src":"1988:7:6"},"id":1018,"nodeType":"InheritanceSpecifier","src":"1988:7:6"},{"baseName":{"id":1019,"name":"IAccessControl","nameLocations":["1997:14:6"],"nodeType":"IdentifierPath","referencedDeclaration":1386,"src":"1997:14:6"},"id":1020,"nodeType":"InheritanceSpecifier","src":"1997:14:6"},{"baseName":{"id":1021,"name":"ERC165","nameLocations":["2013:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":3051,"src":"2013:6:6"},"id":1022,"nodeType":"InheritanceSpecifier","src":"2013:6:6"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":1016,"nodeType":"StructuredDocumentation","src":"292:1660:6","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```solidity\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```solidity\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n to enforce additional security measures for this role."},"fullyImplemented":true,"id":1303,"linearizedBaseContracts":[1303,3051,3063,1386,2772],"name":"AccessControl","nameLocation":"1971:13:6","nodeType":"ContractDefinition","nodes":[{"canonicalName":"AccessControl.RoleData","id":1029,"members":[{"constant":false,"id":1026,"mutability":"mutable","name":"hasRole","nameLocation":"2085:7:6","nodeType":"VariableDeclaration","scope":1029,"src":"2052:40:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":1025,"keyName":"account","keyNameLocation":"2068:7:6","keyType":{"id":1023,"name":"address","nodeType":"ElementaryTypeName","src":"2060:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2052:32:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1024,"name":"bool","nodeType":"ElementaryTypeName","src":"2079:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":1028,"mutability":"mutable","name":"adminRole","nameLocation":"2110:9:6","nodeType":"VariableDeclaration","scope":1029,"src":"2102:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1027,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2102:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2033:8:6","nodeType":"StructDefinition","scope":1303,"src":"2026:100:6","visibility":"public"},{"constant":false,"id":1034,"mutability":"mutable","name":"_roles","nameLocation":"2174:6:6","nodeType":"VariableDeclaration","scope":1303,"src":"2132:48:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$1029_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"typeName":{"id":1033,"keyName":"role","keyNameLocation":"2148:4:6","keyType":{"id":1030,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2140:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2132:33:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$1029_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1032,"nodeType":"UserDefinedTypeName","pathNode":{"id":1031,"name":"RoleData","nameLocations":["2156:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":1029,"src":"2156:8:6"},"referencedDeclaration":1029,"src":"2156:8:6","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$1029_storage_ptr","typeString":"struct AccessControl.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":1037,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2211:18:6","nodeType":"VariableDeclaration","scope":1303,"src":"2187:49:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1035,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2187:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":1036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2232:4:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":1047,"nodeType":"Block","src":"2454:44:6","statements":[{"expression":{"arguments":[{"id":1043,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"2475:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1042,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[1101,1122],"referencedDeclaration":1101,"src":"2464:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2464:16:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1045,"nodeType":"ExpressionStatement","src":"2464:16:6"},{"id":1046,"nodeType":"PlaceholderStatement","src":"2490:1:6"}]},"documentation":{"id":1038,"nodeType":"StructuredDocumentation","src":"2243:174:6","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with an {AccessControlUnauthorizedAccount} error including the required role."},"id":1048,"name":"onlyRole","nameLocation":"2431:8:6","nodeType":"ModifierDefinition","parameters":{"id":1041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1040,"mutability":"mutable","name":"role","nameLocation":"2448:4:6","nodeType":"VariableDeclaration","scope":1048,"src":"2440:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1039,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2440:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2439:14:6"},"src":"2422:76:6","virtual":false,"visibility":"internal"},{"baseFunctions":[3050],"body":{"id":1069,"nodeType":"Block","src":"2656:111:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1057,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"2673:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1059,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"2693:14:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$1386_$","typeString":"type(contract IAccessControl)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$1386_$","typeString":"type(contract IAccessControl)"}],"id":1058,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"2688:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2688:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControl_$1386","typeString":"type(contract IAccessControl)"}},"id":1061,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2709:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"2688:32:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2673:47:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1065,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"2748:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":1063,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967271,"src":"2724:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControl_$1303_$","typeString":"type(contract super AccessControl)"}},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2730:17:6","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3050,"src":"2724:23:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":1066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2724:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2673:87:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1056,"id":1068,"nodeType":"Return","src":"2666:94:6"}]},"documentation":{"id":1049,"nodeType":"StructuredDocumentation","src":"2504:56:6","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1070,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2574:17:6","nodeType":"FunctionDefinition","overrides":{"id":1053,"nodeType":"OverrideSpecifier","overrides":[],"src":"2632:8:6"},"parameters":{"id":1052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1051,"mutability":"mutable","name":"interfaceId","nameLocation":"2599:11:6","nodeType":"VariableDeclaration","scope":1070,"src":"2592:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1050,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2592:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2591:20:6"},"returnParameters":{"id":1056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1055,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1070,"src":"2650:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1054,"name":"bool","nodeType":"ElementaryTypeName","src":"2650:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2649:6:6"},"scope":1303,"src":"2565:202:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1353],"body":{"id":1087,"nodeType":"Block","src":"2937:53:6","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":1080,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"2954:6:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$1029_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":1082,"indexExpression":{"id":1081,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1073,"src":"2961:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2954:12:6","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$1029_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":1083,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2967:7:6","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":1026,"src":"2954:20:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1085,"indexExpression":{"id":1084,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"2975:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2954:29:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1079,"id":1086,"nodeType":"Return","src":"2947:36:6"}]},"documentation":{"id":1071,"nodeType":"StructuredDocumentation","src":"2773:76:6","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":1088,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2863:7:6","nodeType":"FunctionDefinition","parameters":{"id":1076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1073,"mutability":"mutable","name":"role","nameLocation":"2879:4:6","nodeType":"VariableDeclaration","scope":1088,"src":"2871:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1072,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2871:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1075,"mutability":"mutable","name":"account","nameLocation":"2893:7:6","nodeType":"VariableDeclaration","scope":1088,"src":"2885:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1074,"name":"address","nodeType":"ElementaryTypeName","src":"2885:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2870:31:6"},"returnParameters":{"id":1079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1078,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1088,"src":"2931:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1077,"name":"bool","nodeType":"ElementaryTypeName","src":"2931:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2930:6:6"},"scope":1303,"src":"2854:136:6","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1100,"nodeType":"Block","src":"3255:47:6","statements":[{"expression":{"arguments":[{"id":1095,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1091,"src":"3276:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1096,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"3282:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3282:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1094,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[1101,1122],"referencedDeclaration":1122,"src":"3265:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3265:30:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1099,"nodeType":"ExpressionStatement","src":"3265:30:6"}]},"documentation":{"id":1089,"nodeType":"StructuredDocumentation","src":"2996:198:6","text":" @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier."},"id":1101,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3208:10:6","nodeType":"FunctionDefinition","parameters":{"id":1092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1091,"mutability":"mutable","name":"role","nameLocation":"3227:4:6","nodeType":"VariableDeclaration","scope":1101,"src":"3219:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1090,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3219:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3218:14:6"},"returnParameters":{"id":1093,"nodeType":"ParameterList","parameters":[],"src":"3255:0:6"},"scope":1303,"src":"3199:103:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1121,"nodeType":"Block","src":"3505:124:6","statements":[{"condition":{"id":1113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3519:23:6","subExpression":{"arguments":[{"id":1110,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1104,"src":"3528:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1111,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1106,"src":"3534:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1109,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"3520:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":1112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3520:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1120,"nodeType":"IfStatement","src":"3515:108:6","trueBody":{"id":1119,"nodeType":"Block","src":"3544:79:6","statements":[{"errorCall":{"arguments":[{"id":1115,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1106,"src":"3598:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1116,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1104,"src":"3607:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1114,"name":"AccessControlUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"3565:32:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_bytes32_$returns$__$","typeString":"function (address,bytes32) pure"}},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3565:47:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1118,"nodeType":"RevertStatement","src":"3558:54:6"}]}}]},"documentation":{"id":1102,"nodeType":"StructuredDocumentation","src":"3308:119:6","text":" @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n is missing `role`."},"id":1122,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3441:10:6","nodeType":"FunctionDefinition","parameters":{"id":1107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1104,"mutability":"mutable","name":"role","nameLocation":"3460:4:6","nodeType":"VariableDeclaration","scope":1122,"src":"3452:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1103,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3452:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1106,"mutability":"mutable","name":"account","nameLocation":"3474:7:6","nodeType":"VariableDeclaration","scope":1122,"src":"3466:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1105,"name":"address","nodeType":"ElementaryTypeName","src":"3466:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3451:31:6"},"returnParameters":{"id":1108,"nodeType":"ParameterList","parameters":[],"src":"3505:0:6"},"scope":1303,"src":"3432:197:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1361],"body":{"id":1135,"nodeType":"Block","src":"3884:46:6","statements":[{"expression":{"expression":{"baseExpression":{"id":1130,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"3901:6:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$1029_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":1132,"indexExpression":{"id":1131,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1125,"src":"3908:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3901:12:6","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$1029_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":1133,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3914:9:6","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":1028,"src":"3901:22:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1129,"id":1134,"nodeType":"Return","src":"3894:29:6"}]},"documentation":{"id":1123,"nodeType":"StructuredDocumentation","src":"3635:170:6","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":1136,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"3819:12:6","nodeType":"FunctionDefinition","parameters":{"id":1126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1125,"mutability":"mutable","name":"role","nameLocation":"3840:4:6","nodeType":"VariableDeclaration","scope":1136,"src":"3832:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1124,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3832:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3831:14:6"},"returnParameters":{"id":1129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1128,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1136,"src":"3875:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1127,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3875:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3874:9:6"},"scope":1303,"src":"3810:120:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1369],"body":{"id":1154,"nodeType":"Block","src":"4320:42:6","statements":[{"expression":{"arguments":[{"id":1150,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"4341:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1151,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"4347:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1149,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"4330:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4330:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1153,"nodeType":"ExpressionStatement","src":"4330:25:6"}]},"documentation":{"id":1137,"nodeType":"StructuredDocumentation","src":"3936:285:6","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":1155,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":1145,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"4313:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1144,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"4300:12:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":1146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4300:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1147,"kind":"modifierInvocation","modifierName":{"id":1143,"name":"onlyRole","nameLocations":["4291:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":1048,"src":"4291:8:6"},"nodeType":"ModifierInvocation","src":"4291:28:6"}],"name":"grantRole","nameLocation":"4235:9:6","nodeType":"FunctionDefinition","parameters":{"id":1142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1139,"mutability":"mutable","name":"role","nameLocation":"4253:4:6","nodeType":"VariableDeclaration","scope":1155,"src":"4245:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1138,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4245:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1141,"mutability":"mutable","name":"account","nameLocation":"4267:7:6","nodeType":"VariableDeclaration","scope":1155,"src":"4259:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1140,"name":"address","nodeType":"ElementaryTypeName","src":"4259:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4244:31:6"},"returnParameters":{"id":1148,"nodeType":"ParameterList","parameters":[],"src":"4320:0:6"},"scope":1303,"src":"4226:136:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1377],"body":{"id":1173,"nodeType":"Block","src":"4737:43:6","statements":[{"expression":{"arguments":[{"id":1169,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1158,"src":"4759:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1170,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"4765:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1168,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"4747:11:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":1171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4747:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1172,"nodeType":"ExpressionStatement","src":"4747:26:6"}]},"documentation":{"id":1156,"nodeType":"StructuredDocumentation","src":"4368:269:6","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":1174,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":1164,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1158,"src":"4730:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1163,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"4717:12:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":1165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4717:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1166,"kind":"modifierInvocation","modifierName":{"id":1162,"name":"onlyRole","nameLocations":["4708:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":1048,"src":"4708:8:6"},"nodeType":"ModifierInvocation","src":"4708:28:6"}],"name":"revokeRole","nameLocation":"4651:10:6","nodeType":"FunctionDefinition","parameters":{"id":1161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1158,"mutability":"mutable","name":"role","nameLocation":"4670:4:6","nodeType":"VariableDeclaration","scope":1174,"src":"4662:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1157,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4662:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1160,"mutability":"mutable","name":"account","nameLocation":"4684:7:6","nodeType":"VariableDeclaration","scope":1174,"src":"4676:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1159,"name":"address","nodeType":"ElementaryTypeName","src":"4676:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4661:31:6"},"returnParameters":{"id":1167,"nodeType":"ParameterList","parameters":[],"src":"4737:0:6"},"scope":1303,"src":"4642:138:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1385],"body":{"id":1196,"nodeType":"Block","src":"5407:166:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1182,"name":"callerConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"5421:18:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1183,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"5443:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5443:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5421:34:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1190,"nodeType":"IfStatement","src":"5417:102:6","trueBody":{"id":1189,"nodeType":"Block","src":"5457:62:6","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1186,"name":"AccessControlBadConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1316,"src":"5478:28:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5478:30:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1188,"nodeType":"RevertStatement","src":"5471:37:6"}]}},{"expression":{"arguments":[{"id":1192,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1177,"src":"5541:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1193,"name":"callerConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1179,"src":"5547:18:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1191,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"5529:11:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":1194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5529:37:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1195,"nodeType":"ExpressionStatement","src":"5529:37:6"}]},"documentation":{"id":1175,"nodeType":"StructuredDocumentation","src":"4786:537:6","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `callerConfirmation`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":1197,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"5337:12:6","nodeType":"FunctionDefinition","parameters":{"id":1180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1177,"mutability":"mutable","name":"role","nameLocation":"5358:4:6","nodeType":"VariableDeclaration","scope":1197,"src":"5350:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1176,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5350:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1179,"mutability":"mutable","name":"callerConfirmation","nameLocation":"5372:18:6","nodeType":"VariableDeclaration","scope":1197,"src":"5364:26:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1178,"name":"address","nodeType":"ElementaryTypeName","src":"5364:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5349:42:6"},"returnParameters":{"id":1181,"nodeType":"ParameterList","parameters":[],"src":"5407:0:6"},"scope":1303,"src":"5328:245:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1224,"nodeType":"Block","src":"5771:174:6","statements":[{"assignments":[1206],"declarations":[{"constant":false,"id":1206,"mutability":"mutable","name":"previousAdminRole","nameLocation":"5789:17:6","nodeType":"VariableDeclaration","scope":1224,"src":"5781:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1205,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5781:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1210,"initialValue":{"arguments":[{"id":1208,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"5822:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1207,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"5809:12:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5809:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5781:46:6"},{"expression":{"id":1216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":1211,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"5837:6:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$1029_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":1213,"indexExpression":{"id":1212,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"5844:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5837:12:6","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$1029_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":1214,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5850:9:6","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":1028,"src":"5837:22:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1215,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"5862:9:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5837:34:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1217,"nodeType":"ExpressionStatement","src":"5837:34:6"},{"eventCall":{"arguments":[{"id":1219,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"5903:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1220,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"5909:17:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1221,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"5928:9:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1218,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1325,"src":"5886:16:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5886:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1223,"nodeType":"EmitStatement","src":"5881:57:6"}]},"documentation":{"id":1198,"nodeType":"StructuredDocumentation","src":"5579:114:6","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":1225,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"5707:13:6","nodeType":"FunctionDefinition","parameters":{"id":1203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1200,"mutability":"mutable","name":"role","nameLocation":"5729:4:6","nodeType":"VariableDeclaration","scope":1225,"src":"5721:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1199,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5721:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1202,"mutability":"mutable","name":"adminRole","nameLocation":"5743:9:6","nodeType":"VariableDeclaration","scope":1225,"src":"5735:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1201,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5735:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5720:33:6"},"returnParameters":{"id":1204,"nodeType":"ParameterList","parameters":[],"src":"5771:0:6"},"scope":1303,"src":"5698:247:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1263,"nodeType":"Block","src":"6262:233:6","statements":[{"condition":{"id":1239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6276:23:6","subExpression":{"arguments":[{"id":1236,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"6285:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1237,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1230,"src":"6291:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1235,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"6277:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6277:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1261,"nodeType":"Block","src":"6452:37:6","statements":[{"expression":{"hexValue":"66616c7365","id":1259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6473:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1234,"id":1260,"nodeType":"Return","src":"6466:12:6"}]},"id":1262,"nodeType":"IfStatement","src":"6272:217:6","trueBody":{"id":1258,"nodeType":"Block","src":"6301:145:6","statements":[{"expression":{"id":1247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":1240,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"6315:6:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$1029_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":1242,"indexExpression":{"id":1241,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"6322:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6315:12:6","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$1029_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":1243,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6328:7:6","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":1026,"src":"6315:20:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1245,"indexExpression":{"id":1244,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1230,"src":"6336:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6315:29:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6347:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6315:36:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1248,"nodeType":"ExpressionStatement","src":"6315:36:6"},{"eventCall":{"arguments":[{"id":1250,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"6382:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1251,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1230,"src":"6388:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1252,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"6397:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6397:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1249,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1334,"src":"6370:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":1254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6370:40:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1255,"nodeType":"EmitStatement","src":"6365:45:6"},{"expression":{"hexValue":"74727565","id":1256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6431:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1234,"id":1257,"nodeType":"Return","src":"6424:11:6"}]}}]},"documentation":{"id":1226,"nodeType":"StructuredDocumentation","src":"5951:223:6","text":" @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":1264,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"6188:10:6","nodeType":"FunctionDefinition","parameters":{"id":1231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1228,"mutability":"mutable","name":"role","nameLocation":"6207:4:6","nodeType":"VariableDeclaration","scope":1264,"src":"6199:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1227,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6199:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1230,"mutability":"mutable","name":"account","nameLocation":"6221:7:6","nodeType":"VariableDeclaration","scope":1264,"src":"6213:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1229,"name":"address","nodeType":"ElementaryTypeName","src":"6213:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6198:31:6"},"returnParameters":{"id":1234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1233,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1264,"src":"6256:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1232,"name":"bool","nodeType":"ElementaryTypeName","src":"6256:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6255:6:6"},"scope":1303,"src":"6179:316:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1301,"nodeType":"Block","src":"6814:233:6","statements":[{"condition":{"arguments":[{"id":1275,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"6836:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1276,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1269,"src":"6842:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1274,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"6828:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":1277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6828:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1299,"nodeType":"Block","src":"7004:37:6","statements":[{"expression":{"hexValue":"66616c7365","id":1297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7025:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1273,"id":1298,"nodeType":"Return","src":"7018:12:6"}]},"id":1300,"nodeType":"IfStatement","src":"6824:217:6","trueBody":{"id":1296,"nodeType":"Block","src":"6852:146:6","statements":[{"expression":{"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":1278,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"6866:6:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$1029_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":1280,"indexExpression":{"id":1279,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"6873:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6866:12:6","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$1029_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":1281,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6879:7:6","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":1026,"src":"6866:20:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1283,"indexExpression":{"id":1282,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1269,"src":"6887:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6866:29:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6898:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"6866:37:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1286,"nodeType":"ExpressionStatement","src":"6866:37:6"},{"eventCall":{"arguments":[{"id":1288,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"6934:4:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1289,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1269,"src":"6940:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1290,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"6949:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6949:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1287,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1343,"src":"6922:11:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6922:40:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1293,"nodeType":"EmitStatement","src":"6917:45:6"},{"expression":{"hexValue":"74727565","id":1294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6983:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1273,"id":1295,"nodeType":"Return","src":"6976:11:6"}]}}]},"documentation":{"id":1265,"nodeType":"StructuredDocumentation","src":"6501:224:6","text":" @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":1302,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"6739:11:6","nodeType":"FunctionDefinition","parameters":{"id":1270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1267,"mutability":"mutable","name":"role","nameLocation":"6759:4:6","nodeType":"VariableDeclaration","scope":1302,"src":"6751:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1266,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6751:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1269,"mutability":"mutable","name":"account","nameLocation":"6773:7:6","nodeType":"VariableDeclaration","scope":1302,"src":"6765:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1268,"name":"address","nodeType":"ElementaryTypeName","src":"6765:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6750:31:6"},"returnParameters":{"id":1273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1272,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1302,"src":"6808:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1271,"name":"bool","nodeType":"ElementaryTypeName","src":"6808:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6807:6:6"},"scope":1303,"src":"6730:317:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1304,"src":"1953:5096:6","usedErrors":[1313,1316],"usedEvents":[1325,1334,1343]}],"src":"108:6942:6"},"id":6},"@openzeppelin/contracts/access/IAccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","exportedSymbols":{"IAccessControl":[1386]},"id":1387,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1305,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControl","contractDependencies":[],"contractKind":"interface","documentation":{"id":1306,"nodeType":"StructuredDocumentation","src":"135:89:7","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":1386,"linearizedBaseContracts":[1386],"name":"IAccessControl","nameLocation":"235:14:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1307,"nodeType":"StructuredDocumentation","src":"256:56:7","text":" @dev The `account` is missing a role."},"errorSelector":"e2517d3f","id":1313,"name":"AccessControlUnauthorizedAccount","nameLocation":"323:32:7","nodeType":"ErrorDefinition","parameters":{"id":1312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1309,"mutability":"mutable","name":"account","nameLocation":"364:7:7","nodeType":"VariableDeclaration","scope":1313,"src":"356:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1308,"name":"address","nodeType":"ElementaryTypeName","src":"356:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1311,"mutability":"mutable","name":"neededRole","nameLocation":"381:10:7","nodeType":"VariableDeclaration","scope":1313,"src":"373:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1310,"name":"bytes32","nodeType":"ElementaryTypeName","src":"373:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"355:37:7"},"src":"317:76:7"},{"documentation":{"id":1314,"nodeType":"StructuredDocumentation","src":"399:148:7","text":" @dev The caller of a function is not the expected one.\n NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."},"errorSelector":"6697b232","id":1316,"name":"AccessControlBadConfirmation","nameLocation":"558:28:7","nodeType":"ErrorDefinition","parameters":{"id":1315,"nodeType":"ParameterList","parameters":[],"src":"586:2:7"},"src":"552:37:7"},{"anonymous":false,"documentation":{"id":1317,"nodeType":"StructuredDocumentation","src":"595:254:7","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this."},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":1325,"name":"RoleAdminChanged","nameLocation":"860:16:7","nodeType":"EventDefinition","parameters":{"id":1324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1319,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"893:4:7","nodeType":"VariableDeclaration","scope":1325,"src":"877:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1318,"name":"bytes32","nodeType":"ElementaryTypeName","src":"877:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1321,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"915:17:7","nodeType":"VariableDeclaration","scope":1325,"src":"899:33:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1320,"name":"bytes32","nodeType":"ElementaryTypeName","src":"899:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1323,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"950:12:7","nodeType":"VariableDeclaration","scope":1325,"src":"934:28:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1322,"name":"bytes32","nodeType":"ElementaryTypeName","src":"934:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"876:87:7"},"src":"854:110:7"},{"anonymous":false,"documentation":{"id":1326,"nodeType":"StructuredDocumentation","src":"970:212:7","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":1334,"name":"RoleGranted","nameLocation":"1193:11:7","nodeType":"EventDefinition","parameters":{"id":1333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1328,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1221:4:7","nodeType":"VariableDeclaration","scope":1334,"src":"1205:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1327,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1205:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1330,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1243:7:7","nodeType":"VariableDeclaration","scope":1334,"src":"1227:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1329,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1332,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1268:6:7","nodeType":"VariableDeclaration","scope":1334,"src":"1252:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1331,"name":"address","nodeType":"ElementaryTypeName","src":"1252:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1204:71:7"},"src":"1187:89:7"},{"anonymous":false,"documentation":{"id":1335,"nodeType":"StructuredDocumentation","src":"1282:275:7","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":1343,"name":"RoleRevoked","nameLocation":"1568:11:7","nodeType":"EventDefinition","parameters":{"id":1342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1337,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1596:4:7","nodeType":"VariableDeclaration","scope":1343,"src":"1580:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1336,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1580:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1339,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1618:7:7","nodeType":"VariableDeclaration","scope":1343,"src":"1602:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1338,"name":"address","nodeType":"ElementaryTypeName","src":"1602:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1341,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1643:6:7","nodeType":"VariableDeclaration","scope":1343,"src":"1627:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1340,"name":"address","nodeType":"ElementaryTypeName","src":"1627:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1579:71:7"},"src":"1562:89:7"},{"documentation":{"id":1344,"nodeType":"StructuredDocumentation","src":"1657:76:7","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":1353,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1747:7:7","nodeType":"FunctionDefinition","parameters":{"id":1349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1346,"mutability":"mutable","name":"role","nameLocation":"1763:4:7","nodeType":"VariableDeclaration","scope":1353,"src":"1755:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1345,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1755:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1348,"mutability":"mutable","name":"account","nameLocation":"1777:7:7","nodeType":"VariableDeclaration","scope":1353,"src":"1769:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1347,"name":"address","nodeType":"ElementaryTypeName","src":"1769:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1754:31:7"},"returnParameters":{"id":1352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1351,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1353,"src":"1809:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1350,"name":"bool","nodeType":"ElementaryTypeName","src":"1809:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1808:6:7"},"scope":1386,"src":"1738:77:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1354,"nodeType":"StructuredDocumentation","src":"1821:184:7","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":1361,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"2019:12:7","nodeType":"FunctionDefinition","parameters":{"id":1357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1356,"mutability":"mutable","name":"role","nameLocation":"2040:4:7","nodeType":"VariableDeclaration","scope":1361,"src":"2032:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1355,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2032:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2031:14:7"},"returnParameters":{"id":1360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1359,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1361,"src":"2069:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2069:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2068:9:7"},"scope":1386,"src":"2010:68:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1362,"nodeType":"StructuredDocumentation","src":"2084:239:7","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":1369,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2337:9:7","nodeType":"FunctionDefinition","parameters":{"id":1367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1364,"mutability":"mutable","name":"role","nameLocation":"2355:4:7","nodeType":"VariableDeclaration","scope":1369,"src":"2347:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1363,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2347:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1366,"mutability":"mutable","name":"account","nameLocation":"2369:7:7","nodeType":"VariableDeclaration","scope":1369,"src":"2361:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1365,"name":"address","nodeType":"ElementaryTypeName","src":"2361:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2346:31:7"},"returnParameters":{"id":1368,"nodeType":"ParameterList","parameters":[],"src":"2386:0:7"},"scope":1386,"src":"2328:59:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1370,"nodeType":"StructuredDocumentation","src":"2393:223:7","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":1377,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2630:10:7","nodeType":"FunctionDefinition","parameters":{"id":1375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1372,"mutability":"mutable","name":"role","nameLocation":"2649:4:7","nodeType":"VariableDeclaration","scope":1377,"src":"2641:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1371,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2641:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1374,"mutability":"mutable","name":"account","nameLocation":"2663:7:7","nodeType":"VariableDeclaration","scope":1377,"src":"2655:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1373,"name":"address","nodeType":"ElementaryTypeName","src":"2655:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2640:31:7"},"returnParameters":{"id":1376,"nodeType":"ParameterList","parameters":[],"src":"2680:0:7"},"scope":1386,"src":"2621:60:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1378,"nodeType":"StructuredDocumentation","src":"2687:491:7","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `callerConfirmation`."},"functionSelector":"36568abe","id":1385,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"3192:12:7","nodeType":"FunctionDefinition","parameters":{"id":1383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1380,"mutability":"mutable","name":"role","nameLocation":"3213:4:7","nodeType":"VariableDeclaration","scope":1385,"src":"3205:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1379,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3205:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1382,"mutability":"mutable","name":"callerConfirmation","nameLocation":"3227:18:7","nodeType":"VariableDeclaration","scope":1385,"src":"3219:26:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1381,"name":"address","nodeType":"ElementaryTypeName","src":"3219:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3204:42:7"},"returnParameters":{"id":1384,"nodeType":"ParameterList","parameters":[],"src":"3255:0:7"},"scope":1386,"src":"3183:73:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1387,"src":"225:3033:7","usedErrors":[1313,1316],"usedEvents":[1325,1334,1343]}],"src":"109:3150:7"},"id":7},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","exportedSymbols":{"IERC1155Errors":[1523],"IERC20Errors":[1428],"IERC721Errors":[1476]},"id":1524,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1388,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:8"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":1389,"nodeType":"StructuredDocumentation","src":"138:139:8","text":" @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."},"fullyImplemented":true,"id":1428,"linearizedBaseContracts":[1428],"name":"IERC20Errors","nameLocation":"288:12:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1390,"nodeType":"StructuredDocumentation","src":"307:309:8","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"e450d38c","id":1398,"name":"ERC20InsufficientBalance","nameLocation":"627:24:8","nodeType":"ErrorDefinition","parameters":{"id":1397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1392,"mutability":"mutable","name":"sender","nameLocation":"660:6:8","nodeType":"VariableDeclaration","scope":1398,"src":"652:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1391,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1394,"mutability":"mutable","name":"balance","nameLocation":"676:7:8","nodeType":"VariableDeclaration","scope":1398,"src":"668:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1393,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1396,"mutability":"mutable","name":"needed","nameLocation":"693:6:8","nodeType":"VariableDeclaration","scope":1398,"src":"685:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1395,"name":"uint256","nodeType":"ElementaryTypeName","src":"685:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"651:49:8"},"src":"621:80:8"},{"documentation":{"id":1399,"nodeType":"StructuredDocumentation","src":"707:152:8","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"96c6fd1e","id":1403,"name":"ERC20InvalidSender","nameLocation":"870:18:8","nodeType":"ErrorDefinition","parameters":{"id":1402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1401,"mutability":"mutable","name":"sender","nameLocation":"897:6:8","nodeType":"VariableDeclaration","scope":1403,"src":"889:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1400,"name":"address","nodeType":"ElementaryTypeName","src":"889:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"888:16:8"},"src":"864:41:8"},{"documentation":{"id":1404,"nodeType":"StructuredDocumentation","src":"911:159:8","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"ec442f05","id":1408,"name":"ERC20InvalidReceiver","nameLocation":"1081:20:8","nodeType":"ErrorDefinition","parameters":{"id":1407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1406,"mutability":"mutable","name":"receiver","nameLocation":"1110:8:8","nodeType":"VariableDeclaration","scope":1408,"src":"1102:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1405,"name":"address","nodeType":"ElementaryTypeName","src":"1102:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1101:18:8"},"src":"1075:45:8"},{"documentation":{"id":1409,"nodeType":"StructuredDocumentation","src":"1126:345:8","text":" @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"fb8f41b2","id":1417,"name":"ERC20InsufficientAllowance","nameLocation":"1482:26:8","nodeType":"ErrorDefinition","parameters":{"id":1416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1411,"mutability":"mutable","name":"spender","nameLocation":"1517:7:8","nodeType":"VariableDeclaration","scope":1417,"src":"1509:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1410,"name":"address","nodeType":"ElementaryTypeName","src":"1509:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1413,"mutability":"mutable","name":"allowance","nameLocation":"1534:9:8","nodeType":"VariableDeclaration","scope":1417,"src":"1526:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1412,"name":"uint256","nodeType":"ElementaryTypeName","src":"1526:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1415,"mutability":"mutable","name":"needed","nameLocation":"1553:6:8","nodeType":"VariableDeclaration","scope":1417,"src":"1545:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1414,"name":"uint256","nodeType":"ElementaryTypeName","src":"1545:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1508:52:8"},"src":"1476:85:8"},{"documentation":{"id":1418,"nodeType":"StructuredDocumentation","src":"1567:174:8","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"e602df05","id":1422,"name":"ERC20InvalidApprover","nameLocation":"1752:20:8","nodeType":"ErrorDefinition","parameters":{"id":1421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1420,"mutability":"mutable","name":"approver","nameLocation":"1781:8:8","nodeType":"VariableDeclaration","scope":1422,"src":"1773:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1419,"name":"address","nodeType":"ElementaryTypeName","src":"1773:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1772:18:8"},"src":"1746:45:8"},{"documentation":{"id":1423,"nodeType":"StructuredDocumentation","src":"1797:195:8","text":" @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"94280d62","id":1427,"name":"ERC20InvalidSpender","nameLocation":"2003:19:8","nodeType":"ErrorDefinition","parameters":{"id":1426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1425,"mutability":"mutable","name":"spender","nameLocation":"2031:7:8","nodeType":"VariableDeclaration","scope":1427,"src":"2023:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1424,"name":"address","nodeType":"ElementaryTypeName","src":"2023:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2022:17:8"},"src":"1997:43:8"}],"scope":1524,"src":"278:1764:8","usedErrors":[1398,1403,1408,1417,1422,1427],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":1429,"nodeType":"StructuredDocumentation","src":"2044:141:8","text":" @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."},"fullyImplemented":true,"id":1476,"linearizedBaseContracts":[1476],"name":"IERC721Errors","nameLocation":"2196:13:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1430,"nodeType":"StructuredDocumentation","src":"2216:219:8","text":" @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."},"errorSelector":"89c62b64","id":1434,"name":"ERC721InvalidOwner","nameLocation":"2446:18:8","nodeType":"ErrorDefinition","parameters":{"id":1433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1432,"mutability":"mutable","name":"owner","nameLocation":"2473:5:8","nodeType":"VariableDeclaration","scope":1434,"src":"2465:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1431,"name":"address","nodeType":"ElementaryTypeName","src":"2465:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2464:15:8"},"src":"2440:40:8"},{"documentation":{"id":1435,"nodeType":"StructuredDocumentation","src":"2486:132:8","text":" @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."},"errorSelector":"7e273289","id":1439,"name":"ERC721NonexistentToken","nameLocation":"2629:22:8","nodeType":"ErrorDefinition","parameters":{"id":1438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1437,"mutability":"mutable","name":"tokenId","nameLocation":"2660:7:8","nodeType":"VariableDeclaration","scope":1439,"src":"2652:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1436,"name":"uint256","nodeType":"ElementaryTypeName","src":"2652:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2651:17:8"},"src":"2623:46:8"},{"documentation":{"id":1440,"nodeType":"StructuredDocumentation","src":"2675:289:8","text":" @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."},"errorSelector":"64283d7b","id":1448,"name":"ERC721IncorrectOwner","nameLocation":"2975:20:8","nodeType":"ErrorDefinition","parameters":{"id":1447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1442,"mutability":"mutable","name":"sender","nameLocation":"3004:6:8","nodeType":"VariableDeclaration","scope":1448,"src":"2996:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1441,"name":"address","nodeType":"ElementaryTypeName","src":"2996:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1444,"mutability":"mutable","name":"tokenId","nameLocation":"3020:7:8","nodeType":"VariableDeclaration","scope":1448,"src":"3012:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1443,"name":"uint256","nodeType":"ElementaryTypeName","src":"3012:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1446,"mutability":"mutable","name":"owner","nameLocation":"3037:5:8","nodeType":"VariableDeclaration","scope":1448,"src":"3029:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1445,"name":"address","nodeType":"ElementaryTypeName","src":"3029:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2995:48:8"},"src":"2969:75:8"},{"documentation":{"id":1449,"nodeType":"StructuredDocumentation","src":"3050:152:8","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"73c6ac6e","id":1453,"name":"ERC721InvalidSender","nameLocation":"3213:19:8","nodeType":"ErrorDefinition","parameters":{"id":1452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1451,"mutability":"mutable","name":"sender","nameLocation":"3241:6:8","nodeType":"VariableDeclaration","scope":1453,"src":"3233:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1450,"name":"address","nodeType":"ElementaryTypeName","src":"3233:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3232:16:8"},"src":"3207:42:8"},{"documentation":{"id":1454,"nodeType":"StructuredDocumentation","src":"3255:159:8","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"64a0ae92","id":1458,"name":"ERC721InvalidReceiver","nameLocation":"3425:21:8","nodeType":"ErrorDefinition","parameters":{"id":1457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1456,"mutability":"mutable","name":"receiver","nameLocation":"3455:8:8","nodeType":"VariableDeclaration","scope":1458,"src":"3447:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1455,"name":"address","nodeType":"ElementaryTypeName","src":"3447:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3446:18:8"},"src":"3419:46:8"},{"documentation":{"id":1459,"nodeType":"StructuredDocumentation","src":"3471:247:8","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."},"errorSelector":"177e802f","id":1465,"name":"ERC721InsufficientApproval","nameLocation":"3729:26:8","nodeType":"ErrorDefinition","parameters":{"id":1464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1461,"mutability":"mutable","name":"operator","nameLocation":"3764:8:8","nodeType":"VariableDeclaration","scope":1465,"src":"3756:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1460,"name":"address","nodeType":"ElementaryTypeName","src":"3756:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1463,"mutability":"mutable","name":"tokenId","nameLocation":"3782:7:8","nodeType":"VariableDeclaration","scope":1465,"src":"3774:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1462,"name":"uint256","nodeType":"ElementaryTypeName","src":"3774:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3755:35:8"},"src":"3723:68:8"},{"documentation":{"id":1466,"nodeType":"StructuredDocumentation","src":"3797:174:8","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"a9fbf51f","id":1470,"name":"ERC721InvalidApprover","nameLocation":"3982:21:8","nodeType":"ErrorDefinition","parameters":{"id":1469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1468,"mutability":"mutable","name":"approver","nameLocation":"4012:8:8","nodeType":"VariableDeclaration","scope":1470,"src":"4004:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1467,"name":"address","nodeType":"ElementaryTypeName","src":"4004:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4003:18:8"},"src":"3976:46:8"},{"documentation":{"id":1471,"nodeType":"StructuredDocumentation","src":"4028:197:8","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"5b08ba18","id":1475,"name":"ERC721InvalidOperator","nameLocation":"4236:21:8","nodeType":"ErrorDefinition","parameters":{"id":1474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1473,"mutability":"mutable","name":"operator","nameLocation":"4266:8:8","nodeType":"VariableDeclaration","scope":1475,"src":"4258:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1472,"name":"address","nodeType":"ElementaryTypeName","src":"4258:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4257:18:8"},"src":"4230:46:8"}],"scope":1524,"src":"2186:2092:8","usedErrors":[1434,1439,1448,1453,1458,1465,1470,1475],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":1477,"nodeType":"StructuredDocumentation","src":"4280:143:8","text":" @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."},"fullyImplemented":true,"id":1523,"linearizedBaseContracts":[1523],"name":"IERC1155Errors","nameLocation":"4434:14:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1478,"nodeType":"StructuredDocumentation","src":"4455:361:8","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."},"errorSelector":"03dee4c5","id":1488,"name":"ERC1155InsufficientBalance","nameLocation":"4827:26:8","nodeType":"ErrorDefinition","parameters":{"id":1487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1480,"mutability":"mutable","name":"sender","nameLocation":"4862:6:8","nodeType":"VariableDeclaration","scope":1488,"src":"4854:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1479,"name":"address","nodeType":"ElementaryTypeName","src":"4854:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1482,"mutability":"mutable","name":"balance","nameLocation":"4878:7:8","nodeType":"VariableDeclaration","scope":1488,"src":"4870:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1481,"name":"uint256","nodeType":"ElementaryTypeName","src":"4870:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1484,"mutability":"mutable","name":"needed","nameLocation":"4895:6:8","nodeType":"VariableDeclaration","scope":1488,"src":"4887:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1483,"name":"uint256","nodeType":"ElementaryTypeName","src":"4887:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1486,"mutability":"mutable","name":"tokenId","nameLocation":"4911:7:8","nodeType":"VariableDeclaration","scope":1488,"src":"4903:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1485,"name":"uint256","nodeType":"ElementaryTypeName","src":"4903:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4853:66:8"},"src":"4821:99:8"},{"documentation":{"id":1489,"nodeType":"StructuredDocumentation","src":"4926:152:8","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"01a83514","id":1493,"name":"ERC1155InvalidSender","nameLocation":"5089:20:8","nodeType":"ErrorDefinition","parameters":{"id":1492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1491,"mutability":"mutable","name":"sender","nameLocation":"5118:6:8","nodeType":"VariableDeclaration","scope":1493,"src":"5110:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1490,"name":"address","nodeType":"ElementaryTypeName","src":"5110:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5109:16:8"},"src":"5083:43:8"},{"documentation":{"id":1494,"nodeType":"StructuredDocumentation","src":"5132:159:8","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"57f447ce","id":1498,"name":"ERC1155InvalidReceiver","nameLocation":"5302:22:8","nodeType":"ErrorDefinition","parameters":{"id":1497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1496,"mutability":"mutable","name":"receiver","nameLocation":"5333:8:8","nodeType":"VariableDeclaration","scope":1498,"src":"5325:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1495,"name":"address","nodeType":"ElementaryTypeName","src":"5325:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5324:18:8"},"src":"5296:47:8"},{"documentation":{"id":1499,"nodeType":"StructuredDocumentation","src":"5349:256:8","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."},"errorSelector":"e237d922","id":1505,"name":"ERC1155MissingApprovalForAll","nameLocation":"5616:28:8","nodeType":"ErrorDefinition","parameters":{"id":1504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1501,"mutability":"mutable","name":"operator","nameLocation":"5653:8:8","nodeType":"VariableDeclaration","scope":1505,"src":"5645:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1500,"name":"address","nodeType":"ElementaryTypeName","src":"5645:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1503,"mutability":"mutable","name":"owner","nameLocation":"5671:5:8","nodeType":"VariableDeclaration","scope":1505,"src":"5663:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1502,"name":"address","nodeType":"ElementaryTypeName","src":"5663:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5644:33:8"},"src":"5610:68:8"},{"documentation":{"id":1506,"nodeType":"StructuredDocumentation","src":"5684:174:8","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"3e31884e","id":1510,"name":"ERC1155InvalidApprover","nameLocation":"5869:22:8","nodeType":"ErrorDefinition","parameters":{"id":1509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1508,"mutability":"mutable","name":"approver","nameLocation":"5900:8:8","nodeType":"VariableDeclaration","scope":1510,"src":"5892:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1507,"name":"address","nodeType":"ElementaryTypeName","src":"5892:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5891:18:8"},"src":"5863:47:8"},{"documentation":{"id":1511,"nodeType":"StructuredDocumentation","src":"5916:197:8","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"ced3e100","id":1515,"name":"ERC1155InvalidOperator","nameLocation":"6124:22:8","nodeType":"ErrorDefinition","parameters":{"id":1514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1513,"mutability":"mutable","name":"operator","nameLocation":"6155:8:8","nodeType":"VariableDeclaration","scope":1515,"src":"6147:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1512,"name":"address","nodeType":"ElementaryTypeName","src":"6147:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6146:18:8"},"src":"6118:47:8"},{"documentation":{"id":1516,"nodeType":"StructuredDocumentation","src":"6171:280:8","text":" @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"},"errorSelector":"5b059991","id":1522,"name":"ERC1155InvalidArrayLength","nameLocation":"6462:25:8","nodeType":"ErrorDefinition","parameters":{"id":1521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1518,"mutability":"mutable","name":"idsLength","nameLocation":"6496:9:8","nodeType":"VariableDeclaration","scope":1522,"src":"6488:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1517,"name":"uint256","nodeType":"ElementaryTypeName","src":"6488:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1520,"mutability":"mutable","name":"valuesLength","nameLocation":"6515:12:8","nodeType":"VariableDeclaration","scope":1522,"src":"6507:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1519,"name":"uint256","nodeType":"ElementaryTypeName","src":"6507:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6487:41:8"},"src":"6456:73:8"}],"scope":1524,"src":"4424:2107:8","usedErrors":[1488,1493,1498,1505,1510,1515,1522],"usedEvents":[]}],"src":"112:6420:8"},"id":8},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Context":[2772],"ERC165":[3051],"ERC721":[2532],"IERC165":[3063],"IERC721":[2649],"IERC721Errors":[1476],"IERC721Metadata":[2695],"IERC721Receiver":[2667],"Strings":[3027]},"id":2533,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1525,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:9"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":1527,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2533,"sourceUnit":2650,"src":"133:38:9","symbolAliases":[{"foreign":{"id":1526,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"141:7:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":1529,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2533,"sourceUnit":2668,"src":"172:54:9","symbolAliases":[{"foreign":{"id":1528,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"180:15:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":1531,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2533,"sourceUnit":2696,"src":"227:65:9","symbolAliases":[{"foreign":{"id":1530,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"235:15:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":1533,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2533,"sourceUnit":2773,"src":"293:48:9","symbolAliases":[{"foreign":{"id":1532,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2772,"src":"301:7:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":1535,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2533,"sourceUnit":3028,"src":"342:48:9","symbolAliases":[{"foreign":{"id":1534,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"350:7:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":1538,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2533,"sourceUnit":3052,"src":"391:69:9","symbolAliases":[{"foreign":{"id":1536,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"399:7:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1537,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3051,"src":"408:6:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","file":"../../interfaces/draft-IERC6093.sol","id":1540,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2533,"sourceUnit":1524,"src":"461:66:9","symbolAliases":[{"foreign":{"id":1539,"name":"IERC721Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"469:13:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1542,"name":"Context","nameLocations":["804:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":2772,"src":"804:7:9"},"id":1543,"nodeType":"InheritanceSpecifier","src":"804:7:9"},{"baseName":{"id":1544,"name":"ERC165","nameLocations":["813:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":3051,"src":"813:6:9"},"id":1545,"nodeType":"InheritanceSpecifier","src":"813:6:9"},{"baseName":{"id":1546,"name":"IERC721","nameLocations":["821:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":2649,"src":"821:7:9"},"id":1547,"nodeType":"InheritanceSpecifier","src":"821:7:9"},{"baseName":{"id":1548,"name":"IERC721Metadata","nameLocations":["830:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":2695,"src":"830:15:9"},"id":1549,"nodeType":"InheritanceSpecifier","src":"830:15:9"},{"baseName":{"id":1550,"name":"IERC721Errors","nameLocations":["847:13:9"],"nodeType":"IdentifierPath","referencedDeclaration":1476,"src":"847:13:9"},"id":1551,"nodeType":"InheritanceSpecifier","src":"847:13:9"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":1541,"nodeType":"StructuredDocumentation","src":"529:246:9","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":2532,"linearizedBaseContracts":[2532,1476,2695,2649,3051,3063,2772],"name":"ERC721","nameLocation":"794:6:9","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1554,"libraryName":{"id":1552,"name":"Strings","nameLocations":["873:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":3027,"src":"873:7:9"},"nodeType":"UsingForDirective","src":"867:26:9","typeName":{"id":1553,"name":"uint256","nodeType":"ElementaryTypeName","src":"885:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":1556,"mutability":"mutable","name":"_name","nameLocation":"932:5:9","nodeType":"VariableDeclaration","scope":2532,"src":"917:20:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1555,"name":"string","nodeType":"ElementaryTypeName","src":"917:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":1558,"mutability":"mutable","name":"_symbol","nameLocation":"979:7:9","nodeType":"VariableDeclaration","scope":2532,"src":"964:22:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1557,"name":"string","nodeType":"ElementaryTypeName","src":"964:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":1562,"mutability":"mutable","name":"_owners","nameLocation":"1037:7:9","nodeType":"VariableDeclaration","scope":2532,"src":"993:51:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":1561,"keyName":"tokenId","keyNameLocation":"1009:7:9","keyType":{"id":1559,"name":"uint256","nodeType":"ElementaryTypeName","src":"1001:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"993:35:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1560,"name":"address","nodeType":"ElementaryTypeName","src":"1020:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":1566,"mutability":"mutable","name":"_balances","nameLocation":"1093:9:9","nodeType":"VariableDeclaration","scope":2532,"src":"1051:51:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1565,"keyName":"owner","keyNameLocation":"1067:5:9","keyType":{"id":1563,"name":"address","nodeType":"ElementaryTypeName","src":"1059:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1051:33:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1564,"name":"uint256","nodeType":"ElementaryTypeName","src":"1076:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":1570,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1153:15:9","nodeType":"VariableDeclaration","scope":2532,"src":"1109:59:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":1569,"keyName":"tokenId","keyNameLocation":"1125:7:9","keyType":{"id":1567,"name":"uint256","nodeType":"ElementaryTypeName","src":"1117:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1109:35:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1568,"name":"address","nodeType":"ElementaryTypeName","src":"1136:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":1576,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1243:18:9","nodeType":"VariableDeclaration","scope":2532,"src":"1175:86:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":1575,"keyName":"owner","keyNameLocation":"1191:5:9","keyType":{"id":1571,"name":"address","nodeType":"ElementaryTypeName","src":"1183:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1175:59:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1574,"keyName":"operator","keyNameLocation":"1216:8:9","keyType":{"id":1572,"name":"address","nodeType":"ElementaryTypeName","src":"1208:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1200:33:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1573,"name":"bool","nodeType":"ElementaryTypeName","src":"1228:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":1592,"nodeType":"Block","src":"1437:57:9","statements":[{"expression":{"id":1586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1584,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"1447:5:9","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1585,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"1455:5:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1447:13:9","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1587,"nodeType":"ExpressionStatement","src":"1447:13:9"},{"expression":{"id":1590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1588,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"1470:7:9","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1589,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1581,"src":"1480:7:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1470:17:9","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1591,"nodeType":"ExpressionStatement","src":"1470:17:9"}]},"documentation":{"id":1577,"nodeType":"StructuredDocumentation","src":"1268:108:9","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":1593,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1579,"mutability":"mutable","name":"name_","nameLocation":"1407:5:9","nodeType":"VariableDeclaration","scope":1593,"src":"1393:19:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1578,"name":"string","nodeType":"ElementaryTypeName","src":"1393:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1581,"mutability":"mutable","name":"symbol_","nameLocation":"1428:7:9","nodeType":"VariableDeclaration","scope":1593,"src":"1414:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1580,"name":"string","nodeType":"ElementaryTypeName","src":"1414:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1392:44:9"},"returnParameters":{"id":1583,"nodeType":"ParameterList","parameters":[],"src":"1437:0:9"},"scope":2532,"src":"1381:113:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3050,3062],"body":{"id":1623,"nodeType":"Block","src":"1669:192:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1604,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"1698:11:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1606,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"1718:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$2649_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$2649_$","typeString":"type(contract IERC721)"}],"id":1605,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"1713:4:9","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1713:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$2649","typeString":"type(contract IERC721)"}},"id":1608,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1727:11:9","memberName":"interfaceId","nodeType":"MemberAccess","src":"1713:25:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1698:40:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1610,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"1754:11:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1612,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"1774:15:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$2695_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$2695_$","typeString":"type(contract IERC721Metadata)"}],"id":1611,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"1769:4:9","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1769:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$2695","typeString":"type(contract IERC721Metadata)"}},"id":1614,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1791:11:9","memberName":"interfaceId","nodeType":"MemberAccess","src":"1769:33:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1754:48:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1698:104:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1619,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"1842:11:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":1617,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967271,"src":"1818:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$2532_$","typeString":"type(contract super ERC721)"}},"id":1618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1824:17:9","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3050,"src":"1818:23:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":1620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1818:36:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1698:156:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1603,"id":1622,"nodeType":"Return","src":"1679:175:9"}]},"documentation":{"id":1594,"nodeType":"StructuredDocumentation","src":"1500:56:9","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1624,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1570:17:9","nodeType":"FunctionDefinition","overrides":{"id":1600,"nodeType":"OverrideSpecifier","overrides":[{"id":1598,"name":"ERC165","nameLocations":["1637:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":3051,"src":"1637:6:9"},{"id":1599,"name":"IERC165","nameLocations":["1645:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":3063,"src":"1645:7:9"}],"src":"1628:25:9"},"parameters":{"id":1597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1596,"mutability":"mutable","name":"interfaceId","nameLocation":"1595:11:9","nodeType":"VariableDeclaration","scope":1624,"src":"1588:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1595,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1588:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1587:20:9"},"returnParameters":{"id":1603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1602,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1624,"src":"1663:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1601,"name":"bool","nodeType":"ElementaryTypeName","src":"1663:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1662:6:9"},"scope":2532,"src":"1561:300:9","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2574],"body":{"id":1651,"nodeType":"Block","src":"1992:136:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1632,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1627,"src":"2006:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2023:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1634,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2015:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1633,"name":"address","nodeType":"ElementaryTypeName","src":"2015:7:9","typeDescriptions":{}}},"id":1636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2015:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2006:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1646,"nodeType":"IfStatement","src":"2002:87:9","trueBody":{"id":1645,"nodeType":"Block","src":"2027:62:9","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2075:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2067:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1639,"name":"address","nodeType":"ElementaryTypeName","src":"2067:7:9","typeDescriptions":{}}},"id":1642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2067:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1638,"name":"ERC721InvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"2048:18:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2048:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1644,"nodeType":"RevertStatement","src":"2041:37:9"}]}},{"expression":{"baseExpression":{"id":1647,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1566,"src":"2105:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1649,"indexExpression":{"id":1648,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1627,"src":"2115:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2105:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1631,"id":1650,"nodeType":"Return","src":"2098:23:9"}]},"documentation":{"id":1625,"nodeType":"StructuredDocumentation","src":"1867:48:9","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":1652,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1929:9:9","nodeType":"FunctionDefinition","parameters":{"id":1628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1627,"mutability":"mutable","name":"owner","nameLocation":"1947:5:9","nodeType":"VariableDeclaration","scope":1652,"src":"1939:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1626,"name":"address","nodeType":"ElementaryTypeName","src":"1939:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1938:15:9"},"returnParameters":{"id":1631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1630,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1652,"src":"1983:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1629,"name":"uint256","nodeType":"ElementaryTypeName","src":"1983:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1982:9:9"},"scope":2532,"src":"1920:208:9","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2582],"body":{"id":1664,"nodeType":"Block","src":"2257:46:9","statements":[{"expression":{"arguments":[{"id":1661,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1655,"src":"2288:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1660,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"2274:13:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2274:22:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1659,"id":1663,"nodeType":"Return","src":"2267:29:9"}]},"documentation":{"id":1653,"nodeType":"StructuredDocumentation","src":"2134:46:9","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":1665,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2194:7:9","nodeType":"FunctionDefinition","parameters":{"id":1656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1655,"mutability":"mutable","name":"tokenId","nameLocation":"2210:7:9","nodeType":"VariableDeclaration","scope":1665,"src":"2202:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1654,"name":"uint256","nodeType":"ElementaryTypeName","src":"2202:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2201:17:9"},"returnParameters":{"id":1659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1658,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1665,"src":"2248:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1657,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2247:9:9"},"scope":2532,"src":"2185:118:9","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2680],"body":{"id":1673,"nodeType":"Block","src":"2425:29:9","statements":[{"expression":{"id":1671,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"2442:5:9","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1670,"id":1672,"nodeType":"Return","src":"2435:12:9"}]},"documentation":{"id":1666,"nodeType":"StructuredDocumentation","src":"2309:51:9","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":1674,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2374:4:9","nodeType":"FunctionDefinition","parameters":{"id":1667,"nodeType":"ParameterList","parameters":[],"src":"2378:2:9"},"returnParameters":{"id":1670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1669,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1674,"src":"2410:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1668,"name":"string","nodeType":"ElementaryTypeName","src":"2410:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2409:15:9"},"scope":2532,"src":"2365:89:9","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2686],"body":{"id":1682,"nodeType":"Block","src":"2580:31:9","statements":[{"expression":{"id":1680,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"2597:7:9","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1679,"id":1681,"nodeType":"Return","src":"2590:14:9"}]},"documentation":{"id":1675,"nodeType":"StructuredDocumentation","src":"2460:53:9","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":1683,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2527:6:9","nodeType":"FunctionDefinition","parameters":{"id":1676,"nodeType":"ParameterList","parameters":[],"src":"2533:2:9"},"returnParameters":{"id":1679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1678,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1683,"src":"2565:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1677,"name":"string","nodeType":"ElementaryTypeName","src":"2565:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2564:15:9"},"scope":2532,"src":"2518:93:9","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2694],"body":{"id":1718,"nodeType":"Block","src":"2756:176:9","statements":[{"expression":{"arguments":[{"id":1692,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"2780:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1691,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"2766:13:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2766:22:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1694,"nodeType":"ExpressionStatement","src":"2766:22:9"},{"assignments":[1696],"declarations":[{"constant":false,"id":1696,"mutability":"mutable","name":"baseURI","nameLocation":"2813:7:9","nodeType":"VariableDeclaration","scope":1718,"src":"2799:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1695,"name":"string","nodeType":"ElementaryTypeName","src":"2799:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1699,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1697,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1728,"src":"2823:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":1698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2823:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2799:34:9"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1702,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1696,"src":"2856:7:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1701,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2850:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1700,"name":"bytes","nodeType":"ElementaryTypeName","src":"2850:5:9","typeDescriptions":{}}},"id":1703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2850:14:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2865:6:9","memberName":"length","nodeType":"MemberAccess","src":"2850:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2874:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2850:25:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2923:2:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2850:75:9","trueExpression":{"arguments":[{"id":1710,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1696,"src":"2892:7:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1711,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"2901:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2909:8:9","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":2840,"src":"2901:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2901:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1708,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2878:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1707,"name":"string","nodeType":"ElementaryTypeName","src":"2878:6:9","typeDescriptions":{}}},"id":1709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2885:6:9","memberName":"concat","nodeType":"MemberAccess","src":"2878:13:9","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2878:42:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1690,"id":1717,"nodeType":"Return","src":"2843:82:9"}]},"documentation":{"id":1684,"nodeType":"StructuredDocumentation","src":"2617:55:9","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":1719,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2686:8:9","nodeType":"FunctionDefinition","parameters":{"id":1687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1686,"mutability":"mutable","name":"tokenId","nameLocation":"2703:7:9","nodeType":"VariableDeclaration","scope":1719,"src":"2695:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1685,"name":"uint256","nodeType":"ElementaryTypeName","src":"2695:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2694:17:9"},"returnParameters":{"id":1690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1689,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1719,"src":"2741:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1688,"name":"string","nodeType":"ElementaryTypeName","src":"2741:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2740:15:9"},"scope":2532,"src":"2677:255:9","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1727,"nodeType":"Block","src":"3240:26:9","statements":[{"expression":{"hexValue":"","id":1725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3257:2:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":1724,"id":1726,"nodeType":"Return","src":"3250:9:9"}]},"documentation":{"id":1720,"nodeType":"StructuredDocumentation","src":"2938:231:9","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":1728,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3183:8:9","nodeType":"FunctionDefinition","parameters":{"id":1721,"nodeType":"ParameterList","parameters":[],"src":"3191:2:9"},"returnParameters":{"id":1724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1723,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1728,"src":"3225:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1722,"name":"string","nodeType":"ElementaryTypeName","src":"3225:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3224:15:9"},"scope":2532,"src":"3174:92:9","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[2622],"body":{"id":1743,"nodeType":"Block","src":"3384:52:9","statements":[{"expression":{"arguments":[{"id":1737,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"3403:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1738,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1733,"src":"3407:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1739,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"3416:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3416:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1736,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[2335,2401],"referencedDeclaration":2335,"src":"3394:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address)"}},"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3394:35:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1742,"nodeType":"ExpressionStatement","src":"3394:35:9"}]},"documentation":{"id":1729,"nodeType":"StructuredDocumentation","src":"3272:46:9","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":1744,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3332:7:9","nodeType":"FunctionDefinition","parameters":{"id":1734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1731,"mutability":"mutable","name":"to","nameLocation":"3348:2:9","nodeType":"VariableDeclaration","scope":1744,"src":"3340:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1730,"name":"address","nodeType":"ElementaryTypeName","src":"3340:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1733,"mutability":"mutable","name":"tokenId","nameLocation":"3360:7:9","nodeType":"VariableDeclaration","scope":1744,"src":"3352:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1732,"name":"uint256","nodeType":"ElementaryTypeName","src":"3352:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3339:29:9"},"returnParameters":{"id":1735,"nodeType":"ParameterList","parameters":[],"src":"3384:0:9"},"scope":2532,"src":"3323:113:9","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2638],"body":{"id":1760,"nodeType":"Block","src":"3573:78:9","statements":[{"expression":{"arguments":[{"id":1753,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1747,"src":"3597:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1752,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"3583:13:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3583:22:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1755,"nodeType":"ExpressionStatement","src":"3583:22:9"},{"expression":{"arguments":[{"id":1757,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1747,"src":"3636:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1756,"name":"_getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"3623:12:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3623:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1751,"id":1759,"nodeType":"Return","src":"3616:28:9"}]},"documentation":{"id":1745,"nodeType":"StructuredDocumentation","src":"3442:50:9","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":1761,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3506:11:9","nodeType":"FunctionDefinition","parameters":{"id":1748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1747,"mutability":"mutable","name":"tokenId","nameLocation":"3526:7:9","nodeType":"VariableDeclaration","scope":1761,"src":"3518:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1746,"name":"uint256","nodeType":"ElementaryTypeName","src":"3518:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3517:17:9"},"returnParameters":{"id":1751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1750,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1761,"src":"3564:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1749,"name":"address","nodeType":"ElementaryTypeName","src":"3564:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3563:9:9"},"scope":2532,"src":"3497:154:9","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2630],"body":{"id":1776,"nodeType":"Block","src":"3793:69:9","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1770,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"3822:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1772,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1764,"src":"3836:8:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1773,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"3846:8:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1769,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2438,"src":"3803:18:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3803:52:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1775,"nodeType":"ExpressionStatement","src":"3803:52:9"}]},"documentation":{"id":1762,"nodeType":"StructuredDocumentation","src":"3657:56:9","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":1777,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"3727:17:9","nodeType":"FunctionDefinition","parameters":{"id":1767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1764,"mutability":"mutable","name":"operator","nameLocation":"3753:8:9","nodeType":"VariableDeclaration","scope":1777,"src":"3745:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1763,"name":"address","nodeType":"ElementaryTypeName","src":"3745:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1766,"mutability":"mutable","name":"approved","nameLocation":"3768:8:9","nodeType":"VariableDeclaration","scope":1777,"src":"3763:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1765,"name":"bool","nodeType":"ElementaryTypeName","src":"3763:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3744:33:9"},"returnParameters":{"id":1768,"nodeType":"ParameterList","parameters":[],"src":"3793:0:9"},"scope":2532,"src":"3718:144:9","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2648],"body":{"id":1793,"nodeType":"Block","src":"4022:59:9","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":1787,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"4039:18:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1789,"indexExpression":{"id":1788,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"4058:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4039:25:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1791,"indexExpression":{"id":1790,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1782,"src":"4065:8:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4039:35:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1786,"id":1792,"nodeType":"Return","src":"4032:42:9"}]},"documentation":{"id":1778,"nodeType":"StructuredDocumentation","src":"3868:55:9","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":1794,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"3937:16:9","nodeType":"FunctionDefinition","parameters":{"id":1783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1780,"mutability":"mutable","name":"owner","nameLocation":"3962:5:9","nodeType":"VariableDeclaration","scope":1794,"src":"3954:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1779,"name":"address","nodeType":"ElementaryTypeName","src":"3954:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1782,"mutability":"mutable","name":"operator","nameLocation":"3977:8:9","nodeType":"VariableDeclaration","scope":1794,"src":"3969:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1781,"name":"address","nodeType":"ElementaryTypeName","src":"3969:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3953:33:9"},"returnParameters":{"id":1786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1785,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1794,"src":"4016:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1784,"name":"bool","nodeType":"ElementaryTypeName","src":"4016:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4015:6:9"},"scope":2532,"src":"3928:153:9","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2614],"body":{"id":1839,"nodeType":"Block","src":"4223:498:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1804,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"4237:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4251:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1806,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4243:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1805,"name":"address","nodeType":"ElementaryTypeName","src":"4243:7:9","typeDescriptions":{}}},"id":1808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4243:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4237:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1818,"nodeType":"IfStatement","src":"4233:87:9","trueBody":{"id":1817,"nodeType":"Block","src":"4255:65:9","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4306:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1812,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4298:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1811,"name":"address","nodeType":"ElementaryTypeName","src":"4298:7:9","typeDescriptions":{}}},"id":1814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4298:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1810,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"4276:21:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4276:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1816,"nodeType":"RevertStatement","src":"4269:40:9"}]}},{"assignments":[1820],"declarations":[{"constant":false,"id":1820,"mutability":"mutable","name":"previousOwner","nameLocation":"4546:13:9","nodeType":"VariableDeclaration","scope":1839,"src":"4538:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1819,"name":"address","nodeType":"ElementaryTypeName","src":"4538:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1827,"initialValue":{"arguments":[{"id":1822,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"4570:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1823,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"4574:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1824,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"4583:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4583:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1821,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"4562:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":1826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4562:34:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4538:58:9"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1828,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"4610:13:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1829,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1797,"src":"4627:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4610:21:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1838,"nodeType":"IfStatement","src":"4606:109:9","trueBody":{"id":1837,"nodeType":"Block","src":"4633:82:9","statements":[{"errorCall":{"arguments":[{"id":1832,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1797,"src":"4675:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1833,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"4681:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1834,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"4690:13:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1831,"name":"ERC721IncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"4654:20:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address) pure"}},"id":1835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4654:50:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1836,"nodeType":"RevertStatement","src":"4647:57:9"}]}}]},"documentation":{"id":1795,"nodeType":"StructuredDocumentation","src":"4087:51:9","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":1840,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4152:12:9","nodeType":"FunctionDefinition","parameters":{"id":1802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1797,"mutability":"mutable","name":"from","nameLocation":"4173:4:9","nodeType":"VariableDeclaration","scope":1840,"src":"4165:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1796,"name":"address","nodeType":"ElementaryTypeName","src":"4165:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1799,"mutability":"mutable","name":"to","nameLocation":"4187:2:9","nodeType":"VariableDeclaration","scope":1840,"src":"4179:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1798,"name":"address","nodeType":"ElementaryTypeName","src":"4179:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1801,"mutability":"mutable","name":"tokenId","nameLocation":"4199:7:9","nodeType":"VariableDeclaration","scope":1840,"src":"4191:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1800,"name":"uint256","nodeType":"ElementaryTypeName","src":"4191:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4164:43:9"},"returnParameters":{"id":1803,"nodeType":"ParameterList","parameters":[],"src":"4223:0:9"},"scope":2532,"src":"4143:578:9","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2604],"body":{"id":1857,"nodeType":"Block","src":"4863:56:9","statements":[{"expression":{"arguments":[{"id":1851,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1843,"src":"4890:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1852,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1845,"src":"4896:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1853,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1847,"src":"4900:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":1854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4909:2:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1850,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[1858,1884],"referencedDeclaration":1884,"src":"4873:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:39:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1856,"nodeType":"ExpressionStatement","src":"4873:39:9"}]},"documentation":{"id":1841,"nodeType":"StructuredDocumentation","src":"4727:55:9","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":1858,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4796:16:9","nodeType":"FunctionDefinition","parameters":{"id":1848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1843,"mutability":"mutable","name":"from","nameLocation":"4821:4:9","nodeType":"VariableDeclaration","scope":1858,"src":"4813:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1842,"name":"address","nodeType":"ElementaryTypeName","src":"4813:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1845,"mutability":"mutable","name":"to","nameLocation":"4835:2:9","nodeType":"VariableDeclaration","scope":1858,"src":"4827:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1844,"name":"address","nodeType":"ElementaryTypeName","src":"4827:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1847,"mutability":"mutable","name":"tokenId","nameLocation":"4847:7:9","nodeType":"VariableDeclaration","scope":1858,"src":"4839:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1846,"name":"uint256","nodeType":"ElementaryTypeName","src":"4839:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4812:43:9"},"returnParameters":{"id":1849,"nodeType":"ParameterList","parameters":[],"src":"4863:0:9"},"scope":2532,"src":"4787:132:9","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[2594],"body":{"id":1883,"nodeType":"Block","src":"5088:105:9","statements":[{"expression":{"arguments":[{"id":1871,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"5111:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1872,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1863,"src":"5117:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1873,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"5121:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1870,"name":"transferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1840,"src":"5098:12:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5098:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1875,"nodeType":"ExpressionStatement","src":"5098:31:9"},{"expression":{"arguments":[{"id":1877,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"5162:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1878,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1863,"src":"5168:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1879,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"5172:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1880,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"5181:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1876,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"5139:22:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5139:47:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1882,"nodeType":"ExpressionStatement","src":"5139:47:9"}]},"documentation":{"id":1859,"nodeType":"StructuredDocumentation","src":"4925:55:9","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":1884,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4994:16:9","nodeType":"FunctionDefinition","parameters":{"id":1868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1861,"mutability":"mutable","name":"from","nameLocation":"5019:4:9","nodeType":"VariableDeclaration","scope":1884,"src":"5011:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1860,"name":"address","nodeType":"ElementaryTypeName","src":"5011:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1863,"mutability":"mutable","name":"to","nameLocation":"5033:2:9","nodeType":"VariableDeclaration","scope":1884,"src":"5025:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1862,"name":"address","nodeType":"ElementaryTypeName","src":"5025:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1865,"mutability":"mutable","name":"tokenId","nameLocation":"5045:7:9","nodeType":"VariableDeclaration","scope":1884,"src":"5037:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1864,"name":"uint256","nodeType":"ElementaryTypeName","src":"5037:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1867,"mutability":"mutable","name":"data","nameLocation":"5067:4:9","nodeType":"VariableDeclaration","scope":1884,"src":"5054:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1866,"name":"bytes","nodeType":"ElementaryTypeName","src":"5054:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5010:62:9"},"returnParameters":{"id":1869,"nodeType":"ParameterList","parameters":[],"src":"5088:0:9"},"scope":2532,"src":"4985:208:9","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1896,"nodeType":"Block","src":"5782:40:9","statements":[{"expression":{"baseExpression":{"id":1892,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1562,"src":"5799:7:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1894,"indexExpression":{"id":1893,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1887,"src":"5807:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5799:16:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1891,"id":1895,"nodeType":"Return","src":"5792:23:9"}]},"documentation":{"id":1885,"nodeType":"StructuredDocumentation","src":"5199:503:9","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`."},"id":1897,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"5716:8:9","nodeType":"FunctionDefinition","parameters":{"id":1888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1887,"mutability":"mutable","name":"tokenId","nameLocation":"5733:7:9","nodeType":"VariableDeclaration","scope":1897,"src":"5725:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1886,"name":"uint256","nodeType":"ElementaryTypeName","src":"5725:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5724:17:9"},"returnParameters":{"id":1891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1890,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1897,"src":"5773:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1889,"name":"address","nodeType":"ElementaryTypeName","src":"5773:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5772:9:9"},"scope":2532,"src":"5707:115:9","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1909,"nodeType":"Block","src":"6017:48:9","statements":[{"expression":{"baseExpression":{"id":1905,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"6034:15:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1907,"indexExpression":{"id":1906,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1900,"src":"6050:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6034:24:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1904,"id":1908,"nodeType":"Return","src":"6027:31:9"}]},"documentation":{"id":1898,"nodeType":"StructuredDocumentation","src":"5828:105:9","text":" @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted."},"id":1910,"implemented":true,"kind":"function","modifiers":[],"name":"_getApproved","nameLocation":"5947:12:9","nodeType":"FunctionDefinition","parameters":{"id":1901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1900,"mutability":"mutable","name":"tokenId","nameLocation":"5968:7:9","nodeType":"VariableDeclaration","scope":1910,"src":"5960:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1899,"name":"uint256","nodeType":"ElementaryTypeName","src":"5960:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5959:17:9"},"returnParameters":{"id":1904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1903,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1910,"src":"6008:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1902,"name":"address","nodeType":"ElementaryTypeName","src":"6008:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6007:9:9"},"scope":2532,"src":"5938:127:9","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1945,"nodeType":"Block","src":"6485:163:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1922,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"6514:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6533:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1924,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6525:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1923,"name":"address","nodeType":"ElementaryTypeName","src":"6525:7:9","typeDescriptions":{}}},"id":1926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6525:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6514:21:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1928,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"6552:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1929,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"6561:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6552:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1932,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"6589:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1933,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"6596:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1931,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1794,"src":"6572:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6572:32:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6552:52:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1937,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1917,"src":"6621:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1936,"name":"_getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"6608:12:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6608:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1939,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"6633:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6608:32:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6552:88:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1942,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6551:90:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6514:127:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1921,"id":1944,"nodeType":"Return","src":"6495:146:9"}]},"documentation":{"id":1911,"nodeType":"StructuredDocumentation","src":"6071:300:9","text":" @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n particular (ignoring whether it is owned by `owner`).\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."},"id":1946,"implemented":true,"kind":"function","modifiers":[],"name":"_isAuthorized","nameLocation":"6385:13:9","nodeType":"FunctionDefinition","parameters":{"id":1918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1913,"mutability":"mutable","name":"owner","nameLocation":"6407:5:9","nodeType":"VariableDeclaration","scope":1946,"src":"6399:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1912,"name":"address","nodeType":"ElementaryTypeName","src":"6399:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1915,"mutability":"mutable","name":"spender","nameLocation":"6422:7:9","nodeType":"VariableDeclaration","scope":1946,"src":"6414:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1914,"name":"address","nodeType":"ElementaryTypeName","src":"6414:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1917,"mutability":"mutable","name":"tokenId","nameLocation":"6439:7:9","nodeType":"VariableDeclaration","scope":1946,"src":"6431:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1916,"name":"uint256","nodeType":"ElementaryTypeName","src":"6431:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6398:49:9"},"returnParameters":{"id":1921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1920,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1946,"src":"6479:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1919,"name":"bool","nodeType":"ElementaryTypeName","src":"6479:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6478:6:9"},"scope":2532,"src":"6376:272:9","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1982,"nodeType":"Block","src":"7179:271:9","statements":[{"condition":{"id":1961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7193:39:9","subExpression":{"arguments":[{"id":1957,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"7208:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1958,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1951,"src":"7215:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1959,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"7224:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1956,"name":"_isAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"7194:13:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) view returns (bool)"}},"id":1960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7194:38:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1981,"nodeType":"IfStatement","src":"7189:255:9","trueBody":{"id":1980,"nodeType":"Block","src":"7234:210:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1962,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"7252:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7269:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1964,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7261:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1963,"name":"address","nodeType":"ElementaryTypeName","src":"7261:7:9","typeDescriptions":{}}},"id":1966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7261:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7252:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1978,"nodeType":"Block","src":"7350:84:9","statements":[{"errorCall":{"arguments":[{"id":1974,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1951,"src":"7402:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1975,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"7411:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1973,"name":"ERC721InsufficientApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"7375:26:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7375:44:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1977,"nodeType":"RevertStatement","src":"7368:51:9"}]},"id":1979,"nodeType":"IfStatement","src":"7248:186:9","trueBody":{"id":1972,"nodeType":"Block","src":"7273:71:9","statements":[{"errorCall":{"arguments":[{"id":1969,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"7321:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1968,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"7298:22:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7298:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1971,"nodeType":"RevertStatement","src":"7291:38:9"}]}}]}}]},"documentation":{"id":1947,"nodeType":"StructuredDocumentation","src":"6654:423:9","text":" @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n the `spender` for the specific `tokenId`.\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."},"id":1983,"implemented":true,"kind":"function","modifiers":[],"name":"_checkAuthorized","nameLocation":"7091:16:9","nodeType":"FunctionDefinition","parameters":{"id":1954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1949,"mutability":"mutable","name":"owner","nameLocation":"7116:5:9","nodeType":"VariableDeclaration","scope":1983,"src":"7108:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1948,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1951,"mutability":"mutable","name":"spender","nameLocation":"7131:7:9","nodeType":"VariableDeclaration","scope":1983,"src":"7123:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1950,"name":"address","nodeType":"ElementaryTypeName","src":"7123:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1953,"mutability":"mutable","name":"tokenId","nameLocation":"7148:7:9","nodeType":"VariableDeclaration","scope":1983,"src":"7140:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1952,"name":"uint256","nodeType":"ElementaryTypeName","src":"7140:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7107:49:9"},"returnParameters":{"id":1955,"nodeType":"ParameterList","parameters":[],"src":"7179:0:9"},"scope":2532,"src":"7082:368:9","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1998,"nodeType":"Block","src":"8167:78:9","statements":[{"id":1997,"nodeType":"UncheckedBlock","src":"8177:62:9","statements":[{"expression":{"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1991,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1566,"src":"8201:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1993,"indexExpression":{"id":1992,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1986,"src":"8211:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8201:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1994,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"8223:5:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"8201:27:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1996,"nodeType":"ExpressionStatement","src":"8201:27:9"}]}]},"documentation":{"id":1984,"nodeType":"StructuredDocumentation","src":"7456:631:9","text":" @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n remain consistent with one another."},"id":1999,"implemented":true,"kind":"function","modifiers":[],"name":"_increaseBalance","nameLocation":"8101:16:9","nodeType":"FunctionDefinition","parameters":{"id":1989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1986,"mutability":"mutable","name":"account","nameLocation":"8126:7:9","nodeType":"VariableDeclaration","scope":1999,"src":"8118:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1985,"name":"address","nodeType":"ElementaryTypeName","src":"8118:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1988,"mutability":"mutable","name":"value","nameLocation":"8143:5:9","nodeType":"VariableDeclaration","scope":1999,"src":"8135:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1987,"name":"uint128","nodeType":"ElementaryTypeName","src":"8135:7:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"8117:32:9"},"returnParameters":{"id":1990,"nodeType":"ParameterList","parameters":[],"src":"8167:0:9"},"scope":2532,"src":"8092:153:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2088,"nodeType":"Block","src":"8933:700:9","statements":[{"assignments":[2012],"declarations":[{"constant":false,"id":2012,"mutability":"mutable","name":"from","nameLocation":"8951:4:9","nodeType":"VariableDeclaration","scope":2088,"src":"8943:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2011,"name":"address","nodeType":"ElementaryTypeName","src":"8943:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2016,"initialValue":{"arguments":[{"id":2014,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"8967:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2013,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1897,"src":"8958:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8958:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8943:32:9"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2017,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2006,"src":"9035:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9051:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2019,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9043:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2018,"name":"address","nodeType":"ElementaryTypeName","src":"9043:7:9","typeDescriptions":{}}},"id":2021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9043:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9035:18:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2030,"nodeType":"IfStatement","src":"9031:86:9","trueBody":{"id":2029,"nodeType":"Block","src":"9055:62:9","statements":[{"expression":{"arguments":[{"id":2024,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2012,"src":"9086:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2025,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2006,"src":"9092:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2026,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"9098:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2023,"name":"_checkAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1983,"src":"9069:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) view"}},"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9069:37:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2028,"nodeType":"ExpressionStatement","src":"9069:37:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2031,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2012,"src":"9161:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9177:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2033,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9169:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2032,"name":"address","nodeType":"ElementaryTypeName","src":"9169:7:9","typeDescriptions":{}}},"id":2035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9169:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9161:18:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2058,"nodeType":"IfStatement","src":"9157:256:9","trueBody":{"id":2057,"nodeType":"Block","src":"9181:232:9","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9294:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2039,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9286:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2038,"name":"address","nodeType":"ElementaryTypeName","src":"9286:7:9","typeDescriptions":{}}},"id":2041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9286:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2042,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"9298:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":2045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9315:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2044,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9307:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2043,"name":"address","nodeType":"ElementaryTypeName","src":"9307:7:9","typeDescriptions":{}}},"id":2046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9307:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"66616c7365","id":2047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9319:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2037,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[2335,2401],"referencedDeclaration":2401,"src":"9277:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,uint256,address,bool)"}},"id":2048,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9277:48:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2049,"nodeType":"ExpressionStatement","src":"9277:48:9"},{"id":2056,"nodeType":"UncheckedBlock","src":"9340:63:9","statements":[{"expression":{"id":2054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2050,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1566,"src":"9368:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2052,"indexExpression":{"id":2051,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2012,"src":"9378:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9368:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":2053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9387:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9368:20:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2055,"nodeType":"ExpressionStatement","src":"9368:20:9"}]}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2059,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"9427:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9441:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2061,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9433:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2060,"name":"address","nodeType":"ElementaryTypeName","src":"9433:7:9","typeDescriptions":{}}},"id":2063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9433:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9427:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2073,"nodeType":"IfStatement","src":"9423:107:9","trueBody":{"id":2072,"nodeType":"Block","src":"9445:85:9","statements":[{"id":2071,"nodeType":"UncheckedBlock","src":"9459:61:9","statements":[{"expression":{"id":2069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2065,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1566,"src":"9487:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2067,"indexExpression":{"id":2066,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"9497:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9487:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9504:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9487:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2070,"nodeType":"ExpressionStatement","src":"9487:18:9"}]}]}},{"expression":{"id":2078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2074,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1562,"src":"9540:7:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2076,"indexExpression":{"id":2075,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"9548:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9540:16:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2077,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"9559:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9540:21:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2079,"nodeType":"ExpressionStatement","src":"9540:21:9"},{"eventCall":{"arguments":[{"id":2081,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2012,"src":"9586:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2082,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"9592:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2083,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"9596:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2080,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2548,"src":"9577:8:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9577:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2085,"nodeType":"EmitStatement","src":"9572:32:9"},{"expression":{"id":2086,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2012,"src":"9622:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2010,"id":2087,"nodeType":"Return","src":"9615:11:9"}]},"documentation":{"id":2000,"nodeType":"StructuredDocumentation","src":"8251:582:9","text":" @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n The `auth` argument is optional. If the value passed is non 0, then this function will check that\n `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n Emits a {Transfer} event.\n NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}."},"id":2089,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"8847:7:9","nodeType":"FunctionDefinition","parameters":{"id":2007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2002,"mutability":"mutable","name":"to","nameLocation":"8863:2:9","nodeType":"VariableDeclaration","scope":2089,"src":"8855:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2001,"name":"address","nodeType":"ElementaryTypeName","src":"8855:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2004,"mutability":"mutable","name":"tokenId","nameLocation":"8875:7:9","nodeType":"VariableDeclaration","scope":2089,"src":"8867:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2003,"name":"uint256","nodeType":"ElementaryTypeName","src":"8867:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2006,"mutability":"mutable","name":"auth","nameLocation":"8892:4:9","nodeType":"VariableDeclaration","scope":2089,"src":"8884:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2005,"name":"address","nodeType":"ElementaryTypeName","src":"8884:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8854:43:9"},"returnParameters":{"id":2010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2009,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2089,"src":"8924:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2008,"name":"address","nodeType":"ElementaryTypeName","src":"8924:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8923:9:9"},"scope":2532,"src":"8838:795:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2138,"nodeType":"Block","src":"10008:274:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2097,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"10022:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10036:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2099,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10028:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2098,"name":"address","nodeType":"ElementaryTypeName","src":"10028:7:9","typeDescriptions":{}}},"id":2101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10028:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10022:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2111,"nodeType":"IfStatement","src":"10018:87:9","trueBody":{"id":2110,"nodeType":"Block","src":"10040:65:9","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10091:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2105,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10083:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2104,"name":"address","nodeType":"ElementaryTypeName","src":"10083:7:9","typeDescriptions":{}}},"id":2107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10083:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2103,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"10061:21:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10061:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2109,"nodeType":"RevertStatement","src":"10054:40:9"}]}},{"assignments":[2113],"declarations":[{"constant":false,"id":2113,"mutability":"mutable","name":"previousOwner","nameLocation":"10122:13:9","nodeType":"VariableDeclaration","scope":2138,"src":"10114:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2112,"name":"address","nodeType":"ElementaryTypeName","src":"10114:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2122,"initialValue":{"arguments":[{"id":2115,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"10146:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2116,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"10150:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":2119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2118,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10159:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2117,"name":"address","nodeType":"ElementaryTypeName","src":"10159:7:9","typeDescriptions":{}}},"id":2120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10159:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2114,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"10138:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":2121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10138:32:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10114:56:9"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2123,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"10184:13:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10209:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2125,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10201:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2124,"name":"address","nodeType":"ElementaryTypeName","src":"10201:7:9","typeDescriptions":{}}},"id":2127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10201:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10184:27:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2137,"nodeType":"IfStatement","src":"10180:96:9","trueBody":{"id":2136,"nodeType":"Block","src":"10213:63:9","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10262:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2131,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10254:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2130,"name":"address","nodeType":"ElementaryTypeName","src":"10254:7:9","typeDescriptions":{}}},"id":2133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10254:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2129,"name":"ERC721InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1453,"src":"10234:19:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10234:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2135,"nodeType":"RevertStatement","src":"10227:38:9"}]}}]},"documentation":{"id":2090,"nodeType":"StructuredDocumentation","src":"9639:311:9","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":2139,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9964:5:9","nodeType":"FunctionDefinition","parameters":{"id":2095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2092,"mutability":"mutable","name":"to","nameLocation":"9978:2:9","nodeType":"VariableDeclaration","scope":2139,"src":"9970:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2091,"name":"address","nodeType":"ElementaryTypeName","src":"9970:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2094,"mutability":"mutable","name":"tokenId","nameLocation":"9990:7:9","nodeType":"VariableDeclaration","scope":2139,"src":"9982:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2093,"name":"uint256","nodeType":"ElementaryTypeName","src":"9982:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9969:29:9"},"returnParameters":{"id":2096,"nodeType":"ParameterList","parameters":[],"src":"10008:0:9"},"scope":2532,"src":"9955:327:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2153,"nodeType":"Block","src":"10690:43:9","statements":[{"expression":{"arguments":[{"id":2148,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2142,"src":"10710:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2149,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2144,"src":"10714:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":2150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10723:2:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":2147,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[2154,2180],"referencedDeclaration":2180,"src":"10700:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10700:26:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2152,"nodeType":"ExpressionStatement","src":"10700:26:9"}]},"documentation":{"id":2140,"nodeType":"StructuredDocumentation","src":"10288:340:9","text":" @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":2154,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"10642:9:9","nodeType":"FunctionDefinition","parameters":{"id":2145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2142,"mutability":"mutable","name":"to","nameLocation":"10660:2:9","nodeType":"VariableDeclaration","scope":2154,"src":"10652:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2141,"name":"address","nodeType":"ElementaryTypeName","src":"10652:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2144,"mutability":"mutable","name":"tokenId","nameLocation":"10672:7:9","nodeType":"VariableDeclaration","scope":2154,"src":"10664:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2143,"name":"uint256","nodeType":"ElementaryTypeName","src":"10664:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10651:29:9"},"returnParameters":{"id":2146,"nodeType":"ParameterList","parameters":[],"src":"10690:0:9"},"scope":2532,"src":"10633:100:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2179,"nodeType":"Block","src":"11038:98:9","statements":[{"expression":{"arguments":[{"id":2165,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"11054:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2166,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"11058:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2164,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"11048:5:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11048:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2168,"nodeType":"ExpressionStatement","src":"11048:18:9"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11107:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2171,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11099:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2170,"name":"address","nodeType":"ElementaryTypeName","src":"11099:7:9","typeDescriptions":{}}},"id":2173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11099:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2174,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"11111:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2175,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"11115:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2176,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"11124:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2169,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"11076:22:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11076:53:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2178,"nodeType":"ExpressionStatement","src":"11076:53:9"}]},"documentation":{"id":2155,"nodeType":"StructuredDocumentation","src":"10739:210:9","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":2180,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"10963:9:9","nodeType":"FunctionDefinition","parameters":{"id":2162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2157,"mutability":"mutable","name":"to","nameLocation":"10981:2:9","nodeType":"VariableDeclaration","scope":2180,"src":"10973:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2156,"name":"address","nodeType":"ElementaryTypeName","src":"10973:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2159,"mutability":"mutable","name":"tokenId","nameLocation":"10993:7:9","nodeType":"VariableDeclaration","scope":2180,"src":"10985:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2158,"name":"uint256","nodeType":"ElementaryTypeName","src":"10985:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2161,"mutability":"mutable","name":"data","nameLocation":"11015:4:9","nodeType":"VariableDeclaration","scope":2180,"src":"11002:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2160,"name":"bytes","nodeType":"ElementaryTypeName","src":"11002:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10972:48:9"},"returnParameters":{"id":2163,"nodeType":"ParameterList","parameters":[],"src":"11038:0:9"},"scope":2532,"src":"10954:182:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2212,"nodeType":"Block","src":"11503:186:9","statements":[{"assignments":[2187],"declarations":[{"constant":false,"id":2187,"mutability":"mutable","name":"previousOwner","nameLocation":"11521:13:9","nodeType":"VariableDeclaration","scope":2212,"src":"11513:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2186,"name":"address","nodeType":"ElementaryTypeName","src":"11513:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2199,"initialValue":{"arguments":[{"arguments":[{"hexValue":"30","id":2191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11553:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2190,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11545:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2189,"name":"address","nodeType":"ElementaryTypeName","src":"11545:7:9","typeDescriptions":{}}},"id":2192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11545:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2193,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2183,"src":"11557:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":2196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2195,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11566:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2194,"name":"address","nodeType":"ElementaryTypeName","src":"11566:7:9","typeDescriptions":{}}},"id":2197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11566:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2188,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"11537:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11537:40:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"11513:64:9"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2200,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2187,"src":"11591:13:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11616:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2202,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11608:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2201,"name":"address","nodeType":"ElementaryTypeName","src":"11608:7:9","typeDescriptions":{}}},"id":2204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11608:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11591:27:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2211,"nodeType":"IfStatement","src":"11587:96:9","trueBody":{"id":2210,"nodeType":"Block","src":"11620:63:9","statements":[{"errorCall":{"arguments":[{"id":2207,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2183,"src":"11664:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2206,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"11641:22:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11641:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2209,"nodeType":"RevertStatement","src":"11634:38:9"}]}}]},"documentation":{"id":2181,"nodeType":"StructuredDocumentation","src":"11142:315:9","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":2213,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"11471:5:9","nodeType":"FunctionDefinition","parameters":{"id":2184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2183,"mutability":"mutable","name":"tokenId","nameLocation":"11485:7:9","nodeType":"VariableDeclaration","scope":2213,"src":"11477:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2182,"name":"uint256","nodeType":"ElementaryTypeName","src":"11477:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11476:17:9"},"returnParameters":{"id":2185,"nodeType":"ParameterList","parameters":[],"src":"11503:0:9"},"scope":2532,"src":"11462:227:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2272,"nodeType":"Block","src":"12084:389:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2223,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2218,"src":"12098:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2225,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12104:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2224,"name":"address","nodeType":"ElementaryTypeName","src":"12104:7:9","typeDescriptions":{}}},"id":2227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12104:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12098:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2237,"nodeType":"IfStatement","src":"12094:87:9","trueBody":{"id":2236,"nodeType":"Block","src":"12116:65:9","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12167:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2231,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12159:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2230,"name":"address","nodeType":"ElementaryTypeName","src":"12159:7:9","typeDescriptions":{}}},"id":2233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12159:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2229,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"12137:21:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12137:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2235,"nodeType":"RevertStatement","src":"12130:40:9"}]}},{"assignments":[2239],"declarations":[{"constant":false,"id":2239,"mutability":"mutable","name":"previousOwner","nameLocation":"12198:13:9","nodeType":"VariableDeclaration","scope":2272,"src":"12190:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2238,"name":"address","nodeType":"ElementaryTypeName","src":"12190:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2248,"initialValue":{"arguments":[{"id":2241,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2218,"src":"12222:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2242,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2220,"src":"12226:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":2245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12243:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12235:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2243,"name":"address","nodeType":"ElementaryTypeName","src":"12235:7:9","typeDescriptions":{}}},"id":2246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12235:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2240,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"12214:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":2247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12214:32:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"12190:56:9"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2249,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2239,"src":"12260:13:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2251,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12277:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2250,"name":"address","nodeType":"ElementaryTypeName","src":"12277:7:9","typeDescriptions":{}}},"id":2253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12277:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12260:27:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2260,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2239,"src":"12362:13:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2261,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2216,"src":"12379:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12362:21:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2270,"nodeType":"IfStatement","src":"12358:109:9","trueBody":{"id":2269,"nodeType":"Block","src":"12385:82:9","statements":[{"errorCall":{"arguments":[{"id":2264,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2216,"src":"12427:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2265,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2220,"src":"12433:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2266,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2239,"src":"12442:13:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2263,"name":"ERC721IncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"12406:20:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address) pure"}},"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12406:50:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2268,"nodeType":"RevertStatement","src":"12399:57:9"}]}},"id":2271,"nodeType":"IfStatement","src":"12256:211:9","trueBody":{"id":2259,"nodeType":"Block","src":"12289:63:9","statements":[{"errorCall":{"arguments":[{"id":2256,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2220,"src":"12333:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2255,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"12310:22:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12310:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2258,"nodeType":"RevertStatement","src":"12303:38:9"}]}}]},"documentation":{"id":2214,"nodeType":"StructuredDocumentation","src":"11695:313:9","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":2273,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"12022:9:9","nodeType":"FunctionDefinition","parameters":{"id":2221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2216,"mutability":"mutable","name":"from","nameLocation":"12040:4:9","nodeType":"VariableDeclaration","scope":2273,"src":"12032:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2215,"name":"address","nodeType":"ElementaryTypeName","src":"12032:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2218,"mutability":"mutable","name":"to","nameLocation":"12054:2:9","nodeType":"VariableDeclaration","scope":2273,"src":"12046:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2217,"name":"address","nodeType":"ElementaryTypeName","src":"12046:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2220,"mutability":"mutable","name":"tokenId","nameLocation":"12066:7:9","nodeType":"VariableDeclaration","scope":2273,"src":"12058:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2219,"name":"uint256","nodeType":"ElementaryTypeName","src":"12058:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12031:43:9"},"returnParameters":{"id":2222,"nodeType":"ParameterList","parameters":[],"src":"12084:0:9"},"scope":2532,"src":"12013:460:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2290,"nodeType":"Block","src":"13481:53:9","statements":[{"expression":{"arguments":[{"id":2284,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2276,"src":"13505:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2285,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"13511:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2286,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"13515:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":2287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13524:2:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":2283,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[2291,2317],"referencedDeclaration":2317,"src":"13491:13:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":2288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13491:36:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2289,"nodeType":"ExpressionStatement","src":"13491:36:9"}]},"documentation":{"id":2274,"nodeType":"StructuredDocumentation","src":"12479:922:9","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n are aware of the ERC721 standard to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is like {safeTransferFrom} in the sense that it invokes\n {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `tokenId` token must exist and be owned by `from`.\n - `to` cannot be the zero address.\n - `from` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":2291,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"13415:13:9","nodeType":"FunctionDefinition","parameters":{"id":2281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2276,"mutability":"mutable","name":"from","nameLocation":"13437:4:9","nodeType":"VariableDeclaration","scope":2291,"src":"13429:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2275,"name":"address","nodeType":"ElementaryTypeName","src":"13429:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2278,"mutability":"mutable","name":"to","nameLocation":"13451:2:9","nodeType":"VariableDeclaration","scope":2291,"src":"13443:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2277,"name":"address","nodeType":"ElementaryTypeName","src":"13443:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2280,"mutability":"mutable","name":"tokenId","nameLocation":"13463:7:9","nodeType":"VariableDeclaration","scope":2291,"src":"13455:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2279,"name":"uint256","nodeType":"ElementaryTypeName","src":"13455:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13428:43:9"},"returnParameters":{"id":2282,"nodeType":"ParameterList","parameters":[],"src":"13481:0:9"},"scope":2532,"src":"13406:128:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2316,"nodeType":"Block","src":"13873:102:9","statements":[{"expression":{"arguments":[{"id":2304,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2294,"src":"13893:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2305,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"13899:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2306,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"13903:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2303,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2273,"src":"13883:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13883:28:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2308,"nodeType":"ExpressionStatement","src":"13883:28:9"},{"expression":{"arguments":[{"id":2310,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2294,"src":"13944:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2311,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"13950:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2312,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"13954:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2313,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2300,"src":"13963:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2309,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"13921:22:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":2314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13921:47:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2315,"nodeType":"ExpressionStatement","src":"13921:47:9"}]},"documentation":{"id":2292,"nodeType":"StructuredDocumentation","src":"13540:226:9","text":" @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":2317,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"13780:13:9","nodeType":"FunctionDefinition","parameters":{"id":2301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2294,"mutability":"mutable","name":"from","nameLocation":"13802:4:9","nodeType":"VariableDeclaration","scope":2317,"src":"13794:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2293,"name":"address","nodeType":"ElementaryTypeName","src":"13794:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2296,"mutability":"mutable","name":"to","nameLocation":"13816:2:9","nodeType":"VariableDeclaration","scope":2317,"src":"13808:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2295,"name":"address","nodeType":"ElementaryTypeName","src":"13808:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2298,"mutability":"mutable","name":"tokenId","nameLocation":"13828:7:9","nodeType":"VariableDeclaration","scope":2317,"src":"13820:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2297,"name":"uint256","nodeType":"ElementaryTypeName","src":"13820:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2300,"mutability":"mutable","name":"data","nameLocation":"13850:4:9","nodeType":"VariableDeclaration","scope":2317,"src":"13837:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2299,"name":"bytes","nodeType":"ElementaryTypeName","src":"13837:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13793:62:9"},"returnParameters":{"id":2302,"nodeType":"ParameterList","parameters":[],"src":"13873:0:9"},"scope":2532,"src":"13771:204:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2334,"nodeType":"Block","src":"14488:50:9","statements":[{"expression":{"arguments":[{"id":2328,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"14507:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2329,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2322,"src":"14511:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2330,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"14520:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"74727565","id":2331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14526:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2327,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[2335,2401],"referencedDeclaration":2401,"src":"14498:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,uint256,address,bool)"}},"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14498:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2333,"nodeType":"ExpressionStatement","src":"14498:33:9"}]},"documentation":{"id":2318,"nodeType":"StructuredDocumentation","src":"13981:432:9","text":" @dev Approve `to` to operate on `tokenId`\n The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n either the owner of the token, or approved to operate on all tokens held by this owner.\n Emits an {Approval} event.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."},"id":2335,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"14427:8:9","nodeType":"FunctionDefinition","parameters":{"id":2325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2320,"mutability":"mutable","name":"to","nameLocation":"14444:2:9","nodeType":"VariableDeclaration","scope":2335,"src":"14436:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2319,"name":"address","nodeType":"ElementaryTypeName","src":"14436:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2322,"mutability":"mutable","name":"tokenId","nameLocation":"14456:7:9","nodeType":"VariableDeclaration","scope":2335,"src":"14448:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2321,"name":"uint256","nodeType":"ElementaryTypeName","src":"14448:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2324,"mutability":"mutable","name":"auth","nameLocation":"14473:4:9","nodeType":"VariableDeclaration","scope":2335,"src":"14465:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2323,"name":"address","nodeType":"ElementaryTypeName","src":"14465:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14435:43:9"},"returnParameters":{"id":2326,"nodeType":"ParameterList","parameters":[],"src":"14488:0:9"},"scope":2532,"src":"14418:120:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2400,"nodeType":"Block","src":"14814:568:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2347,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"14880:9:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2348,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2342,"src":"14893:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14909:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2350,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14901:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2349,"name":"address","nodeType":"ElementaryTypeName","src":"14901:7:9","typeDescriptions":{}}},"id":2352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14901:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14893:18:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14880:31:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2393,"nodeType":"IfStatement","src":"14876:460:9","trueBody":{"id":2392,"nodeType":"Block","src":"14913:423:9","statements":[{"assignments":[2356],"declarations":[{"constant":false,"id":2356,"mutability":"mutable","name":"owner","nameLocation":"14935:5:9","nodeType":"VariableDeclaration","scope":2392,"src":"14927:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2355,"name":"address","nodeType":"ElementaryTypeName","src":"14927:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2360,"initialValue":{"arguments":[{"id":2358,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"14957:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2357,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"14943:13:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14943:22:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"14927:38:9"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2361,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2342,"src":"15093:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15109:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2363,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15101:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2362,"name":"address","nodeType":"ElementaryTypeName","src":"15101:7:9","typeDescriptions":{}}},"id":2365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15101:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15093:18:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2367,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2356,"src":"15115:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2368,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2342,"src":"15124:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15115:13:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15093:35:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":2375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"15132:30:9","subExpression":{"arguments":[{"id":2372,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2356,"src":"15150:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2373,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2342,"src":"15157:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2371,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1794,"src":"15133:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":2374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15133:29:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15093:69:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2382,"nodeType":"IfStatement","src":"15089:142:9","trueBody":{"id":2381,"nodeType":"Block","src":"15164:67:9","statements":[{"errorCall":{"arguments":[{"id":2378,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2342,"src":"15211:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2377,"name":"ERC721InvalidApprover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"15189:21:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15189:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2380,"nodeType":"RevertStatement","src":"15182:34:9"}]}},{"condition":{"id":2383,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"15249:9:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2391,"nodeType":"IfStatement","src":"15245:81:9","trueBody":{"id":2390,"nodeType":"Block","src":"15260:66:9","statements":[{"eventCall":{"arguments":[{"id":2385,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2356,"src":"15292:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2386,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2338,"src":"15299:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2387,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"15303:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2384,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2557,"src":"15283:8:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15283:28:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2389,"nodeType":"EmitStatement","src":"15278:33:9"}]}}]}},{"expression":{"id":2398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2394,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"15346:15:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2396,"indexExpression":{"id":2395,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"15362:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15346:24:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2397,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2338,"src":"15373:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15346:29:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2399,"nodeType":"ExpressionStatement","src":"15346:29:9"}]},"documentation":{"id":2336,"nodeType":"StructuredDocumentation","src":"14544:171:9","text":" @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n emitted in the context of transfers."},"id":2401,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"14729:8:9","nodeType":"FunctionDefinition","parameters":{"id":2345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2338,"mutability":"mutable","name":"to","nameLocation":"14746:2:9","nodeType":"VariableDeclaration","scope":2401,"src":"14738:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2337,"name":"address","nodeType":"ElementaryTypeName","src":"14738:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2340,"mutability":"mutable","name":"tokenId","nameLocation":"14758:7:9","nodeType":"VariableDeclaration","scope":2401,"src":"14750:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2339,"name":"uint256","nodeType":"ElementaryTypeName","src":"14750:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2342,"mutability":"mutable","name":"auth","nameLocation":"14775:4:9","nodeType":"VariableDeclaration","scope":2401,"src":"14767:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2341,"name":"address","nodeType":"ElementaryTypeName","src":"14767:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2344,"mutability":"mutable","name":"emitEvent","nameLocation":"14786:9:9","nodeType":"VariableDeclaration","scope":2401,"src":"14781:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2343,"name":"bool","nodeType":"ElementaryTypeName","src":"14781:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14737:59:9"},"returnParameters":{"id":2346,"nodeType":"ParameterList","parameters":[],"src":"14814:0:9"},"scope":2532,"src":"14720:662:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2437,"nodeType":"Block","src":"15684:219:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2411,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2406,"src":"15698:8:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15718:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2413,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15710:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2412,"name":"address","nodeType":"ElementaryTypeName","src":"15710:7:9","typeDescriptions":{}}},"id":2415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15710:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15698:22:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2422,"nodeType":"IfStatement","src":"15694:91:9","trueBody":{"id":2421,"nodeType":"Block","src":"15722:63:9","statements":[{"errorCall":{"arguments":[{"id":2418,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2406,"src":"15765:8:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2417,"name":"ERC721InvalidOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1475,"src":"15743:21:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15743:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2420,"nodeType":"RevertStatement","src":"15736:38:9"}]}},{"expression":{"id":2429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2423,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"15794:18:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":2426,"indexExpression":{"id":2424,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"15813:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15794:25:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2427,"indexExpression":{"id":2425,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2406,"src":"15820:8:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15794:35:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2428,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2408,"src":"15832:8:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15794:46:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2430,"nodeType":"ExpressionStatement","src":"15794:46:9"},{"eventCall":{"arguments":[{"id":2432,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"15870:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2433,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2406,"src":"15877:8:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2434,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2408,"src":"15887:8:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2431,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"15855:14:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15855:41:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2436,"nodeType":"EmitStatement","src":"15850:46:9"}]},"documentation":{"id":2402,"nodeType":"StructuredDocumentation","src":"15388:198:9","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Requirements:\n - operator can't be the address zero.\n Emits an {ApprovalForAll} event."},"id":2438,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"15600:18:9","nodeType":"FunctionDefinition","parameters":{"id":2409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2404,"mutability":"mutable","name":"owner","nameLocation":"15627:5:9","nodeType":"VariableDeclaration","scope":2438,"src":"15619:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2403,"name":"address","nodeType":"ElementaryTypeName","src":"15619:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2406,"mutability":"mutable","name":"operator","nameLocation":"15642:8:9","nodeType":"VariableDeclaration","scope":2438,"src":"15634:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2405,"name":"address","nodeType":"ElementaryTypeName","src":"15634:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2408,"mutability":"mutable","name":"approved","nameLocation":"15657:8:9","nodeType":"VariableDeclaration","scope":2438,"src":"15652:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2407,"name":"bool","nodeType":"ElementaryTypeName","src":"15652:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15618:48:9"},"returnParameters":{"id":2410,"nodeType":"ParameterList","parameters":[],"src":"15684:0:9"},"scope":2532,"src":"15591:312:9","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2466,"nodeType":"Block","src":"16210:169:9","statements":[{"assignments":[2447],"declarations":[{"constant":false,"id":2447,"mutability":"mutable","name":"owner","nameLocation":"16228:5:9","nodeType":"VariableDeclaration","scope":2466,"src":"16220:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2446,"name":"address","nodeType":"ElementaryTypeName","src":"16220:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2451,"initialValue":{"arguments":[{"id":2449,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"16245:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2448,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1897,"src":"16236:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16236:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"16220:33:9"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2452,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2447,"src":"16267:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16284:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2454,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16276:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2453,"name":"address","nodeType":"ElementaryTypeName","src":"16276:7:9","typeDescriptions":{}}},"id":2456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16276:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16267:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2463,"nodeType":"IfStatement","src":"16263:88:9","trueBody":{"id":2462,"nodeType":"Block","src":"16288:63:9","statements":[{"errorCall":{"arguments":[{"id":2459,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"16332:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2458,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"16309:22:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16309:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2461,"nodeType":"RevertStatement","src":"16302:38:9"}]}},{"expression":{"id":2464,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2447,"src":"16367:5:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2445,"id":2465,"nodeType":"Return","src":"16360:12:9"}]},"documentation":{"id":2439,"nodeType":"StructuredDocumentation","src":"15909:224:9","text":" @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n Returns the owner.\n Overrides to ownership logic should be done to {_ownerOf}."},"id":2467,"implemented":true,"kind":"function","modifiers":[],"name":"_requireOwned","nameLocation":"16147:13:9","nodeType":"FunctionDefinition","parameters":{"id":2442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2441,"mutability":"mutable","name":"tokenId","nameLocation":"16169:7:9","nodeType":"VariableDeclaration","scope":2467,"src":"16161:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2440,"name":"uint256","nodeType":"ElementaryTypeName","src":"16161:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16160:17:9"},"returnParameters":{"id":2445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2444,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2467,"src":"16201:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2443,"name":"address","nodeType":"ElementaryTypeName","src":"16201:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16200:9:9"},"scope":2532,"src":"16138:241:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2530,"nodeType":"Block","src":"17020:680:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2479,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"17034:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17037:4:9","memberName":"code","nodeType":"MemberAccess","src":"17034:7:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17042:6:9","memberName":"length","nodeType":"MemberAccess","src":"17034:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17051:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17034:18:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2529,"nodeType":"IfStatement","src":"17030:664:9","trueBody":{"id":2528,"nodeType":"Block","src":"17054:640:9","statements":[{"clauses":[{"block":{"id":2508,"nodeType":"Block","src":"17168:162:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2497,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2495,"src":"17190:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":2498,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"17200:15:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$2667_$","typeString":"type(contract IERC721Receiver)"}},"id":2499,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17216:16:9","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":2666,"src":"17200:32:9","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":2500,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17233:8:9","memberName":"selector","nodeType":"MemberAccess","src":"17200:41:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"17190:51:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2507,"nodeType":"IfStatement","src":"17186:130:9","trueBody":{"id":2506,"nodeType":"Block","src":"17243:73:9","statements":[{"errorCall":{"arguments":[{"id":2503,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"17294:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2502,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"17272:21:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17272:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2505,"nodeType":"RevertStatement","src":"17265:32:9"}]}}]},"errorName":"","id":2509,"nodeType":"TryCatchClause","parameters":{"id":2496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2495,"mutability":"mutable","name":"retval","nameLocation":"17160:6:9","nodeType":"VariableDeclaration","scope":2509,"src":"17153:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2494,"name":"bytes4","nodeType":"ElementaryTypeName","src":"17153:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"17152:15:9"},"src":"17144:186:9"},{"block":{"id":2525,"nodeType":"Block","src":"17359:325:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2513,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2511,"src":"17381:6:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17388:6:9","memberName":"length","nodeType":"MemberAccess","src":"17381:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17398:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17381:18:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2523,"nodeType":"Block","src":"17480:190:9","statements":[{"AST":{"nodeType":"YulBlock","src":"17566:86:9","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17603:2:9","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"17607:6:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17599:3:9"},"nodeType":"YulFunctionCall","src":"17599:15:9"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"17622:6:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17616:5:9"},"nodeType":"YulFunctionCall","src":"17616:13:9"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17592:6:9"},"nodeType":"YulFunctionCall","src":"17592:38:9"},"nodeType":"YulExpressionStatement","src":"17592:38:9"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2511,"isOffset":false,"isSlot":false,"src":"17607:6:9","valueSize":1},{"declaration":2511,"isOffset":false,"isSlot":false,"src":"17622:6:9","valueSize":1}],"id":2522,"nodeType":"InlineAssembly","src":"17557:95:9"}]},"id":2524,"nodeType":"IfStatement","src":"17377:293:9","trueBody":{"id":2521,"nodeType":"Block","src":"17401:73:9","statements":[{"errorCall":{"arguments":[{"id":2518,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"17452:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2517,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"17430:21:9","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17430:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2520,"nodeType":"RevertStatement","src":"17423:32:9"}]}}]},"errorName":"","id":2526,"nodeType":"TryCatchClause","parameters":{"id":2512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2511,"mutability":"mutable","name":"reason","nameLocation":"17351:6:9","nodeType":"VariableDeclaration","scope":2526,"src":"17338:19:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2510,"name":"bytes","nodeType":"ElementaryTypeName","src":"17338:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17337:21:9"},"src":"17331:353:9"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2488,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"17109:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17109:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2490,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"17123:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2491,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"17129:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2492,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2476,"src":"17138:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":2485,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"17088:2:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2484,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"17072:15:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$2667_$","typeString":"type(contract IERC721Receiver)"}},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17072:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$2667","typeString":"contract IERC721Receiver"}},"id":2487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17092:16:9","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":2666,"src":"17072:36:9","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":2493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17072:71:9","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":2527,"nodeType":"TryStatement","src":"17068:616:9"}]}}]},"documentation":{"id":2468,"nodeType":"StructuredDocumentation","src":"16385:528:9","text":" @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call"},"id":2531,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"16927:22:9","nodeType":"FunctionDefinition","parameters":{"id":2477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2470,"mutability":"mutable","name":"from","nameLocation":"16958:4:9","nodeType":"VariableDeclaration","scope":2531,"src":"16950:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2469,"name":"address","nodeType":"ElementaryTypeName","src":"16950:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2472,"mutability":"mutable","name":"to","nameLocation":"16972:2:9","nodeType":"VariableDeclaration","scope":2531,"src":"16964:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2471,"name":"address","nodeType":"ElementaryTypeName","src":"16964:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2474,"mutability":"mutable","name":"tokenId","nameLocation":"16984:7:9","nodeType":"VariableDeclaration","scope":2531,"src":"16976:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2473,"name":"uint256","nodeType":"ElementaryTypeName","src":"16976:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2476,"mutability":"mutable","name":"data","nameLocation":"17006:4:9","nodeType":"VariableDeclaration","scope":2531,"src":"16993:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2475,"name":"bytes","nodeType":"ElementaryTypeName","src":"16993:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16949:62:9"},"returnParameters":{"id":2478,"nodeType":"ParameterList","parameters":[],"src":"17020:0:9"},"scope":2532,"src":"16918:782:9","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":2533,"src":"776:16926:9","usedErrors":[1434,1439,1448,1453,1458,1465,1470,1475],"usedEvents":[2548,2557,2566]}],"src":"107:17596:9"},"id":9},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[3063],"IERC721":[2649]},"id":2650,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2534,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:10"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":2536,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2650,"sourceUnit":3064,"src":"134:62:10","symbolAliases":[{"foreign":{"id":2535,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"142:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2538,"name":"IERC165","nameLocations":["287:7:10"],"nodeType":"IdentifierPath","referencedDeclaration":3063,"src":"287:7:10"},"id":2539,"nodeType":"InheritanceSpecifier","src":"287:7:10"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":2537,"nodeType":"StructuredDocumentation","src":"198:67:10","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":2649,"linearizedBaseContracts":[2649,3063],"name":"IERC721","nameLocation":"276:7:10","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2540,"nodeType":"StructuredDocumentation","src":"301:88:10","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":2548,"name":"Transfer","nameLocation":"400:8:10","nodeType":"EventDefinition","parameters":{"id":2547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2542,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"425:4:10","nodeType":"VariableDeclaration","scope":2548,"src":"409:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2541,"name":"address","nodeType":"ElementaryTypeName","src":"409:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2544,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"447:2:10","nodeType":"VariableDeclaration","scope":2548,"src":"431:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2543,"name":"address","nodeType":"ElementaryTypeName","src":"431:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2546,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"467:7:10","nodeType":"VariableDeclaration","scope":2548,"src":"451:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2545,"name":"uint256","nodeType":"ElementaryTypeName","src":"451:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"408:67:10"},"src":"394:82:10"},{"anonymous":false,"documentation":{"id":2549,"nodeType":"StructuredDocumentation","src":"482:94:10","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":2557,"name":"Approval","nameLocation":"587:8:10","nodeType":"EventDefinition","parameters":{"id":2556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2551,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"612:5:10","nodeType":"VariableDeclaration","scope":2557,"src":"596:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2550,"name":"address","nodeType":"ElementaryTypeName","src":"596:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2553,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"635:8:10","nodeType":"VariableDeclaration","scope":2557,"src":"619:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2552,"name":"address","nodeType":"ElementaryTypeName","src":"619:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2555,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"661:7:10","nodeType":"VariableDeclaration","scope":2557,"src":"645:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2554,"name":"uint256","nodeType":"ElementaryTypeName","src":"645:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"595:74:10"},"src":"581:89:10"},{"anonymous":false,"documentation":{"id":2558,"nodeType":"StructuredDocumentation","src":"676:117:10","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":2566,"name":"ApprovalForAll","nameLocation":"804:14:10","nodeType":"EventDefinition","parameters":{"id":2565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2560,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"835:5:10","nodeType":"VariableDeclaration","scope":2566,"src":"819:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2559,"name":"address","nodeType":"ElementaryTypeName","src":"819:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2562,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"858:8:10","nodeType":"VariableDeclaration","scope":2566,"src":"842:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2561,"name":"address","nodeType":"ElementaryTypeName","src":"842:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2564,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"873:8:10","nodeType":"VariableDeclaration","scope":2566,"src":"868:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2563,"name":"bool","nodeType":"ElementaryTypeName","src":"868:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"818:64:10"},"src":"798:85:10"},{"documentation":{"id":2567,"nodeType":"StructuredDocumentation","src":"889:76:10","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":2574,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"979:9:10","nodeType":"FunctionDefinition","parameters":{"id":2570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2569,"mutability":"mutable","name":"owner","nameLocation":"997:5:10","nodeType":"VariableDeclaration","scope":2574,"src":"989:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2568,"name":"address","nodeType":"ElementaryTypeName","src":"989:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"988:15:10"},"returnParameters":{"id":2573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2572,"mutability":"mutable","name":"balance","nameLocation":"1035:7:10","nodeType":"VariableDeclaration","scope":2574,"src":"1027:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2571,"name":"uint256","nodeType":"ElementaryTypeName","src":"1027:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1026:17:10"},"scope":2649,"src":"970:74:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2575,"nodeType":"StructuredDocumentation","src":"1050:131:10","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":2582,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1195:7:10","nodeType":"FunctionDefinition","parameters":{"id":2578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2577,"mutability":"mutable","name":"tokenId","nameLocation":"1211:7:10","nodeType":"VariableDeclaration","scope":2582,"src":"1203:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2576,"name":"uint256","nodeType":"ElementaryTypeName","src":"1203:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1202:17:10"},"returnParameters":{"id":2581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2580,"mutability":"mutable","name":"owner","nameLocation":"1251:5:10","nodeType":"VariableDeclaration","scope":2582,"src":"1243:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2579,"name":"address","nodeType":"ElementaryTypeName","src":"1243:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1242:15:10"},"scope":2649,"src":"1186:72:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2583,"nodeType":"StructuredDocumentation","src":"1264:565:10","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":2594,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1843:16:10","nodeType":"FunctionDefinition","parameters":{"id":2592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2585,"mutability":"mutable","name":"from","nameLocation":"1868:4:10","nodeType":"VariableDeclaration","scope":2594,"src":"1860:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2584,"name":"address","nodeType":"ElementaryTypeName","src":"1860:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2587,"mutability":"mutable","name":"to","nameLocation":"1882:2:10","nodeType":"VariableDeclaration","scope":2594,"src":"1874:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2586,"name":"address","nodeType":"ElementaryTypeName","src":"1874:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2589,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:10","nodeType":"VariableDeclaration","scope":2594,"src":"1886:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2588,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2591,"mutability":"mutable","name":"data","nameLocation":"1918:4:10","nodeType":"VariableDeclaration","scope":2594,"src":"1903:19:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2590,"name":"bytes","nodeType":"ElementaryTypeName","src":"1903:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1859:64:10"},"returnParameters":{"id":2593,"nodeType":"ParameterList","parameters":[],"src":"1932:0:10"},"scope":2649,"src":"1834:99:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2595,"nodeType":"StructuredDocumentation","src":"1939:705:10","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":2604,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2658:16:10","nodeType":"FunctionDefinition","parameters":{"id":2602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2597,"mutability":"mutable","name":"from","nameLocation":"2683:4:10","nodeType":"VariableDeclaration","scope":2604,"src":"2675:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2596,"name":"address","nodeType":"ElementaryTypeName","src":"2675:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2599,"mutability":"mutable","name":"to","nameLocation":"2697:2:10","nodeType":"VariableDeclaration","scope":2604,"src":"2689:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2598,"name":"address","nodeType":"ElementaryTypeName","src":"2689:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2601,"mutability":"mutable","name":"tokenId","nameLocation":"2709:7:10","nodeType":"VariableDeclaration","scope":2604,"src":"2701:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2600,"name":"uint256","nodeType":"ElementaryTypeName","src":"2701:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2674:43:10"},"returnParameters":{"id":2603,"nodeType":"ParameterList","parameters":[],"src":"2726:0:10"},"scope":2649,"src":"2649:78:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2605,"nodeType":"StructuredDocumentation","src":"2733:732:10","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2614,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3479:12:10","nodeType":"FunctionDefinition","parameters":{"id":2612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2607,"mutability":"mutable","name":"from","nameLocation":"3500:4:10","nodeType":"VariableDeclaration","scope":2614,"src":"3492:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2606,"name":"address","nodeType":"ElementaryTypeName","src":"3492:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2609,"mutability":"mutable","name":"to","nameLocation":"3514:2:10","nodeType":"VariableDeclaration","scope":2614,"src":"3506:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2608,"name":"address","nodeType":"ElementaryTypeName","src":"3506:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2611,"mutability":"mutable","name":"tokenId","nameLocation":"3526:7:10","nodeType":"VariableDeclaration","scope":2614,"src":"3518:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2610,"name":"uint256","nodeType":"ElementaryTypeName","src":"3518:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3491:43:10"},"returnParameters":{"id":2613,"nodeType":"ParameterList","parameters":[],"src":"3543:0:10"},"scope":2649,"src":"3470:74:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2615,"nodeType":"StructuredDocumentation","src":"3550:452:10","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2622,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4016:7:10","nodeType":"FunctionDefinition","parameters":{"id":2620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2617,"mutability":"mutable","name":"to","nameLocation":"4032:2:10","nodeType":"VariableDeclaration","scope":2622,"src":"4024:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2616,"name":"address","nodeType":"ElementaryTypeName","src":"4024:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2619,"mutability":"mutable","name":"tokenId","nameLocation":"4044:7:10","nodeType":"VariableDeclaration","scope":2622,"src":"4036:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2618,"name":"uint256","nodeType":"ElementaryTypeName","src":"4036:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4023:29:10"},"returnParameters":{"id":2621,"nodeType":"ParameterList","parameters":[],"src":"4061:0:10"},"scope":2649,"src":"4007:55:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2623,"nodeType":"StructuredDocumentation","src":"4068:315:10","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":2630,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4397:17:10","nodeType":"FunctionDefinition","parameters":{"id":2628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2625,"mutability":"mutable","name":"operator","nameLocation":"4423:8:10","nodeType":"VariableDeclaration","scope":2630,"src":"4415:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2624,"name":"address","nodeType":"ElementaryTypeName","src":"4415:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2627,"mutability":"mutable","name":"approved","nameLocation":"4438:8:10","nodeType":"VariableDeclaration","scope":2630,"src":"4433:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2626,"name":"bool","nodeType":"ElementaryTypeName","src":"4433:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4414:33:10"},"returnParameters":{"id":2629,"nodeType":"ParameterList","parameters":[],"src":"4456:0:10"},"scope":2649,"src":"4388:69:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2631,"nodeType":"StructuredDocumentation","src":"4463:139:10","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":2638,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4616:11:10","nodeType":"FunctionDefinition","parameters":{"id":2634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2633,"mutability":"mutable","name":"tokenId","nameLocation":"4636:7:10","nodeType":"VariableDeclaration","scope":2638,"src":"4628:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2632,"name":"uint256","nodeType":"ElementaryTypeName","src":"4628:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4627:17:10"},"returnParameters":{"id":2637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2636,"mutability":"mutable","name":"operator","nameLocation":"4676:8:10","nodeType":"VariableDeclaration","scope":2638,"src":"4668:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2635,"name":"address","nodeType":"ElementaryTypeName","src":"4668:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4667:18:10"},"scope":2649,"src":"4607:79:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2639,"nodeType":"StructuredDocumentation","src":"4692:138:10","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":2648,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4844:16:10","nodeType":"FunctionDefinition","parameters":{"id":2644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2641,"mutability":"mutable","name":"owner","nameLocation":"4869:5:10","nodeType":"VariableDeclaration","scope":2648,"src":"4861:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2640,"name":"address","nodeType":"ElementaryTypeName","src":"4861:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2643,"mutability":"mutable","name":"operator","nameLocation":"4884:8:10","nodeType":"VariableDeclaration","scope":2648,"src":"4876:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2642,"name":"address","nodeType":"ElementaryTypeName","src":"4876:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4860:33:10"},"returnParameters":{"id":2647,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2646,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2648,"src":"4917:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2645,"name":"bool","nodeType":"ElementaryTypeName","src":"4917:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4916:6:10"},"scope":2649,"src":"4835:88:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2650,"src":"266:4659:10","usedErrors":[],"usedEvents":[2548,2557,2566]}],"src":"108:4818:10"},"id":10},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[2667]},"id":2668,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2651,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"116:24:11"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":2652,"nodeType":"StructuredDocumentation","src":"142:152:11","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":2667,"linearizedBaseContracts":[2667],"name":"IERC721Receiver","nameLocation":"305:15:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2653,"nodeType":"StructuredDocumentation","src":"327:500:11","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":2666,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"841:16:11","nodeType":"FunctionDefinition","parameters":{"id":2662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2655,"mutability":"mutable","name":"operator","nameLocation":"875:8:11","nodeType":"VariableDeclaration","scope":2666,"src":"867:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2654,"name":"address","nodeType":"ElementaryTypeName","src":"867:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2657,"mutability":"mutable","name":"from","nameLocation":"901:4:11","nodeType":"VariableDeclaration","scope":2666,"src":"893:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2656,"name":"address","nodeType":"ElementaryTypeName","src":"893:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2659,"mutability":"mutable","name":"tokenId","nameLocation":"923:7:11","nodeType":"VariableDeclaration","scope":2666,"src":"915:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2658,"name":"uint256","nodeType":"ElementaryTypeName","src":"915:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2661,"mutability":"mutable","name":"data","nameLocation":"955:4:11","nodeType":"VariableDeclaration","scope":2666,"src":"940:19:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2660,"name":"bytes","nodeType":"ElementaryTypeName","src":"940:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"857:108:11"},"returnParameters":{"id":2665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2664,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2666,"src":"984:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2663,"name":"bytes4","nodeType":"ElementaryTypeName","src":"984:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"983:8:11"},"scope":2667,"src":"832:160:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2668,"src":"295:699:11","usedErrors":[],"usedEvents":[]}],"src":"116:879:11"},"id":11},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC721":[2649],"IERC721Metadata":[2695]},"id":2696,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2669,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"127:24:12"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":2671,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2696,"sourceUnit":2650,"src":"153:39:12","symbolAliases":[{"foreign":{"id":2670,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"161:7:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2673,"name":"IERC721","nameLocations":["357:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":2649,"src":"357:7:12"},"id":2674,"nodeType":"InheritanceSpecifier","src":"357:7:12"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":2672,"nodeType":"StructuredDocumentation","src":"194:133:12","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":2695,"linearizedBaseContracts":[2695,2649,3063],"name":"IERC721Metadata","nameLocation":"338:15:12","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2675,"nodeType":"StructuredDocumentation","src":"371:58:12","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":2680,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"443:4:12","nodeType":"FunctionDefinition","parameters":{"id":2676,"nodeType":"ParameterList","parameters":[],"src":"447:2:12"},"returnParameters":{"id":2679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2678,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2680,"src":"473:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2677,"name":"string","nodeType":"ElementaryTypeName","src":"473:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"472:15:12"},"scope":2695,"src":"434:54:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2681,"nodeType":"StructuredDocumentation","src":"494:60:12","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":2686,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"568:6:12","nodeType":"FunctionDefinition","parameters":{"id":2682,"nodeType":"ParameterList","parameters":[],"src":"574:2:12"},"returnParameters":{"id":2685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2684,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2686,"src":"600:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2683,"name":"string","nodeType":"ElementaryTypeName","src":"600:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"599:15:12"},"scope":2695,"src":"559:56:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2687,"nodeType":"StructuredDocumentation","src":"621:90:12","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":2694,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"725:8:12","nodeType":"FunctionDefinition","parameters":{"id":2690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2689,"mutability":"mutable","name":"tokenId","nameLocation":"742:7:12","nodeType":"VariableDeclaration","scope":2694,"src":"734:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2688,"name":"uint256","nodeType":"ElementaryTypeName","src":"734:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"733:17:12"},"returnParameters":{"id":2693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2692,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2694,"src":"774:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2691,"name":"string","nodeType":"ElementaryTypeName","src":"774:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"773:15:12"},"scope":2695,"src":"716:73:12","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2696,"src":"328:463:12","usedErrors":[],"usedEvents":[2548,2557,2566]}],"src":"127:665:12"},"id":12},"@openzeppelin/contracts/utils/Base64.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Base64.sol","exportedSymbols":{"Base64":[2742]},"id":2743,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2697,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"100:24:13"},{"abstract":false,"baseContracts":[],"canonicalName":"Base64","contractDependencies":[],"contractKind":"library","documentation":{"id":2698,"nodeType":"StructuredDocumentation","src":"126:75:13","text":" @dev Provides a set of functions to operate with Base64 strings."},"fullyImplemented":true,"id":2742,"linearizedBaseContracts":[2742],"name":"Base64","nameLocation":"210:6:13","nodeType":"ContractDefinition","nodes":[{"constant":true,"documentation":{"id":2699,"nodeType":"StructuredDocumentation","src":"223:54:13","text":" @dev Base64 Encoding/Decoding Table"},"id":2702,"mutability":"constant","name":"_TABLE","nameLocation":"307:6:13","nodeType":"VariableDeclaration","scope":2742,"src":"282:100:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2700,"name":"string","nodeType":"ElementaryTypeName","src":"282:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f","id":2701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"316:66:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_84d8a590de33e00cbdc16e1f28c3506f5ec15c599fab9a6a4bcd575cc2f110ce","typeString":"literal_string \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\""},"value":"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"},"visibility":"internal"},{"body":{"id":2740,"nodeType":"Block","src":"549:2953:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2710,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2705,"src":"766:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"771:6:13","memberName":"length","nodeType":"MemberAccess","src":"766:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"781:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"766:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"documentation":" Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol","id":2716,"nodeType":"IfStatement","src":"762:31:13","trueBody":{"expression":{"hexValue":"","id":2714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"791:2:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":2709,"id":2715,"nodeType":"Return","src":"784:9:13"}},{"assignments":[2718],"declarations":[{"constant":false,"id":2718,"mutability":"mutable","name":"table","nameLocation":"857:5:13","nodeType":"VariableDeclaration","scope":2740,"src":"843:19:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2717,"name":"string","nodeType":"ElementaryTypeName","src":"843:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2720,"initialValue":{"id":2719,"name":"_TABLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2702,"src":"865:6:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"843:28:13"},{"assignments":[2722],"declarations":[{"constant":false,"id":2722,"mutability":"mutable","name":"result","nameLocation":"1288:6:13","nodeType":"VariableDeclaration","scope":2740,"src":"1274:20:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2721,"name":"string","nodeType":"ElementaryTypeName","src":"1274:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2736,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"34","id":2725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1308:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2726,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2705,"src":"1314:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1319:6:13","memberName":"length","nodeType":"MemberAccess","src":"1314:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1328:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1314:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2730,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1313:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"33","id":2731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1333:1:13","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"1313:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2733,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1312:23:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1308:27:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2724,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1297:10:13","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":2723,"name":"string","nodeType":"ElementaryTypeName","src":"1301:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":2735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1297:39:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"1274:62:13"},{"AST":{"nodeType":"YulBlock","src":"1399:2073:13","statements":[{"nodeType":"YulVariableDeclaration","src":"1484:29:13","value":{"arguments":[{"name":"table","nodeType":"YulIdentifier","src":"1504:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"1511:1:13","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1500:3:13"},"nodeType":"YulFunctionCall","src":"1500:13:13"},"variables":[{"name":"tablePtr","nodeType":"YulTypedName","src":"1488:8:13","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1583:32:13","value":{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"1604:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"1612:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1600:3:13"},"nodeType":"YulFunctionCall","src":"1600:15:13"},"variables":[{"name":"resultPtr","nodeType":"YulTypedName","src":"1587:9:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"1828:1257:13","statements":[{"nodeType":"YulAssignment","src":"1881:26:13","value":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"1896:7:13"},{"kind":"number","nodeType":"YulLiteral","src":"1905:1:13","type":"","value":"3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1892:3:13"},"nodeType":"YulFunctionCall","src":"1892:15:13"},"variableNames":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"1881:7:13"}]},{"nodeType":"YulVariableDeclaration","src":"1924:27:13","value":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"1943:7:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1937:5:13"},"nodeType":"YulFunctionCall","src":"1937:14:13"},"variables":[{"name":"input","nodeType":"YulTypedName","src":"1928:5:13","type":""}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2535:9:13"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"2556:8:13"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2574:2:13","type":"","value":"18"},{"name":"input","nodeType":"YulIdentifier","src":"2578:5:13"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2570:3:13"},"nodeType":"YulFunctionCall","src":"2570:14:13"},{"kind":"number","nodeType":"YulLiteral","src":"2586:4:13","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2566:3:13"},"nodeType":"YulFunctionCall","src":"2566:25:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2552:3:13"},"nodeType":"YulFunctionCall","src":"2552:40:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2546:5:13"},"nodeType":"YulFunctionCall","src":"2546:47:13"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"2527:7:13"},"nodeType":"YulFunctionCall","src":"2527:67:13"},"nodeType":"YulExpressionStatement","src":"2527:67:13"},{"nodeType":"YulAssignment","src":"2611:30:13","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2628:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"2639:1:13","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2624:3:13"},"nodeType":"YulFunctionCall","src":"2624:17:13"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2611:9:13"}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2678:9:13"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"2699:8:13"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2717:2:13","type":"","value":"12"},{"name":"input","nodeType":"YulIdentifier","src":"2721:5:13"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2713:3:13"},"nodeType":"YulFunctionCall","src":"2713:14:13"},{"kind":"number","nodeType":"YulLiteral","src":"2729:4:13","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2709:3:13"},"nodeType":"YulFunctionCall","src":"2709:25:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2695:3:13"},"nodeType":"YulFunctionCall","src":"2695:40:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2689:5:13"},"nodeType":"YulFunctionCall","src":"2689:47:13"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"2670:7:13"},"nodeType":"YulFunctionCall","src":"2670:67:13"},"nodeType":"YulExpressionStatement","src":"2670:67:13"},{"nodeType":"YulAssignment","src":"2754:30:13","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2771:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"2782:1:13","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2767:3:13"},"nodeType":"YulFunctionCall","src":"2767:17:13"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2754:9:13"}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2821:9:13"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"2842:8:13"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2860:1:13","type":"","value":"6"},{"name":"input","nodeType":"YulIdentifier","src":"2863:5:13"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2856:3:13"},"nodeType":"YulFunctionCall","src":"2856:13:13"},{"kind":"number","nodeType":"YulLiteral","src":"2871:4:13","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2852:3:13"},"nodeType":"YulFunctionCall","src":"2852:24:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2838:3:13"},"nodeType":"YulFunctionCall","src":"2838:39:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2832:5:13"},"nodeType":"YulFunctionCall","src":"2832:46:13"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"2813:7:13"},"nodeType":"YulFunctionCall","src":"2813:66:13"},"nodeType":"YulExpressionStatement","src":"2813:66:13"},{"nodeType":"YulAssignment","src":"2896:30:13","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2913:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"2924:1:13","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2909:3:13"},"nodeType":"YulFunctionCall","src":"2909:17:13"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2896:9:13"}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2963:9:13"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"2984:8:13"},{"arguments":[{"name":"input","nodeType":"YulIdentifier","src":"2998:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"3005:4:13","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2994:3:13"},"nodeType":"YulFunctionCall","src":"2994:16:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2980:3:13"},"nodeType":"YulFunctionCall","src":"2980:31:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2974:5:13"},"nodeType":"YulFunctionCall","src":"2974:38:13"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"2955:7:13"},"nodeType":"YulFunctionCall","src":"2955:58:13"},"nodeType":"YulExpressionStatement","src":"2955:58:13"},{"nodeType":"YulAssignment","src":"3030:30:13","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3047:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"3058:1:13","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3043:3:13"},"nodeType":"YulFunctionCall","src":"3043:17:13"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3030:9:13"}]}]},"condition":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"1794:7:13"},{"name":"endPtr","nodeType":"YulIdentifier","src":"1803:6:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1791:2:13"},"nodeType":"YulFunctionCall","src":"1791:19:13"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1811:16:13","statements":[]},"pre":{"nodeType":"YulBlock","src":"1686:104:13","statements":[{"nodeType":"YulVariableDeclaration","src":"1704:19:13","value":{"name":"data","nodeType":"YulIdentifier","src":"1719:4:13"},"variables":[{"name":"dataPtr","nodeType":"YulTypedName","src":"1708:7:13","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1740:36:13","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1758:4:13"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1770:4:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1764:5:13"},"nodeType":"YulFunctionCall","src":"1764:11:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1754:3:13"},"nodeType":"YulFunctionCall","src":"1754:22:13"},"variables":[{"name":"endPtr","nodeType":"YulTypedName","src":"1744:6:13","type":""}]}]},"src":"1682:1403:13"},{"cases":[{"body":{"nodeType":"YulBlock","src":"3265:113:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3295:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"3306:1:13","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3291:3:13"},"nodeType":"YulFunctionCall","src":"3291:17:13"},{"kind":"number","nodeType":"YulLiteral","src":"3310:4:13","type":"","value":"0x3d"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"3283:7:13"},"nodeType":"YulFunctionCall","src":"3283:32:13"},"nodeType":"YulExpressionStatement","src":"3283:32:13"},{"expression":{"arguments":[{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3344:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"3355:1:13","type":"","value":"2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3340:3:13"},"nodeType":"YulFunctionCall","src":"3340:17:13"},{"kind":"number","nodeType":"YulLiteral","src":"3359:4:13","type":"","value":"0x3d"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"3332:7:13"},"nodeType":"YulFunctionCall","src":"3332:32:13"},"nodeType":"YulExpressionStatement","src":"3332:32:13"}]},"nodeType":"YulCase","src":"3258:120:13","value":{"kind":"number","nodeType":"YulLiteral","src":"3263:1:13","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"3398:64:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3428:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"3439:1:13","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3424:3:13"},"nodeType":"YulFunctionCall","src":"3424:17:13"},{"kind":"number","nodeType":"YulLiteral","src":"3443:4:13","type":"","value":"0x3d"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"3416:7:13"},"nodeType":"YulFunctionCall","src":"3416:32:13"},"nodeType":"YulExpressionStatement","src":"3416:32:13"}]},"nodeType":"YulCase","src":"3391:71:13","value":{"kind":"number","nodeType":"YulLiteral","src":"3396:1:13","type":"","value":"2"}}],"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3236:4:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3230:5:13"},"nodeType":"YulFunctionCall","src":"3230:11:13"},{"kind":"number","nodeType":"YulLiteral","src":"3243:1:13","type":"","value":"3"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"3226:3:13"},"nodeType":"YulFunctionCall","src":"3226:19:13"},"nodeType":"YulSwitch","src":"3219:243:13"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2705,"isOffset":false,"isSlot":false,"src":"1719:4:13","valueSize":1},{"declaration":2705,"isOffset":false,"isSlot":false,"src":"1758:4:13","valueSize":1},{"declaration":2705,"isOffset":false,"isSlot":false,"src":"1770:4:13","valueSize":1},{"declaration":2705,"isOffset":false,"isSlot":false,"src":"3236:4:13","valueSize":1},{"declaration":2722,"isOffset":false,"isSlot":false,"src":"1604:6:13","valueSize":1},{"declaration":2718,"isOffset":false,"isSlot":false,"src":"1504:5:13","valueSize":1}],"id":2737,"nodeType":"InlineAssembly","src":"1390:2082:13"},{"expression":{"id":2738,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2722,"src":"3489:6:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2709,"id":2739,"nodeType":"Return","src":"3482:13:13"}]},"documentation":{"id":2703,"nodeType":"StructuredDocumentation","src":"389:82:13","text":" @dev Converts a `bytes` to its Bytes64 `string` representation."},"id":2741,"implemented":true,"kind":"function","modifiers":[],"name":"encode","nameLocation":"485:6:13","nodeType":"FunctionDefinition","parameters":{"id":2706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2705,"mutability":"mutable","name":"data","nameLocation":"505:4:13","nodeType":"VariableDeclaration","scope":2741,"src":"492:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2704,"name":"bytes","nodeType":"ElementaryTypeName","src":"492:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"491:19:13"},"returnParameters":{"id":2709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2708,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2741,"src":"534:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2707,"name":"string","nodeType":"ElementaryTypeName","src":"534:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"533:15:13"},"scope":2742,"src":"476:3026:13","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2743,"src":"202:3302:13","usedErrors":[],"usedEvents":[]}],"src":"100:3405:13"},"id":13},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[2772]},"id":2773,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2744,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:14"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":2745,"nodeType":"StructuredDocumentation","src":"127:496:14","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2772,"linearizedBaseContracts":[2772],"name":"Context","nameLocation":"642:7:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":2753,"nodeType":"Block","src":"718:34:14","statements":[{"expression":{"expression":{"id":2750,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"735:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:14","memberName":"sender","nodeType":"MemberAccess","src":"735:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2749,"id":2752,"nodeType":"Return","src":"728:17:14"}]},"id":2754,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:14","nodeType":"FunctionDefinition","parameters":{"id":2746,"nodeType":"ParameterList","parameters":[],"src":"675:2:14"},"returnParameters":{"id":2749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2748,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2754,"src":"709:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2747,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:14"},"scope":2772,"src":"656:96:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2762,"nodeType":"Block","src":"825:32:14","statements":[{"expression":{"expression":{"id":2759,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"842:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:14","memberName":"data","nodeType":"MemberAccess","src":"842:8:14","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2758,"id":2761,"nodeType":"Return","src":"835:15:14"}]},"id":2763,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:14","nodeType":"FunctionDefinition","parameters":{"id":2755,"nodeType":"ParameterList","parameters":[],"src":"775:2:14"},"returnParameters":{"id":2758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2757,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2763,"src":"809:14:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2756,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:14"},"scope":2772,"src":"758:99:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2770,"nodeType":"Block","src":"935:25:14","statements":[{"expression":{"hexValue":"30","id":2768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2767,"id":2769,"nodeType":"Return","src":"945:8:14"}]},"id":2771,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:14","nodeType":"FunctionDefinition","parameters":{"id":2764,"nodeType":"ParameterList","parameters":[],"src":"892:2:14"},"returnParameters":{"id":2767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2766,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2771,"src":"926:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2765,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:14"},"scope":2772,"src":"863:97:14","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2773,"src":"624:338:14","usedErrors":[],"usedEvents":[]}],"src":"101:862:14"},"id":14},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[4117],"SignedMath":[4222],"Strings":[3027]},"id":3028,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2774,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:15"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":2776,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3028,"sourceUnit":4118,"src":"127:37:15","symbolAliases":[{"foreign":{"id":2775,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4117,"src":"135:4:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":2778,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3028,"sourceUnit":4223,"src":"165:49:15","symbolAliases":[{"foreign":{"id":2777,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4222,"src":"173:10:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":2779,"nodeType":"StructuredDocumentation","src":"216:34:15","text":" @dev String operations."},"fullyImplemented":true,"id":3027,"linearizedBaseContracts":[3027],"name":"Strings","nameLocation":"259:7:15","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2782,"mutability":"constant","name":"HEX_DIGITS","nameLocation":"298:10:15","nodeType":"VariableDeclaration","scope":3027,"src":"273:56:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":2780,"name":"bytes16","nodeType":"ElementaryTypeName","src":"273:7:15","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":2781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":2785,"mutability":"constant","name":"ADDRESS_LENGTH","nameLocation":"358:14:15","nodeType":"VariableDeclaration","scope":3027,"src":"335:42:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2783,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":2784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"375:2:15","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"documentation":{"id":2786,"nodeType":"StructuredDocumentation","src":"384:81:15","text":" @dev The `value` string doesn't fit in the specified `length`."},"errorSelector":"e22e27eb","id":2792,"name":"StringsInsufficientHexLength","nameLocation":"476:28:15","nodeType":"ErrorDefinition","parameters":{"id":2791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2788,"mutability":"mutable","name":"value","nameLocation":"513:5:15","nodeType":"VariableDeclaration","scope":2792,"src":"505:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2787,"name":"uint256","nodeType":"ElementaryTypeName","src":"505:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2790,"mutability":"mutable","name":"length","nameLocation":"528:6:15","nodeType":"VariableDeclaration","scope":2792,"src":"520:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2789,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"504:31:15"},"src":"470:66:15"},{"body":{"id":2839,"nodeType":"Block","src":"708:627:15","statements":[{"id":2838,"nodeType":"UncheckedBlock","src":"718:611:15","statements":[{"assignments":[2801],"declarations":[{"constant":false,"id":2801,"mutability":"mutable","name":"length","nameLocation":"750:6:15","nodeType":"VariableDeclaration","scope":2838,"src":"742:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2800,"name":"uint256","nodeType":"ElementaryTypeName","src":"742:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2808,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2804,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2795,"src":"770:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2802,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4117,"src":"759:4:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4117_$","typeString":"type(library Math)"}},"id":2803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"764:5:15","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":3937,"src":"759:10:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"759:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"779:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"759:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"742:38:15"},{"assignments":[2810],"declarations":[{"constant":false,"id":2810,"mutability":"mutable","name":"buffer","nameLocation":"808:6:15","nodeType":"VariableDeclaration","scope":2838,"src":"794:20:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2809,"name":"string","nodeType":"ElementaryTypeName","src":"794:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2815,"initialValue":{"arguments":[{"id":2813,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2801,"src":"828:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2812,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"817:10:15","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":2811,"name":"string","nodeType":"ElementaryTypeName","src":"821:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":2814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"817:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"794:41:15"},{"assignments":[2817],"declarations":[{"constant":false,"id":2817,"mutability":"mutable","name":"ptr","nameLocation":"857:3:15","nodeType":"VariableDeclaration","scope":2838,"src":"849:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2816,"name":"uint256","nodeType":"ElementaryTypeName","src":"849:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2818,"nodeType":"VariableDeclarationStatement","src":"849:11:15"},{"AST":{"nodeType":"YulBlock","src":"930:67:15","statements":[{"nodeType":"YulAssignment","src":"948:35:15","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"959:6:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"971:2:15","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"975:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"967:3:15"},"nodeType":"YulFunctionCall","src":"967:15:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"955:3:15"},"nodeType":"YulFunctionCall","src":"955:28:15"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"948:3:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2810,"isOffset":false,"isSlot":false,"src":"959:6:15","valueSize":1},{"declaration":2801,"isOffset":false,"isSlot":false,"src":"975:6:15","valueSize":1},{"declaration":2817,"isOffset":false,"isSlot":false,"src":"948:3:15","valueSize":1}],"id":2819,"nodeType":"InlineAssembly","src":"921:76:15"},{"body":{"id":2834,"nodeType":"Block","src":"1023:269:15","statements":[{"expression":{"id":2822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"1041:5:15","subExpression":{"id":2821,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"1041:3:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2823,"nodeType":"ExpressionStatement","src":"1041:5:15"},{"AST":{"nodeType":"YulBlock","src":"1124:86:15","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1154:3:15"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"1175:2:15","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"1164:3:15"},"nodeType":"YulFunctionCall","src":"1164:14:15"},{"name":"HEX_DIGITS","nodeType":"YulIdentifier","src":"1180:10:15"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1159:4:15"},"nodeType":"YulFunctionCall","src":"1159:32:15"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1146:7:15"},"nodeType":"YulFunctionCall","src":"1146:46:15"},"nodeType":"YulExpressionStatement","src":"1146:46:15"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2782,"isOffset":false,"isSlot":false,"src":"1180:10:15","valueSize":1},{"declaration":2817,"isOffset":false,"isSlot":false,"src":"1154:3:15","valueSize":1},{"declaration":2795,"isOffset":false,"isSlot":false,"src":"1168:5:15","valueSize":1}],"id":2824,"nodeType":"InlineAssembly","src":"1115:95:15"},{"expression":{"id":2827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2825,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2795,"src":"1227:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":2826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1236:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1227:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2828,"nodeType":"ExpressionStatement","src":"1227:11:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2829,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2795,"src":"1260:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1269:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1260:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2833,"nodeType":"IfStatement","src":"1256:21:15","trueBody":{"id":2832,"nodeType":"Break","src":"1272:5:15"}}]},"condition":{"hexValue":"74727565","id":2820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1017:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":2835,"nodeType":"WhileStatement","src":"1010:282:15"},{"expression":{"id":2836,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2810,"src":"1312:6:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2799,"id":2837,"nodeType":"Return","src":"1305:13:15"}]}]},"documentation":{"id":2793,"nodeType":"StructuredDocumentation","src":"542:90:15","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":2840,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"646:8:15","nodeType":"FunctionDefinition","parameters":{"id":2796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2795,"mutability":"mutable","name":"value","nameLocation":"663:5:15","nodeType":"VariableDeclaration","scope":2840,"src":"655:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2794,"name":"uint256","nodeType":"ElementaryTypeName","src":"655:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"654:15:15"},"returnParameters":{"id":2799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2798,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2840,"src":"693:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2797,"name":"string","nodeType":"ElementaryTypeName","src":"693:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"692:15:15"},"scope":3027,"src":"637:698:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2865,"nodeType":"Block","src":"1511:92:15","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2851,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"1542:5:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":2852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1550:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1542:9:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":2855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1560:2:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":2856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1542:20:15","trueExpression":{"hexValue":"2d","id":2854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1554:3:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":2860,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"1588:5:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":2858,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4222,"src":"1573:10:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$4222_$","typeString":"type(library SignedMath)"}},"id":2859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1584:3:15","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":4221,"src":"1573:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":2861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1573:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2857,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"1564:8:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1564:31:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2849,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1528:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2848,"name":"string","nodeType":"ElementaryTypeName","src":"1528:6:15","typeDescriptions":{}}},"id":2850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1535:6:15","memberName":"concat","nodeType":"MemberAccess","src":"1528:13:15","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":2863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1528:68:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2847,"id":2864,"nodeType":"Return","src":"1521:75:15"}]},"documentation":{"id":2841,"nodeType":"StructuredDocumentation","src":"1341:89:15","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":2866,"implemented":true,"kind":"function","modifiers":[],"name":"toStringSigned","nameLocation":"1444:14:15","nodeType":"FunctionDefinition","parameters":{"id":2844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2843,"mutability":"mutable","name":"value","nameLocation":"1466:5:15","nodeType":"VariableDeclaration","scope":2866,"src":"1459:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2842,"name":"int256","nodeType":"ElementaryTypeName","src":"1459:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1458:14:15"},"returnParameters":{"id":2847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2846,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2866,"src":"1496:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2845,"name":"string","nodeType":"ElementaryTypeName","src":"1496:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1495:15:15"},"scope":3027,"src":"1435:168:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2885,"nodeType":"Block","src":"1782:100:15","statements":[{"id":2884,"nodeType":"UncheckedBlock","src":"1792:84:15","statements":[{"expression":{"arguments":[{"id":2875,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2869,"src":"1835:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2878,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2869,"src":"1854:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2876,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4117,"src":"1842:4:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4117_$","typeString":"type(library Math)"}},"id":2877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1847:6:15","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":4059,"src":"1842:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1842:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1863:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1842:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2874,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2886,2969,2989],"referencedDeclaration":2969,"src":"1823:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1823:42:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2873,"id":2883,"nodeType":"Return","src":"1816:49:15"}]}]},"documentation":{"id":2867,"nodeType":"StructuredDocumentation","src":"1609:94:15","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":2886,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1717:11:15","nodeType":"FunctionDefinition","parameters":{"id":2870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2869,"mutability":"mutable","name":"value","nameLocation":"1737:5:15","nodeType":"VariableDeclaration","scope":2886,"src":"1729:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2868,"name":"uint256","nodeType":"ElementaryTypeName","src":"1729:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1728:15:15"},"returnParameters":{"id":2873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2872,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2886,"src":"1767:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2871,"name":"string","nodeType":"ElementaryTypeName","src":"1767:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1766:15:15"},"scope":3027,"src":"1708:174:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2968,"nodeType":"Block","src":"2095:435:15","statements":[{"assignments":[2897],"declarations":[{"constant":false,"id":2897,"mutability":"mutable","name":"localValue","nameLocation":"2113:10:15","nodeType":"VariableDeclaration","scope":2968,"src":"2105:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2896,"name":"uint256","nodeType":"ElementaryTypeName","src":"2105:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2899,"initialValue":{"id":2898,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"2126:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2105:26:15"},{"assignments":[2901],"declarations":[{"constant":false,"id":2901,"mutability":"mutable","name":"buffer","nameLocation":"2154:6:15","nodeType":"VariableDeclaration","scope":2968,"src":"2141:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2900,"name":"bytes","nodeType":"ElementaryTypeName","src":"2141:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2910,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2173:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2905,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2891,"src":"2177:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2173:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2186:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2173:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2903,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2163:9:15","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2902,"name":"bytes","nodeType":"ElementaryTypeName","src":"2167:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2163:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2141:47:15"},{"expression":{"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2911,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2901,"src":"2198:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2913,"indexExpression":{"hexValue":"30","id":2912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2205:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2198:9:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2210:3:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2198:15:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2916,"nodeType":"ExpressionStatement","src":"2198:15:15"},{"expression":{"id":2921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2917,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2901,"src":"2223:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2919,"indexExpression":{"hexValue":"31","id":2918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2230:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2223:9:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":2920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2235:3:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2223:15:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2922,"nodeType":"ExpressionStatement","src":"2223:15:15"},{"body":{"id":2951,"nodeType":"Block","src":"2293:95:15","statements":[{"expression":{"id":2945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2937,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2901,"src":"2307:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2939,"indexExpression":{"id":2938,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2924,"src":"2314:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2307:9:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2940,"name":"HEX_DIGITS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"2319:10:15","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":2944,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2941,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2897,"src":"2330:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":2942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2343:3:15","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2330:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2319:28:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2307:40:15","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2946,"nodeType":"ExpressionStatement","src":"2307:40:15"},{"expression":{"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2947,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2897,"src":"2361:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2376:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2361:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2950,"nodeType":"ExpressionStatement","src":"2361:16:15"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2931,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2924,"src":"2281:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2285:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2281:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2952,"initializationExpression":{"assignments":[2924],"declarations":[{"constant":false,"id":2924,"mutability":"mutable","name":"i","nameLocation":"2261:1:15","nodeType":"VariableDeclaration","scope":2952,"src":"2253:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2923,"name":"uint256","nodeType":"ElementaryTypeName","src":"2253:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2930,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2265:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2926,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2891,"src":"2269:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2265:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2278:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2265:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2253:26:15"},"loopExpression":{"expression":{"id":2935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2288:3:15","subExpression":{"id":2934,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2924,"src":"2290:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2936,"nodeType":"ExpressionStatement","src":"2288:3:15"},"nodeType":"ForStatement","src":"2248:140:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2953,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2897,"src":"2401:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2415:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2401:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2962,"nodeType":"IfStatement","src":"2397:96:15","trueBody":{"id":2961,"nodeType":"Block","src":"2418:75:15","statements":[{"errorCall":{"arguments":[{"id":2957,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"2468:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2958,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2891,"src":"2475:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2956,"name":"StringsInsufficientHexLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2792,"src":"2439:28:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":2959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2439:43:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2960,"nodeType":"RevertStatement","src":"2432:50:15"}]}},{"expression":{"arguments":[{"id":2965,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2901,"src":"2516:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2964,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2963,"name":"string","nodeType":"ElementaryTypeName","src":"2509:6:15","typeDescriptions":{}}},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:14:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2895,"id":2967,"nodeType":"Return","src":"2502:21:15"}]},"documentation":{"id":2887,"nodeType":"StructuredDocumentation","src":"1888:112:15","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":2969,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2014:11:15","nodeType":"FunctionDefinition","parameters":{"id":2892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2889,"mutability":"mutable","name":"value","nameLocation":"2034:5:15","nodeType":"VariableDeclaration","scope":2969,"src":"2026:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2888,"name":"uint256","nodeType":"ElementaryTypeName","src":"2026:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2891,"mutability":"mutable","name":"length","nameLocation":"2049:6:15","nodeType":"VariableDeclaration","scope":2969,"src":"2041:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2890,"name":"uint256","nodeType":"ElementaryTypeName","src":"2041:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2025:31:15"},"returnParameters":{"id":2895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2894,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2969,"src":"2080:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2893,"name":"string","nodeType":"ElementaryTypeName","src":"2080:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2079:15:15"},"scope":3027,"src":"2005:525:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2988,"nodeType":"Block","src":"2762:75:15","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2982,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2972,"src":"2807:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2981,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2799:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2980,"name":"uint160","nodeType":"ElementaryTypeName","src":"2799:7:15","typeDescriptions":{}}},"id":2983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2799:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2979,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2791:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2978,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:15","typeDescriptions":{}}},"id":2984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2791:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2985,"name":"ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"2815:14:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2977,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2886,2969,2989],"referencedDeclaration":2969,"src":"2779:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2779:51:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2976,"id":2987,"nodeType":"Return","src":"2772:58:15"}]},"documentation":{"id":2970,"nodeType":"StructuredDocumentation","src":"2536:148:15","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."},"id":2989,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2698:11:15","nodeType":"FunctionDefinition","parameters":{"id":2973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2972,"mutability":"mutable","name":"addr","nameLocation":"2718:4:15","nodeType":"VariableDeclaration","scope":2989,"src":"2710:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2971,"name":"address","nodeType":"ElementaryTypeName","src":"2710:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2709:14:15"},"returnParameters":{"id":2976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2975,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2989,"src":"2747:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2974,"name":"string","nodeType":"ElementaryTypeName","src":"2747:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2746:15:15"},"scope":3027,"src":"2689:148:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3025,"nodeType":"Block","src":"2992:104:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3001,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2992,"src":"3015:1:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3000,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3009:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2999,"name":"bytes","nodeType":"ElementaryTypeName","src":"3009:5:15","typeDescriptions":{}}},"id":3002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3009:8:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3018:6:15","memberName":"length","nodeType":"MemberAccess","src":"3009:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3006,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"3034:1:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3005,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3028:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3004,"name":"bytes","nodeType":"ElementaryTypeName","src":"3028:5:15","typeDescriptions":{}}},"id":3007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3028:8:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3037:6:15","memberName":"length","nodeType":"MemberAccess","src":"3028:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3009:34:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":3013,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2992,"src":"3063:1:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3012,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3057:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3011,"name":"bytes","nodeType":"ElementaryTypeName","src":"3057:5:15","typeDescriptions":{}}},"id":3014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3057:8:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3010,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"3047:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3047:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":3019,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"3086:1:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3018,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3080:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3017,"name":"bytes","nodeType":"ElementaryTypeName","src":"3080:5:15","typeDescriptions":{}}},"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3080:8:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3016,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"3070:9:15","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3070:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3047:42:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3009:80:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2998,"id":3024,"nodeType":"Return","src":"3002:87:15"}]},"documentation":{"id":2990,"nodeType":"StructuredDocumentation","src":"2843:66:15","text":" @dev Returns true if the two strings are equal."},"id":3026,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2923:5:15","nodeType":"FunctionDefinition","parameters":{"id":2995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2992,"mutability":"mutable","name":"a","nameLocation":"2943:1:15","nodeType":"VariableDeclaration","scope":3026,"src":"2929:15:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2991,"name":"string","nodeType":"ElementaryTypeName","src":"2929:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2994,"mutability":"mutable","name":"b","nameLocation":"2960:1:15","nodeType":"VariableDeclaration","scope":3026,"src":"2946:15:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2993,"name":"string","nodeType":"ElementaryTypeName","src":"2946:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2928:34:15"},"returnParameters":{"id":2998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2997,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3026,"src":"2986:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2996,"name":"bool","nodeType":"ElementaryTypeName","src":"2986:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2985:6:15"},"scope":3027,"src":"2914:182:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3028,"src":"251:2847:15","usedErrors":[2792],"usedEvents":[]}],"src":"101:2998:15"},"id":15},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[3051],"IERC165":[3063]},"id":3052,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3029,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:16"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":3031,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3052,"sourceUnit":3064,"src":"140:38:16","symbolAliases":[{"foreign":{"id":3030,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"148:7:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3033,"name":"IERC165","nameLocations":["687:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":3063,"src":"687:7:16"},"id":3034,"nodeType":"InheritanceSpecifier","src":"687:7:16"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":3032,"nodeType":"StructuredDocumentation","src":"180:478:16","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":3051,"linearizedBaseContracts":[3051,3063],"name":"ERC165","nameLocation":"677:6:16","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[3062],"body":{"id":3049,"nodeType":"Block","src":"844:64:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3042,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3037,"src":"861:11:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3044,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"881:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3063_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$3063_$","typeString":"type(contract IERC165)"}],"id":3043,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"876:4:16","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"876:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$3063","typeString":"type(contract IERC165)"}},"id":3046,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"890:11:16","memberName":"interfaceId","nodeType":"MemberAccess","src":"876:25:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"861:40:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3041,"id":3048,"nodeType":"Return","src":"854:47:16"}]},"documentation":{"id":3035,"nodeType":"StructuredDocumentation","src":"701:56:16","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":3050,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"771:17:16","nodeType":"FunctionDefinition","parameters":{"id":3038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3037,"mutability":"mutable","name":"interfaceId","nameLocation":"796:11:16","nodeType":"VariableDeclaration","scope":3050,"src":"789:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3036,"name":"bytes4","nodeType":"ElementaryTypeName","src":"789:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"788:20:16"},"returnParameters":{"id":3041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3040,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3050,"src":"838:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3039,"name":"bool","nodeType":"ElementaryTypeName","src":"838:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"837:6:16"},"scope":3051,"src":"762:146:16","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":3052,"src":"659:251:16","usedErrors":[],"usedEvents":[]}],"src":"114:797:16"},"id":16},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[3063]},"id":3064,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3053,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:17"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":3054,"nodeType":"StructuredDocumentation","src":"141:279:17","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":3063,"linearizedBaseContracts":[3063],"name":"IERC165","nameLocation":"431:7:17","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3055,"nodeType":"StructuredDocumentation","src":"445:340:17","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":3062,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"799:17:17","nodeType":"FunctionDefinition","parameters":{"id":3058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3057,"mutability":"mutable","name":"interfaceId","nameLocation":"824:11:17","nodeType":"VariableDeclaration","scope":3062,"src":"817:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3056,"name":"bytes4","nodeType":"ElementaryTypeName","src":"817:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"816:20:17"},"returnParameters":{"id":3061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3060,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3062,"src":"860:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3059,"name":"bool","nodeType":"ElementaryTypeName","src":"860:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"859:6:17"},"scope":3063,"src":"790:76:17","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3064,"src":"421:447:17","usedErrors":[],"usedEvents":[]}],"src":"115:754:17"},"id":17},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[4117]},"id":4118,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3065,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:18"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":3066,"nodeType":"StructuredDocumentation","src":"129:73:18","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4117,"linearizedBaseContracts":[4117],"name":"Math","nameLocation":"211:4:18","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3067,"nodeType":"StructuredDocumentation","src":"222:50:18","text":" @dev Muldiv operation overflow."},"errorSelector":"227bc153","id":3069,"name":"MathOverflowedMulDiv","nameLocation":"283:20:18","nodeType":"ErrorDefinition","parameters":{"id":3068,"nodeType":"ParameterList","parameters":[],"src":"303:2:18"},"src":"277:29:18"},{"canonicalName":"Math.Rounding","id":3074,"members":[{"id":3070,"name":"Floor","nameLocation":"336:5:18","nodeType":"EnumValue","src":"336:5:18"},{"id":3071,"name":"Ceil","nameLocation":"379:4:18","nodeType":"EnumValue","src":"379:4:18"},{"id":3072,"name":"Trunc","nameLocation":"421:5:18","nodeType":"EnumValue","src":"421:5:18"},{"id":3073,"name":"Expand","nameLocation":"451:6:18","nodeType":"EnumValue","src":"451:6:18"}],"name":"Rounding","nameLocation":"317:8:18","nodeType":"EnumDefinition","src":"312:169:18"},{"body":{"id":3105,"nodeType":"Block","src":"661:140:18","statements":[{"id":3104,"nodeType":"UncheckedBlock","src":"671:124:18","statements":[{"assignments":[3087],"declarations":[{"constant":false,"id":3087,"mutability":"mutable","name":"c","nameLocation":"703:1:18","nodeType":"VariableDeclaration","scope":3104,"src":"695:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3086,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3091,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3088,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"707:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3089,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3079,"src":"711:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"707:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"695:17:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3092,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"730:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3093,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"734:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"730:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3099,"nodeType":"IfStatement","src":"726:28:18","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"745:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"752:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3097,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"744:10:18","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3085,"id":3098,"nodeType":"Return","src":"737:17:18"}},{"expression":{"components":[{"hexValue":"74727565","id":3100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"776:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":3101,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"782:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3102,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"775:9:18","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3085,"id":3103,"nodeType":"Return","src":"768:16:18"}]}]},"documentation":{"id":3075,"nodeType":"StructuredDocumentation","src":"487:93:18","text":" @dev Returns the addition of two unsigned integers, with an overflow flag."},"id":3106,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"594:6:18","nodeType":"FunctionDefinition","parameters":{"id":3080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3077,"mutability":"mutable","name":"a","nameLocation":"609:1:18","nodeType":"VariableDeclaration","scope":3106,"src":"601:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3076,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3079,"mutability":"mutable","name":"b","nameLocation":"620:1:18","nodeType":"VariableDeclaration","scope":3106,"src":"612:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3078,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:18"},"returnParameters":{"id":3085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3082,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3106,"src":"646:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3081,"name":"bool","nodeType":"ElementaryTypeName","src":"646:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3084,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3106,"src":"652:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3083,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:15:18"},"scope":4117,"src":"585:216:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3133,"nodeType":"Block","src":"984:113:18","statements":[{"id":3132,"nodeType":"UncheckedBlock","src":"994:97:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3118,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3111,"src":"1022:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3119,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"1026:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1022:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3125,"nodeType":"IfStatement","src":"1018:28:18","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1037:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3123,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1036:10:18","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3117,"id":3124,"nodeType":"Return","src":"1029:17:18"}},{"expression":{"components":[{"hexValue":"74727565","id":3126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1068:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3127,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"1074:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3128,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3111,"src":"1078:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1074:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3130,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1067:13:18","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3117,"id":3131,"nodeType":"Return","src":"1060:20:18"}]}]},"documentation":{"id":3107,"nodeType":"StructuredDocumentation","src":"807:96:18","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag."},"id":3134,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"917:6:18","nodeType":"FunctionDefinition","parameters":{"id":3112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3109,"mutability":"mutable","name":"a","nameLocation":"932:1:18","nodeType":"VariableDeclaration","scope":3134,"src":"924:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3108,"name":"uint256","nodeType":"ElementaryTypeName","src":"924:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3111,"mutability":"mutable","name":"b","nameLocation":"943:1:18","nodeType":"VariableDeclaration","scope":3134,"src":"935:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3110,"name":"uint256","nodeType":"ElementaryTypeName","src":"935:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"923:22:18"},"returnParameters":{"id":3117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3114,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3134,"src":"969:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3113,"name":"bool","nodeType":"ElementaryTypeName","src":"969:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3116,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3134,"src":"975:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3115,"name":"uint256","nodeType":"ElementaryTypeName","src":"975:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"968:15:18"},"scope":4117,"src":"908:189:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3175,"nodeType":"Block","src":"1283:417:18","statements":[{"id":3174,"nodeType":"UncheckedBlock","src":"1293:401:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3146,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"1551:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1556:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1551:6:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3153,"nodeType":"IfStatement","src":"1547:28:18","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":3149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1567:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":3150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1573:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3151,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1566:9:18","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3145,"id":3152,"nodeType":"Return","src":"1559:16:18"}},{"assignments":[3155],"declarations":[{"constant":false,"id":3155,"mutability":"mutable","name":"c","nameLocation":"1597:1:18","nodeType":"VariableDeclaration","scope":3174,"src":"1589:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3154,"name":"uint256","nodeType":"ElementaryTypeName","src":"1589:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3159,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3156,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"1601:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3157,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"1605:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1601:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1589:17:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3160,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3155,"src":"1624:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3161,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"1628:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3163,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"1633:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:10:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3169,"nodeType":"IfStatement","src":"1620:33:18","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1644:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1651:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3167,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1643:10:18","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3145,"id":3168,"nodeType":"Return","src":"1636:17:18"}},{"expression":{"components":[{"hexValue":"74727565","id":3170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1675:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":3171,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3155,"src":"1681:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3172,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1674:9:18","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3145,"id":3173,"nodeType":"Return","src":"1667:16:18"}]}]},"documentation":{"id":3135,"nodeType":"StructuredDocumentation","src":"1103:99:18","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag."},"id":3176,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1216:6:18","nodeType":"FunctionDefinition","parameters":{"id":3140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3137,"mutability":"mutable","name":"a","nameLocation":"1231:1:18","nodeType":"VariableDeclaration","scope":3176,"src":"1223:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3136,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3139,"mutability":"mutable","name":"b","nameLocation":"1242:1:18","nodeType":"VariableDeclaration","scope":3176,"src":"1234:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3138,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1222:22:18"},"returnParameters":{"id":3145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3142,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3176,"src":"1268:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3141,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3144,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3176,"src":"1274:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3143,"name":"uint256","nodeType":"ElementaryTypeName","src":"1274:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1267:15:18"},"scope":4117,"src":"1207:493:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3203,"nodeType":"Block","src":"1887:114:18","statements":[{"id":3202,"nodeType":"UncheckedBlock","src":"1897:98:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3188,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3181,"src":"1925:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1930:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1925:6:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3195,"nodeType":"IfStatement","src":"1921:29:18","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1941:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1948:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3193,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1940:10:18","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3187,"id":3194,"nodeType":"Return","src":"1933:17:18"}},{"expression":{"components":[{"hexValue":"74727565","id":3196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1972:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3197,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"1978:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3198,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3181,"src":"1982:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1978:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3200,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1971:13:18","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3187,"id":3201,"nodeType":"Return","src":"1964:20:18"}]}]},"documentation":{"id":3177,"nodeType":"StructuredDocumentation","src":"1706:100:18","text":" @dev Returns the division of two unsigned integers, with a division by zero flag."},"id":3204,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1820:6:18","nodeType":"FunctionDefinition","parameters":{"id":3182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3179,"mutability":"mutable","name":"a","nameLocation":"1835:1:18","nodeType":"VariableDeclaration","scope":3204,"src":"1827:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3178,"name":"uint256","nodeType":"ElementaryTypeName","src":"1827:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3181,"mutability":"mutable","name":"b","nameLocation":"1846:1:18","nodeType":"VariableDeclaration","scope":3204,"src":"1838:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3180,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1826:22:18"},"returnParameters":{"id":3187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3204,"src":"1872:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3183,"name":"bool","nodeType":"ElementaryTypeName","src":"1872:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3186,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3204,"src":"1878:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3185,"name":"uint256","nodeType":"ElementaryTypeName","src":"1878:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1871:15:18"},"scope":4117,"src":"1811:190:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3231,"nodeType":"Block","src":"2198:114:18","statements":[{"id":3230,"nodeType":"UncheckedBlock","src":"2208:98:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3216,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"2236:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2241:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:6:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3223,"nodeType":"IfStatement","src":"2232:29:18","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2252:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2259:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3221,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2251:10:18","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3215,"id":3222,"nodeType":"Return","src":"2244:17:18"}},{"expression":{"components":[{"hexValue":"74727565","id":3224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2283:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3225,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"2289:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":3226,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"2293:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2289:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3228,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2282:13:18","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3215,"id":3229,"nodeType":"Return","src":"2275:20:18"}]}]},"documentation":{"id":3205,"nodeType":"StructuredDocumentation","src":"2007:110:18","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."},"id":3232,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2131:6:18","nodeType":"FunctionDefinition","parameters":{"id":3210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3207,"mutability":"mutable","name":"a","nameLocation":"2146:1:18","nodeType":"VariableDeclaration","scope":3232,"src":"2138:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3206,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3209,"mutability":"mutable","name":"b","nameLocation":"2157:1:18","nodeType":"VariableDeclaration","scope":3232,"src":"2149:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3208,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2137:22:18"},"returnParameters":{"id":3215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3212,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3232,"src":"2183:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3211,"name":"bool","nodeType":"ElementaryTypeName","src":"2183:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3214,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3232,"src":"2189:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3213,"name":"uint256","nodeType":"ElementaryTypeName","src":"2189:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2182:15:18"},"scope":4117,"src":"2122:190:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3249,"nodeType":"Block","src":"2449:37:18","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3242,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3235,"src":"2466:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3243,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3237,"src":"2470:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2466:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3246,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3237,"src":"2478:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2466:13:18","trueExpression":{"id":3245,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3235,"src":"2474:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3241,"id":3248,"nodeType":"Return","src":"2459:20:18"}]},"documentation":{"id":3233,"nodeType":"StructuredDocumentation","src":"2318:59:18","text":" @dev Returns the largest of two numbers."},"id":3250,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"2391:3:18","nodeType":"FunctionDefinition","parameters":{"id":3238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3235,"mutability":"mutable","name":"a","nameLocation":"2403:1:18","nodeType":"VariableDeclaration","scope":3250,"src":"2395:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3234,"name":"uint256","nodeType":"ElementaryTypeName","src":"2395:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3237,"mutability":"mutable","name":"b","nameLocation":"2414:1:18","nodeType":"VariableDeclaration","scope":3250,"src":"2406:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3236,"name":"uint256","nodeType":"ElementaryTypeName","src":"2406:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2394:22:18"},"returnParameters":{"id":3241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3240,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3250,"src":"2440:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3239,"name":"uint256","nodeType":"ElementaryTypeName","src":"2440:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2439:9:18"},"scope":4117,"src":"2382:104:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3267,"nodeType":"Block","src":"2624:37:18","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3260,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"2641:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3261,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"2645:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2641:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3264,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3255,"src":"2653:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2641:13:18","trueExpression":{"id":3263,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"2649:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3259,"id":3266,"nodeType":"Return","src":"2634:20:18"}]},"documentation":{"id":3251,"nodeType":"StructuredDocumentation","src":"2492:60:18","text":" @dev Returns the smallest of two numbers."},"id":3268,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"2566:3:18","nodeType":"FunctionDefinition","parameters":{"id":3256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3253,"mutability":"mutable","name":"a","nameLocation":"2578:1:18","nodeType":"VariableDeclaration","scope":3268,"src":"2570:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3252,"name":"uint256","nodeType":"ElementaryTypeName","src":"2570:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3255,"mutability":"mutable","name":"b","nameLocation":"2589:1:18","nodeType":"VariableDeclaration","scope":3268,"src":"2581:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3254,"name":"uint256","nodeType":"ElementaryTypeName","src":"2581:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2569:22:18"},"returnParameters":{"id":3259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3258,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3268,"src":"2615:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3257,"name":"uint256","nodeType":"ElementaryTypeName","src":"2615:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2614:9:18"},"scope":4117,"src":"2557:104:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3290,"nodeType":"Block","src":"2845:82:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3278,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"2900:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3279,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3273,"src":"2904:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2900:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3281,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2899:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3282,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"2910:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3283,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3273,"src":"2914:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2910:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3285,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2909:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2919:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2909:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2899:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3277,"id":3289,"nodeType":"Return","src":"2892:28:18"}]},"documentation":{"id":3269,"nodeType":"StructuredDocumentation","src":"2667:102:18","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":3291,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"2783:7:18","nodeType":"FunctionDefinition","parameters":{"id":3274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3271,"mutability":"mutable","name":"a","nameLocation":"2799:1:18","nodeType":"VariableDeclaration","scope":3291,"src":"2791:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3270,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3273,"mutability":"mutable","name":"b","nameLocation":"2810:1:18","nodeType":"VariableDeclaration","scope":3291,"src":"2802:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3272,"name":"uint256","nodeType":"ElementaryTypeName","src":"2802:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2790:22:18"},"returnParameters":{"id":3277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3276,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3291,"src":"2836:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3275,"name":"uint256","nodeType":"ElementaryTypeName","src":"2836:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2835:9:18"},"scope":4117,"src":"2774:153:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3324,"nodeType":"Block","src":"3219:260:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3301,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3296,"src":"3233:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3238:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3233:6:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3309,"nodeType":"IfStatement","src":"3229:127:18","trueBody":{"id":3308,"nodeType":"Block","src":"3241:115:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3304,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"3340:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3305,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3296,"src":"3344:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3340:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3300,"id":3307,"nodeType":"Return","src":"3333:12:18"}]}},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3310,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"3444:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3449:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3444:6:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3314,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"3458:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3462:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3458:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3317,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3457:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3318,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3296,"src":"3467:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3457:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3471:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3457:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3444:28:18","trueExpression":{"hexValue":"30","id":3313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3453:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3300,"id":3323,"nodeType":"Return","src":"3437:35:18"}]},"documentation":{"id":3292,"nodeType":"StructuredDocumentation","src":"2933:210:18","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":3325,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"3157:7:18","nodeType":"FunctionDefinition","parameters":{"id":3297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3294,"mutability":"mutable","name":"a","nameLocation":"3173:1:18","nodeType":"VariableDeclaration","scope":3325,"src":"3165:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3293,"name":"uint256","nodeType":"ElementaryTypeName","src":"3165:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3296,"mutability":"mutable","name":"b","nameLocation":"3184:1:18","nodeType":"VariableDeclaration","scope":3325,"src":"3176:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3295,"name":"uint256","nodeType":"ElementaryTypeName","src":"3176:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3164:22:18"},"returnParameters":{"id":3300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3299,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3325,"src":"3210:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3298,"name":"uint256","nodeType":"ElementaryTypeName","src":"3210:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3209:9:18"},"scope":4117,"src":"3148:331:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3450,"nodeType":"Block","src":"3901:4018:18","statements":[{"id":3449,"nodeType":"UncheckedBlock","src":"3911:4002:18","statements":[{"assignments":[3338],"declarations":[{"constant":false,"id":3338,"mutability":"mutable","name":"prod0","nameLocation":"4240:5:18","nodeType":"VariableDeclaration","scope":3449,"src":"4232:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3337,"name":"uint256","nodeType":"ElementaryTypeName","src":"4232:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3342,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3339,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3328,"src":"4248:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3340,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3330,"src":"4252:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4248:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4232:21:18"},{"assignments":[3344],"declarations":[{"constant":false,"id":3344,"mutability":"mutable","name":"prod1","nameLocation":"4320:5:18","nodeType":"VariableDeclaration","scope":3449,"src":"4312:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3343,"name":"uint256","nodeType":"ElementaryTypeName","src":"4312:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3345,"nodeType":"VariableDeclarationStatement","src":"4312:13:18"},{"AST":{"nodeType":"YulBlock","src":"4392:122:18","statements":[{"nodeType":"YulVariableDeclaration","src":"4410:30:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4427:1:18"},{"name":"y","nodeType":"YulIdentifier","src":"4430:1:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4437:1:18","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4433:3:18"},"nodeType":"YulFunctionCall","src":"4433:6:18"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"4420:6:18"},"nodeType":"YulFunctionCall","src":"4420:20:18"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"4414:2:18","type":""}]},{"nodeType":"YulAssignment","src":"4457:43:18","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4474:2:18"},{"name":"prod0","nodeType":"YulIdentifier","src":"4478:5:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4470:3:18"},"nodeType":"YulFunctionCall","src":"4470:14:18"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4489:2:18"},{"name":"prod0","nodeType":"YulIdentifier","src":"4493:5:18"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4486:2:18"},"nodeType":"YulFunctionCall","src":"4486:13:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4466:3:18"},"nodeType":"YulFunctionCall","src":"4466:34:18"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"4457:5:18"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3338,"isOffset":false,"isSlot":false,"src":"4478:5:18","valueSize":1},{"declaration":3338,"isOffset":false,"isSlot":false,"src":"4493:5:18","valueSize":1},{"declaration":3344,"isOffset":false,"isSlot":false,"src":"4457:5:18","valueSize":1},{"declaration":3328,"isOffset":false,"isSlot":false,"src":"4427:1:18","valueSize":1},{"declaration":3330,"isOffset":false,"isSlot":false,"src":"4430:1:18","valueSize":1}],"id":3346,"nodeType":"InlineAssembly","src":"4383:131:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3347,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3344,"src":"4595:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4604:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4595:10:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3355,"nodeType":"IfStatement","src":"4591:368:18","trueBody":{"id":3354,"nodeType":"Block","src":"4607:352:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3350,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3338,"src":"4925:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3351,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3332,"src":"4933:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4925:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3336,"id":3353,"nodeType":"Return","src":"4918:26:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3356,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3332,"src":"5065:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3357,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3344,"src":"5080:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:20:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3363,"nodeType":"IfStatement","src":"5061:88:18","trueBody":{"id":3362,"nodeType":"Block","src":"5087:62:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3359,"name":"MathOverflowedMulDiv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"5112:20:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5112:22:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3361,"nodeType":"RevertStatement","src":"5105:29:18"}]}},{"assignments":[3365],"declarations":[{"constant":false,"id":3365,"mutability":"mutable","name":"remainder","nameLocation":"5412:9:18","nodeType":"VariableDeclaration","scope":3449,"src":"5404:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3364,"name":"uint256","nodeType":"ElementaryTypeName","src":"5404:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3366,"nodeType":"VariableDeclarationStatement","src":"5404:17:18"},{"AST":{"nodeType":"YulBlock","src":"5444:291:18","statements":[{"nodeType":"YulAssignment","src":"5513:38:18","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5533:1:18"},{"name":"y","nodeType":"YulIdentifier","src":"5536:1:18"},{"name":"denominator","nodeType":"YulIdentifier","src":"5539:11:18"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5526:6:18"},"nodeType":"YulFunctionCall","src":"5526:25:18"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"5513:9:18"}]},{"nodeType":"YulAssignment","src":"5633:41:18","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"5646:5:18"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"5656:9:18"},{"name":"prod0","nodeType":"YulIdentifier","src":"5667:5:18"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5653:2:18"},"nodeType":"YulFunctionCall","src":"5653:20:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5642:3:18"},"nodeType":"YulFunctionCall","src":"5642:32:18"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"5633:5:18"}]},{"nodeType":"YulAssignment","src":"5691:30:18","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"5704:5:18"},{"name":"remainder","nodeType":"YulIdentifier","src":"5711:9:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5700:3:18"},"nodeType":"YulFunctionCall","src":"5700:21:18"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"5691:5:18"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3332,"isOffset":false,"isSlot":false,"src":"5539:11:18","valueSize":1},{"declaration":3338,"isOffset":false,"isSlot":false,"src":"5667:5:18","valueSize":1},{"declaration":3338,"isOffset":false,"isSlot":false,"src":"5691:5:18","valueSize":1},{"declaration":3338,"isOffset":false,"isSlot":false,"src":"5704:5:18","valueSize":1},{"declaration":3344,"isOffset":false,"isSlot":false,"src":"5633:5:18","valueSize":1},{"declaration":3344,"isOffset":false,"isSlot":false,"src":"5646:5:18","valueSize":1},{"declaration":3365,"isOffset":false,"isSlot":false,"src":"5513:9:18","valueSize":1},{"declaration":3365,"isOffset":false,"isSlot":false,"src":"5656:9:18","valueSize":1},{"declaration":3365,"isOffset":false,"isSlot":false,"src":"5711:9:18","valueSize":1},{"declaration":3328,"isOffset":false,"isSlot":false,"src":"5533:1:18","valueSize":1},{"declaration":3330,"isOffset":false,"isSlot":false,"src":"5536:1:18","valueSize":1}],"id":3367,"nodeType":"InlineAssembly","src":"5435:300:18"},{"assignments":[3369],"declarations":[{"constant":false,"id":3369,"mutability":"mutable","name":"twos","nameLocation":"5947:4:18","nodeType":"VariableDeclaration","scope":3449,"src":"5939:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3368,"name":"uint256","nodeType":"ElementaryTypeName","src":"5939:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3376,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3370,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3332,"src":"5954:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":3371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5969:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3372,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3332,"src":"5973:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5969:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3374,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5968:17:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5954:31:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5939:46:18"},{"AST":{"nodeType":"YulBlock","src":"6008:362:18","statements":[{"nodeType":"YulAssignment","src":"6073:37:18","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"6092:11:18"},{"name":"twos","nodeType":"YulIdentifier","src":"6105:4:18"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6088:3:18"},"nodeType":"YulFunctionCall","src":"6088:22:18"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"6073:11:18"}]},{"nodeType":"YulAssignment","src":"6177:25:18","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"6190:5:18"},{"name":"twos","nodeType":"YulIdentifier","src":"6197:4:18"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6186:3:18"},"nodeType":"YulFunctionCall","src":"6186:16:18"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"6177:5:18"}]},{"nodeType":"YulAssignment","src":"6317:39:18","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6337:1:18","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"6340:4:18"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6333:3:18"},"nodeType":"YulFunctionCall","src":"6333:12:18"},{"name":"twos","nodeType":"YulIdentifier","src":"6347:4:18"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6329:3:18"},"nodeType":"YulFunctionCall","src":"6329:23:18"},{"kind":"number","nodeType":"YulLiteral","src":"6354:1:18","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6325:3:18"},"nodeType":"YulFunctionCall","src":"6325:31:18"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"6317:4:18"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3332,"isOffset":false,"isSlot":false,"src":"6073:11:18","valueSize":1},{"declaration":3332,"isOffset":false,"isSlot":false,"src":"6092:11:18","valueSize":1},{"declaration":3338,"isOffset":false,"isSlot":false,"src":"6177:5:18","valueSize":1},{"declaration":3338,"isOffset":false,"isSlot":false,"src":"6190:5:18","valueSize":1},{"declaration":3369,"isOffset":false,"isSlot":false,"src":"6105:4:18","valueSize":1},{"declaration":3369,"isOffset":false,"isSlot":false,"src":"6197:4:18","valueSize":1},{"declaration":3369,"isOffset":false,"isSlot":false,"src":"6317:4:18","valueSize":1},{"declaration":3369,"isOffset":false,"isSlot":false,"src":"6340:4:18","valueSize":1},{"declaration":3369,"isOffset":false,"isSlot":false,"src":"6347:4:18","valueSize":1}],"id":3377,"nodeType":"InlineAssembly","src":"5999:371:18"},{"expression":{"id":3382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3378,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3338,"src":"6436:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3379,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3344,"src":"6445:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3380,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"6453:4:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6445:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6436:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3383,"nodeType":"ExpressionStatement","src":"6436:21:18"},{"assignments":[3385],"declarations":[{"constant":false,"id":3385,"mutability":"mutable","name":"inverse","nameLocation":"6783:7:18","nodeType":"VariableDeclaration","scope":3449,"src":"6775:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3384,"name":"uint256","nodeType":"ElementaryTypeName","src":"6775:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3392,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6794:1:18","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3387,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3332,"src":"6798:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6794:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3389,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6793:17:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6813:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6793:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6775:39:18"},{"expression":{"id":3399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3393,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"7031:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7042:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3395,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3332,"src":"7046:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3396,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"7060:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7046:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7042:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7031:36:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3400,"nodeType":"ExpressionStatement","src":"7031:36:18"},{"expression":{"id":3407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3401,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"7100:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7111:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3403,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3332,"src":"7115:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3404,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"7129:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7115:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7111:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7100:36:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3408,"nodeType":"ExpressionStatement","src":"7100:36:18"},{"expression":{"id":3415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3409,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"7170:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7181:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3411,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3332,"src":"7185:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3412,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"7199:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7185:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7181:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7170:36:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3416,"nodeType":"ExpressionStatement","src":"7170:36:18"},{"expression":{"id":3423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3417,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"7240:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7251:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3419,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3332,"src":"7255:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3420,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"7269:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7255:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7251:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7240:36:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3424,"nodeType":"ExpressionStatement","src":"7240:36:18"},{"expression":{"id":3431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3425,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"7310:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7321:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3427,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3332,"src":"7325:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3428,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"7339:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7325:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7321:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7310:36:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3432,"nodeType":"ExpressionStatement","src":"7310:36:18"},{"expression":{"id":3439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3433,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"7381:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7392:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3435,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3332,"src":"7396:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3436,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"7410:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7396:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7392:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7381:36:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3440,"nodeType":"ExpressionStatement","src":"7381:36:18"},{"expression":{"id":3445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3441,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3335,"src":"7851:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3442,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3338,"src":"7860:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3443,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"7868:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7860:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7851:24:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3446,"nodeType":"ExpressionStatement","src":"7851:24:18"},{"expression":{"id":3447,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3335,"src":"7896:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3336,"id":3448,"nodeType":"Return","src":"7889:13:18"}]}]},"documentation":{"id":3326,"nodeType":"StructuredDocumentation","src":"3485:313:18","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":3451,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"3812:6:18","nodeType":"FunctionDefinition","parameters":{"id":3333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3328,"mutability":"mutable","name":"x","nameLocation":"3827:1:18","nodeType":"VariableDeclaration","scope":3451,"src":"3819:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3327,"name":"uint256","nodeType":"ElementaryTypeName","src":"3819:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3330,"mutability":"mutable","name":"y","nameLocation":"3838:1:18","nodeType":"VariableDeclaration","scope":3451,"src":"3830:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3329,"name":"uint256","nodeType":"ElementaryTypeName","src":"3830:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3332,"mutability":"mutable","name":"denominator","nameLocation":"3849:11:18","nodeType":"VariableDeclaration","scope":3451,"src":"3841:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3331,"name":"uint256","nodeType":"ElementaryTypeName","src":"3841:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3818:43:18"},"returnParameters":{"id":3336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3335,"mutability":"mutable","name":"result","nameLocation":"3893:6:18","nodeType":"VariableDeclaration","scope":3451,"src":"3885:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3334,"name":"uint256","nodeType":"ElementaryTypeName","src":"3885:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3884:16:18"},"scope":4117,"src":"3803:4116:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3493,"nodeType":"Block","src":"8161:192:18","statements":[{"assignments":[3467],"declarations":[{"constant":false,"id":3467,"mutability":"mutable","name":"result","nameLocation":"8179:6:18","nodeType":"VariableDeclaration","scope":3493,"src":"8171:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3466,"name":"uint256","nodeType":"ElementaryTypeName","src":"8171:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3473,"initialValue":{"arguments":[{"id":3469,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3454,"src":"8195:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3470,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"8198:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3471,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"8201:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3468,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3451,3494],"referencedDeclaration":3451,"src":"8188:6:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8188:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8171:42:18"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3475,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3461,"src":"8244:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"}],"id":3474,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4116,"src":"8227:16:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3074_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8227:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3478,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3454,"src":"8264:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3479,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"8267:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3480,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"8270:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3477,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967280,"src":"8257:6:18","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8257:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8285:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8257:29:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8227:59:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3490,"nodeType":"IfStatement","src":"8223:101:18","trueBody":{"id":3489,"nodeType":"Block","src":"8288:36:18","statements":[{"expression":{"id":3487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3485,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3467,"src":"8302:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8312:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8302:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3488,"nodeType":"ExpressionStatement","src":"8302:11:18"}]}},{"expression":{"id":3491,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3467,"src":"8340:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3465,"id":3492,"nodeType":"Return","src":"8333:13:18"}]},"documentation":{"id":3452,"nodeType":"StructuredDocumentation","src":"7925:121:18","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":3494,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"8060:6:18","nodeType":"FunctionDefinition","parameters":{"id":3462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3454,"mutability":"mutable","name":"x","nameLocation":"8075:1:18","nodeType":"VariableDeclaration","scope":3494,"src":"8067:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3453,"name":"uint256","nodeType":"ElementaryTypeName","src":"8067:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3456,"mutability":"mutable","name":"y","nameLocation":"8086:1:18","nodeType":"VariableDeclaration","scope":3494,"src":"8078:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3455,"name":"uint256","nodeType":"ElementaryTypeName","src":"8078:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3458,"mutability":"mutable","name":"denominator","nameLocation":"8097:11:18","nodeType":"VariableDeclaration","scope":3494,"src":"8089:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3457,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3461,"mutability":"mutable","name":"rounding","nameLocation":"8119:8:18","nodeType":"VariableDeclaration","scope":3494,"src":"8110:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"},"typeName":{"id":3460,"nodeType":"UserDefinedTypeName","pathNode":{"id":3459,"name":"Rounding","nameLocations":["8110:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":3074,"src":"8110:8:18"},"referencedDeclaration":3074,"src":"8110:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8066:62:18"},"returnParameters":{"id":3465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3464,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3494,"src":"8152:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3463,"name":"uint256","nodeType":"ElementaryTypeName","src":"8152:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8151:9:18"},"scope":4117,"src":"8051:302:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3605,"nodeType":"Block","src":"8644:1585:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3502,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3497,"src":"8658:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8663:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8658:6:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3508,"nodeType":"IfStatement","src":"8654:45:18","trueBody":{"id":3507,"nodeType":"Block","src":"8666:33:18","statements":[{"expression":{"hexValue":"30","id":3505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8687:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3501,"id":3506,"nodeType":"Return","src":"8680:8:18"}]}},{"assignments":[3510],"declarations":[{"constant":false,"id":3510,"mutability":"mutable","name":"result","nameLocation":"9386:6:18","nodeType":"VariableDeclaration","scope":3605,"src":"9378:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3509,"name":"uint256","nodeType":"ElementaryTypeName","src":"9378:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3519,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9395:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3513,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3497,"src":"9406:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3512,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3773,3808],"referencedDeclaration":3773,"src":"9401:4:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9401:7:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9401:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3517,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9400:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9395:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9378:36:18"},{"id":3604,"nodeType":"UncheckedBlock","src":"9815:408:18","statements":[{"expression":{"id":3529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3520,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"9839:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3521,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"9849:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3522,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3497,"src":"9858:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3523,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"9862:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9858:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9849:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3526,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9848:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9873:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9848:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9839:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3530,"nodeType":"ExpressionStatement","src":"9839:35:18"},{"expression":{"id":3540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3531,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"9888:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3532,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"9898:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3533,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3497,"src":"9907:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3534,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"9911:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9907:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9898:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3537,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9897:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9922:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9897:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9888:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3541,"nodeType":"ExpressionStatement","src":"9888:35:18"},{"expression":{"id":3551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3542,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"9937:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3543,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"9947:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3544,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3497,"src":"9956:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3545,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"9960:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9956:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9947:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3548,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9946:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9971:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9946:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9937:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3552,"nodeType":"ExpressionStatement","src":"9937:35:18"},{"expression":{"id":3562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3553,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"9986:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3554,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"9996:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3555,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3497,"src":"10005:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3556,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"10009:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10005:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9996:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3559,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9995:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10020:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9995:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9986:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3563,"nodeType":"ExpressionStatement","src":"9986:35:18"},{"expression":{"id":3573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3564,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"10035:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3565,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"10045:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3566,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3497,"src":"10054:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3567,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"10058:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10054:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10045:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3570,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10044:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10069:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10044:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10035:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3574,"nodeType":"ExpressionStatement","src":"10035:35:18"},{"expression":{"id":3584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3575,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"10084:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3576,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"10094:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3577,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3497,"src":"10103:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3578,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"10107:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10103:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10094:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3581,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10093:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10118:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10093:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10084:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3585,"nodeType":"ExpressionStatement","src":"10084:35:18"},{"expression":{"id":3595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3586,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"10133:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3587,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"10143:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3588,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3497,"src":"10152:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3589,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"10156:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10152:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10143:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3592,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10142:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10142:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10133:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3596,"nodeType":"ExpressionStatement","src":"10133:35:18"},{"expression":{"arguments":[{"id":3598,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"10193:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3599,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3497,"src":"10201:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3600,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"10205:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10201:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3597,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"10189:3:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10189:23:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3501,"id":3603,"nodeType":"Return","src":"10182:30:18"}]}]},"documentation":{"id":3495,"nodeType":"StructuredDocumentation","src":"8359:223:18","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":3606,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8596:4:18","nodeType":"FunctionDefinition","parameters":{"id":3498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3497,"mutability":"mutable","name":"a","nameLocation":"8609:1:18","nodeType":"VariableDeclaration","scope":3606,"src":"8601:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3496,"name":"uint256","nodeType":"ElementaryTypeName","src":"8601:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8600:11:18"},"returnParameters":{"id":3501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3500,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3606,"src":"8635:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3499,"name":"uint256","nodeType":"ElementaryTypeName","src":"8635:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8634:9:18"},"scope":4117,"src":"8587:1642:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3640,"nodeType":"Block","src":"10405:164:18","statements":[{"id":3639,"nodeType":"UncheckedBlock","src":"10415:148:18","statements":[{"assignments":[3618],"declarations":[{"constant":false,"id":3618,"mutability":"mutable","name":"result","nameLocation":"10447:6:18","nodeType":"VariableDeclaration","scope":3639,"src":"10439:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3617,"name":"uint256","nodeType":"ElementaryTypeName","src":"10439:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3622,"initialValue":{"arguments":[{"id":3620,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3609,"src":"10461:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3619,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[3606,3641],"referencedDeclaration":3606,"src":"10456:4:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10456:7:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10439:24:18"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3623,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3618,"src":"10484:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3625,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"10511:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"}],"id":3624,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4116,"src":"10494:16:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3074_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10494:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3627,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3618,"src":"10524:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3628,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3618,"src":"10533:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3630,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3609,"src":"10542:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10494:49:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10550:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10494:57:18","trueExpression":{"hexValue":"31","id":3633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10546:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3636,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10493:59:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"10484:68:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3616,"id":3638,"nodeType":"Return","src":"10477:75:18"}]}]},"documentation":{"id":3607,"nodeType":"StructuredDocumentation","src":"10235:89:18","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":3641,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"10338:4:18","nodeType":"FunctionDefinition","parameters":{"id":3613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3609,"mutability":"mutable","name":"a","nameLocation":"10351:1:18","nodeType":"VariableDeclaration","scope":3641,"src":"10343:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3608,"name":"uint256","nodeType":"ElementaryTypeName","src":"10343:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3612,"mutability":"mutable","name":"rounding","nameLocation":"10363:8:18","nodeType":"VariableDeclaration","scope":3641,"src":"10354:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"},"typeName":{"id":3611,"nodeType":"UserDefinedTypeName","pathNode":{"id":3610,"name":"Rounding","nameLocations":["10354:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":3074,"src":"10354:8:18"},"referencedDeclaration":3074,"src":"10354:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10342:30:18"},"returnParameters":{"id":3616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3615,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3641,"src":"10396:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3614,"name":"uint256","nodeType":"ElementaryTypeName","src":"10396:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10395:9:18"},"scope":4117,"src":"10329:240:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3772,"nodeType":"Block","src":"10760:922:18","statements":[{"assignments":[3650],"declarations":[{"constant":false,"id":3650,"mutability":"mutable","name":"result","nameLocation":"10778:6:18","nodeType":"VariableDeclaration","scope":3772,"src":"10770:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3649,"name":"uint256","nodeType":"ElementaryTypeName","src":"10770:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3652,"initialValue":{"hexValue":"30","id":3651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10787:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10770:18:18"},{"id":3769,"nodeType":"UncheckedBlock","src":"10798:855:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3653,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"10826:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10835:3:18","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10826:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10841:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10826:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3667,"nodeType":"IfStatement","src":"10822:99:18","trueBody":{"id":3666,"nodeType":"Block","src":"10844:77:18","statements":[{"expression":{"id":3660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3658,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"10862:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10872:3:18","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10862:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3661,"nodeType":"ExpressionStatement","src":"10862:13:18"},{"expression":{"id":3664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3662,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3650,"src":"10893:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":3663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:3:18","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10893:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3665,"nodeType":"ExpressionStatement","src":"10893:13:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3668,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"10938:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10947:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10938:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10952:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10938:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3682,"nodeType":"IfStatement","src":"10934:96:18","trueBody":{"id":3681,"nodeType":"Block","src":"10955:75:18","statements":[{"expression":{"id":3675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3673,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"10973:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10983:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10973:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3676,"nodeType":"ExpressionStatement","src":"10973:12:18"},{"expression":{"id":3679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3677,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3650,"src":"11003:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11013:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11003:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3680,"nodeType":"ExpressionStatement","src":"11003:12:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3683,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"11047:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11056:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11047:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11061:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11047:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3697,"nodeType":"IfStatement","src":"11043:96:18","trueBody":{"id":3696,"nodeType":"Block","src":"11064:75:18","statements":[{"expression":{"id":3690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3688,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"11082:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11092:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11082:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3691,"nodeType":"ExpressionStatement","src":"11082:12:18"},{"expression":{"id":3694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3692,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3650,"src":"11112:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11122:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11112:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3695,"nodeType":"ExpressionStatement","src":"11112:12:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3698,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"11156:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11165:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11156:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11170:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11156:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3712,"nodeType":"IfStatement","src":"11152:96:18","trueBody":{"id":3711,"nodeType":"Block","src":"11173:75:18","statements":[{"expression":{"id":3705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3703,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"11191:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11201:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11191:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3706,"nodeType":"ExpressionStatement","src":"11191:12:18"},{"expression":{"id":3709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3707,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3650,"src":"11221:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11231:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11221:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3710,"nodeType":"ExpressionStatement","src":"11221:12:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3713,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"11265:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11274:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11265:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11278:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11265:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3727,"nodeType":"IfStatement","src":"11261:93:18","trueBody":{"id":3726,"nodeType":"Block","src":"11281:73:18","statements":[{"expression":{"id":3720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3718,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"11299:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11309:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11299:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3721,"nodeType":"ExpressionStatement","src":"11299:11:18"},{"expression":{"id":3724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3722,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3650,"src":"11328:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11338:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11328:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3725,"nodeType":"ExpressionStatement","src":"11328:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3728,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"11371:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":3729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11380:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11371:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11384:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11371:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3742,"nodeType":"IfStatement","src":"11367:93:18","trueBody":{"id":3741,"nodeType":"Block","src":"11387:73:18","statements":[{"expression":{"id":3735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3733,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"11405:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11415:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11405:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3736,"nodeType":"ExpressionStatement","src":"11405:11:18"},{"expression":{"id":3739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3737,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3650,"src":"11434:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11444:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11434:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3740,"nodeType":"ExpressionStatement","src":"11434:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3743,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"11477:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":3744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11486:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11477:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11490:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11477:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3757,"nodeType":"IfStatement","src":"11473:93:18","trueBody":{"id":3756,"nodeType":"Block","src":"11493:73:18","statements":[{"expression":{"id":3750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3748,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"11511:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":3749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11521:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11511:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3751,"nodeType":"ExpressionStatement","src":"11511:11:18"},{"expression":{"id":3754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3752,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3650,"src":"11540:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11550:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11540:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3755,"nodeType":"ExpressionStatement","src":"11540:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3758,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"11583:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11592:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11583:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11596:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11583:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3768,"nodeType":"IfStatement","src":"11579:64:18","trueBody":{"id":3767,"nodeType":"Block","src":"11599:44:18","statements":[{"expression":{"id":3765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3763,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3650,"src":"11617:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11627:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11617:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3766,"nodeType":"ExpressionStatement","src":"11617:11:18"}]}}]},{"expression":{"id":3770,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3650,"src":"11669:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3648,"id":3771,"nodeType":"Return","src":"11662:13:18"}]},"documentation":{"id":3642,"nodeType":"StructuredDocumentation","src":"10575:119:18","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":3773,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"10708:4:18","nodeType":"FunctionDefinition","parameters":{"id":3645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3644,"mutability":"mutable","name":"value","nameLocation":"10721:5:18","nodeType":"VariableDeclaration","scope":3773,"src":"10713:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3643,"name":"uint256","nodeType":"ElementaryTypeName","src":"10713:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10712:15:18"},"returnParameters":{"id":3648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3647,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3773,"src":"10751:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3646,"name":"uint256","nodeType":"ElementaryTypeName","src":"10751:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10750:9:18"},"scope":4117,"src":"10699:983:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3807,"nodeType":"Block","src":"11915:168:18","statements":[{"id":3806,"nodeType":"UncheckedBlock","src":"11925:152:18","statements":[{"assignments":[3785],"declarations":[{"constant":false,"id":3785,"mutability":"mutable","name":"result","nameLocation":"11957:6:18","nodeType":"VariableDeclaration","scope":3806,"src":"11949:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3784,"name":"uint256","nodeType":"ElementaryTypeName","src":"11949:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3789,"initialValue":{"arguments":[{"id":3787,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3776,"src":"11971:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3786,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3773,3808],"referencedDeclaration":3773,"src":"11966:4:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11966:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11949:28:18"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3790,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3785,"src":"11998:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3792,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3779,"src":"12025:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"}],"id":3791,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4116,"src":"12008:16:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3074_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12008:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3795,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3785,"src":"12043:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3797,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3776,"src":"12052:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12008:49:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12064:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12008:57:18","trueExpression":{"hexValue":"31","id":3800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12060:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3803,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12007:59:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11998:68:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3783,"id":3805,"nodeType":"Return","src":"11991:75:18"}]}]},"documentation":{"id":3774,"nodeType":"StructuredDocumentation","src":"11688:142:18","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3808,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"11844:4:18","nodeType":"FunctionDefinition","parameters":{"id":3780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3776,"mutability":"mutable","name":"value","nameLocation":"11857:5:18","nodeType":"VariableDeclaration","scope":3808,"src":"11849:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3775,"name":"uint256","nodeType":"ElementaryTypeName","src":"11849:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3779,"mutability":"mutable","name":"rounding","nameLocation":"11873:8:18","nodeType":"VariableDeclaration","scope":3808,"src":"11864:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"},"typeName":{"id":3778,"nodeType":"UserDefinedTypeName","pathNode":{"id":3777,"name":"Rounding","nameLocations":["11864:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":3074,"src":"11864:8:18"},"referencedDeclaration":3074,"src":"11864:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11848:34:18"},"returnParameters":{"id":3783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3782,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3808,"src":"11906:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3781,"name":"uint256","nodeType":"ElementaryTypeName","src":"11906:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11905:9:18"},"scope":4117,"src":"11835:248:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3936,"nodeType":"Block","src":"12276:854:18","statements":[{"assignments":[3817],"declarations":[{"constant":false,"id":3817,"mutability":"mutable","name":"result","nameLocation":"12294:6:18","nodeType":"VariableDeclaration","scope":3936,"src":"12286:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3816,"name":"uint256","nodeType":"ElementaryTypeName","src":"12286:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3819,"initialValue":{"hexValue":"30","id":3818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12303:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12286:18:18"},{"id":3933,"nodeType":"UncheckedBlock","src":"12314:787:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3820,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"12342:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3823,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12351:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12357:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12351:8:18","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12342:17:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3836,"nodeType":"IfStatement","src":"12338:103:18","trueBody":{"id":3835,"nodeType":"Block","src":"12361:80:18","statements":[{"expression":{"id":3829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3825,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"12379:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3828,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12388:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12394:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12388:8:18","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12379:17:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3830,"nodeType":"ExpressionStatement","src":"12379:17:18"},{"expression":{"id":3833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3831,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3817,"src":"12414:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12424:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12414:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3834,"nodeType":"ExpressionStatement","src":"12414:12:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3837,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"12458:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3840,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12467:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12473:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12467:8:18","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12458:17:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3853,"nodeType":"IfStatement","src":"12454:103:18","trueBody":{"id":3852,"nodeType":"Block","src":"12477:80:18","statements":[{"expression":{"id":3846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3842,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"12495:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3845,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12504:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12510:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12504:8:18","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12495:17:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3847,"nodeType":"ExpressionStatement","src":"12495:17:18"},{"expression":{"id":3850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3848,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3817,"src":"12530:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12540:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12530:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3851,"nodeType":"ExpressionStatement","src":"12530:12:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3854,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"12574:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3857,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12583:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12589:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12583:8:18","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12574:17:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3870,"nodeType":"IfStatement","src":"12570:103:18","trueBody":{"id":3869,"nodeType":"Block","src":"12593:80:18","statements":[{"expression":{"id":3863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3859,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"12611:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3862,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12620:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12626:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12620:8:18","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12611:17:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3864,"nodeType":"ExpressionStatement","src":"12611:17:18"},{"expression":{"id":3867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3865,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3817,"src":"12646:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12656:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12646:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3868,"nodeType":"ExpressionStatement","src":"12646:12:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3871,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"12690:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3874,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12699:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12705:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12699:7:18","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12690:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3887,"nodeType":"IfStatement","src":"12686:100:18","trueBody":{"id":3886,"nodeType":"Block","src":"12708:78:18","statements":[{"expression":{"id":3880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3876,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"12726:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3879,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12735:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12735:7:18","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12726:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3881,"nodeType":"ExpressionStatement","src":"12726:16:18"},{"expression":{"id":3884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3882,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3817,"src":"12760:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12760:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3885,"nodeType":"ExpressionStatement","src":"12760:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3888,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"12803:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3891,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12812:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12818:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12812:7:18","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12803:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3904,"nodeType":"IfStatement","src":"12799:100:18","trueBody":{"id":3903,"nodeType":"Block","src":"12821:78:18","statements":[{"expression":{"id":3897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3893,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"12839:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3896,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12848:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12854:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12848:7:18","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12839:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3898,"nodeType":"ExpressionStatement","src":"12839:16:18"},{"expression":{"id":3901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3899,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3817,"src":"12873:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12883:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12873:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3902,"nodeType":"ExpressionStatement","src":"12873:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3905,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"12916:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3908,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12925:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12931:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12925:7:18","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12916:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3921,"nodeType":"IfStatement","src":"12912:100:18","trueBody":{"id":3920,"nodeType":"Block","src":"12934:78:18","statements":[{"expression":{"id":3914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3910,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"12952:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3913,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12961:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12967:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12961:7:18","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12952:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3915,"nodeType":"ExpressionStatement","src":"12952:16:18"},{"expression":{"id":3918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3916,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3817,"src":"12986:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12996:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12986:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3919,"nodeType":"ExpressionStatement","src":"12986:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3922,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"13029:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3925,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13038:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13044:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13038:7:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"13029:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3932,"nodeType":"IfStatement","src":"13025:66:18","trueBody":{"id":3931,"nodeType":"Block","src":"13047:44:18","statements":[{"expression":{"id":3929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3927,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3817,"src":"13065:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13075:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13065:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3930,"nodeType":"ExpressionStatement","src":"13065:11:18"}]}}]},{"expression":{"id":3934,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3817,"src":"13117:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3815,"id":3935,"nodeType":"Return","src":"13110:13:18"}]},"documentation":{"id":3809,"nodeType":"StructuredDocumentation","src":"12089:120:18","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":3937,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"12223:5:18","nodeType":"FunctionDefinition","parameters":{"id":3812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3811,"mutability":"mutable","name":"value","nameLocation":"12237:5:18","nodeType":"VariableDeclaration","scope":3937,"src":"12229:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3810,"name":"uint256","nodeType":"ElementaryTypeName","src":"12229:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12228:15:18"},"returnParameters":{"id":3815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3814,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3937,"src":"12267:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3813,"name":"uint256","nodeType":"ElementaryTypeName","src":"12267:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12266:9:18"},"scope":4117,"src":"12214:916:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3971,"nodeType":"Block","src":"13365:170:18","statements":[{"id":3970,"nodeType":"UncheckedBlock","src":"13375:154:18","statements":[{"assignments":[3949],"declarations":[{"constant":false,"id":3949,"mutability":"mutable","name":"result","nameLocation":"13407:6:18","nodeType":"VariableDeclaration","scope":3970,"src":"13399:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3948,"name":"uint256","nodeType":"ElementaryTypeName","src":"13399:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3953,"initialValue":{"arguments":[{"id":3951,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"13422:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3950,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3937,3972],"referencedDeclaration":3937,"src":"13416:5:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13416:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13399:29:18"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3954,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3949,"src":"13449:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3956,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3943,"src":"13476:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"}],"id":3955,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4116,"src":"13459:16:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3074_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13459:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13489:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3959,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3949,"src":"13495:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3961,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"13504:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:20:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13459:50:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13516:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13459:58:18","trueExpression":{"hexValue":"31","id":3964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13512:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3967,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13458:60:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13449:69:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3947,"id":3969,"nodeType":"Return","src":"13442:76:18"}]}]},"documentation":{"id":3938,"nodeType":"StructuredDocumentation","src":"13136:143:18","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3972,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"13293:5:18","nodeType":"FunctionDefinition","parameters":{"id":3944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3940,"mutability":"mutable","name":"value","nameLocation":"13307:5:18","nodeType":"VariableDeclaration","scope":3972,"src":"13299:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3939,"name":"uint256","nodeType":"ElementaryTypeName","src":"13299:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3943,"mutability":"mutable","name":"rounding","nameLocation":"13323:8:18","nodeType":"VariableDeclaration","scope":3972,"src":"13314:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"},"typeName":{"id":3942,"nodeType":"UserDefinedTypeName","pathNode":{"id":3941,"name":"Rounding","nameLocations":["13314:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":3074,"src":"13314:8:18"},"referencedDeclaration":3074,"src":"13314:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"13298:34:18"},"returnParameters":{"id":3947,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3946,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3972,"src":"13356:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3945,"name":"uint256","nodeType":"ElementaryTypeName","src":"13356:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13355:9:18"},"scope":4117,"src":"13284:251:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4058,"nodeType":"Block","src":"13855:600:18","statements":[{"assignments":[3981],"declarations":[{"constant":false,"id":3981,"mutability":"mutable","name":"result","nameLocation":"13873:6:18","nodeType":"VariableDeclaration","scope":4058,"src":"13865:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3980,"name":"uint256","nodeType":"ElementaryTypeName","src":"13865:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3983,"initialValue":{"hexValue":"30","id":3982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13882:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13865:18:18"},{"id":4055,"nodeType":"UncheckedBlock","src":"13893:533:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3984,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3975,"src":"13921:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13930:3:18","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13921:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13936:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13921:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3998,"nodeType":"IfStatement","src":"13917:98:18","trueBody":{"id":3997,"nodeType":"Block","src":"13939:76:18","statements":[{"expression":{"id":3991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3989,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3975,"src":"13957:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13967:3:18","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13957:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3992,"nodeType":"ExpressionStatement","src":"13957:13:18"},{"expression":{"id":3995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3993,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"13988:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13998:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13988:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3996,"nodeType":"ExpressionStatement","src":"13988:12:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3999,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3975,"src":"14032:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14041:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14032:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14046:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14032:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4013,"nodeType":"IfStatement","src":"14028:95:18","trueBody":{"id":4012,"nodeType":"Block","src":"14049:74:18","statements":[{"expression":{"id":4006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4004,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3975,"src":"14067:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14077:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14067:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4007,"nodeType":"ExpressionStatement","src":"14067:12:18"},{"expression":{"id":4010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4008,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"14097:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14107:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14097:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4011,"nodeType":"ExpressionStatement","src":"14097:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4014,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3975,"src":"14140:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14149:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14140:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14154:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14140:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4028,"nodeType":"IfStatement","src":"14136:95:18","trueBody":{"id":4027,"nodeType":"Block","src":"14157:74:18","statements":[{"expression":{"id":4021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4019,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3975,"src":"14175:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14185:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14175:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4022,"nodeType":"ExpressionStatement","src":"14175:12:18"},{"expression":{"id":4025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4023,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"14205:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14215:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"14205:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4026,"nodeType":"ExpressionStatement","src":"14205:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4029,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3975,"src":"14248:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14257:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14248:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14262:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14248:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4043,"nodeType":"IfStatement","src":"14244:95:18","trueBody":{"id":4042,"nodeType":"Block","src":"14265:74:18","statements":[{"expression":{"id":4036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4034,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3975,"src":"14283:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14293:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14283:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4037,"nodeType":"ExpressionStatement","src":"14283:12:18"},{"expression":{"id":4040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4038,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"14313:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14323:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"14313:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4041,"nodeType":"ExpressionStatement","src":"14313:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4044,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3975,"src":"14356:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14365:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14356:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14369:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14356:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4054,"nodeType":"IfStatement","src":"14352:64:18","trueBody":{"id":4053,"nodeType":"Block","src":"14372:44:18","statements":[{"expression":{"id":4051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4049,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"14390:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14400:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14390:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4052,"nodeType":"ExpressionStatement","src":"14390:11:18"}]}}]},{"expression":{"id":4056,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3981,"src":"14442:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3979,"id":4057,"nodeType":"Return","src":"14435:13:18"}]},"documentation":{"id":3973,"nodeType":"StructuredDocumentation","src":"13541:246:18","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":4059,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"13801:6:18","nodeType":"FunctionDefinition","parameters":{"id":3976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3975,"mutability":"mutable","name":"value","nameLocation":"13816:5:18","nodeType":"VariableDeclaration","scope":4059,"src":"13808:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3974,"name":"uint256","nodeType":"ElementaryTypeName","src":"13808:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13807:15:18"},"returnParameters":{"id":3979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3978,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4059,"src":"13846:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3977,"name":"uint256","nodeType":"ElementaryTypeName","src":"13846:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13845:9:18"},"scope":4117,"src":"13792:663:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4096,"nodeType":"Block","src":"14692:177:18","statements":[{"id":4095,"nodeType":"UncheckedBlock","src":"14702:161:18","statements":[{"assignments":[4071],"declarations":[{"constant":false,"id":4071,"mutability":"mutable","name":"result","nameLocation":"14734:6:18","nodeType":"VariableDeclaration","scope":4095,"src":"14726:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4070,"name":"uint256","nodeType":"ElementaryTypeName","src":"14726:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4075,"initialValue":{"arguments":[{"id":4073,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4062,"src":"14750:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4072,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[4059,4097],"referencedDeclaration":4059,"src":"14743:6:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14743:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14726:30:18"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4076,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"14777:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4078,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4065,"src":"14804:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"}],"id":4077,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4116,"src":"14787:16:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3074_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":4079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14787:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14817:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4081,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"14823:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":4082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14833:1:18","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"14823:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4084,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14822:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4086,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4062,"src":"14838:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14787:56:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14850:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"14787:64:18","trueExpression":{"hexValue":"31","id":4089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14846:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4092,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14786:66:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"14777:75:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4069,"id":4094,"nodeType":"Return","src":"14770:82:18"}]}]},"documentation":{"id":4060,"nodeType":"StructuredDocumentation","src":"14461:144:18","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4097,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"14619:6:18","nodeType":"FunctionDefinition","parameters":{"id":4066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4062,"mutability":"mutable","name":"value","nameLocation":"14634:5:18","nodeType":"VariableDeclaration","scope":4097,"src":"14626:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4061,"name":"uint256","nodeType":"ElementaryTypeName","src":"14626:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4065,"mutability":"mutable","name":"rounding","nameLocation":"14650:8:18","nodeType":"VariableDeclaration","scope":4097,"src":"14641:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"},"typeName":{"id":4064,"nodeType":"UserDefinedTypeName","pathNode":{"id":4063,"name":"Rounding","nameLocations":["14641:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":3074,"src":"14641:8:18"},"referencedDeclaration":3074,"src":"14641:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"14625:34:18"},"returnParameters":{"id":4069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4068,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4097,"src":"14683:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4067,"name":"uint256","nodeType":"ElementaryTypeName","src":"14683:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14682:9:18"},"scope":4117,"src":"14610:259:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4115,"nodeType":"Block","src":"15067:48:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4108,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4101,"src":"15090:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"}],"id":4107,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15084:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":4106,"name":"uint8","nodeType":"ElementaryTypeName","src":"15084:5:18","typeDescriptions":{}}},"id":4109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15084:15:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":4110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15102:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15084:19:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":4112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15107:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15084:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4105,"id":4114,"nodeType":"Return","src":"15077:31:18"}]},"documentation":{"id":4098,"nodeType":"StructuredDocumentation","src":"14875:113:18","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":4116,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"15002:16:18","nodeType":"FunctionDefinition","parameters":{"id":4102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4101,"mutability":"mutable","name":"rounding","nameLocation":"15028:8:18","nodeType":"VariableDeclaration","scope":4116,"src":"15019:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"},"typeName":{"id":4100,"nodeType":"UserDefinedTypeName","pathNode":{"id":4099,"name":"Rounding","nameLocations":["15019:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":3074,"src":"15019:8:18"},"referencedDeclaration":3074,"src":"15019:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3074","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"15018:19:18"},"returnParameters":{"id":4105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4104,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4116,"src":"15061:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4103,"name":"bool","nodeType":"ElementaryTypeName","src":"15061:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15060:6:18"},"scope":4117,"src":"14993:122:18","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4118,"src":"203:14914:18","usedErrors":[3069],"usedEvents":[]}],"src":"103:15015:18"},"id":18},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[4222]},"id":4223,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4119,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:19"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":4120,"nodeType":"StructuredDocumentation","src":"135:80:19","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4222,"linearizedBaseContracts":[4222],"name":"SignedMath","nameLocation":"224:10:19","nodeType":"ContractDefinition","nodes":[{"body":{"id":4137,"nodeType":"Block","src":"376:37:19","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4130,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4123,"src":"393:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4131,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"397:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"393:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4134,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"405:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"393:13:19","trueExpression":{"id":4133,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4123,"src":"401:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4129,"id":4136,"nodeType":"Return","src":"386:20:19"}]},"documentation":{"id":4121,"nodeType":"StructuredDocumentation","src":"241:66:19","text":" @dev Returns the largest of two signed numbers."},"id":4138,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"321:3:19","nodeType":"FunctionDefinition","parameters":{"id":4126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4123,"mutability":"mutable","name":"a","nameLocation":"332:1:19","nodeType":"VariableDeclaration","scope":4138,"src":"325:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4122,"name":"int256","nodeType":"ElementaryTypeName","src":"325:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4125,"mutability":"mutable","name":"b","nameLocation":"342:1:19","nodeType":"VariableDeclaration","scope":4138,"src":"335:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4124,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"324:20:19"},"returnParameters":{"id":4129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4128,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4138,"src":"368:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4127,"name":"int256","nodeType":"ElementaryTypeName","src":"368:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"367:8:19"},"scope":4222,"src":"312:101:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4155,"nodeType":"Block","src":"555:37:19","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4148,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"572:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4149,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"576:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"572:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4152,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4143,"src":"584:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"572:13:19","trueExpression":{"id":4151,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"580:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4147,"id":4154,"nodeType":"Return","src":"565:20:19"}]},"documentation":{"id":4139,"nodeType":"StructuredDocumentation","src":"419:67:19","text":" @dev Returns the smallest of two signed numbers."},"id":4156,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"500:3:19","nodeType":"FunctionDefinition","parameters":{"id":4144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4141,"mutability":"mutable","name":"a","nameLocation":"511:1:19","nodeType":"VariableDeclaration","scope":4156,"src":"504:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4140,"name":"int256","nodeType":"ElementaryTypeName","src":"504:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4143,"mutability":"mutable","name":"b","nameLocation":"521:1:19","nodeType":"VariableDeclaration","scope":4156,"src":"514:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4142,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"503:20:19"},"returnParameters":{"id":4147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4146,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4156,"src":"547:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4145,"name":"int256","nodeType":"ElementaryTypeName","src":"547:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"546:8:19"},"scope":4222,"src":"491:101:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4199,"nodeType":"Block","src":"797:162:19","statements":[{"assignments":[4167],"declarations":[{"constant":false,"id":4167,"mutability":"mutable","name":"x","nameLocation":"866:1:19","nodeType":"VariableDeclaration","scope":4199,"src":"859:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4166,"name":"int256","nodeType":"ElementaryTypeName","src":"859:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4180,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4168,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4159,"src":"871:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4169,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4161,"src":"875:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"871:5:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4171,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"870:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4172,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4159,"src":"882:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4173,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4161,"src":"886:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"882:5:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4175,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"881:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"892:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"881:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4178,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:14:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:24:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"859:35:19"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4181,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4167,"src":"911:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4186,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4167,"src":"931:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4185,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"923:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4184,"name":"uint256","nodeType":"ElementaryTypeName","src":"923:7:19","typeDescriptions":{}}},"id":4187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"923:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":4188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"937:3:19","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"923:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4183,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"916:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":4182,"name":"int256","nodeType":"ElementaryTypeName","src":"916:6:19","typeDescriptions":{}}},"id":4190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"916:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4191,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4159,"src":"945:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4192,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4161,"src":"949:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"945:5:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4194,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"944:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"916:35:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4196,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"915:37:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"911:41:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4165,"id":4198,"nodeType":"Return","src":"904:48:19"}]},"documentation":{"id":4157,"nodeType":"StructuredDocumentation","src":"598:126:19","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":4200,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"738:7:19","nodeType":"FunctionDefinition","parameters":{"id":4162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4159,"mutability":"mutable","name":"a","nameLocation":"753:1:19","nodeType":"VariableDeclaration","scope":4200,"src":"746:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4158,"name":"int256","nodeType":"ElementaryTypeName","src":"746:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4161,"mutability":"mutable","name":"b","nameLocation":"763:1:19","nodeType":"VariableDeclaration","scope":4200,"src":"756:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4160,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"745:20:19"},"returnParameters":{"id":4165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4164,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4200,"src":"789:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4163,"name":"int256","nodeType":"ElementaryTypeName","src":"789:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"788:8:19"},"scope":4222,"src":"729:230:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4220,"nodeType":"Block","src":"1103:158:19","statements":[{"id":4219,"nodeType":"UncheckedBlock","src":"1113:142:19","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4210,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4203,"src":"1228:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":4211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1233:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1228:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1241:2:19","subExpression":{"id":4214,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4203,"src":"1242:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1228:15:19","trueExpression":{"id":4213,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4203,"src":"1237:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4209,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1220:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4208,"name":"uint256","nodeType":"ElementaryTypeName","src":"1220:7:19","typeDescriptions":{}}},"id":4217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1220:24:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4207,"id":4218,"nodeType":"Return","src":"1213:31:19"}]}]},"documentation":{"id":4201,"nodeType":"StructuredDocumentation","src":"965:78:19","text":" @dev Returns the absolute unsigned value of a signed value."},"id":4221,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1057:3:19","nodeType":"FunctionDefinition","parameters":{"id":4204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4203,"mutability":"mutable","name":"n","nameLocation":"1068:1:19","nodeType":"VariableDeclaration","scope":4221,"src":"1061:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4202,"name":"int256","nodeType":"ElementaryTypeName","src":"1061:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1060:10:19"},"returnParameters":{"id":4207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4206,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4221,"src":"1094:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4205,"name":"uint256","nodeType":"ElementaryTypeName","src":"1094:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1093:9:19"},"scope":4222,"src":"1048:213:19","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4223,"src":"216:1047:19","usedErrors":[],"usedEvents":[]}],"src":"109:1155:19"},"id":19},"contracts/BaseHelper.sol":{"ast":{"absolutePath":"contracts/BaseHelper.sol","exportedSymbols":{"AccessControlUpgradeable":[362],"BaseHelper":[4338],"ContextUpgradeable":[662],"ERC165Upgradeable":[1007],"IAccessControl":[1386],"Initializable":[616],"PausableUpgradeable":[838],"ReentrancyGuardUpgradeable":[967]},"id":4339,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4224,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:20"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol","id":4225,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4339,"sourceUnit":363,"src":"58:81:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol","id":4226,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4339,"sourceUnit":839,"src":"140:75:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol","id":4227,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4339,"sourceUnit":968,"src":"216:82:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":4228,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4339,"sourceUnit":617,"src":"299:75:20","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4229,"name":"Initializable","nameLocations":["412:13:20"],"nodeType":"IdentifierPath","referencedDeclaration":616,"src":"412:13:20"},"id":4230,"nodeType":"InheritanceSpecifier","src":"412:13:20"},{"baseName":{"id":4231,"name":"AccessControlUpgradeable","nameLocations":["431:24:20"],"nodeType":"IdentifierPath","referencedDeclaration":362,"src":"431:24:20"},"id":4232,"nodeType":"InheritanceSpecifier","src":"431:24:20"},{"baseName":{"id":4233,"name":"PausableUpgradeable","nameLocations":["461:19:20"],"nodeType":"IdentifierPath","referencedDeclaration":838,"src":"461:19:20"},"id":4234,"nodeType":"InheritanceSpecifier","src":"461:19:20"},{"baseName":{"id":4235,"name":"ReentrancyGuardUpgradeable","nameLocations":["486:26:20"],"nodeType":"IdentifierPath","referencedDeclaration":967,"src":"486:26:20"},"id":4236,"nodeType":"InheritanceSpecifier","src":"486:26:20"}],"canonicalName":"BaseHelper","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4338,"linearizedBaseContracts":[4338,967,838,362,1007,3063,1386,662,616],"name":"BaseHelper","nameLocation":"394:10:20","nodeType":"ContractDefinition","nodes":[{"constant":true,"documentation":{"id":4237,"nodeType":"StructuredDocumentation","src":"519:13:20","text":"ROLES *"},"functionSelector":"e58378bb","id":4242,"mutability":"constant","name":"OWNER_ROLE","nameLocation":"561:10:20","nodeType":"VariableDeclaration","scope":4338,"src":"537:60:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4238,"name":"bytes32","nodeType":"ElementaryTypeName","src":"537:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4f574e45525f524f4c45","id":4240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"584:12:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_b19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e","typeString":"literal_string \"OWNER_ROLE\""},"value":"OWNER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_b19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e","typeString":"literal_string \"OWNER_ROLE\""}],"id":4239,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"574:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"574:23:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"e63ab1e9","id":4247,"mutability":"constant","name":"PAUSER_ROLE","nameLocation":"627:11:20","nodeType":"VariableDeclaration","scope":4338,"src":"603:62:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4243,"name":"bytes32","nodeType":"ElementaryTypeName","src":"603:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5041555345525f524f4c45","id":4245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"651:13:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a","typeString":"literal_string \"PAUSER_ROLE\""},"value":"PAUSER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a","typeString":"literal_string \"PAUSER_ROLE\""}],"id":4244,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"641:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"641:24:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"d5391393","id":4252,"mutability":"constant","name":"MINTER_ROLE","nameLocation":"695:11:20","nodeType":"VariableDeclaration","scope":4338,"src":"671:62:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4248,"name":"bytes32","nodeType":"ElementaryTypeName","src":"671:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4d494e5445525f524f4c45","id":4250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"719:13:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6","typeString":"literal_string \"MINTER_ROLE\""},"value":"MINTER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6","typeString":"literal_string \"MINTER_ROLE\""}],"id":4249,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"709:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"709:24:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"75b238fc","id":4257,"mutability":"constant","name":"ADMIN_ROLE","nameLocation":"763:10:20","nodeType":"VariableDeclaration","scope":4338,"src":"739:60:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4253,"name":"bytes32","nodeType":"ElementaryTypeName","src":"739:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"41444d494e5f524f4c45","id":4255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"786:12:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""},"value":"ADMIN_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""}],"id":4254,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"776:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"776:23:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"8f296759","id":4262,"mutability":"constant","name":"UTILITY_ROLE","nameLocation":"829:12:20","nodeType":"VariableDeclaration","scope":4338,"src":"805:64:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4258,"name":"bytes32","nodeType":"ElementaryTypeName","src":"805:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5554494c4954595f524f4c45","id":4260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"854:14:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_35af5b5a3fb4c88a8cb5e26e8a68a53cc8f6cafcc4000a1db1ae5753e25a168e","typeString":"literal_string \"UTILITY_ROLE\""},"value":"UTILITY_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_35af5b5a3fb4c88a8cb5e26e8a68a53cc8f6cafcc4000a1db1ae5753e25a168e","typeString":"literal_string \"UTILITY_ROLE\""}],"id":4259,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"844:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"844:25:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"documentation":{"id":4263,"nodeType":"StructuredDocumentation","src":"876:14:20","text":"ERRORS *"},"errorSelector":"a2dc6c3a","id":4265,"name":"InvalidValues","nameLocation":"902:13:20","nodeType":"ErrorDefinition","parameters":{"id":4264,"nodeType":"ParameterList","parameters":[],"src":"915:2:20"},"src":"896:22:20"},{"body":{"id":4312,"nodeType":"Block","src":"1043:486:20","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4273,"name":"__Pausable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"1053:15:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1053:17:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4275,"nodeType":"ExpressionStatement","src":"1053:17:20"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4276,"name":"__AccessControl_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63,"src":"1080:20:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1080:22:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4278,"nodeType":"ExpressionStatement","src":"1080:22:20"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4279,"name":"__ReentrancyGuard_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"1112:22:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1112:24:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4281,"nodeType":"ExpressionStatement","src":"1112:24:20"},{"expression":{"arguments":[{"id":4283,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"1210:18:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4284,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4268,"src":"1230:12:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4282,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"1199:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":4285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1199:44:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4286,"nodeType":"ExpressionStatement","src":"1199:44:20"},{"expression":{"arguments":[{"id":4288,"name":"PAUSER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4247,"src":"1309:11:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4289,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4268,"src":"1322:12:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4287,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"1298:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":4290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1298:37:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4291,"nodeType":"ExpressionStatement","src":"1298:37:20"},{"expression":{"arguments":[{"id":4293,"name":"OWNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4242,"src":"1356:10:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4294,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4268,"src":"1368:12:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4292,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"1345:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":4295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1345:36:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4296,"nodeType":"ExpressionStatement","src":"1345:36:20"},{"expression":{"arguments":[{"id":4298,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4252,"src":"1402:11:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4299,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4268,"src":"1415:12:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4297,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"1391:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":4300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1391:37:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4301,"nodeType":"ExpressionStatement","src":"1391:37:20"},{"expression":{"arguments":[{"id":4303,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4257,"src":"1449:10:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4304,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4268,"src":"1461:12:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4302,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"1438:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":4305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1438:36:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4306,"nodeType":"ExpressionStatement","src":"1438:36:20"},{"expression":{"arguments":[{"id":4308,"name":"UTILITY_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"1495:12:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4309,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4268,"src":"1509:12:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4307,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"1484:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":4310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1484:38:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4311,"nodeType":"ExpressionStatement","src":"1484:38:20"}]},"documentation":{"id":4266,"nodeType":"StructuredDocumentation","src":"947:17:20","text":"FUNCTIONS *"},"id":4313,"implemented":true,"kind":"function","modifiers":[{"id":4271,"kind":"modifierInvocation","modifierName":{"id":4270,"name":"onlyInitializing","nameLocations":["1026:16:20"],"nodeType":"IdentifierPath","referencedDeclaration":525,"src":"1026:16:20"},"nodeType":"ModifierInvocation","src":"1026:16:20"}],"name":"_baseInitialize","nameLocation":"979:15:20","nodeType":"FunctionDefinition","parameters":{"id":4269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4268,"mutability":"mutable","name":"initialOwner","nameLocation":"1003:12:20","nodeType":"VariableDeclaration","scope":4313,"src":"995:20:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4267,"name":"address","nodeType":"ElementaryTypeName","src":"995:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"994:22:20"},"returnParameters":{"id":4272,"nodeType":"ParameterList","parameters":[],"src":"1043:0:20"},"scope":4338,"src":"970:559:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4322,"nodeType":"Block","src":"1581:25:20","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4319,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"1591:6:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1591:8:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4321,"nodeType":"ExpressionStatement","src":"1591:8:20"}]},"functionSelector":"8456cb59","id":4323,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4316,"name":"PAUSER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4247,"src":"1568:11:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4317,"kind":"modifierInvocation","modifierName":{"id":4315,"name":"onlyRole","nameLocations":["1559:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1559:8:20"},"nodeType":"ModifierInvocation","src":"1559:21:20"}],"name":"pause","nameLocation":"1544:5:20","nodeType":"FunctionDefinition","parameters":{"id":4314,"nodeType":"ParameterList","parameters":[],"src":"1549:2:20"},"returnParameters":{"id":4318,"nodeType":"ParameterList","parameters":[],"src":"1581:0:20"},"scope":4338,"src":"1535:71:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4332,"nodeType":"Block","src":"1660:27:20","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4329,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"1670:8:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1670:10:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4331,"nodeType":"ExpressionStatement","src":"1670:10:20"}]},"functionSelector":"3f4ba83a","id":4333,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4326,"name":"PAUSER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4247,"src":"1647:11:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4327,"kind":"modifierInvocation","modifierName":{"id":4325,"name":"onlyRole","nameLocations":["1638:8:20"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1638:8:20"},"nodeType":"ModifierInvocation","src":"1638:21:20"}],"name":"unpause","nameLocation":"1621:7:20","nodeType":"FunctionDefinition","parameters":{"id":4324,"nodeType":"ParameterList","parameters":[],"src":"1628:2:20"},"returnParameters":{"id":4328,"nodeType":"ParameterList","parameters":[],"src":"1660:0:20"},"scope":4338,"src":"1612:75:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"constant":false,"id":4337,"mutability":"mutable","name":"__gap","nameLocation":"1796:5:20","nodeType":"VariableDeclaration","scope":4338,"src":"1776:25:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":4334,"name":"uint256","nodeType":"ElementaryTypeName","src":"1776:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4336,"length":{"hexValue":"3530","id":4335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1784:2:20","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1776:11:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":4339,"src":"376:1428:20","usedErrors":[379,382,701,704,869,1313,1316,4265],"usedEvents":[387,693,698,1325,1334,1343]}],"src":"32:1773:20"},"id":20},"contracts/erc721/CharacterNFT.sol":{"ast":{"absolutePath":"contracts/erc721/CharacterNFT.sol","exportedSymbols":{"AccessControl":[1303],"AccessControlUpgradeable":[362],"Base64":[2742],"BaseHelper":[4338],"CharacterNFT":[4772],"CharacterNFTManager":[5095],"CharacterNFTTokenURI":[5398],"Context":[2772],"ContextUpgradeable":[662],"ERC165":[3051],"ERC165Upgradeable":[1007],"ERC721":[2532],"IAccessControl":[1386],"IERC165":[3063],"IERC721":[2649],"IERC721Errors":[1476],"IERC721Metadata":[2695],"IERC721Receiver":[2667],"Initializable":[616],"Level":[5694],"Math":[4117],"PausableUpgradeable":[838],"ReentrancyGuardUpgradeable":[967],"SignedMath":[4222],"Strings":[3027]},"id":4773,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4340,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:21"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":4341,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4773,"sourceUnit":2533,"src":"58:57:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","file":"@openzeppelin/contracts/access/AccessControl.sol","id":4342,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4773,"sourceUnit":1304,"src":"116:58:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":4343,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4773,"sourceUnit":3028,"src":"175:51:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/erc721/CharacterNFTManager.sol","file":"./CharacterNFTManager.sol","id":4344,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4773,"sourceUnit":5096,"src":"228:35:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/erc721/CharacterNFTTokenURI.sol","file":"./CharacterNFTTokenURI.sol","id":4345,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4773,"sourceUnit":5399,"src":"264:36:21","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4346,"name":"ERC721","nameLocations":["327:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":2532,"src":"327:6:21"},"id":4347,"nodeType":"InheritanceSpecifier","src":"327:6:21"},{"baseName":{"id":4348,"name":"AccessControl","nameLocations":["335:13:21"],"nodeType":"IdentifierPath","referencedDeclaration":1303,"src":"335:13:21"},"id":4349,"nodeType":"InheritanceSpecifier","src":"335:13:21"}],"canonicalName":"CharacterNFT","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4772,"linearizedBaseContracts":[4772,1303,2532,1476,2695,2649,3051,3063,1386,2772],"name":"CharacterNFT","nameLocation":"311:12:21","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4352,"libraryName":{"id":4350,"name":"Strings","nameLocations":["361:7:21"],"nodeType":"IdentifierPath","referencedDeclaration":3027,"src":"361:7:21"},"nodeType":"UsingForDirective","src":"355:26:21","typeName":{"id":4351,"name":"uint256","nodeType":"ElementaryTypeName","src":"373:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"canonicalName":"CharacterNFT.CharacterData","documentation":{"id":4353,"nodeType":"StructuredDocumentation","src":"387:17:21","text":"VARIABLES *"},"id":4360,"members":[{"constant":false,"id":4355,"mutability":"mutable","name":"className","nameLocation":"448:9:21","nodeType":"VariableDeclaration","scope":4360,"src":"441:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":4354,"name":"string","nodeType":"ElementaryTypeName","src":"441:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4357,"mutability":"mutable","name":"classImage","nameLocation":"474:10:21","nodeType":"VariableDeclaration","scope":4360,"src":"467:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":4356,"name":"string","nodeType":"ElementaryTypeName","src":"467:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4359,"mutability":"mutable","name":"classDescription","nameLocation":"501:16:21","nodeType":"VariableDeclaration","scope":4360,"src":"494:23:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":4358,"name":"string","nodeType":"ElementaryTypeName","src":"494:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"CharacterData","nameLocation":"417:13:21","nodeType":"StructDefinition","scope":4772,"src":"410:114:21","visibility":"public"},{"constant":false,"functionSelector":"877b79b8","id":4365,"mutability":"mutable","name":"classIdToCharacterData","nameLocation":"571:22:21","nodeType":"VariableDeclaration","scope":4772,"src":"530:63:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_CharacterData_$4360_storage_$","typeString":"mapping(uint256 => struct CharacterNFT.CharacterData)"},"typeName":{"id":4364,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4361,"name":"uint256","nodeType":"ElementaryTypeName","src":"538:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"530:33:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_CharacterData_$4360_storage_$","typeString":"mapping(uint256 => struct CharacterNFT.CharacterData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4363,"nodeType":"UserDefinedTypeName","pathNode":{"id":4362,"name":"CharacterData","nameLocations":["549:13:21"],"nodeType":"IdentifierPath","referencedDeclaration":4360,"src":"549:13:21"},"referencedDeclaration":4360,"src":"549:13:21","typeDescriptions":{"typeIdentifier":"t_struct$_CharacterData_$4360_storage_ptr","typeString":"struct CharacterNFT.CharacterData"}}},"visibility":"public"},{"constant":false,"functionSelector":"36e67256","id":4367,"mutability":"mutable","name":"characterNFTManagerContract","nameLocation":"614:27:21","nodeType":"VariableDeclaration","scope":4772,"src":"599:42:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4366,"name":"address","nodeType":"ElementaryTypeName","src":"599:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"c8cc5175","id":4369,"mutability":"mutable","name":"tokenUriContract","nameLocation":"662:16:21","nodeType":"VariableDeclaration","scope":4772,"src":"647:31:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4368,"name":"address","nodeType":"ElementaryTypeName","src":"647:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":true,"documentation":{"id":4370,"nodeType":"StructuredDocumentation","src":"685:13:21","text":"ROLES *"},"functionSelector":"e58378bb","id":4375,"mutability":"constant","name":"OWNER_ROLE","nameLocation":"728:10:21","nodeType":"VariableDeclaration","scope":4772,"src":"704:60:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4371,"name":"bytes32","nodeType":"ElementaryTypeName","src":"704:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4f574e45525f524f4c45","id":4373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"751:12:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_b19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e","typeString":"literal_string \"OWNER_ROLE\""},"value":"OWNER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_b19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e","typeString":"literal_string \"OWNER_ROLE\""}],"id":4372,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"741:9:21","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"741:23:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"d5391393","id":4380,"mutability":"constant","name":"MINTER_ROLE","nameLocation":"794:11:21","nodeType":"VariableDeclaration","scope":4772,"src":"770:62:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4376,"name":"bytes32","nodeType":"ElementaryTypeName","src":"770:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4d494e5445525f524f4c45","id":4378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"818:13:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6","typeString":"literal_string \"MINTER_ROLE\""},"value":"MINTER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6","typeString":"literal_string \"MINTER_ROLE\""}],"id":4377,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"808:9:21","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"808:24:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"282c51f3","id":4385,"mutability":"constant","name":"BURNER_ROLE","nameLocation":"862:11:21","nodeType":"VariableDeclaration","scope":4772,"src":"838:62:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4381,"name":"bytes32","nodeType":"ElementaryTypeName","src":"838:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4255524e45525f524f4c45","id":4383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"886:13:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848","typeString":"literal_string \"BURNER_ROLE\""},"value":"BURNER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848","typeString":"literal_string \"BURNER_ROLE\""}],"id":4382,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"876:9:21","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"876:24:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"documentation":{"id":4386,"nodeType":"StructuredDocumentation","src":"907:14:21","text":"ERRORS *"},"errorSelector":"a2dc6c3a","id":4388,"name":"InvalidValues","nameLocation":"933:13:21","nodeType":"ErrorDefinition","parameters":{"id":4387,"nodeType":"ParameterList","parameters":[],"src":"946:2:21"},"src":"927:22:21"},{"body":{"id":4469,"nodeType":"Block","src":"1041:697:21","statements":[{"expression":{"arguments":[{"id":4397,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"1160:18:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4398,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1180:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1184:6:21","memberName":"sender","nodeType":"MemberAccess","src":"1180:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4396,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"1149:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":4400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1149:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4401,"nodeType":"ExpressionStatement","src":"1149:42:21"},{"expression":{"arguments":[{"id":4403,"name":"OWNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4375,"src":"1212:10:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4404,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1224:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1228:6:21","memberName":"sender","nodeType":"MemberAccess","src":"1224:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4402,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"1201:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":4406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1201:34:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4407,"nodeType":"ExpressionStatement","src":"1201:34:21"},{"expression":{"arguments":[{"id":4409,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4380,"src":"1256:11:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4410,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1269:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1273:6:21","memberName":"sender","nodeType":"MemberAccess","src":"1269:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4408,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"1245:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":4412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1245:35:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4413,"nodeType":"ExpressionStatement","src":"1245:35:21"},{"expression":{"arguments":[{"id":4415,"name":"BURNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4385,"src":"1301:11:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4416,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1314:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1318:6:21","memberName":"sender","nodeType":"MemberAccess","src":"1314:10:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4414,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"1290:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":4418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1290:35:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4419,"nodeType":"ExpressionStatement","src":"1290:35:21"},{"expression":{"id":4425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":4420,"name":"classIdToCharacterData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"1336:22:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_CharacterData_$4360_storage_$","typeString":"mapping(uint256 => struct CharacterNFT.CharacterData storage ref)"}},"id":4422,"indexExpression":{"hexValue":"31","id":4421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1359:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1336:25:21","typeDescriptions":{"typeIdentifier":"t_struct$_CharacterData_$4360_storage","typeString":"struct CharacterNFT.CharacterData storage ref"}},"id":4423,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1362:9:21","memberName":"className","nodeType":"MemberAccess","referencedDeclaration":4355,"src":"1336:35:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"42415242415249414e","id":4424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1374:11:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_b0a503a1c4697cfa7f89b704af8e8e5b28407294978bc1a21b022097338b5abc","typeString":"literal_string \"BARBARIAN\""},"value":"BARBARIAN"},"src":"1336:49:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4426,"nodeType":"ExpressionStatement","src":"1336:49:21"},{"expression":{"id":4432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":4427,"name":"classIdToCharacterData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"1395:22:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_CharacterData_$4360_storage_$","typeString":"mapping(uint256 => struct CharacterNFT.CharacterData storage ref)"}},"id":4429,"indexExpression":{"hexValue":"32","id":4428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1418:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1395:25:21","typeDescriptions":{"typeIdentifier":"t_struct$_CharacterData_$4360_storage","typeString":"struct CharacterNFT.CharacterData storage ref"}},"id":4430,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1421:9:21","memberName":"className","nodeType":"MemberAccess","referencedDeclaration":4355,"src":"1395:35:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"4e4543524f4d414e434552","id":4431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1433:13:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_c1d7bad5205809e18a5328f999a97999df2b21a04aa40f6adfeca9545b07313a","typeString":"literal_string \"NECROMANCER\""},"value":"NECROMANCER"},"src":"1395:51:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4433,"nodeType":"ExpressionStatement","src":"1395:51:21"},{"expression":{"id":4439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":4434,"name":"classIdToCharacterData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"1456:22:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_CharacterData_$4360_storage_$","typeString":"mapping(uint256 => struct CharacterNFT.CharacterData storage ref)"}},"id":4436,"indexExpression":{"hexValue":"33","id":4435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1479:1:21","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1456:25:21","typeDescriptions":{"typeIdentifier":"t_struct$_CharacterData_$4360_storage","typeString":"struct CharacterNFT.CharacterData storage ref"}},"id":4437,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1482:9:21","memberName":"className","nodeType":"MemberAccess","referencedDeclaration":4355,"src":"1456:35:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"50414c4144494e","id":4438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1494:9:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_28299a9097bb90efb729440673026c5ae8ff8b48f2865b42a4a7d57a6a279260","typeString":"literal_string \"PALADIN\""},"value":"PALADIN"},"src":"1456:47:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4440,"nodeType":"ExpressionStatement","src":"1456:47:21"},{"expression":{"id":4446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":4441,"name":"classIdToCharacterData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"1513:22:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_CharacterData_$4360_storage_$","typeString":"mapping(uint256 => struct CharacterNFT.CharacterData storage ref)"}},"id":4443,"indexExpression":{"hexValue":"34","id":4442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1536:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1513:25:21","typeDescriptions":{"typeIdentifier":"t_struct$_CharacterData_$4360_storage","typeString":"struct CharacterNFT.CharacterData storage ref"}},"id":4444,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1539:9:21","memberName":"className","nodeType":"MemberAccess","referencedDeclaration":4355,"src":"1513:35:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"534f52434552455353","id":4445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1551:11:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9eda05835060b9ca41fe856347dc4d1f61347cb27aff3f14eb62318e3e0a67e","typeString":"literal_string \"SORCERESS\""},"value":"SORCERESS"},"src":"1513:49:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4447,"nodeType":"ExpressionStatement","src":"1513:49:21"},{"expression":{"id":4453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":4448,"name":"classIdToCharacterData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"1572:22:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_CharacterData_$4360_storage_$","typeString":"mapping(uint256 => struct CharacterNFT.CharacterData storage ref)"}},"id":4450,"indexExpression":{"hexValue":"35","id":4449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1595:1:21","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1572:25:21","typeDescriptions":{"typeIdentifier":"t_struct$_CharacterData_$4360_storage","typeString":"struct CharacterNFT.CharacterData storage ref"}},"id":4451,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1598:9:21","memberName":"className","nodeType":"MemberAccess","referencedDeclaration":4355,"src":"1572:35:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"414d415a4f4e","id":4452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1610:8:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_4030b3c1acb095e4091b2ebfcbfcdaa294f94a164971935f75bdff0ff84cb15a","typeString":"literal_string \"AMAZON\""},"value":"AMAZON"},"src":"1572:46:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4454,"nodeType":"ExpressionStatement","src":"1572:46:21"},{"expression":{"id":4460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":4455,"name":"classIdToCharacterData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"1628:22:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_CharacterData_$4360_storage_$","typeString":"mapping(uint256 => struct CharacterNFT.CharacterData storage ref)"}},"id":4457,"indexExpression":{"hexValue":"36","id":4456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1651:1:21","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1628:25:21","typeDescriptions":{"typeIdentifier":"t_struct$_CharacterData_$4360_storage","typeString":"struct CharacterNFT.CharacterData storage ref"}},"id":4458,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1654:9:21","memberName":"className","nodeType":"MemberAccess","referencedDeclaration":4355,"src":"1628:35:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"415353415353494e","id":4459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1666:10:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_334abc4db7984fc7e77c6ab74cb716fc043f44413c3ac06df651c566fc64917b","typeString":"literal_string \"ASSASSIN\""},"value":"ASSASSIN"},"src":"1628:48:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4461,"nodeType":"ExpressionStatement","src":"1628:48:21"},{"expression":{"id":4467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":4462,"name":"classIdToCharacterData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"1686:22:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_CharacterData_$4360_storage_$","typeString":"mapping(uint256 => struct CharacterNFT.CharacterData storage ref)"}},"id":4464,"indexExpression":{"hexValue":"37","id":4463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1709:1:21","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1686:25:21","typeDescriptions":{"typeIdentifier":"t_struct$_CharacterData_$4360_storage","typeString":"struct CharacterNFT.CharacterData storage ref"}},"id":4465,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1712:9:21","memberName":"className","nodeType":"MemberAccess","referencedDeclaration":4355,"src":"1686:35:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"4452554944","id":4466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1724:7:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_179fd23efb9efe5622595845738eb1af58bbdfdfa3085083cffe12e36390d07a","typeString":"literal_string \"DRUID\""},"value":"DRUID"},"src":"1686:45:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4468,"nodeType":"ExpressionStatement","src":"1686:45:21"}]},"documentation":{"id":4389,"nodeType":"StructuredDocumentation","src":"978:17:21","text":"FUNCTIONS *"},"id":4470,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"446961626c6f","id":4392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1022:8:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_f98ef1f2a51ea99379e6bd2fab5eff73657e9302933a4fb15290d5643e6fdd5e","typeString":"literal_string \"Diablo\""},"value":"Diablo"},{"hexValue":"44324e4654","id":4393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1032:7:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_6ffd6e9d1ffc871f280051144c3b91b54ca763db647f0f35c18d7e48904e2fc3","typeString":"literal_string \"D2NFT\""},"value":"D2NFT"}],"id":4394,"kind":"baseConstructorSpecifier","modifierName":{"id":4391,"name":"ERC721","nameLocations":["1015:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":2532,"src":"1015:6:21"},"nodeType":"ModifierInvocation","src":"1015:25:21"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4390,"nodeType":"ParameterList","parameters":[],"src":"1012:2:21"},"returnParameters":{"id":4395,"nodeType":"ParameterList","parameters":[],"src":"1041:0:21"},"scope":4772,"src":"1001:737:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1070,1624],"body":{"id":4485,"nodeType":"Block","src":"1864:60:21","statements":[{"expression":{"arguments":[{"id":4482,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4472,"src":"1905:11:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":4480,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967271,"src":"1881:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_CharacterNFT_$4772_$","typeString":"type(contract super CharacterNFT)"}},"id":4481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1887:17:21","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1070,"src":"1881:23:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":4483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:36:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4479,"id":4484,"nodeType":"Return","src":"1874:43:21"}]},"functionSelector":"01ffc9a7","id":4486,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1753:17:21","nodeType":"FunctionDefinition","overrides":{"id":4476,"nodeType":"OverrideSpecifier","overrides":[{"id":4474,"name":"ERC721","nameLocations":["1826:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":2532,"src":"1826:6:21"},{"id":4475,"name":"AccessControl","nameLocations":["1834:13:21"],"nodeType":"IdentifierPath","referencedDeclaration":1303,"src":"1834:13:21"}],"src":"1817:31:21"},"parameters":{"id":4473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4472,"mutability":"mutable","name":"interfaceId","nameLocation":"1787:11:21","nodeType":"VariableDeclaration","scope":4486,"src":"1780:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4471,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1780:6:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1770:34:21"},"returnParameters":{"id":4479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4478,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4486,"src":"1858:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4477,"name":"bool","nodeType":"ElementaryTypeName","src":"1858:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1857:6:21"},"scope":4772,"src":"1744:180:21","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4499,"nodeType":"Block","src":"2120:73:21","statements":[{"expression":{"id":4497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4495,"name":"characterNFTManagerContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4367,"src":"2130:27:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4496,"name":"characterNFTManagerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4489,"src":"2160:26:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2130:56:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4498,"nodeType":"ExpressionStatement","src":"2130:56:21"}]},"documentation":{"id":4487,"nodeType":"StructuredDocumentation","src":"1930:75:21","text":" @dev Set the address of the CharacterNFTManager contract"},"functionSelector":"94dd3215","id":4500,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4492,"name":"OWNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4375,"src":"2108:10:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4493,"kind":"modifierInvocation","modifierName":{"id":4491,"name":"onlyRole","nameLocations":["2099:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":1048,"src":"2099:8:21"},"nodeType":"ModifierInvocation","src":"2099:20:21"}],"name":"setCharacterNFTManager","nameLocation":"2019:22:21","nodeType":"FunctionDefinition","parameters":{"id":4490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4489,"mutability":"mutable","name":"characterNFTManagerAddress","nameLocation":"2059:26:21","nodeType":"VariableDeclaration","scope":4500,"src":"2051:34:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4488,"name":"address","nodeType":"ElementaryTypeName","src":"2051:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2041:50:21"},"returnParameters":{"id":4494,"nodeType":"ParameterList","parameters":[],"src":"2120:0:21"},"scope":4772,"src":"2010:183:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4513,"nodeType":"Block","src":"2384:59:21","statements":[{"expression":{"id":4511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4509,"name":"tokenUriContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4369,"src":"2394:16:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4510,"name":"tokenUriContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4503,"src":"2413:23:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2394:42:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4512,"nodeType":"ExpressionStatement","src":"2394:42:21"}]},"documentation":{"id":4501,"nodeType":"StructuredDocumentation","src":"2199:76:21","text":" @dev Set the address of the CharacterNFTTokenURI contract"},"functionSelector":"f210ace4","id":4514,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4506,"name":"OWNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4375,"src":"2372:10:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4507,"kind":"modifierInvocation","modifierName":{"id":4505,"name":"onlyRole","nameLocations":["2363:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":1048,"src":"2363:8:21"},"nodeType":"ModifierInvocation","src":"2363:20:21"}],"name":"setTokenUriContract","nameLocation":"2289:19:21","nodeType":"FunctionDefinition","parameters":{"id":4504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4503,"mutability":"mutable","name":"tokenUriContractAddress","nameLocation":"2326:23:21","nodeType":"VariableDeclaration","scope":4514,"src":"2318:31:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4502,"name":"address","nodeType":"ElementaryTypeName","src":"2318:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2308:47:21"},"returnParameters":{"id":4508,"nodeType":"ParameterList","parameters":[],"src":"2384:0:21"},"scope":4772,"src":"2280:163:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4553,"nodeType":"Block","src":"2586:346:21","statements":[{"assignments":[4523],"declarations":[{"constant":false,"id":4523,"mutability":"mutable","name":"classEnumValue","nameLocation":"2604:14:21","nodeType":"VariableDeclaration","scope":4553,"src":"2596:22:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4522,"name":"uint256","nodeType":"ElementaryTypeName","src":"2596:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4533,"initialValue":{"arguments":[{"arguments":[{"id":4530,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4517,"src":"2732:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4527,"name":"characterNFTManagerContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4367,"src":"2662:27:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4526,"name":"CharacterNFTManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5095,"src":"2642:19:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_CharacterNFTManager_$5095_$","typeString":"type(contract CharacterNFTManager)"}},"id":4528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2642:48:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_CharacterNFTManager_$5095","typeString":"contract CharacterNFTManager"}},"id":4529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2708:23:21","memberName":"tokenIdToCharacterClass","nodeType":"MemberAccess","referencedDeclaration":4796,"src":"2642:89:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_enum$_CharacterClass_$4788_$","typeString":"function (uint256) view external returns (enum CharacterNFTManager.CharacterClass)"}},"id":4531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2642:98:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}],"id":4525,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2621:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4524,"name":"uint256","nodeType":"ElementaryTypeName","src":"2621:7:21","typeDescriptions":{}}},"id":4532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2621:129:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2596:154:21"},{"assignments":[4535],"declarations":[{"constant":false,"id":4535,"mutability":"mutable","name":"className","nameLocation":"2774:9:21","nodeType":"VariableDeclaration","scope":4553,"src":"2760:23:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4534,"name":"string","nodeType":"ElementaryTypeName","src":"2760:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":4540,"initialValue":{"expression":{"baseExpression":{"id":4536,"name":"classIdToCharacterData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"2786:22:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_CharacterData_$4360_storage_$","typeString":"mapping(uint256 => struct CharacterNFT.CharacterData storage ref)"}},"id":4538,"indexExpression":{"id":4537,"name":"classEnumValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4523,"src":"2809:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2786:38:21","typeDescriptions":{"typeIdentifier":"t_struct$_CharacterData_$4360_storage","typeString":"struct CharacterNFT.CharacterData storage ref"}},"id":4539,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2838:9:21","memberName":"className","nodeType":"MemberAccess","referencedDeclaration":4355,"src":"2786:61:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"VariableDeclarationStatement","src":"2760:87:21"},{"expression":{"arguments":[{"arguments":[{"id":4545,"name":"className","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4535,"src":"2888:9:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2023","id":4546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2899:4:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_21af77cd140717e5867fa5acefcf2fc51f566448915c6d7fd3ac9763b6517a12","typeString":"literal_string \" #\""},"value":" #"},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4547,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4517,"src":"2905:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2913:8:21","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":2840,"src":"2905:16:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":4549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2905:18:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_21af77cd140717e5867fa5acefcf2fc51f566448915c6d7fd3ac9763b6517a12","typeString":"literal_string \" #\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":4543,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"2871:3:21","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4544,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2875:12:21","memberName":"encodePacked","nodeType":"MemberAccess","src":"2871:16:21","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2871:53:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2864:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":4541,"name":"string","nodeType":"ElementaryTypeName","src":"2864:6:21","typeDescriptions":{}}},"id":4551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2864:61:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4521,"id":4552,"nodeType":"Return","src":"2857:68:21"}]},"documentation":{"id":4515,"nodeType":"StructuredDocumentation","src":"2449:60:21","text":" @dev Returns the name of a given token ID"},"functionSelector":"e725f877","id":4554,"implemented":true,"kind":"function","modifiers":[],"name":"tokenName","nameLocation":"2523:9:21","nodeType":"FunctionDefinition","parameters":{"id":4518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4517,"mutability":"mutable","name":"tokenId","nameLocation":"2541:7:21","nodeType":"VariableDeclaration","scope":4554,"src":"2533:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4516,"name":"uint256","nodeType":"ElementaryTypeName","src":"2533:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2532:17:21"},"returnParameters":{"id":4521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4520,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4554,"src":"2571:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4519,"name":"string","nodeType":"ElementaryTypeName","src":"2571:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2570:15:21"},"scope":4772,"src":"2514:418:21","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[1719],"body":{"id":4584,"nodeType":"Block","src":"3097:191:21","statements":[{"expression":{"arguments":[{"id":4564,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4557,"src":"3121:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4563,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2467,"src":"3107:13:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":4565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3107:22:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4566,"nodeType":"ExpressionStatement","src":"3107:22:21"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4567,"name":"tokenUriContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4369,"src":"3143:16:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3171:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4569,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3163:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4568,"name":"address","nodeType":"ElementaryTypeName","src":"3163:7:21","typeDescriptions":{}}},"id":4571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3163:10:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3143:30:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4576,"nodeType":"IfStatement","src":"3139:70:21","trueBody":{"id":4575,"nodeType":"Block","src":"3175:34:21","statements":[{"expression":{"hexValue":"","id":4573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3196:2:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":4562,"id":4574,"nodeType":"Return","src":"3189:9:21"}]}},{"expression":{"arguments":[{"id":4581,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4557,"src":"3273:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4578,"name":"tokenUriContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4369,"src":"3246:16:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4577,"name":"CharacterNFTTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5398,"src":"3225:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_CharacterNFTTokenURI_$5398_$","typeString":"type(contract CharacterNFTTokenURI)"}},"id":4579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3225:38:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_CharacterNFTTokenURI_$5398","typeString":"contract CharacterNFTTokenURI"}},"id":4580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3264:8:21","memberName":"tokenURI","nodeType":"MemberAccess","referencedDeclaration":5172,"src":"3225:47:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view external returns (string memory)"}},"id":4582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3225:56:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4562,"id":4583,"nodeType":"Return","src":"3218:63:21"}]},"documentation":{"id":4555,"nodeType":"StructuredDocumentation","src":"2938:60:21","text":" @dev Returns the URI for a given token ID"},"functionSelector":"c87b56dd","id":4585,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"3012:8:21","nodeType":"FunctionDefinition","overrides":{"id":4559,"nodeType":"OverrideSpecifier","overrides":[],"src":"3064:8:21"},"parameters":{"id":4558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4557,"mutability":"mutable","name":"tokenId","nameLocation":"3038:7:21","nodeType":"VariableDeclaration","scope":4585,"src":"3030:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4556,"name":"uint256","nodeType":"ElementaryTypeName","src":"3030:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3020:31:21"},"returnParameters":{"id":4562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4561,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4585,"src":"3082:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4560,"name":"string","nodeType":"ElementaryTypeName","src":"3082:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3081:15:21"},"scope":4772,"src":"3003:285:21","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4603,"nodeType":"Block","src":"3471:78:21","statements":[{"expression":{"id":4601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":4596,"name":"classIdToCharacterData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"3481:22:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_CharacterData_$4360_storage_$","typeString":"mapping(uint256 => struct CharacterNFT.CharacterData storage ref)"}},"id":4598,"indexExpression":{"id":4597,"name":"classEnumValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4588,"src":"3504:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3481:38:21","typeDescriptions":{"typeIdentifier":"t_struct$_CharacterData_$4360_storage","typeString":"struct CharacterNFT.CharacterData storage ref"}},"id":4599,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3520:9:21","memberName":"className","nodeType":"MemberAccess","referencedDeclaration":4355,"src":"3481:48:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4600,"name":"classNames","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4590,"src":"3532:10:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"3481:61:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4602,"nodeType":"ExpressionStatement","src":"3481:61:21"}]},"documentation":{"id":4586,"nodeType":"StructuredDocumentation","src":"3294:46:21","text":" @dev Update the class names"},"functionSelector":"58342c90","id":4604,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4593,"name":"OWNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4375,"src":"3459:10:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4594,"kind":"modifierInvocation","modifierName":{"id":4592,"name":"onlyRole","nameLocations":["3450:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":1048,"src":"3450:8:21"},"nodeType":"ModifierInvocation","src":"3450:20:21"}],"name":"updateClassNames","nameLocation":"3354:16:21","nodeType":"FunctionDefinition","parameters":{"id":4591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4588,"mutability":"mutable","name":"classEnumValue","nameLocation":"3388:14:21","nodeType":"VariableDeclaration","scope":4604,"src":"3380:22:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4587,"name":"uint256","nodeType":"ElementaryTypeName","src":"3380:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4590,"mutability":"mutable","name":"classNames","nameLocation":"3426:10:21","nodeType":"VariableDeclaration","scope":4604,"src":"3412:24:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4589,"name":"string","nodeType":"ElementaryTypeName","src":"3412:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3370:72:21"},"returnParameters":{"id":4595,"nodeType":"ParameterList","parameters":[],"src":"3471:0:21"},"scope":4772,"src":"3345:204:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4622,"nodeType":"Block","src":"3735:80:21","statements":[{"expression":{"id":4620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":4615,"name":"classIdToCharacterData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"3745:22:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_CharacterData_$4360_storage_$","typeString":"mapping(uint256 => struct CharacterNFT.CharacterData storage ref)"}},"id":4617,"indexExpression":{"id":4616,"name":"classEnumValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4607,"src":"3768:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3745:38:21","typeDescriptions":{"typeIdentifier":"t_struct$_CharacterData_$4360_storage","typeString":"struct CharacterNFT.CharacterData storage ref"}},"id":4618,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3784:10:21","memberName":"classImage","nodeType":"MemberAccess","referencedDeclaration":4357,"src":"3745:49:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4619,"name":"classImages","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4609,"src":"3797:11:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"3745:63:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4621,"nodeType":"ExpressionStatement","src":"3745:63:21"}]},"documentation":{"id":4605,"nodeType":"StructuredDocumentation","src":"3555:47:21","text":" @dev Update the class images"},"functionSelector":"a41f6179","id":4623,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4612,"name":"OWNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4375,"src":"3723:10:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4613,"kind":"modifierInvocation","modifierName":{"id":4611,"name":"onlyRole","nameLocations":["3714:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":1048,"src":"3714:8:21"},"nodeType":"ModifierInvocation","src":"3714:20:21"}],"name":"updateClassImages","nameLocation":"3616:17:21","nodeType":"FunctionDefinition","parameters":{"id":4610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4607,"mutability":"mutable","name":"classEnumValue","nameLocation":"3651:14:21","nodeType":"VariableDeclaration","scope":4623,"src":"3643:22:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4606,"name":"uint256","nodeType":"ElementaryTypeName","src":"3643:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4609,"mutability":"mutable","name":"classImages","nameLocation":"3689:11:21","nodeType":"VariableDeclaration","scope":4623,"src":"3675:25:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4608,"name":"string","nodeType":"ElementaryTypeName","src":"3675:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3633:73:21"},"returnParameters":{"id":4614,"nodeType":"ParameterList","parameters":[],"src":"3735:0:21"},"scope":4772,"src":"3607:208:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4641,"nodeType":"Block","src":"4019:105:21","statements":[{"expression":{"id":4639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":4634,"name":"classIdToCharacterData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"4029:22:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_CharacterData_$4360_storage_$","typeString":"mapping(uint256 => struct CharacterNFT.CharacterData storage ref)"}},"id":4636,"indexExpression":{"id":4635,"name":"classEnumValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4626,"src":"4052:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4029:38:21","typeDescriptions":{"typeIdentifier":"t_struct$_CharacterData_$4360_storage","typeString":"struct CharacterNFT.CharacterData storage ref"}},"id":4637,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4081:16:21","memberName":"classDescription","nodeType":"MemberAccess","referencedDeclaration":4359,"src":"4029:68:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4638,"name":"classDescriptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4628,"src":"4100:17:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"4029:88:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4640,"nodeType":"ExpressionStatement","src":"4029:88:21"}]},"documentation":{"id":4624,"nodeType":"StructuredDocumentation","src":"3821:53:21","text":" @dev Update the class descriptions"},"functionSelector":"ae53a1a1","id":4642,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4631,"name":"OWNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4375,"src":"4007:10:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4632,"kind":"modifierInvocation","modifierName":{"id":4630,"name":"onlyRole","nameLocations":["3998:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":1048,"src":"3998:8:21"},"nodeType":"ModifierInvocation","src":"3998:20:21"}],"name":"updateClassDescriptions","nameLocation":"3888:23:21","nodeType":"FunctionDefinition","parameters":{"id":4629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4626,"mutability":"mutable","name":"classEnumValue","nameLocation":"3929:14:21","nodeType":"VariableDeclaration","scope":4642,"src":"3921:22:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4625,"name":"uint256","nodeType":"ElementaryTypeName","src":"3921:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4628,"mutability":"mutable","name":"classDescriptions","nameLocation":"3967:17:21","nodeType":"VariableDeclaration","scope":4642,"src":"3953:31:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4627,"name":"string","nodeType":"ElementaryTypeName","src":"3953:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3911:79:21"},"returnParameters":{"id":4633,"nodeType":"ParameterList","parameters":[],"src":"4019:0:21"},"scope":4772,"src":"3879:245:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4673,"nodeType":"Block","src":"4285:133:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4653,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4645,"src":"4299:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4310:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4299:12:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4656,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4647,"src":"4315:2:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4329:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4658,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4321:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4657,"name":"address","nodeType":"ElementaryTypeName","src":"4321:7:21","typeDescriptions":{}}},"id":4660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4321:10:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4315:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4299:32:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4667,"nodeType":"IfStatement","src":"4295:85:21","trueBody":{"id":4666,"nodeType":"Block","src":"4333:47:21","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4663,"name":"InvalidValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4388,"src":"4354:13:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4354:15:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4665,"nodeType":"RevertStatement","src":"4347:22:21"}]}},{"expression":{"arguments":[{"id":4669,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4647,"src":"4399:2:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4670,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4645,"src":"4403:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4668,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[2154,2180],"referencedDeclaration":2154,"src":"4389:9:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4389:22:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4672,"nodeType":"ExpressionStatement","src":"4389:22:21"}]},"documentation":{"id":4643,"nodeType":"StructuredDocumentation","src":"4130:78:21","text":" @dev Mint a new token, only a minter can call this function"},"functionSelector":"94bf804d","id":4674,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4650,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4380,"src":"4272:11:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4651,"kind":"modifierInvocation","modifierName":{"id":4649,"name":"onlyRole","nameLocations":["4263:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":1048,"src":"4263:8:21"},"nodeType":"ModifierInvocation","src":"4263:21:21"}],"name":"mint","nameLocation":"4222:4:21","nodeType":"FunctionDefinition","parameters":{"id":4648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4645,"mutability":"mutable","name":"tokenId","nameLocation":"4235:7:21","nodeType":"VariableDeclaration","scope":4674,"src":"4227:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4644,"name":"uint256","nodeType":"ElementaryTypeName","src":"4227:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4647,"mutability":"mutable","name":"to","nameLocation":"4252:2:21","nodeType":"VariableDeclaration","scope":4674,"src":"4244:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4646,"name":"address","nodeType":"ElementaryTypeName","src":"4244:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4226:29:21"},"returnParameters":{"id":4652,"nodeType":"ParameterList","parameters":[],"src":"4285:0:21"},"scope":4772,"src":"4213:205:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4695,"nodeType":"Block","src":"4563:105:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4683,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4677,"src":"4577:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4588:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4577:12:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4690,"nodeType":"IfStatement","src":"4573:65:21","trueBody":{"id":4689,"nodeType":"Block","src":"4591:47:21","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4686,"name":"InvalidValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4388,"src":"4612:13:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4612:15:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4688,"nodeType":"RevertStatement","src":"4605:22:21"}]}},{"expression":{"arguments":[{"id":4692,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4677,"src":"4653:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4691,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2213,"src":"4647:5:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4647:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4694,"nodeType":"ExpressionStatement","src":"4647:14:21"}]},"documentation":{"id":4675,"nodeType":"StructuredDocumentation","src":"4424:74:21","text":" @dev Burn a token, only a burner can call this function"},"functionSelector":"42966c68","id":4696,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4680,"name":"BURNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4385,"src":"4550:11:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4681,"kind":"modifierInvocation","modifierName":{"id":4679,"name":"onlyRole","nameLocations":["4541:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":1048,"src":"4541:8:21"},"nodeType":"ModifierInvocation","src":"4541:21:21"}],"name":"burn","nameLocation":"4512:4:21","nodeType":"FunctionDefinition","parameters":{"id":4678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4677,"mutability":"mutable","name":"tokenId","nameLocation":"4525:7:21","nodeType":"VariableDeclaration","scope":4696,"src":"4517:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4676,"name":"uint256","nodeType":"ElementaryTypeName","src":"4517:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4516:17:21"},"returnParameters":{"id":4682,"nodeType":"ParameterList","parameters":[],"src":"4563:0:21"},"scope":4772,"src":"4503:165:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4720,"nodeType":"Block","src":"4770:243:21","statements":[{"assignments":[4704],"declarations":[{"constant":false,"id":4704,"mutability":"mutable","name":"classEnumValue","nameLocation":"4788:14:21","nodeType":"VariableDeclaration","scope":4720,"src":"4780:22:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4703,"name":"uint256","nodeType":"ElementaryTypeName","src":"4780:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4714,"initialValue":{"arguments":[{"arguments":[{"id":4711,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4698,"src":"4916:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4708,"name":"characterNFTManagerContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4367,"src":"4846:27:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4707,"name":"CharacterNFTManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5095,"src":"4826:19:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_CharacterNFTManager_$5095_$","typeString":"type(contract CharacterNFTManager)"}},"id":4709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4826:48:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_CharacterNFTManager_$5095","typeString":"contract CharacterNFTManager"}},"id":4710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4892:23:21","memberName":"tokenIdToCharacterClass","nodeType":"MemberAccess","referencedDeclaration":4796,"src":"4826:89:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_enum$_CharacterClass_$4788_$","typeString":"function (uint256) view external returns (enum CharacterNFTManager.CharacterClass)"}},"id":4712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4826:98:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}],"id":4706,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4805:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4705,"name":"uint256","nodeType":"ElementaryTypeName","src":"4805:7:21","typeDescriptions":{}}},"id":4713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4805:129:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4780:154:21"},{"expression":{"expression":{"baseExpression":{"id":4715,"name":"classIdToCharacterData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"4951:22:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_CharacterData_$4360_storage_$","typeString":"mapping(uint256 => struct CharacterNFT.CharacterData storage ref)"}},"id":4717,"indexExpression":{"id":4716,"name":"classEnumValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4704,"src":"4974:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4951:38:21","typeDescriptions":{"typeIdentifier":"t_struct$_CharacterData_$4360_storage","typeString":"struct CharacterNFT.CharacterData storage ref"}},"id":4718,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4990:16:21","memberName":"classDescription","nodeType":"MemberAccess","referencedDeclaration":4359,"src":"4951:55:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":4702,"id":4719,"nodeType":"Return","src":"4944:62:21"}]},"functionSelector":"31bcb9d8","id":4721,"implemented":true,"kind":"function","modifiers":[],"name":"getClassDescription","nameLocation":"4683:19:21","nodeType":"FunctionDefinition","parameters":{"id":4699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4698,"mutability":"mutable","name":"tokenId","nameLocation":"4720:7:21","nodeType":"VariableDeclaration","scope":4721,"src":"4712:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4697,"name":"uint256","nodeType":"ElementaryTypeName","src":"4712:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4702:31:21"},"returnParameters":{"id":4702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4701,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4721,"src":"4755:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4700,"name":"string","nodeType":"ElementaryTypeName","src":"4755:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4754:15:21"},"scope":4772,"src":"4674:339:21","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4745,"nodeType":"Block","src":"5109:237:21","statements":[{"assignments":[4729],"declarations":[{"constant":false,"id":4729,"mutability":"mutable","name":"classEnumValue","nameLocation":"5127:14:21","nodeType":"VariableDeclaration","scope":4745,"src":"5119:22:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4728,"name":"uint256","nodeType":"ElementaryTypeName","src":"5119:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4739,"initialValue":{"arguments":[{"arguments":[{"id":4736,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4723,"src":"5255:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4733,"name":"characterNFTManagerContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4367,"src":"5185:27:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4732,"name":"CharacterNFTManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5095,"src":"5165:19:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_CharacterNFTManager_$5095_$","typeString":"type(contract CharacterNFTManager)"}},"id":4734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5165:48:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_CharacterNFTManager_$5095","typeString":"contract CharacterNFTManager"}},"id":4735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5231:23:21","memberName":"tokenIdToCharacterClass","nodeType":"MemberAccess","referencedDeclaration":4796,"src":"5165:89:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_enum$_CharacterClass_$4788_$","typeString":"function (uint256) view external returns (enum CharacterNFTManager.CharacterClass)"}},"id":4737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5165:98:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}],"id":4731,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5144:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4730,"name":"uint256","nodeType":"ElementaryTypeName","src":"5144:7:21","typeDescriptions":{}}},"id":4738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5144:129:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5119:154:21"},{"expression":{"expression":{"baseExpression":{"id":4740,"name":"classIdToCharacterData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"5290:22:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_CharacterData_$4360_storage_$","typeString":"mapping(uint256 => struct CharacterNFT.CharacterData storage ref)"}},"id":4742,"indexExpression":{"id":4741,"name":"classEnumValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4729,"src":"5313:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5290:38:21","typeDescriptions":{"typeIdentifier":"t_struct$_CharacterData_$4360_storage","typeString":"struct CharacterNFT.CharacterData storage ref"}},"id":4743,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5329:10:21","memberName":"classImage","nodeType":"MemberAccess","referencedDeclaration":4357,"src":"5290:49:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":4727,"id":4744,"nodeType":"Return","src":"5283:56:21"}]},"functionSelector":"2d537851","id":4746,"implemented":true,"kind":"function","modifiers":[],"name":"getClassImage","nameLocation":"5028:13:21","nodeType":"FunctionDefinition","parameters":{"id":4724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4723,"mutability":"mutable","name":"tokenId","nameLocation":"5059:7:21","nodeType":"VariableDeclaration","scope":4746,"src":"5051:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4722,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5041:31:21"},"returnParameters":{"id":4727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4726,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4746,"src":"5094:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4725,"name":"string","nodeType":"ElementaryTypeName","src":"5094:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5093:15:21"},"scope":4772,"src":"5019:327:21","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4770,"nodeType":"Block","src":"5427:236:21","statements":[{"assignments":[4754],"declarations":[{"constant":false,"id":4754,"mutability":"mutable","name":"classEnumValue","nameLocation":"5445:14:21","nodeType":"VariableDeclaration","scope":4770,"src":"5437:22:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4753,"name":"uint256","nodeType":"ElementaryTypeName","src":"5437:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4764,"initialValue":{"arguments":[{"arguments":[{"id":4761,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4748,"src":"5573:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4758,"name":"characterNFTManagerContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4367,"src":"5503:27:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4757,"name":"CharacterNFTManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5095,"src":"5483:19:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_CharacterNFTManager_$5095_$","typeString":"type(contract CharacterNFTManager)"}},"id":4759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5483:48:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_CharacterNFTManager_$5095","typeString":"contract CharacterNFTManager"}},"id":4760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5549:23:21","memberName":"tokenIdToCharacterClass","nodeType":"MemberAccess","referencedDeclaration":4796,"src":"5483:89:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_enum$_CharacterClass_$4788_$","typeString":"function (uint256) view external returns (enum CharacterNFTManager.CharacterClass)"}},"id":4762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5483:98:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}],"id":4756,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5462:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4755,"name":"uint256","nodeType":"ElementaryTypeName","src":"5462:7:21","typeDescriptions":{}}},"id":4763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5462:129:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5437:154:21"},{"expression":{"expression":{"baseExpression":{"id":4765,"name":"classIdToCharacterData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"5608:22:21","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_CharacterData_$4360_storage_$","typeString":"mapping(uint256 => struct CharacterNFT.CharacterData storage ref)"}},"id":4767,"indexExpression":{"id":4766,"name":"classEnumValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4754,"src":"5631:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5608:38:21","typeDescriptions":{"typeIdentifier":"t_struct$_CharacterData_$4360_storage","typeString":"struct CharacterNFT.CharacterData storage ref"}},"id":4768,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5647:9:21","memberName":"className","nodeType":"MemberAccess","referencedDeclaration":4355,"src":"5608:48:21","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":4752,"id":4769,"nodeType":"Return","src":"5601:55:21"}]},"functionSelector":"3ddfbd8b","id":4771,"implemented":true,"kind":"function","modifiers":[],"name":"getClassName","nameLocation":"5361:12:21","nodeType":"FunctionDefinition","parameters":{"id":4749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4748,"mutability":"mutable","name":"tokenId","nameLocation":"5382:7:21","nodeType":"VariableDeclaration","scope":4771,"src":"5374:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4747,"name":"uint256","nodeType":"ElementaryTypeName","src":"5374:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5373:17:21"},"returnParameters":{"id":4752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4751,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4771,"src":"5412:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4750,"name":"string","nodeType":"ElementaryTypeName","src":"5412:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5411:15:21"},"scope":4772,"src":"5352:311:21","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":4773,"src":"302:5363:21","usedErrors":[1313,1316,1434,1439,1448,1453,1458,1465,1470,1475,4388],"usedEvents":[1325,1334,1343,2548,2557,2566]}],"src":"32:5634:21"},"id":21},"contracts/erc721/CharacterNFTManager.sol":{"ast":{"absolutePath":"contracts/erc721/CharacterNFTManager.sol","exportedSymbols":{"AccessControlUpgradeable":[362],"BaseHelper":[4338],"CharacterNFT":[4772],"CharacterNFTManager":[5095],"ContextUpgradeable":[662],"ERC165Upgradeable":[1007],"IAccessControl":[1386],"Initializable":[616],"PausableUpgradeable":[838],"ReentrancyGuardUpgradeable":[967]},"id":5096,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4774,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:22"},{"absolutePath":"contracts/BaseHelper.sol","file":"../BaseHelper.sol","id":4775,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5096,"sourceUnit":4339,"src":"58:27:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/erc721/CharacterNFT.sol","file":"./CharacterNFT.sol","id":4776,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5096,"sourceUnit":4773,"src":"86:28:22","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4777,"name":"BaseHelper","nameLocations":["148:10:22"],"nodeType":"IdentifierPath","referencedDeclaration":4338,"src":"148:10:22"},"id":4778,"nodeType":"InheritanceSpecifier","src":"148:10:22"}],"canonicalName":"CharacterNFTManager","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5095,"linearizedBaseContracts":[5095,4338,967,838,362,1007,3063,1386,662,616],"name":"CharacterNFTManager","nameLocation":"125:19:22","nodeType":"ContractDefinition","nodes":[{"canonicalName":"CharacterNFTManager.CharacterClass","documentation":{"id":4779,"nodeType":"StructuredDocumentation","src":"165:13:22","text":"ENUMS *"},"id":4788,"members":[{"id":4780,"name":"NULL","nameLocation":"213:4:22","nodeType":"EnumValue","src":"213:4:22"},{"id":4781,"name":"BARBARIAN","nameLocation":"227:9:22","nodeType":"EnumValue","src":"227:9:22"},{"id":4782,"name":"NECROMANCER","nameLocation":"246:11:22","nodeType":"EnumValue","src":"246:11:22"},{"id":4783,"name":"PALADIN","nameLocation":"267:7:22","nodeType":"EnumValue","src":"267:7:22"},{"id":4784,"name":"SORCERESS","nameLocation":"284:9:22","nodeType":"EnumValue","src":"284:9:22"},{"id":4785,"name":"AMAZON","nameLocation":"303:6:22","nodeType":"EnumValue","src":"303:6:22"},{"id":4786,"name":"ASSASSIN","nameLocation":"319:8:22","nodeType":"EnumValue","src":"319:8:22"},{"id":4787,"name":"DRUID","nameLocation":"337:5:22","nodeType":"EnumValue","src":"337:5:22"}],"name":"CharacterClass","nameLocation":"188:14:22","nodeType":"EnumDefinition","src":"183:165:22"},{"constant":false,"documentation":{"id":4789,"nodeType":"StructuredDocumentation","src":"354:17:22","text":"VARIABLES *"},"functionSelector":"98bdf6f5","id":4791,"mutability":"mutable","name":"tokenIdCounter","nameLocation":"430:14:22","nodeType":"VariableDeclaration","scope":5095,"src":"415:29:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4790,"name":"uint256","nodeType":"ElementaryTypeName","src":"415:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"f7a763c4","id":4796,"mutability":"mutable","name":"tokenIdToCharacterClass","nameLocation":"542:23:22","nodeType":"VariableDeclaration","scope":5095,"src":"500:65:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_enum$_CharacterClass_$4788_$","typeString":"mapping(uint256 => enum CharacterNFTManager.CharacterClass)"},"typeName":{"id":4795,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4792,"name":"uint256","nodeType":"ElementaryTypeName","src":"508:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"500:34:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_enum$_CharacterClass_$4788_$","typeString":"mapping(uint256 => enum CharacterNFTManager.CharacterClass)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4794,"nodeType":"UserDefinedTypeName","pathNode":{"id":4793,"name":"CharacterClass","nameLocations":["519:14:22"],"nodeType":"IdentifierPath","referencedDeclaration":4788,"src":"519:14:22"},"referencedDeclaration":4788,"src":"519:14:22","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}}},"visibility":"public"},{"constant":false,"functionSelector":"c5610a29","id":4798,"mutability":"mutable","name":"pricePerMint","nameLocation":"608:12:22","nodeType":"VariableDeclaration","scope":5095,"src":"593:27:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4797,"name":"uint256","nodeType":"ElementaryTypeName","src":"593:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"384d10ee","id":4800,"mutability":"mutable","name":"characterNFT","nameLocation":"670:12:22","nodeType":"VariableDeclaration","scope":5095,"src":"655:27:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4799,"name":"address","nodeType":"ElementaryTypeName","src":"655:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"documentation":{"id":4801,"nodeType":"StructuredDocumentation","src":"689:14:22","text":"ERRORS *"},"errorSelector":"03eb8b54","id":4807,"name":"InsufficientFunds","nameLocation":"715:17:22","nodeType":"ErrorDefinition","parameters":{"id":4806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4803,"mutability":"mutable","name":"pricePerMint","nameLocation":"741:12:22","nodeType":"VariableDeclaration","scope":4807,"src":"733:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4802,"name":"uint256","nodeType":"ElementaryTypeName","src":"733:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4805,"mutability":"mutable","name":"amount","nameLocation":"763:6:22","nodeType":"VariableDeclaration","scope":4807,"src":"755:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4804,"name":"uint256","nodeType":"ElementaryTypeName","src":"755:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"732:38:22"},"src":"709:62:22"},{"errorSelector":"55be6f46","id":4809,"name":"InvalidCharacterClass","nameLocation":"782:21:22","nodeType":"ErrorDefinition","parameters":{"id":4808,"nodeType":"ParameterList","parameters":[],"src":"803:2:22"},"src":"776:30:22"},{"body":{"id":4821,"nodeType":"Block","src":"919:46:22","statements":[{"expression":{"arguments":[{"id":4818,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4812,"src":"945:12:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4817,"name":"_baseInitialize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4313,"src":"929:15:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"929:29:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4820,"nodeType":"ExpressionStatement","src":"929:29:22"}]},"documentation":{"id":4810,"nodeType":"StructuredDocumentation","src":"835:17:22","text":"FUNCTIONS *"},"functionSelector":"c4d66de8","id":4822,"implemented":true,"kind":"function","modifiers":[{"id":4815,"kind":"modifierInvocation","modifierName":{"id":4814,"name":"initializer","nameLocations":["907:11:22"],"nodeType":"IdentifierPath","referencedDeclaration":470,"src":"907:11:22"},"nodeType":"ModifierInvocation","src":"907:11:22"}],"name":"initialize","nameLocation":"867:10:22","nodeType":"FunctionDefinition","parameters":{"id":4813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4812,"mutability":"mutable","name":"initialOwner","nameLocation":"886:12:22","nodeType":"VariableDeclaration","scope":4822,"src":"878:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4811,"name":"address","nodeType":"ElementaryTypeName","src":"878:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"877:22:22"},"returnParameters":{"id":4816,"nodeType":"ParameterList","parameters":[],"src":"919:0:22"},"scope":5095,"src":"858:107:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4835,"nodeType":"Block","src":"1112:45:22","statements":[{"expression":{"id":4833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4831,"name":"pricePerMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4798,"src":"1122:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4832,"name":"_pricePerMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4825,"src":"1137:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1122:28:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4834,"nodeType":"ExpressionStatement","src":"1122:28:22"}]},"documentation":{"id":4823,"nodeType":"StructuredDocumentation","src":"971:46:22","text":" @dev Set the price per mint"},"functionSelector":"01466bc0","id":4836,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4828,"name":"OWNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4242,"src":"1100:10:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4829,"kind":"modifierInvocation","modifierName":{"id":4827,"name":"onlyRole","nameLocations":["1091:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1091:8:22"},"nodeType":"ModifierInvocation","src":"1091:20:22"}],"name":"setPricePerMint","nameLocation":"1031:15:22","nodeType":"FunctionDefinition","parameters":{"id":4826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4825,"mutability":"mutable","name":"_pricePerMint","nameLocation":"1064:13:22","nodeType":"VariableDeclaration","scope":4836,"src":"1056:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4824,"name":"uint256","nodeType":"ElementaryTypeName","src":"1056:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1046:37:22"},"returnParameters":{"id":4830,"nodeType":"ParameterList","parameters":[],"src":"1112:0:22"},"scope":5095,"src":"1022:135:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4849,"nodeType":"Block","src":"1326:45:22","statements":[{"expression":{"id":4847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4845,"name":"characterNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"1336:12:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4846,"name":"_characterNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4839,"src":"1351:13:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1336:28:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4848,"nodeType":"ExpressionStatement","src":"1336:28:22"}]},"documentation":{"id":4837,"nodeType":"StructuredDocumentation","src":"1163:68:22","text":" @dev Set the address of the CharacterNFT contract"},"functionSelector":"5c75cadb","id":4850,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4842,"name":"OWNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4242,"src":"1314:10:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4843,"kind":"modifierInvocation","modifierName":{"id":4841,"name":"onlyRole","nameLocations":["1305:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1305:8:22"},"nodeType":"ModifierInvocation","src":"1305:20:22"}],"name":"setCharacterNFT","nameLocation":"1245:15:22","nodeType":"FunctionDefinition","parameters":{"id":4840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4839,"mutability":"mutable","name":"_characterNFT","nameLocation":"1278:13:22","nodeType":"VariableDeclaration","scope":4850,"src":"1270:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4838,"name":"address","nodeType":"ElementaryTypeName","src":"1270:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1260:37:22"},"returnParameters":{"id":4844,"nodeType":"ParameterList","parameters":[],"src":"1326:0:22"},"scope":5095,"src":"1236:135:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4870,"nodeType":"Block","src":"1483:68:22","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":4865,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"1530:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_CharacterNFTManager_$5095","typeString":"contract CharacterNFTManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CharacterNFTManager_$5095","typeString":"contract CharacterNFTManager"}],"id":4864,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1522:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4863,"name":"address","nodeType":"ElementaryTypeName","src":"1522:7:22","typeDescriptions":{}}},"id":4866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1522:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1536:7:22","memberName":"balance","nodeType":"MemberAccess","src":"1522:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":4859,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1501:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1505:6:22","memberName":"sender","nodeType":"MemberAccess","src":"1501:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4858,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1493:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":4857,"name":"address","nodeType":"ElementaryTypeName","src":"1493:8:22","stateMutability":"payable","typeDescriptions":{}}},"id":4861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1493:19:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":4862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1513:8:22","memberName":"transfer","nodeType":"MemberAccess","src":"1493:28:22","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1493:51:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4869,"nodeType":"ExpressionStatement","src":"1493:51:22"}]},"documentation":{"id":4851,"nodeType":"StructuredDocumentation","src":"1377:53:22","text":" @dev Withdraw the contract balance"},"functionSelector":"3ccfd60b","id":4871,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4854,"name":"OWNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4242,"src":"1471:10:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4855,"kind":"modifierInvocation","modifierName":{"id":4853,"name":"onlyRole","nameLocations":["1462:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1462:8:22"},"nodeType":"ModifierInvocation","src":"1462:20:22"}],"name":"withdraw","nameLocation":"1444:8:22","nodeType":"FunctionDefinition","parameters":{"id":4852,"nodeType":"ParameterList","parameters":[],"src":"1452:2:22"},"returnParameters":{"id":4856,"nodeType":"ParameterList","parameters":[],"src":"1483:0:22"},"scope":5095,"src":"1435:116:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4948,"nodeType":"Block","src":"1779:565:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"},"id":4887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4884,"name":"charType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4877,"src":"1793:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4885,"name":"CharacterClass","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4788,"src":"1805:14:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CharacterClass_$4788_$","typeString":"type(enum CharacterNFTManager.CharacterClass)"}},"id":4886,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1820:4:22","memberName":"NULL","nodeType":"MemberAccess","referencedDeclaration":4780,"src":"1805:19:22","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}},"src":"1793:31:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4892,"nodeType":"IfStatement","src":"1789:92:22","trueBody":{"id":4891,"nodeType":"Block","src":"1826:55:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4888,"name":"InvalidCharacterClass","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4809,"src":"1847:21:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1847:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4890,"nodeType":"RevertStatement","src":"1840:30:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4893,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"1894:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1904:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1894:11:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4900,"nodeType":"IfStatement","src":"1890:64:22","trueBody":{"id":4899,"nodeType":"Block","src":"1907:47:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4896,"name":"InvalidValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4265,"src":"1928:13:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:15:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4898,"nodeType":"RevertStatement","src":"1921:22:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4901,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1967:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1971:5:22","memberName":"value","nodeType":"MemberAccess","src":"1967:9:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4903,"name":"pricePerMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4798,"src":"1979:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4904,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"1994:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1979:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1967:33:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4913,"nodeType":"IfStatement","src":"1963:110:22","trueBody":{"id":4912,"nodeType":"Block","src":"2002:71:22","statements":[{"errorCall":{"arguments":[{"id":4908,"name":"pricePerMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4798,"src":"2041:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4909,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"2055:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4907,"name":"InsufficientFunds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4807,"src":"2023:17:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":4910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2023:39:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4911,"nodeType":"RevertStatement","src":"2016:46:22"}]}},{"body":{"id":4946,"nodeType":"Block","src":"2119:219:22","statements":[{"expression":{"id":4925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2133:16:22","subExpression":{"id":4924,"name":"tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4791,"src":"2133:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4926,"nodeType":"ExpressionStatement","src":"2133:16:22"},{"assignments":[4928],"declarations":[{"constant":false,"id":4928,"mutability":"mutable","name":"newTokenId","nameLocation":"2171:10:22","nodeType":"VariableDeclaration","scope":4946,"src":"2163:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4927,"name":"uint256","nodeType":"ElementaryTypeName","src":"2163:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4930,"initialValue":{"id":4929,"name":"tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4791,"src":"2184:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2163:35:22"},{"expression":{"id":4935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4931,"name":"tokenIdToCharacterClass","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4796,"src":"2212:23:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_enum$_CharacterClass_$4788_$","typeString":"mapping(uint256 => enum CharacterNFTManager.CharacterClass)"}},"id":4933,"indexExpression":{"id":4932,"name":"newTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"2236:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2212:35:22","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4934,"name":"charType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4877,"src":"2250:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}},"src":"2212:46:22","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}},"id":4936,"nodeType":"ExpressionStatement","src":"2212:46:22"},{"expression":{"arguments":[{"id":4941,"name":"newTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4928,"src":"2304:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4942,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"2316:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2320:6:22","memberName":"sender","nodeType":"MemberAccess","src":"2316:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":4938,"name":"characterNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"2285:12:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4937,"name":"CharacterNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4772,"src":"2272:12:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_CharacterNFT_$4772_$","typeString":"type(contract CharacterNFT)"}},"id":4939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2272:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_CharacterNFT_$4772","typeString":"contract CharacterNFT"}},"id":4940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2299:4:22","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":4674,"src":"2272:31:22","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address) external"}},"id":4944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2272:55:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4945,"nodeType":"ExpressionStatement","src":"2272:55:22"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4918,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4915,"src":"2102:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4919,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"2106:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2102:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4947,"initializationExpression":{"assignments":[4915],"declarations":[{"constant":false,"id":4915,"mutability":"mutable","name":"i","nameLocation":"2095:1:22","nodeType":"VariableDeclaration","scope":4947,"src":"2087:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4914,"name":"uint256","nodeType":"ElementaryTypeName","src":"2087:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4917,"initialValue":{"hexValue":"30","id":4916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2099:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2087:13:22"},"loopExpression":{"expression":{"id":4922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2114:3:22","subExpression":{"id":4921,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4915,"src":"2114:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4923,"nodeType":"ExpressionStatement","src":"2114:3:22"},"nodeType":"ForStatement","src":"2082:256:22"}]},"documentation":{"id":4872,"nodeType":"StructuredDocumentation","src":"1557:83:22","text":" @dev Mint a character NFT, open for public use, requires payment"},"functionSelector":"e524145b","id":4949,"implemented":true,"kind":"function","modifiers":[{"id":4880,"kind":"modifierInvocation","modifierName":{"id":4879,"name":"whenNotPaused","nameLocations":["1752:13:22"],"nodeType":"IdentifierPath","referencedDeclaration":740,"src":"1752:13:22"},"nodeType":"ModifierInvocation","src":"1752:13:22"},{"id":4882,"kind":"modifierInvocation","modifierName":{"id":4881,"name":"nonReentrant","nameLocations":["1766:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":907,"src":"1766:12:22"},"nodeType":"ModifierInvocation","src":"1766:12:22"}],"name":"mintCharacterPublic","nameLocation":"1654:19:22","nodeType":"FunctionDefinition","parameters":{"id":4878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4874,"mutability":"mutable","name":"amount","nameLocation":"1691:6:22","nodeType":"VariableDeclaration","scope":4949,"src":"1683:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4873,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4877,"mutability":"mutable","name":"charType","nameLocation":"1722:8:22","nodeType":"VariableDeclaration","scope":4949,"src":"1707:23:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"},"typeName":{"id":4876,"nodeType":"UserDefinedTypeName","pathNode":{"id":4875,"name":"CharacterClass","nameLocations":["1707:14:22"],"nodeType":"IdentifierPath","referencedDeclaration":4788,"src":"1707:14:22"},"referencedDeclaration":4788,"src":"1707:14:22","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}},"visibility":"internal"}],"src":"1673:63:22"},"returnParameters":{"id":4883,"nodeType":"ParameterList","parameters":[],"src":"1779:0:22"},"scope":5095,"src":"1645:699:22","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":4969,"nodeType":"Block","src":"2583:48:22","statements":[{"expression":{"arguments":[{"id":4964,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4952,"src":"2603:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4965,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"2611:2:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4966,"name":"charType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4957,"src":"2615:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}],"id":4963,"name":"_mintChar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5094,"src":"2593:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_enum$_CharacterClass_$4788_$returns$__$","typeString":"function (uint256,address,enum CharacterNFTManager.CharacterClass)"}},"id":4967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2593:31:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4968,"nodeType":"ExpressionStatement","src":"2593:31:22"}]},"documentation":{"id":4950,"nodeType":"StructuredDocumentation","src":"2350:86:22","text":" @dev Mint a character NFT, only for MINTER use, no payment required"},"functionSelector":"d049963e","id":4970,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4960,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4252,"src":"2570:11:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4961,"kind":"modifierInvocation","modifierName":{"id":4959,"name":"onlyRole","nameLocations":["2561:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"2561:8:22"},"nodeType":"ModifierInvocation","src":"2561:21:22"}],"name":"mintCharacterPrivate","nameLocation":"2450:20:22","nodeType":"FunctionDefinition","parameters":{"id":4958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4952,"mutability":"mutable","name":"amount","nameLocation":"2488:6:22","nodeType":"VariableDeclaration","scope":4970,"src":"2480:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4951,"name":"uint256","nodeType":"ElementaryTypeName","src":"2480:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4954,"mutability":"mutable","name":"to","nameLocation":"2512:2:22","nodeType":"VariableDeclaration","scope":4970,"src":"2504:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4953,"name":"address","nodeType":"ElementaryTypeName","src":"2504:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4957,"mutability":"mutable","name":"charType","nameLocation":"2539:8:22","nodeType":"VariableDeclaration","scope":4970,"src":"2524:23:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"},"typeName":{"id":4956,"nodeType":"UserDefinedTypeName","pathNode":{"id":4955,"name":"CharacterClass","nameLocations":["2524:14:22"],"nodeType":"IdentifierPath","referencedDeclaration":4788,"src":"2524:14:22"},"referencedDeclaration":4788,"src":"2524:14:22","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}},"visibility":"internal"}],"src":"2470:83:22"},"returnParameters":{"id":4962,"nodeType":"ParameterList","parameters":[],"src":"2583:0:22"},"scope":5095,"src":"2441:190:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5028,"nodeType":"Block","src":"2912:308:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4987,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4974,"src":"2939:7:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":4988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2947:6:22","memberName":"length","nodeType":"MemberAccess","src":"2939:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":4989,"name":"toAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"2957:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":4990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2969:6:22","memberName":"length","nodeType":"MemberAccess","src":"2957:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2939:36:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4992,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4974,"src":"2991:7:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":4993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2999:6:22","memberName":"length","nodeType":"MemberAccess","src":"2991:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":4994,"name":"charTypes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4981,"src":"3009:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_enum$_CharacterClass_$4788_$dyn_calldata_ptr","typeString":"enum CharacterNFTManager.CharacterClass[] calldata"}},"id":4995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3019:6:22","memberName":"length","nodeType":"MemberAccess","src":"3009:16:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2991:34:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2939:86:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5002,"nodeType":"IfStatement","src":"2922:161:22","trueBody":{"id":5001,"nodeType":"Block","src":"3036:47:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4998,"name":"InvalidValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4265,"src":"3057:13:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3057:15:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5000,"nodeType":"RevertStatement","src":"3050:22:22"}]}},{"body":{"id":5026,"nodeType":"Block","src":"3138:76:22","statements":[{"expression":{"arguments":[{"baseExpression":{"id":5015,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4974,"src":"3162:7:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":5017,"indexExpression":{"id":5016,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5004,"src":"3170:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3162:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":5018,"name":"toAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"3174:11:22","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":5020,"indexExpression":{"id":5019,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5004,"src":"3186:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3174:14:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":5021,"name":"charTypes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4981,"src":"3190:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_enum$_CharacterClass_$4788_$dyn_calldata_ptr","typeString":"enum CharacterNFTManager.CharacterClass[] calldata"}},"id":5023,"indexExpression":{"id":5022,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5004,"src":"3200:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3190:12:22","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}],"id":5014,"name":"_mintChar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5094,"src":"3152:9:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_enum$_CharacterClass_$4788_$returns$__$","typeString":"function (uint256,address,enum CharacterNFTManager.CharacterClass)"}},"id":5024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3152:51:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5025,"nodeType":"ExpressionStatement","src":"3152:51:22"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5007,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5004,"src":"3113:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5008,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4974,"src":"3117:7:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":5009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3125:6:22","memberName":"length","nodeType":"MemberAccess","src":"3117:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3113:18:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5027,"initializationExpression":{"assignments":[5004],"declarations":[{"constant":false,"id":5004,"mutability":"mutable","name":"i","nameLocation":"3106:1:22","nodeType":"VariableDeclaration","scope":5027,"src":"3098:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5003,"name":"uint256","nodeType":"ElementaryTypeName","src":"3098:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5006,"initialValue":{"hexValue":"30","id":5005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3110:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3098:13:22"},"loopExpression":{"expression":{"id":5012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3133:3:22","subExpression":{"id":5011,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5004,"src":"3133:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5013,"nodeType":"ExpressionStatement","src":"3133:3:22"},"nodeType":"ForStatement","src":"3093:121:22"}]},"documentation":{"id":4971,"nodeType":"StructuredDocumentation","src":"2637:95:22","text":" @dev Mint a batch of character NFTs, only for owner use, no payment required"},"functionSelector":"7174326a","id":5029,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4984,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4252,"src":"2899:11:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4985,"kind":"modifierInvocation","modifierName":{"id":4983,"name":"onlyRole","nameLocations":["2890:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"2890:8:22"},"nodeType":"ModifierInvocation","src":"2890:21:22"}],"name":"mintBatch","nameLocation":"2746:9:22","nodeType":"FunctionDefinition","parameters":{"id":4982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4974,"mutability":"mutable","name":"amounts","nameLocation":"2784:7:22","nodeType":"VariableDeclaration","scope":5029,"src":"2765:26:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4972,"name":"uint256","nodeType":"ElementaryTypeName","src":"2765:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4973,"nodeType":"ArrayTypeName","src":"2765:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4977,"mutability":"mutable","name":"toAddresses","nameLocation":"2820:11:22","nodeType":"VariableDeclaration","scope":5029,"src":"2801:30:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4975,"name":"address","nodeType":"ElementaryTypeName","src":"2801:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4976,"nodeType":"ArrayTypeName","src":"2801:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":4981,"mutability":"mutable","name":"charTypes","nameLocation":"2867:9:22","nodeType":"VariableDeclaration","scope":5029,"src":"2841:35:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_enum$_CharacterClass_$4788_$dyn_calldata_ptr","typeString":"enum CharacterNFTManager.CharacterClass[]"},"typeName":{"baseType":{"id":4979,"nodeType":"UserDefinedTypeName","pathNode":{"id":4978,"name":"CharacterClass","nameLocations":["2841:14:22"],"nodeType":"IdentifierPath","referencedDeclaration":4788,"src":"2841:14:22"},"referencedDeclaration":4788,"src":"2841:14:22","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}},"id":4980,"nodeType":"ArrayTypeName","src":"2841:16:22","typeDescriptions":{"typeIdentifier":"t_array$_t_enum$_CharacterClass_$4788_$dyn_storage_ptr","typeString":"enum CharacterNFTManager.CharacterClass[]"}},"visibility":"internal"}],"src":"2755:127:22"},"returnParameters":{"id":4986,"nodeType":"ParameterList","parameters":[],"src":"2912:0:22"},"scope":5095,"src":"2737:483:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5093,"nodeType":"Block","src":"3386:415:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"},"id":5043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5040,"name":"charType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5037,"src":"3413:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5041,"name":"CharacterClass","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4788,"src":"3425:14:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CharacterClass_$4788_$","typeString":"type(enum CharacterNFTManager.CharacterClass)"}},"id":5042,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3440:4:22","memberName":"NULL","nodeType":"MemberAccess","referencedDeclaration":4780,"src":"3425:19:22","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}},"src":"3413:31:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5044,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5032,"src":"3448:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3458:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3448:11:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3413:46:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5048,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5034,"src":"3463:2:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3477:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5050,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3469:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5049,"name":"address","nodeType":"ElementaryTypeName","src":"3469:7:22","typeDescriptions":{}}},"id":5052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3469:10:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3463:16:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3413:66:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5059,"nodeType":"IfStatement","src":"3396:141:22","trueBody":{"id":5058,"nodeType":"Block","src":"3490:47:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5055,"name":"InvalidValues","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4265,"src":"3511:13:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3511:15:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5057,"nodeType":"RevertStatement","src":"3504:22:22"}]}},{"body":{"id":5091,"nodeType":"Block","src":"3584:211:22","statements":[{"expression":{"id":5071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3598:16:22","subExpression":{"id":5070,"name":"tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4791,"src":"3598:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5072,"nodeType":"ExpressionStatement","src":"3598:16:22"},{"assignments":[5074],"declarations":[{"constant":false,"id":5074,"mutability":"mutable","name":"newTokenId","nameLocation":"3636:10:22","nodeType":"VariableDeclaration","scope":5091,"src":"3628:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5073,"name":"uint256","nodeType":"ElementaryTypeName","src":"3628:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5076,"initialValue":{"id":5075,"name":"tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4791,"src":"3649:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3628:35:22"},{"expression":{"id":5081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5077,"name":"tokenIdToCharacterClass","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4796,"src":"3677:23:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_enum$_CharacterClass_$4788_$","typeString":"mapping(uint256 => enum CharacterNFTManager.CharacterClass)"}},"id":5079,"indexExpression":{"id":5078,"name":"newTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"3701:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3677:35:22","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5080,"name":"charType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5037,"src":"3715:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}},"src":"3677:46:22","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}},"id":5082,"nodeType":"ExpressionStatement","src":"3677:46:22"},{"expression":{"arguments":[{"id":5087,"name":"newTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"3769:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5088,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5034,"src":"3781:2:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":5084,"name":"characterNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"3750:12:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5083,"name":"CharacterNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4772,"src":"3737:12:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_CharacterNFT_$4772_$","typeString":"type(contract CharacterNFT)"}},"id":5085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3737:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_CharacterNFT_$4772","typeString":"contract CharacterNFT"}},"id":5086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3764:4:22","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":4674,"src":"3737:31:22","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address) external"}},"id":5089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3737:47:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5090,"nodeType":"ExpressionStatement","src":"3737:47:22"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5064,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5061,"src":"3567:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5065,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5032,"src":"3571:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3567:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5092,"initializationExpression":{"assignments":[5061],"declarations":[{"constant":false,"id":5061,"mutability":"mutable","name":"i","nameLocation":"3560:1:22","nodeType":"VariableDeclaration","scope":5092,"src":"3552:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5060,"name":"uint256","nodeType":"ElementaryTypeName","src":"3552:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5063,"initialValue":{"hexValue":"30","id":5062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3564:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3552:13:22"},"loopExpression":{"expression":{"id":5068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3579:3:22","subExpression":{"id":5067,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5061,"src":"3579:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5069,"nodeType":"ExpressionStatement","src":"3579:3:22"},"nodeType":"ForStatement","src":"3547:248:22"}]},"documentation":{"id":5030,"nodeType":"StructuredDocumentation","src":"3226:44:22","text":" @dev Internal mint helper"},"id":5094,"implemented":true,"kind":"function","modifiers":[],"name":"_mintChar","nameLocation":"3284:9:22","nodeType":"FunctionDefinition","parameters":{"id":5038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5032,"mutability":"mutable","name":"amount","nameLocation":"3311:6:22","nodeType":"VariableDeclaration","scope":5094,"src":"3303:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5031,"name":"uint256","nodeType":"ElementaryTypeName","src":"3303:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5034,"mutability":"mutable","name":"to","nameLocation":"3335:2:22","nodeType":"VariableDeclaration","scope":5094,"src":"3327:10:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5033,"name":"address","nodeType":"ElementaryTypeName","src":"3327:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5037,"mutability":"mutable","name":"charType","nameLocation":"3362:8:22","nodeType":"VariableDeclaration","scope":5094,"src":"3347:23:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"},"typeName":{"id":5036,"nodeType":"UserDefinedTypeName","pathNode":{"id":5035,"name":"CharacterClass","nameLocations":["3347:14:22"],"nodeType":"IdentifierPath","referencedDeclaration":4788,"src":"3347:14:22"},"referencedDeclaration":4788,"src":"3347:14:22","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}},"visibility":"internal"}],"src":"3293:83:22"},"returnParameters":{"id":5039,"nodeType":"ParameterList","parameters":[],"src":"3386:0:22"},"scope":5095,"src":"3275:526:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":5096,"src":"116:3687:22","usedErrors":[379,382,701,704,869,1313,1316,4265,4807,4809],"usedEvents":[387,693,698,1325,1334,1343]}],"src":"32:3772:22"},"id":22},"contracts/erc721/CharacterNFTTokenURI.sol":{"ast":{"absolutePath":"contracts/erc721/CharacterNFTTokenURI.sol","exportedSymbols":{"AccessControlUpgradeable":[362],"Base64":[2742],"BaseHelper":[4338],"CharacterNFT":[4772],"CharacterNFTTokenURI":[5398],"Context":[2772],"ContextUpgradeable":[662],"ERC165":[3051],"ERC165Upgradeable":[1007],"ERC721":[2532],"IAccessControl":[1386],"IERC165":[3063],"IERC721":[2649],"IERC721Errors":[1476],"IERC721Metadata":[2695],"IERC721Receiver":[2667],"Initializable":[616],"Level":[5694],"Math":[4117],"PausableUpgradeable":[838],"ReentrancyGuardUpgradeable":[967],"SignedMath":[4222],"Strings":[3027]},"id":5399,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5097,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:23"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":5098,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5399,"sourceUnit":3028,"src":"58:51:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Base64.sol","file":"@openzeppelin/contracts/utils/Base64.sol","id":5099,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5399,"sourceUnit":2743,"src":"110:50:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/BaseHelper.sol","file":"../BaseHelper.sol","id":5100,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5399,"sourceUnit":4339,"src":"162:27:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/erc721/CharacterNFT.sol","file":"./CharacterNFT.sol","id":5101,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5399,"sourceUnit":4773,"src":"190:28:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/leveling/Level.sol","file":"../leveling/Level.sol","id":5102,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5399,"sourceUnit":5695,"src":"219:31:23","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5103,"name":"BaseHelper","nameLocations":["285:10:23"],"nodeType":"IdentifierPath","referencedDeclaration":4338,"src":"285:10:23"},"id":5104,"nodeType":"InheritanceSpecifier","src":"285:10:23"}],"canonicalName":"CharacterNFTTokenURI","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5398,"linearizedBaseContracts":[5398,4338,967,838,362,1007,3063,1386,662,616],"name":"CharacterNFTTokenURI","nameLocation":"261:20:23","nodeType":"ContractDefinition","nodes":[{"global":false,"id":5107,"libraryName":{"id":5105,"name":"Strings","nameLocations":["308:7:23"],"nodeType":"IdentifierPath","referencedDeclaration":3027,"src":"308:7:23"},"nodeType":"UsingForDirective","src":"302:26:23","typeName":{"id":5106,"name":"uint256","nodeType":"ElementaryTypeName","src":"320:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"canonicalName":"CharacterNFTTokenURI.Attribute","documentation":{"id":5108,"nodeType":"StructuredDocumentation","src":"333:15:23","text":"STRUCTS *"},"id":5113,"members":[{"constant":false,"id":5110,"mutability":"mutable","name":"name","nameLocation":"388:4:23","nodeType":"VariableDeclaration","scope":5113,"src":"381:11:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":5109,"name":"string","nodeType":"ElementaryTypeName","src":"381:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5112,"mutability":"mutable","name":"value","nameLocation":"410:5:23","nodeType":"VariableDeclaration","scope":5113,"src":"402:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5111,"name":"uint256","nodeType":"ElementaryTypeName","src":"402:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Attribute","nameLocation":"361:9:23","nodeType":"StructDefinition","scope":5398,"src":"354:68:23","visibility":"public"},{"constant":false,"documentation":{"id":5114,"nodeType":"StructuredDocumentation","src":"428:17:23","text":"VARIABLES *"},"functionSelector":"384d10ee","id":5116,"mutability":"mutable","name":"characterNFT","nameLocation":"466:12:23","nodeType":"VariableDeclaration","scope":5398,"src":"451:27:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5115,"name":"address","nodeType":"ElementaryTypeName","src":"451:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"d9741275","id":5118,"mutability":"mutable","name":"levelContractAddress","nameLocation":"500:20:23","nodeType":"VariableDeclaration","scope":5398,"src":"485:35:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5117,"name":"address","nodeType":"ElementaryTypeName","src":"485:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"body":{"id":5130,"nodeType":"Block","src":"654:46:23","statements":[{"expression":{"arguments":[{"id":5127,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5121,"src":"680:12:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5126,"name":"_baseInitialize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4313,"src":"664:15:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"664:29:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5129,"nodeType":"ExpressionStatement","src":"664:29:23"}]},"documentation":{"id":5119,"nodeType":"StructuredDocumentation","src":"570:17:23","text":"FUNCTIONS *"},"functionSelector":"c4d66de8","id":5131,"implemented":true,"kind":"function","modifiers":[{"id":5124,"kind":"modifierInvocation","modifierName":{"id":5123,"name":"initializer","nameLocations":["642:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":470,"src":"642:11:23"},"nodeType":"ModifierInvocation","src":"642:11:23"}],"name":"initialize","nameLocation":"602:10:23","nodeType":"FunctionDefinition","parameters":{"id":5122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5121,"mutability":"mutable","name":"initialOwner","nameLocation":"621:12:23","nodeType":"VariableDeclaration","scope":5131,"src":"613:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5120,"name":"address","nodeType":"ElementaryTypeName","src":"613:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"612:22:23"},"returnParameters":{"id":5125,"nodeType":"ParameterList","parameters":[],"src":"654:0:23"},"scope":5398,"src":"593:107:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5144,"nodeType":"Block","src":"869:45:23","statements":[{"expression":{"id":5142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5140,"name":"characterNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5116,"src":"879:12:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5141,"name":"_characterNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5134,"src":"894:13:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"879:28:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5143,"nodeType":"ExpressionStatement","src":"879:28:23"}]},"documentation":{"id":5132,"nodeType":"StructuredDocumentation","src":"706:68:23","text":" @dev Set the address of the CharacterNFT contract"},"functionSelector":"5c75cadb","id":5145,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5137,"name":"OWNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4242,"src":"857:10:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5138,"kind":"modifierInvocation","modifierName":{"id":5136,"name":"onlyRole","nameLocations":["848:8:23"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"848:8:23"},"nodeType":"ModifierInvocation","src":"848:20:23"}],"name":"setCharacterNFT","nameLocation":"788:15:23","nodeType":"FunctionDefinition","parameters":{"id":5135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5134,"mutability":"mutable","name":"_characterNFT","nameLocation":"821:13:23","nodeType":"VariableDeclaration","scope":5145,"src":"813:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5133,"name":"address","nodeType":"ElementaryTypeName","src":"813:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"803:37:23"},"returnParameters":{"id":5139,"nodeType":"ParameterList","parameters":[],"src":"869:0:23"},"scope":5398,"src":"779:135:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5158,"nodeType":"Block","src":"1078:54:23","statements":[{"expression":{"id":5156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5154,"name":"levelContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5118,"src":"1088:20:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5155,"name":"_levelContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5148,"src":"1111:14:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1088:37:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5157,"nodeType":"ExpressionStatement","src":"1088:37:23"}]},"documentation":{"id":5146,"nodeType":"StructuredDocumentation","src":"920:61:23","text":" @dev Set the address of the Level contract"},"functionSelector":"5adaa492","id":5159,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5151,"name":"OWNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4242,"src":"1066:10:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5152,"kind":"modifierInvocation","modifierName":{"id":5150,"name":"onlyRole","nameLocations":["1057:8:23"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1057:8:23"},"nodeType":"ModifierInvocation","src":"1057:20:23"}],"name":"setLevelContract","nameLocation":"995:16:23","nodeType":"FunctionDefinition","parameters":{"id":5149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5148,"mutability":"mutable","name":"_levelContract","nameLocation":"1029:14:23","nodeType":"VariableDeclaration","scope":5159,"src":"1021:22:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5147,"name":"address","nodeType":"ElementaryTypeName","src":"1021:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1011:38:23"},"returnParameters":{"id":5153,"nodeType":"ParameterList","parameters":[],"src":"1078:0:23"},"scope":5398,"src":"986:146:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5171,"nodeType":"Block","src":"1274:43:23","statements":[{"expression":{"arguments":[{"id":5168,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5162,"src":"1302:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5167,"name":"_createURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5375,"src":"1291:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view returns (string memory)"}},"id":5169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1291:19:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":5166,"id":5170,"nodeType":"Return","src":"1284:26:23"}]},"documentation":{"id":5160,"nodeType":"StructuredDocumentation","src":"1138:60:23","text":" @dev Returns the URI for a given token ID"},"functionSelector":"c87b56dd","id":5172,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"1212:8:23","nodeType":"FunctionDefinition","parameters":{"id":5163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5162,"mutability":"mutable","name":"tokenId","nameLocation":"1229:7:23","nodeType":"VariableDeclaration","scope":5172,"src":"1221:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5161,"name":"uint256","nodeType":"ElementaryTypeName","src":"1221:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1220:17:23"},"returnParameters":{"id":5166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5165,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5172,"src":"1259:13:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5164,"name":"string","nodeType":"ElementaryTypeName","src":"1259:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1258:15:23"},"scope":5398,"src":"1203:114:23","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5374,"nodeType":"Block","src":"1463:2151:23","statements":[{"assignments":[5181],"declarations":[{"constant":false,"id":5181,"mutability":"mutable","name":"attributesString","nameLocation":"1487:16:23","nodeType":"VariableDeclaration","scope":5374,"src":"1473:30:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5180,"name":"string","nodeType":"ElementaryTypeName","src":"1473:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":5183,"initialValue":{"hexValue":"","id":5182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1506:2:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"nodeType":"VariableDeclarationStatement","src":"1473:35:23"},{"expression":{"id":5199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5184,"name":"attributesString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5181,"src":"1519:16:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"hexValue":"43686172616374657220436c617373","id":5189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1596:17:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_d20219a463590e173a814fd471d639ba6055ff1d1701c992de2805eb9e66db43","typeString":"literal_string \"Character Class\""},"value":"Character Class"},{"arguments":[{"id":5194,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5175,"src":"1671:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5191,"name":"characterNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5116,"src":"1644:12:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5190,"name":"CharacterNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4772,"src":"1631:12:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_CharacterNFT_$4772_$","typeString":"type(contract CharacterNFT)"}},"id":5192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1631:26:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_CharacterNFT_$4772","typeString":"contract CharacterNFT"}},"id":5193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1658:12:23","memberName":"getClassName","nodeType":"MemberAccess","referencedDeclaration":4771,"src":"1631:39:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view external returns (string memory)"}},"id":5195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1631:48:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_d20219a463590e173a814fd471d639ba6055ff1d1701c992de2805eb9e66db43","typeString":"literal_string \"Character Class\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5188,"name":"_addAttribute","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5397,"src":"1565:13:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory,string memory) pure returns (string memory)"}},"id":5196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1565:128:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2c","id":5197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:3:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb","typeString":"literal_string \",\""},"value":","}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb","typeString":"literal_string \",\""}],"expression":{"id":5186,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1538:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5185,"name":"string","nodeType":"ElementaryTypeName","src":"1538:6:23","typeDescriptions":{}}},"id":5187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1545:6:23","memberName":"concat","nodeType":"MemberAccess","src":"1538:13:23","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":5198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1538:182:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1519:201:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":5200,"nodeType":"ExpressionStatement","src":"1519:201:23"},{"assignments":[5202],"declarations":[{"constant":false,"id":5202,"mutability":"mutable","name":"level","nameLocation":"1739:5:23","nodeType":"VariableDeclaration","scope":5374,"src":"1731:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5201,"name":"uint256","nodeType":"ElementaryTypeName","src":"1731:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5209,"initialValue":{"arguments":[{"id":5207,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5175,"src":"1789:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5204,"name":"levelContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5118,"src":"1753:20:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5203,"name":"Level","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5694,"src":"1747:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Level_$5694_$","typeString":"type(contract Level)"}},"id":5205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1747:27:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Level_$5694","typeString":"contract Level"}},"id":5206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1775:13:23","memberName":"getTokenLevel","nodeType":"MemberAccess","referencedDeclaration":5679,"src":"1747:41:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":5208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1747:50:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1731:66:23"},{"assignments":[5211],"declarations":[{"constant":false,"id":5211,"mutability":"mutable","name":"xp","nameLocation":"1815:2:23","nodeType":"VariableDeclaration","scope":5374,"src":"1807:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5210,"name":"uint256","nodeType":"ElementaryTypeName","src":"1807:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5218,"initialValue":{"arguments":[{"id":5216,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5175,"src":"1859:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5213,"name":"levelContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5118,"src":"1826:20:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5212,"name":"Level","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5694,"src":"1820:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Level_$5694_$","typeString":"type(contract Level)"}},"id":5214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1820:27:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Level_$5694","typeString":"contract Level"}},"id":5215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1848:10:23","memberName":"getTokenXp","nodeType":"MemberAccess","referencedDeclaration":5693,"src":"1820:38:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":5217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1820:47:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1807:60:23"},{"assignments":[5223],"declarations":[{"constant":false,"id":5223,"mutability":"mutable","name":"attributes","nameLocation":"1897:10:23","nodeType":"VariableDeclaration","scope":5374,"src":"1878:29:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attribute_$5113_memory_ptr_$dyn_memory_ptr","typeString":"struct CharacterNFTTokenURI.Attribute[]"},"typeName":{"baseType":{"id":5221,"nodeType":"UserDefinedTypeName","pathNode":{"id":5220,"name":"Attribute","nameLocations":["1878:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":5113,"src":"1878:9:23"},"referencedDeclaration":5113,"src":"1878:9:23","typeDescriptions":{"typeIdentifier":"t_struct$_Attribute_$5113_storage_ptr","typeString":"struct CharacterNFTTokenURI.Attribute"}},"id":5222,"nodeType":"ArrayTypeName","src":"1878:11:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attribute_$5113_storage_$dyn_storage_ptr","typeString":"struct CharacterNFTTokenURI.Attribute[]"}},"visibility":"internal"}],"id":5230,"initialValue":{"arguments":[{"hexValue":"32","id":5228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1926:1:23","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"id":5227,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1910:15:23","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Attribute_$5113_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct CharacterNFTTokenURI.Attribute memory[] memory)"},"typeName":{"baseType":{"id":5225,"nodeType":"UserDefinedTypeName","pathNode":{"id":5224,"name":"Attribute","nameLocations":["1914:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":5113,"src":"1914:9:23"},"referencedDeclaration":5113,"src":"1914:9:23","typeDescriptions":{"typeIdentifier":"t_struct$_Attribute_$5113_storage_ptr","typeString":"struct CharacterNFTTokenURI.Attribute"}},"id":5226,"nodeType":"ArrayTypeName","src":"1914:11:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attribute_$5113_storage_$dyn_storage_ptr","typeString":"struct CharacterNFTTokenURI.Attribute[]"}}},"id":5229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1910:18:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attribute_$5113_memory_ptr_$dyn_memory_ptr","typeString":"struct CharacterNFTTokenURI.Attribute memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"1878:50:23"},{"expression":{"id":5238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5231,"name":"attributes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5223,"src":"1938:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attribute_$5113_memory_ptr_$dyn_memory_ptr","typeString":"struct CharacterNFTTokenURI.Attribute memory[] memory"}},"id":5233,"indexExpression":{"hexValue":"30","id":5232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1949:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1938:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_Attribute_$5113_memory_ptr","typeString":"struct CharacterNFTTokenURI.Attribute memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"4c6576656c","id":5235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1964:7:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_7e88670d81006cf92a9a293c074e96c7d99e7cc8a5f4c28156b4ea7d9e861d04","typeString":"literal_string \"Level\""},"value":"Level"},{"id":5236,"name":"level","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5202,"src":"1973:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_7e88670d81006cf92a9a293c074e96c7d99e7cc8a5f4c28156b4ea7d9e861d04","typeString":"literal_string \"Level\""},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5234,"name":"Attribute","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5113,"src":"1954:9:23","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Attribute_$5113_storage_ptr_$","typeString":"type(struct CharacterNFTTokenURI.Attribute storage pointer)"}},"id":5237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1954:25:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Attribute_$5113_memory_ptr","typeString":"struct CharacterNFTTokenURI.Attribute memory"}},"src":"1938:41:23","typeDescriptions":{"typeIdentifier":"t_struct$_Attribute_$5113_memory_ptr","typeString":"struct CharacterNFTTokenURI.Attribute memory"}},"id":5239,"nodeType":"ExpressionStatement","src":"1938:41:23"},{"expression":{"id":5247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5240,"name":"attributes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5223,"src":"1989:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attribute_$5113_memory_ptr_$dyn_memory_ptr","typeString":"struct CharacterNFTTokenURI.Attribute memory[] memory"}},"id":5242,"indexExpression":{"hexValue":"31","id":5241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2000:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1989:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_Attribute_$5113_memory_ptr","typeString":"struct CharacterNFTTokenURI.Attribute memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"5870","id":5244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2015:4:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_b210ad1a6e010b6e0c14cf8bc0186dd510b57bce7eb62cd3243f76bb8c61d71c","typeString":"literal_string \"Xp\""},"value":"Xp"},{"id":5245,"name":"xp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5211,"src":"2021:2:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_b210ad1a6e010b6e0c14cf8bc0186dd510b57bce7eb62cd3243f76bb8c61d71c","typeString":"literal_string \"Xp\""},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5243,"name":"Attribute","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5113,"src":"2005:9:23","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Attribute_$5113_storage_ptr_$","typeString":"type(struct CharacterNFTTokenURI.Attribute storage pointer)"}},"id":5246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2005:19:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Attribute_$5113_memory_ptr","typeString":"struct CharacterNFTTokenURI.Attribute memory"}},"src":"1989:35:23","typeDescriptions":{"typeIdentifier":"t_struct$_Attribute_$5113_memory_ptr","typeString":"struct CharacterNFTTokenURI.Attribute memory"}},"id":5248,"nodeType":"ExpressionStatement","src":"1989:35:23"},{"body":{"id":5312,"nodeType":"Block","src":"2083:657:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5260,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5250,"src":"2101:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5261,"name":"attributes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5223,"src":"2106:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attribute_$5113_memory_ptr_$dyn_memory_ptr","typeString":"struct CharacterNFTTokenURI.Attribute memory[] memory"}},"id":5262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2117:6:23","memberName":"length","nodeType":"MemberAccess","src":"2106:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2126:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2106:21:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2101:26:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5310,"nodeType":"Block","src":"2420:310:23","statements":[{"expression":{"id":5308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5288,"name":"attributesString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5181,"src":"2438:16:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5292,"name":"attributesString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5181,"src":"2492:16:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"expression":{"baseExpression":{"id":5294,"name":"attributes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5223,"src":"2569:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attribute_$5113_memory_ptr_$dyn_memory_ptr","typeString":"struct CharacterNFTTokenURI.Attribute memory[] memory"}},"id":5296,"indexExpression":{"id":5295,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5250,"src":"2580:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2569:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_Attribute_$5113_memory_ptr","typeString":"struct CharacterNFTTokenURI.Attribute memory"}},"id":5297,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2583:4:23","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":5110,"src":"2569:18:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"expression":{"baseExpression":{"id":5300,"name":"attributes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5223,"src":"2630:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attribute_$5113_memory_ptr_$dyn_memory_ptr","typeString":"struct CharacterNFTTokenURI.Attribute memory[] memory"}},"id":5302,"indexExpression":{"id":5301,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5250,"src":"2641:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2630:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_Attribute_$5113_memory_ptr","typeString":"struct CharacterNFTTokenURI.Attribute memory"}},"id":5303,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2644:5:23","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":5112,"src":"2630:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5298,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"2613:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$3027_$","typeString":"type(library Strings)"}},"id":5299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2621:8:23","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":2840,"src":"2613:16:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":5304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2613:37:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5293,"name":"_addAttribute","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5397,"src":"2530:13:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory,string memory) pure returns (string memory)"}},"id":5305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2530:142:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2c","id":5306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2694:3:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb","typeString":"literal_string \",\""},"value":","}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb","typeString":"literal_string \",\""}],"expression":{"id":5290,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2457:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5289,"name":"string","nodeType":"ElementaryTypeName","src":"2457:6:23","typeDescriptions":{}}},"id":5291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2464:6:23","memberName":"concat","nodeType":"MemberAccess","src":"2457:13:23","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":5307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2457:258:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2438:277:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":5309,"nodeType":"ExpressionStatement","src":"2438:277:23"}]},"id":5311,"nodeType":"IfStatement","src":"2097:633:23","trueBody":{"id":5287,"nodeType":"Block","src":"2129:285:23","statements":[{"expression":{"id":5285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5266,"name":"attributesString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5181,"src":"2147:16:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5270,"name":"attributesString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5181,"src":"2201:16:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"expression":{"baseExpression":{"id":5272,"name":"attributes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5223,"src":"2278:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attribute_$5113_memory_ptr_$dyn_memory_ptr","typeString":"struct CharacterNFTTokenURI.Attribute memory[] memory"}},"id":5274,"indexExpression":{"id":5273,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5250,"src":"2289:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2278:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_Attribute_$5113_memory_ptr","typeString":"struct CharacterNFTTokenURI.Attribute memory"}},"id":5275,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2292:4:23","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":5110,"src":"2278:18:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"expression":{"baseExpression":{"id":5278,"name":"attributes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5223,"src":"2339:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attribute_$5113_memory_ptr_$dyn_memory_ptr","typeString":"struct CharacterNFTTokenURI.Attribute memory[] memory"}},"id":5280,"indexExpression":{"id":5279,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5250,"src":"2350:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2339:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_Attribute_$5113_memory_ptr","typeString":"struct CharacterNFTTokenURI.Attribute memory"}},"id":5281,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2353:5:23","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":5112,"src":"2339:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5276,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"2322:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$3027_$","typeString":"type(library Strings)"}},"id":5277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2330:8:23","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":2840,"src":"2322:16:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":5282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2322:37:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5271,"name":"_addAttribute","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5397,"src":"2239:13:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (string memory,string memory) pure returns (string memory)"}},"id":5283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2239:142:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":5268,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2166:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5267,"name":"string","nodeType":"ElementaryTypeName","src":"2166:6:23","typeDescriptions":{}}},"id":5269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2173:6:23","memberName":"concat","nodeType":"MemberAccess","src":"2166:13:23","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":5284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2166:233:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2147:252:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":5286,"nodeType":"ExpressionStatement","src":"2147:252:23"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5253,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5250,"src":"2055:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5254,"name":"attributes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5223,"src":"2059:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attribute_$5113_memory_ptr_$dyn_memory_ptr","typeString":"struct CharacterNFTTokenURI.Attribute memory[] memory"}},"id":5255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2070:6:23","memberName":"length","nodeType":"MemberAccess","src":"2059:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2055:21:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5313,"initializationExpression":{"assignments":[5250],"declarations":[{"constant":false,"id":5250,"mutability":"mutable","name":"i","nameLocation":"2048:1:23","nodeType":"VariableDeclaration","scope":5313,"src":"2040:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5249,"name":"uint256","nodeType":"ElementaryTypeName","src":"2040:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5252,"initialValue":{"hexValue":"30","id":5251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2052:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2040:13:23"},"loopExpression":{"expression":{"id":5258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2078:3:23","subExpression":{"id":5257,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5250,"src":"2078:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5259,"nodeType":"ExpressionStatement","src":"2078:3:23"},"nodeType":"ForStatement","src":"2035:705:23"},{"assignments":[5315],"declarations":[{"constant":false,"id":5315,"mutability":"mutable","name":"propertiesJSON","nameLocation":"2764:14:23","nodeType":"VariableDeclaration","scope":5374,"src":"2750:28:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5314,"name":"string","nodeType":"ElementaryTypeName","src":"2750:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":5347,"initialValue":{"arguments":[{"hexValue":"226e616d65223a22","id":5319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2808:10:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_51367d69f1c3baff467b722249990cf2b0f92b1e50edd5a778b81ffc7191408f","typeString":"literal_string \"\"name\":\"\""},"value":"\"name\":\""},{"arguments":[{"id":5324,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5175,"src":"2869:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5321,"name":"characterNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5116,"src":"2845:12:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5320,"name":"CharacterNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4772,"src":"2832:12:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_CharacterNFT_$4772_$","typeString":"type(contract CharacterNFT)"}},"id":5322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2832:26:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_CharacterNFT_$4772","typeString":"contract CharacterNFT"}},"id":5323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2859:9:23","memberName":"tokenName","nodeType":"MemberAccess","referencedDeclaration":4554,"src":"2832:36:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view external returns (string memory)"}},"id":5325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2832:45:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"222c","id":5326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:4:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb","typeString":"literal_string \"\",\""},"value":"\","},{"hexValue":"226465736372697074696f6e223a22","id":5327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2909:17:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_1f63d9db42efe217d85281c4ef6267f200cbdd8e8d6fd9a3e9d557ed86a373c7","typeString":"literal_string \"\"description\":\"\""},"value":"\"description\":\""},{"arguments":[{"id":5332,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5175,"src":"2987:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5329,"name":"characterNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5116,"src":"2953:12:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5328,"name":"CharacterNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4772,"src":"2940:12:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_CharacterNFT_$4772_$","typeString":"type(contract CharacterNFT)"}},"id":5330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2940:26:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_CharacterNFT_$4772","typeString":"contract CharacterNFT"}},"id":5331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2967:19:23","memberName":"getClassDescription","nodeType":"MemberAccess","referencedDeclaration":4721,"src":"2940:46:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view external returns (string memory)"}},"id":5333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2940:55:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"222c","id":5334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3009:4:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb","typeString":"literal_string \"\",\""},"value":"\","},{"hexValue":"22696d616765223a22","id":5335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3027:11:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_813a444dcf0b75d812ca8afb53e513b340ca828208f41bc16bdcde529c0ea551","typeString":"literal_string \"\"image\":\"\""},"value":"\"image\":\""},{"arguments":[{"id":5340,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5175,"src":"3093:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5337,"name":"characterNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5116,"src":"3065:12:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5336,"name":"CharacterNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4772,"src":"3052:12:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_CharacterNFT_$4772_$","typeString":"type(contract CharacterNFT)"}},"id":5338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:26:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_CharacterNFT_$4772","typeString":"contract CharacterNFT"}},"id":5339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3079:13:23","memberName":"getClassImage","nodeType":"MemberAccess","referencedDeclaration":4746,"src":"3052:40:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view external returns (string memory)"}},"id":5341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:49:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"222c","id":5342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3115:4:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb","typeString":"literal_string \"\",\""},"value":"\","},{"hexValue":"2265787465726e616c5f75726c223a22","id":5343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3133:18:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_153dd7a4db1a16c0bc09459a32699b07f8a0722d62a40df6d0b30c2d78048b07","typeString":"literal_string \"\"external_url\":\"\""},"value":"\"external_url\":\""},{"hexValue":"68747470733a2f2f646961626c6f2e66616e646f6d2e636f6d2f77696b692f446961626c6f5f4949","id":5344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3165:42:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_2484da87e67ecf7cddff1668c6da2fa017370cc0bcdf646dda519da55a336003","typeString":"literal_string \"https://diablo.fandom.com/wiki/Diablo_II\""},"value":"https://diablo.fandom.com/wiki/Diablo_II"},{"hexValue":"22","id":5345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3221:3:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0","typeString":"literal_string \"\"\""},"value":"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_51367d69f1c3baff467b722249990cf2b0f92b1e50edd5a778b81ffc7191408f","typeString":"literal_string \"\"name\":\"\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb","typeString":"literal_string \"\",\""},{"typeIdentifier":"t_stringliteral_1f63d9db42efe217d85281c4ef6267f200cbdd8e8d6fd9a3e9d557ed86a373c7","typeString":"literal_string \"\"description\":\"\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb","typeString":"literal_string \"\",\""},{"typeIdentifier":"t_stringliteral_813a444dcf0b75d812ca8afb53e513b340ca828208f41bc16bdcde529c0ea551","typeString":"literal_string \"\"image\":\"\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb","typeString":"literal_string \"\",\""},{"typeIdentifier":"t_stringliteral_153dd7a4db1a16c0bc09459a32699b07f8a0722d62a40df6d0b30c2d78048b07","typeString":"literal_string \"\"external_url\":\"\""},{"typeIdentifier":"t_stringliteral_2484da87e67ecf7cddff1668c6da2fa017370cc0bcdf646dda519da55a336003","typeString":"literal_string \"https://diablo.fandom.com/wiki/Diablo_II\""},{"typeIdentifier":"t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0","typeString":"literal_string \"\"\""}],"expression":{"id":5317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2781:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5316,"name":"string","nodeType":"ElementaryTypeName","src":"2781:6:23","typeDescriptions":{}}},"id":5318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2788:6:23","memberName":"concat","nodeType":"MemberAccess","src":"2781:13:23","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":5346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2781:453:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2750:484:23"},{"assignments":[5349],"declarations":[{"constant":false,"id":5349,"mutability":"mutable","name":"fullOpenSeaMetadata","nameLocation":"3258:19:23","nodeType":"VariableDeclaration","scope":5374,"src":"3244:33:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5348,"name":"string","nodeType":"ElementaryTypeName","src":"3244:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":5360,"initialValue":{"arguments":[{"hexValue":"7b","id":5353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3307:3:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_a91eddf639b0b768929589c1a9fd21dcb0107199bdd82e55c5348018a1572f52","typeString":"literal_string \"{\""},"value":"{"},{"id":5354,"name":"propertiesJSON","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5315,"src":"3324:14:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2c","id":5355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3352:3:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb","typeString":"literal_string \",\""},"value":","},{"hexValue":"2261747472696275746573223a5b","id":5356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3369:16:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_fae5f698d2c3462fc5dd818af0f930c00a691ac3968407e92c6f5d64f16b49da","typeString":"literal_string \"\"attributes\":[\""},"value":"\"attributes\":["},{"id":5357,"name":"attributesString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5181,"src":"3399:16:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"5d7d","id":5358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3429:4:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_ab149d31dbf8c3ed1cc7ba15c88205185e426c492b6b350058945b7266ec7e76","typeString":"literal_string \"]}\""},"value":"]}"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_a91eddf639b0b768929589c1a9fd21dcb0107199bdd82e55c5348018a1572f52","typeString":"literal_string \"{\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb","typeString":"literal_string \",\""},{"typeIdentifier":"t_stringliteral_fae5f698d2c3462fc5dd818af0f930c00a691ac3968407e92c6f5d64f16b49da","typeString":"literal_string \"\"attributes\":[\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_ab149d31dbf8c3ed1cc7ba15c88205185e426c492b6b350058945b7266ec7e76","typeString":"literal_string \"]}\""}],"expression":{"id":5351,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3280:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5350,"name":"string","nodeType":"ElementaryTypeName","src":"3280:6:23","typeDescriptions":{}}},"id":5352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3287:6:23","memberName":"concat","nodeType":"MemberAccess","src":"3280:13:23","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":5359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3280:163:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"3244:199:23"},{"expression":{"arguments":[{"hexValue":"646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c","id":5364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3503:31:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_bccab2d885f86fda81bfd84dd4248d31f8073b473d187111d36536db073076fa","typeString":"literal_string \"data:application/json;base64,\""},"value":"data:application/json;base64,"},{"arguments":[{"arguments":[{"id":5369,"name":"fullOpenSeaMetadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5349,"src":"3572:19:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5368,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3566:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":5367,"name":"bytes","nodeType":"ElementaryTypeName","src":"3566:5:23","typeDescriptions":{}}},"id":5370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3566:26:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":5365,"name":"Base64","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"3552:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Base64_$2742_$","typeString":"type(library Base64)"}},"id":5366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3559:6:23","memberName":"encode","nodeType":"MemberAccess","referencedDeclaration":2741,"src":"3552:13:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure returns (string memory)"}},"id":5371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3552:41:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_bccab2d885f86fda81bfd84dd4248d31f8073b473d187111d36536db073076fa","typeString":"literal_string \"data:application/json;base64,\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":5362,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3472:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5361,"name":"string","nodeType":"ElementaryTypeName","src":"3472:6:23","typeDescriptions":{}}},"id":5363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3479:6:23","memberName":"concat","nodeType":"MemberAccess","src":"3472:13:23","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":5372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3472:135:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":5179,"id":5373,"nodeType":"Return","src":"3453:154:23"}]},"documentation":{"id":5173,"nodeType":"StructuredDocumentation","src":"1323:60:23","text":" @dev Creates the URI for a given token ID"},"id":5375,"implemented":true,"kind":"function","modifiers":[],"name":"_createURI","nameLocation":"1397:10:23","nodeType":"FunctionDefinition","parameters":{"id":5176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5175,"mutability":"mutable","name":"tokenId","nameLocation":"1416:7:23","nodeType":"VariableDeclaration","scope":5375,"src":"1408:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5174,"name":"uint256","nodeType":"ElementaryTypeName","src":"1408:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1407:17:23"},"returnParameters":{"id":5179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5178,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5375,"src":"1448:13:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5177,"name":"string","nodeType":"ElementaryTypeName","src":"1448:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1447:15:23"},"scope":5398,"src":"1388:2226:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5396,"nodeType":"Block","src":"3743:263:23","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"7b2274726169745f74797065223a2022","id":5388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3834:18:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_0fad31bde8ef6d9d8631c2e7aa54975d5fec99408295f9e9645c87e9422727f9","typeString":"literal_string \"{\"trait_type\": \"\""},"value":"{\"trait_type\": \""},{"id":5389,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5377,"src":"3874:3:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"222c202276616c7565223a2022","id":5390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3899:15:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_44d6c99d3e56b857c06a35864739b41fbb2e541a5d7d24712e21af15533261a5","typeString":"literal_string \"\", \"value\": \"\""},"value":"\", \"value\": \""},{"id":5391,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5379,"src":"3936:5:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"227d","id":5392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3963:4:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475","typeString":"literal_string \"\"}\""},"value":"\"}"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_0fad31bde8ef6d9d8631c2e7aa54975d5fec99408295f9e9645c87e9422727f9","typeString":"literal_string \"{\"trait_type\": \"\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_44d6c99d3e56b857c06a35864739b41fbb2e541a5d7d24712e21af15533261a5","typeString":"literal_string \"\", \"value\": \"\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475","typeString":"literal_string \"\"}\""}],"expression":{"id":5386,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"3796:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":5387,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3800:12:23","memberName":"encodePacked","nodeType":"MemberAccess","src":"3796:16:23","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":5393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3796:189:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5385,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3772:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5384,"name":"string","nodeType":"ElementaryTypeName","src":"3772:6:23","typeDescriptions":{}}},"id":5394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3772:227:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":5383,"id":5395,"nodeType":"Return","src":"3753:246:23"}]},"id":5397,"implemented":true,"kind":"function","modifiers":[],"name":"_addAttribute","nameLocation":"3629:13:23","nodeType":"FunctionDefinition","parameters":{"id":5380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5377,"mutability":"mutable","name":"key","nameLocation":"3666:3:23","nodeType":"VariableDeclaration","scope":5397,"src":"3652:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5376,"name":"string","nodeType":"ElementaryTypeName","src":"3652:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5379,"mutability":"mutable","name":"value","nameLocation":"3693:5:23","nodeType":"VariableDeclaration","scope":5397,"src":"3679:19:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5378,"name":"string","nodeType":"ElementaryTypeName","src":"3679:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3642:62:23"},"returnParameters":{"id":5383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5382,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5397,"src":"3728:13:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5381,"name":"string","nodeType":"ElementaryTypeName","src":"3728:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3727:15:23"},"scope":5398,"src":"3620:386:23","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5399,"src":"252:3756:23","usedErrors":[379,382,701,704,869,1313,1316,4265],"usedEvents":[387,693,698,1325,1334,1343]}],"src":"32:3977:23"},"id":23},"contracts/leveling/Level.sol":{"ast":{"absolutePath":"contracts/leveling/Level.sol","exportedSymbols":{"AccessControlUpgradeable":[362],"BaseHelper":[4338],"Context":[2772],"ContextUpgradeable":[662],"ERC165":[3051],"ERC165Upgradeable":[1007],"ERC721":[2532],"IAccessControl":[1386],"IERC165":[3063],"IERC721":[2649],"IERC721Errors":[1476],"IERC721Metadata":[2695],"IERC721Receiver":[2667],"Initializable":[616],"Level":[5694],"PausableUpgradeable":[838],"ReentrancyGuardUpgradeable":[967],"Strings":[3027]},"id":5695,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5400,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:24"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":5401,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5695,"sourceUnit":2533,"src":"58:57:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/BaseHelper.sol","file":"../BaseHelper.sol","id":5402,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5695,"sourceUnit":4339,"src":"116:27:24","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5403,"name":"BaseHelper","nameLocations":["163:10:24"],"nodeType":"IdentifierPath","referencedDeclaration":4338,"src":"163:10:24"},"id":5404,"nodeType":"InheritanceSpecifier","src":"163:10:24"}],"canonicalName":"Level","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5694,"linearizedBaseContracts":[5694,4338,967,838,362,1007,3063,1386,662,616],"name":"Level","nameLocation":"154:5:24","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Level.LevelData","documentation":{"id":5405,"nodeType":"StructuredDocumentation","src":"180:15:24","text":"STRUCTS *"},"id":5410,"members":[{"constant":false,"id":5407,"mutability":"mutable","name":"level","nameLocation":"257:5:24","nodeType":"VariableDeclaration","scope":5410,"src":"249:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":5406,"name":"uint128","nodeType":"ElementaryTypeName","src":"249:7:24","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":5409,"mutability":"mutable","name":"xp","nameLocation":"280:2:24","nodeType":"VariableDeclaration","scope":5410,"src":"272:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":5408,"name":"uint128","nodeType":"ElementaryTypeName","src":"272:7:24","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"name":"LevelData","nameLocation":"229:9:24","nodeType":"StructDefinition","scope":5694,"src":"222:67:24","visibility":"public"},{"constant":false,"documentation":{"id":5411,"nodeType":"StructuredDocumentation","src":"295:17:24","text":"VARIABLES *"},"functionSelector":"c2118451","id":5416,"mutability":"mutable","name":"tokenIdToLevelData","nameLocation":"402:18:24","nodeType":"VariableDeclaration","scope":5694,"src":"365:55:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_LevelData_$5410_storage_$","typeString":"mapping(uint256 => struct Level.LevelData)"},"typeName":{"id":5415,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5412,"name":"uint256","nodeType":"ElementaryTypeName","src":"373:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"365:29:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_LevelData_$5410_storage_$","typeString":"mapping(uint256 => struct Level.LevelData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5414,"nodeType":"UserDefinedTypeName","pathNode":{"id":5413,"name":"LevelData","nameLocations":["384:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":5410,"src":"384:9:24"},"referencedDeclaration":5410,"src":"384:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_LevelData_$5410_storage_ptr","typeString":"struct Level.LevelData"}}},"visibility":"public"},{"constant":false,"functionSelector":"54b52674","id":5419,"mutability":"mutable","name":"xpPerLevel","nameLocation":"484:10:24","nodeType":"VariableDeclaration","scope":5694,"src":"467:27:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[]"},"typeName":{"baseType":{"id":5417,"name":"uint256","nodeType":"ElementaryTypeName","src":"467:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5418,"nodeType":"ArrayTypeName","src":"467:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"public"},{"constant":false,"functionSelector":"384d10ee","id":5421,"mutability":"mutable","name":"characterNFT","nameLocation":"545:12:24","nodeType":"VariableDeclaration","scope":5694,"src":"530:27:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5420,"name":"address","nodeType":"ElementaryTypeName","src":"530:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"documentation":{"id":5422,"nodeType":"StructuredDocumentation","src":"564:14:24","text":"ERRORS *"},"errorSelector":"921c7d5f","id":5424,"name":"MaxLevelReached","nameLocation":"590:15:24","nodeType":"ErrorDefinition","parameters":{"id":5423,"nodeType":"ParameterList","parameters":[],"src":"605:2:24"},"src":"584:24:24"},{"anonymous":false,"documentation":{"id":5425,"nodeType":"StructuredDocumentation","src":"657:53:24","text":"@notice An event emitted when a character gets xp"},"eventSelector":"66833f6d7d7a01eaed9fb21eb9cc54f0fb9497fa9251a6c0773372c8d3e0aa0c","id":5433,"name":"LevelUp","nameLocation":"721:7:24","nodeType":"EventDefinition","parameters":{"id":5432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5427,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"745:7:24","nodeType":"VariableDeclaration","scope":5433,"src":"729:23:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5426,"name":"uint256","nodeType":"ElementaryTypeName","src":"729:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5429,"indexed":false,"mutability":"mutable","name":"level","nameLocation":"762:5:24","nodeType":"VariableDeclaration","scope":5433,"src":"754:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5428,"name":"uint256","nodeType":"ElementaryTypeName","src":"754:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5431,"indexed":false,"mutability":"mutable","name":"xp","nameLocation":"777:2:24","nodeType":"VariableDeclaration","scope":5433,"src":"769:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5430,"name":"uint256","nodeType":"ElementaryTypeName","src":"769:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"728:52:24"},"src":"715:66:24"},{"body":{"id":5511,"nodeType":"Block","src":"871:731:24","statements":[{"expression":{"arguments":[{"id":5442,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5436,"src":"897:12:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5441,"name":"_baseInitialize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4313,"src":"881:15:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"881:29:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5444,"nodeType":"ExpressionStatement","src":"881:29:24"},{"expression":{"arguments":[{"hexValue":"30","id":5448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1025:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":5445,"name":"xpPerLevel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5419,"src":"1009:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1020:4:24","memberName":"push","nodeType":"MemberAccess","src":"1009:15:24","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":5449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1009:18:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5450,"nodeType":"ExpressionStatement","src":"1009:18:24"},{"expression":{"arguments":[{"hexValue":"30","id":5454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1075:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":5451,"name":"xpPerLevel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5419,"src":"1059:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1070:4:24","memberName":"push","nodeType":"MemberAccess","src":"1059:15:24","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":5455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1059:18:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5456,"nodeType":"ExpressionStatement","src":"1059:18:24"},{"expression":{"arguments":[{"hexValue":"313030","id":5460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1159:3:24","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}],"expression":{"id":5457,"name":"xpPerLevel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5419,"src":"1143:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1154:4:24","memberName":"push","nodeType":"MemberAccess","src":"1143:15:24","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":5461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1143:20:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5462,"nodeType":"ExpressionStatement","src":"1143:20:24"},{"expression":{"arguments":[{"hexValue":"323030","id":5466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1210:3:24","typeDescriptions":{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},"value":"200"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"}],"expression":{"id":5463,"name":"xpPerLevel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5419,"src":"1194:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1205:4:24","memberName":"push","nodeType":"MemberAccess","src":"1194:15:24","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":5467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1194:20:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5468,"nodeType":"ExpressionStatement","src":"1194:20:24"},{"expression":{"arguments":[{"hexValue":"333030","id":5472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1261:3:24","typeDescriptions":{"typeIdentifier":"t_rational_300_by_1","typeString":"int_const 300"},"value":"300"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_300_by_1","typeString":"int_const 300"}],"expression":{"id":5469,"name":"xpPerLevel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5419,"src":"1245:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1256:4:24","memberName":"push","nodeType":"MemberAccess","src":"1245:15:24","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":5473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1245:20:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5474,"nodeType":"ExpressionStatement","src":"1245:20:24"},{"expression":{"arguments":[{"hexValue":"343030","id":5478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1312:3:24","typeDescriptions":{"typeIdentifier":"t_rational_400_by_1","typeString":"int_const 400"},"value":"400"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_400_by_1","typeString":"int_const 400"}],"expression":{"id":5475,"name":"xpPerLevel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5419,"src":"1296:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1307:4:24","memberName":"push","nodeType":"MemberAccess","src":"1296:15:24","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":5479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1296:20:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5480,"nodeType":"ExpressionStatement","src":"1296:20:24"},{"expression":{"arguments":[{"hexValue":"353030","id":5484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1363:3:24","typeDescriptions":{"typeIdentifier":"t_rational_500_by_1","typeString":"int_const 500"},"value":"500"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_500_by_1","typeString":"int_const 500"}],"expression":{"id":5481,"name":"xpPerLevel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5419,"src":"1347:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1358:4:24","memberName":"push","nodeType":"MemberAccess","src":"1347:15:24","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":5485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1347:20:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5486,"nodeType":"ExpressionStatement","src":"1347:20:24"},{"expression":{"arguments":[{"hexValue":"363030","id":5490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1414:3:24","typeDescriptions":{"typeIdentifier":"t_rational_600_by_1","typeString":"int_const 600"},"value":"600"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_600_by_1","typeString":"int_const 600"}],"expression":{"id":5487,"name":"xpPerLevel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5419,"src":"1398:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1409:4:24","memberName":"push","nodeType":"MemberAccess","src":"1398:15:24","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":5491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1398:20:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5492,"nodeType":"ExpressionStatement","src":"1398:20:24"},{"expression":{"arguments":[{"hexValue":"373030","id":5496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1465:3:24","typeDescriptions":{"typeIdentifier":"t_rational_700_by_1","typeString":"int_const 700"},"value":"700"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_700_by_1","typeString":"int_const 700"}],"expression":{"id":5493,"name":"xpPerLevel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5419,"src":"1449:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1460:4:24","memberName":"push","nodeType":"MemberAccess","src":"1449:15:24","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":5497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1449:20:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5498,"nodeType":"ExpressionStatement","src":"1449:20:24"},{"expression":{"arguments":[{"hexValue":"383030","id":5502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1516:3:24","typeDescriptions":{"typeIdentifier":"t_rational_800_by_1","typeString":"int_const 800"},"value":"800"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_800_by_1","typeString":"int_const 800"}],"expression":{"id":5499,"name":"xpPerLevel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5419,"src":"1500:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1511:4:24","memberName":"push","nodeType":"MemberAccess","src":"1500:15:24","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":5503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1500:20:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5504,"nodeType":"ExpressionStatement","src":"1500:20:24"},{"expression":{"arguments":[{"hexValue":"31303030","id":5508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1567:4:24","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"}],"expression":{"id":5505,"name":"xpPerLevel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5419,"src":"1551:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1562:4:24","memberName":"push","nodeType":"MemberAccess","src":"1551:15:24","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":5509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1551:21:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5510,"nodeType":"ExpressionStatement","src":"1551:21:24"}]},"documentation":{"id":5434,"nodeType":"StructuredDocumentation","src":"787:17:24","text":"FUNCTIONS *"},"functionSelector":"c4d66de8","id":5512,"implemented":true,"kind":"function","modifiers":[{"id":5439,"kind":"modifierInvocation","modifierName":{"id":5438,"name":"initializer","nameLocations":["859:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":470,"src":"859:11:24"},"nodeType":"ModifierInvocation","src":"859:11:24"}],"name":"initialize","nameLocation":"819:10:24","nodeType":"FunctionDefinition","parameters":{"id":5437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5436,"mutability":"mutable","name":"initialOwner","nameLocation":"838:12:24","nodeType":"VariableDeclaration","scope":5512,"src":"830:20:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5435,"name":"address","nodeType":"ElementaryTypeName","src":"830:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"829:22:24"},"returnParameters":{"id":5440,"nodeType":"ParameterList","parameters":[],"src":"871:0:24"},"scope":5694,"src":"810:792:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5526,"nodeType":"Block","src":"1779:41:24","statements":[{"expression":{"id":5524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5522,"name":"xpPerLevel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5419,"src":"1789:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5523,"name":"_xpPerLevel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5516,"src":"1802:11:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"src":"1789:24:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5525,"nodeType":"ExpressionStatement","src":"1789:24:24"}]},"documentation":{"id":5513,"nodeType":"StructuredDocumentation","src":"1608:61:24","text":" @dev Update the XpPerLevel array if needed"},"functionSelector":"eca83c03","id":5527,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5519,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4257,"src":"1767:10:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5520,"kind":"modifierInvocation","modifierName":{"id":5518,"name":"onlyRole","nameLocations":["1758:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1758:8:24"},"nodeType":"ModifierInvocation","src":"1758:20:24"}],"name":"updateXpPerLevelArray","nameLocation":"1683:21:24","nodeType":"FunctionDefinition","parameters":{"id":5517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5516,"mutability":"mutable","name":"_xpPerLevel","nameLocation":"1731:11:24","nodeType":"VariableDeclaration","scope":5527,"src":"1714:28:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5514,"name":"uint256","nodeType":"ElementaryTypeName","src":"1714:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5515,"nodeType":"ArrayTypeName","src":"1714:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1704:44:24"},"returnParameters":{"id":5521,"nodeType":"ParameterList","parameters":[],"src":"1779:0:24"},"scope":5694,"src":"1674:146:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5540,"nodeType":"Block","src":"1989:45:24","statements":[{"expression":{"id":5538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5536,"name":"characterNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5421,"src":"1999:12:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5537,"name":"_characterNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5530,"src":"2014:13:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1999:28:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5539,"nodeType":"ExpressionStatement","src":"1999:28:24"}]},"documentation":{"id":5528,"nodeType":"StructuredDocumentation","src":"1826:68:24","text":" @dev Set the address of the CharacterNFT contract"},"functionSelector":"5c75cadb","id":5541,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5533,"name":"OWNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4242,"src":"1977:10:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5534,"kind":"modifierInvocation","modifierName":{"id":5532,"name":"onlyRole","nameLocations":["1968:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1968:8:24"},"nodeType":"ModifierInvocation","src":"1968:20:24"}],"name":"setCharacterNFT","nameLocation":"1908:15:24","nodeType":"FunctionDefinition","parameters":{"id":5531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5530,"mutability":"mutable","name":"_characterNFT","nameLocation":"1941:13:24","nodeType":"VariableDeclaration","scope":5541,"src":"1933:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5529,"name":"address","nodeType":"ElementaryTypeName","src":"1933:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1923:37:24"},"returnParameters":{"id":5535,"nodeType":"ParameterList","parameters":[],"src":"1989:0:24"},"scope":5694,"src":"1899:135:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5653,"nodeType":"Block","src":"2256:979:24","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5557,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5544,"src":"2360:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5554,"name":"characterNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5421,"src":"2338:12:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5553,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"2330:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$2649_$","typeString":"type(contract IERC721)"}},"id":5555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2330:21:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$2649","typeString":"contract IERC721"}},"id":5556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2352:7:24","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":2582,"src":"2330:29:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view external returns (address)"}},"id":5558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2330:38:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2380:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5560,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2372:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5559,"name":"address","nodeType":"ElementaryTypeName","src":"2372:7:24","typeDescriptions":{}}},"id":5562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2372:10:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2330:52:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420746f6b656e204944","id":5564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2396:18:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_b44e5a2e76d616f71f124d91f8560c46215c55a45ba6a1b6e492edf2295dcc48","typeString":"literal_string \"Invalid token ID\""},"value":"Invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b44e5a2e76d616f71f124d91f8560c46215c55a45ba6a1b6e492edf2295dcc48","typeString":"literal_string \"Invalid token ID\""}],"id":5552,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"2309:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2309:115:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5566,"nodeType":"ExpressionStatement","src":"2309:115:24"},{"assignments":[5569],"declarations":[{"constant":false,"id":5569,"mutability":"mutable","name":"levelData","nameLocation":"2452:9:24","nodeType":"VariableDeclaration","scope":5653,"src":"2434:27:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_LevelData_$5410_storage_ptr","typeString":"struct Level.LevelData"},"typeName":{"id":5568,"nodeType":"UserDefinedTypeName","pathNode":{"id":5567,"name":"LevelData","nameLocations":["2434:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":5410,"src":"2434:9:24"},"referencedDeclaration":5410,"src":"2434:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_LevelData_$5410_storage_ptr","typeString":"struct Level.LevelData"}},"visibility":"internal"}],"id":5573,"initialValue":{"baseExpression":{"id":5570,"name":"tokenIdToLevelData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5416,"src":"2464:18:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_LevelData_$5410_storage_$","typeString":"mapping(uint256 => struct Level.LevelData storage ref)"}},"id":5572,"indexExpression":{"id":5571,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5544,"src":"2483:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2464:27:24","typeDescriptions":{"typeIdentifier":"t_struct$_LevelData_$5410_storage","typeString":"struct Level.LevelData storage ref"}},"nodeType":"VariableDeclarationStatement","src":"2434:57:24"},{"expression":{"id":5581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5574,"name":"levelData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"2532:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_LevelData_$5410_storage_ptr","typeString":"struct Level.LevelData storage pointer"}},"id":5576,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2542:2:24","memberName":"xp","nodeType":"MemberAccess","referencedDeclaration":5409,"src":"2532:12:24","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"arguments":[{"id":5579,"name":"xp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5546,"src":"2556:2:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5578,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2548:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":5577,"name":"uint128","nodeType":"ElementaryTypeName","src":"2548:7:24","typeDescriptions":{}}},"id":5580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2548:11:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"2532:27:24","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":5582,"nodeType":"ExpressionStatement","src":"2532:27:24"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5583,"name":"levelData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"2624:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_LevelData_$5410_storage_ptr","typeString":"struct Level.LevelData storage pointer"}},"id":5584,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2634:5:24","memberName":"level","nodeType":"MemberAccess","referencedDeclaration":5407,"src":"2624:15:24","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5585,"name":"xpPerLevel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5419,"src":"2643:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2654:6:24","memberName":"length","nodeType":"MemberAccess","src":"2643:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2663:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2643:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2624:40:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5594,"nodeType":"IfStatement","src":"2620:95:24","trueBody":{"id":5593,"nodeType":"Block","src":"2666:49:24","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5590,"name":"MaxLevelReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5424,"src":"2687:15:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2687:17:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5592,"nodeType":"RevertStatement","src":"2680:24:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5595,"name":"levelData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"2771:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_LevelData_$5410_storage_ptr","typeString":"struct Level.LevelData storage pointer"}},"id":5596,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2781:2:24","memberName":"xp","nodeType":"MemberAccess","referencedDeclaration":5409,"src":"2771:12:24","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"baseExpression":{"id":5597,"name":"xpPerLevel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5419,"src":"2786:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5602,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5598,"name":"xpPerLevel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5419,"src":"2797:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2808:6:24","memberName":"length","nodeType":"MemberAccess","src":"2797:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2817:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2797:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2786:33:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2771:48:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5608,"nodeType":"IfStatement","src":"2767:103:24","trueBody":{"id":5607,"nodeType":"Block","src":"2821:49:24","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5604,"name":"MaxLevelReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5424,"src":"2842:15:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2842:17:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5606,"nodeType":"RevertStatement","src":"2835:24:24"}]}},{"assignments":[5610],"declarations":[{"constant":false,"id":5610,"mutability":"mutable","name":"currentLevel","nameLocation":"2887:12:24","nodeType":"VariableDeclaration","scope":5653,"src":"2879:20:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5609,"name":"uint256","nodeType":"ElementaryTypeName","src":"2879:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5613,"initialValue":{"expression":{"id":5611,"name":"levelData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"2902:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_LevelData_$5410_storage_ptr","typeString":"struct Level.LevelData storage pointer"}},"id":5612,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2912:5:24","memberName":"level","nodeType":"MemberAccess","referencedDeclaration":5407,"src":"2902:15:24","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"VariableDeclarationStatement","src":"2879:38:24"},{"body":{"id":5651,"nodeType":"Block","src":"3053:176:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5627,"name":"levelData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"3071:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_LevelData_$5410_storage_ptr","typeString":"struct Level.LevelData storage pointer"}},"id":5628,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3081:2:24","memberName":"xp","nodeType":"MemberAccess","referencedDeclaration":5409,"src":"3071:12:24","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"baseExpression":{"id":5629,"name":"xpPerLevel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5419,"src":"3087:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5631,"indexExpression":{"id":5630,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5615,"src":"3098:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3087:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3071:29:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5650,"nodeType":"IfStatement","src":"3067:152:24","trueBody":{"id":5649,"nodeType":"Block","src":"3102:117:24","statements":[{"expression":{"id":5640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5633,"name":"levelData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"3120:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_LevelData_$5410_storage_ptr","typeString":"struct Level.LevelData storage pointer"}},"id":5635,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3130:5:24","memberName":"level","nodeType":"MemberAccess","referencedDeclaration":5407,"src":"3120:15:24","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5638,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5615,"src":"3146:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5637,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3138:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":5636,"name":"uint128","nodeType":"ElementaryTypeName","src":"3138:7:24","typeDescriptions":{}}},"id":5639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3138:10:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"3120:28:24","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":5641,"nodeType":"ExpressionStatement","src":"3120:28:24"},{"eventCall":{"arguments":[{"id":5643,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5544,"src":"3179:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5644,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5615,"src":"3188:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5645,"name":"levelData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5569,"src":"3191:9:24","typeDescriptions":{"typeIdentifier":"t_struct$_LevelData_$5410_storage_ptr","typeString":"struct Level.LevelData storage pointer"}},"id":5646,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3201:2:24","memberName":"xp","nodeType":"MemberAccess","referencedDeclaration":5409,"src":"3191:12:24","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"id":5642,"name":"LevelUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"3171:7:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256)"}},"id":5647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3171:33:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5648,"nodeType":"EmitStatement","src":"3166:38:24"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5620,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5615,"src":"3025:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5621,"name":"xpPerLevel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5419,"src":"3029:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3040:6:24","memberName":"length","nodeType":"MemberAccess","src":"3029:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3025:21:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5652,"initializationExpression":{"assignments":[5615],"declarations":[{"constant":false,"id":5615,"mutability":"mutable","name":"i","nameLocation":"3003:1:24","nodeType":"VariableDeclaration","scope":5652,"src":"2995:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5614,"name":"uint256","nodeType":"ElementaryTypeName","src":"2995:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5619,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5616,"name":"currentLevel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5610,"src":"3007:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":5617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3022:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3007:16:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2995:28:24"},"loopExpression":{"expression":{"id":5625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3048:3:24","subExpression":{"id":5624,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5615,"src":"3048:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5626,"nodeType":"ExpressionStatement","src":"3048:3:24"},"nodeType":"ForStatement","src":"2990:239:24"}]},"documentation":{"id":5542,"nodeType":"StructuredDocumentation","src":"2040:106:24","text":" @dev Utility-contract only. Grant the user experience and increase their level if valid"},"functionSelector":"953b6a91","id":5654,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5549,"name":"UTILITY_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"2242:12:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5550,"kind":"modifierInvocation","modifierName":{"id":5548,"name":"onlyRole","nameLocations":["2233:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"2233:8:24"},"nodeType":"ModifierInvocation","src":"2233:22:24"}],"name":"gainExperience","nameLocation":"2160:14:24","nodeType":"FunctionDefinition","parameters":{"id":5547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5544,"mutability":"mutable","name":"tokenId","nameLocation":"2192:7:24","nodeType":"VariableDeclaration","scope":5654,"src":"2184:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5543,"name":"uint256","nodeType":"ElementaryTypeName","src":"2184:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5546,"mutability":"mutable","name":"xp","nameLocation":"2217:2:24","nodeType":"VariableDeclaration","scope":5654,"src":"2209:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5545,"name":"uint256","nodeType":"ElementaryTypeName","src":"2209:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2174:51:24"},"returnParameters":{"id":5551,"nodeType":"ParameterList","parameters":[],"src":"2256:0:24"},"scope":5694,"src":"2151:1084:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5678,"nodeType":"Block","src":"3383:164:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":5667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":5662,"name":"tokenIdToLevelData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5416,"src":"3397:18:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_LevelData_$5410_storage_$","typeString":"mapping(uint256 => struct Level.LevelData storage ref)"}},"id":5664,"indexExpression":{"id":5663,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5657,"src":"3416:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3397:27:24","typeDescriptions":{"typeIdentifier":"t_struct$_LevelData_$5410_storage","typeString":"struct Level.LevelData storage ref"}},"id":5665,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3425:5:24","memberName":"level","nodeType":"MemberAccess","referencedDeclaration":5407,"src":"3397:33:24","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3434:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3397:38:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5676,"nodeType":"Block","src":"3476:65:24","statements":[{"expression":{"expression":{"baseExpression":{"id":5671,"name":"tokenIdToLevelData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5416,"src":"3497:18:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_LevelData_$5410_storage_$","typeString":"mapping(uint256 => struct Level.LevelData storage ref)"}},"id":5673,"indexExpression":{"id":5672,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5657,"src":"3516:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3497:27:24","typeDescriptions":{"typeIdentifier":"t_struct$_LevelData_$5410_storage","typeString":"struct Level.LevelData storage ref"}},"id":5674,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3525:5:24","memberName":"level","nodeType":"MemberAccess","referencedDeclaration":5407,"src":"3497:33:24","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":5661,"id":5675,"nodeType":"Return","src":"3490:40:24"}]},"id":5677,"nodeType":"IfStatement","src":"3393:148:24","trueBody":{"id":5670,"nodeType":"Block","src":"3437:33:24","statements":[{"expression":{"hexValue":"31","id":5668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3458:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"functionReturnParameters":5661,"id":5669,"nodeType":"Return","src":"3451:8:24"}]}}]},"documentation":{"id":5655,"nodeType":"StructuredDocumentation","src":"3241:67:24","text":" @dev Helper view function returns just the level"},"functionSelector":"d011645c","id":5679,"implemented":true,"kind":"function","modifiers":[],"name":"getTokenLevel","nameLocation":"3322:13:24","nodeType":"FunctionDefinition","parameters":{"id":5658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5657,"mutability":"mutable","name":"tokenId","nameLocation":"3344:7:24","nodeType":"VariableDeclaration","scope":5679,"src":"3336:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5656,"name":"uint256","nodeType":"ElementaryTypeName","src":"3336:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3335:17:24"},"returnParameters":{"id":5661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5660,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5679,"src":"3374:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5659,"name":"uint256","nodeType":"ElementaryTypeName","src":"3374:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3373:9:24"},"scope":5694,"src":"3313:234:24","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5692,"nodeType":"Block","src":"3689:54:24","statements":[{"expression":{"expression":{"baseExpression":{"id":5687,"name":"tokenIdToLevelData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5416,"src":"3706:18:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_LevelData_$5410_storage_$","typeString":"mapping(uint256 => struct Level.LevelData storage ref)"}},"id":5689,"indexExpression":{"id":5688,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5682,"src":"3725:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3706:27:24","typeDescriptions":{"typeIdentifier":"t_struct$_LevelData_$5410_storage","typeString":"struct Level.LevelData storage ref"}},"id":5690,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3734:2:24","memberName":"xp","nodeType":"MemberAccess","referencedDeclaration":5409,"src":"3706:30:24","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":5686,"id":5691,"nodeType":"Return","src":"3699:37:24"}]},"documentation":{"id":5680,"nodeType":"StructuredDocumentation","src":"3553:64:24","text":" @dev Helper view function returns just the xp"},"functionSelector":"c995a3b3","id":5693,"implemented":true,"kind":"function","modifiers":[],"name":"getTokenXp","nameLocation":"3631:10:24","nodeType":"FunctionDefinition","parameters":{"id":5683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5682,"mutability":"mutable","name":"tokenId","nameLocation":"3650:7:24","nodeType":"VariableDeclaration","scope":5693,"src":"3642:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5681,"name":"uint256","nodeType":"ElementaryTypeName","src":"3642:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3641:17:24"},"returnParameters":{"id":5686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5685,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5693,"src":"3680:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5684,"name":"uint256","nodeType":"ElementaryTypeName","src":"3680:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3679:9:24"},"scope":5694,"src":"3622:121:24","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":5695,"src":"145:3600:24","usedErrors":[379,382,701,704,869,1313,1316,4265,5424],"usedEvents":[387,693,698,1325,1334,1343,5433]}],"src":"32:3714:24"},"id":24},"contracts/skills/SkillTree.sol":{"ast":{"absolutePath":"contracts/skills/SkillTree.sol","exportedSymbols":{"AccessControlUpgradeable":[362],"BaseHelper":[4338],"CharacterNFTManager":[5095],"Context":[2772],"ContextUpgradeable":[662],"ERC165":[3051],"ERC165Upgradeable":[1007],"ERC721":[2532],"IAccessControl":[1386],"IERC165":[3063],"IERC721":[2649],"IERC721Errors":[1476],"IERC721Metadata":[2695],"IERC721Receiver":[2667],"Initializable":[616],"Level":[5694],"PausableUpgradeable":[838],"ReentrancyGuardUpgradeable":[967],"SkillTree":[5940],"Strings":[3027]},"id":5941,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5696,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:25"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":5697,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5941,"sourceUnit":2533,"src":"58:57:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/BaseHelper.sol","file":"../BaseHelper.sol","id":5698,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5941,"sourceUnit":4339,"src":"116:27:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/erc721/CharacterNFTManager.sol","file":"../erc721/CharacterNFTManager.sol","id":5700,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5941,"sourceUnit":5096,"src":"144:70:25","symbolAliases":[{"foreign":{"id":5699,"name":"CharacterNFTManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5095,"src":"152:19:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/leveling/Level.sol","file":"../leveling/Level.sol","id":5702,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5941,"sourceUnit":5695,"src":"215:44:25","symbolAliases":[{"foreign":{"id":5701,"name":"Level","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5694,"src":"223:5:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5703,"name":"BaseHelper","nameLocations":["283:10:25"],"nodeType":"IdentifierPath","referencedDeclaration":4338,"src":"283:10:25"},"id":5704,"nodeType":"InheritanceSpecifier","src":"283:10:25"}],"canonicalName":"SkillTree","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5940,"linearizedBaseContracts":[5940,4338,967,838,362,1007,3063,1386,662,616],"name":"SkillTree","nameLocation":"270:9:25","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":5705,"nodeType":"StructuredDocumentation","src":"321:17:25","text":"VARIABLES *"},"functionSelector":"4deb1934","id":5710,"mutability":"mutable","name":"charClassToSkills","nameLocation":"426:17:25","nodeType":"VariableDeclaration","scope":5940,"src":"389:54:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(uint256 => uint256[])"},"typeName":{"id":5709,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5706,"name":"uint256","nodeType":"ElementaryTypeName","src":"397:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"389:29:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(uint256 => uint256[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":5707,"name":"uint256","nodeType":"ElementaryTypeName","src":"408:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5708,"nodeType":"ArrayTypeName","src":"408:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"visibility":"public"},{"constant":false,"functionSelector":"d9741275","id":5712,"mutability":"mutable","name":"levelContractAddress","nameLocation":"487:20:25","nodeType":"VariableDeclaration","scope":5940,"src":"472:35:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5711,"name":"address","nodeType":"ElementaryTypeName","src":"472:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"1c603192","id":5714,"mutability":"mutable","name":"characterNFTManager","nameLocation":"537:19:25","nodeType":"VariableDeclaration","scope":5940,"src":"522:34:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5713,"name":"address","nodeType":"ElementaryTypeName","src":"522:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"documentation":{"id":5715,"nodeType":"StructuredDocumentation","src":"563:14:25","text":"ERRORS *"},"errorSelector":"6b47a4a9","id":5717,"name":"SkillNotAllowed","nameLocation":"589:15:25","nodeType":"ErrorDefinition","parameters":{"id":5716,"nodeType":"ParameterList","parameters":[],"src":"604:2:25"},"src":"583:24:25"},{"body":{"id":5848,"nodeType":"Block","src":"740:672:25","statements":[{"expression":{"arguments":[{"id":5726,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5720,"src":"766:12:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5725,"name":"_baseInitialize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4313,"src":"750:15:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"750:29:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5728,"nodeType":"ExpressionStatement","src":"750:29:25"},{"expression":{"id":5744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5729,"name":"charClassToSkills","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"863:17:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(uint256 => uint256[] storage ref)"}},"id":5731,"indexExpression":{"hexValue":"31","id":5730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"881:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"863:20:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"hexValue":"30","id":5732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"887:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"31","id":5733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"890:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"32","id":5734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"893:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},{"hexValue":"33","id":5735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"896:1:25","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},{"hexValue":"34","id":5736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"899:1:25","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},{"hexValue":"35","id":5737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"902:1:25","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},{"hexValue":"36","id":5738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"905:1:25","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},{"hexValue":"37","id":5739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"908:1:25","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},{"hexValue":"38","id":5740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"911:1:25","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"hexValue":"39","id":5741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"914:1:25","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},{"hexValue":"3130","id":5742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"917:2:25","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"}],"id":5743,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"886:34:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$11_memory_ptr","typeString":"uint8[11] memory"}},"src":"863:57:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5745,"nodeType":"ExpressionStatement","src":"863:57:25"},{"expression":{"id":5761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5746,"name":"charClassToSkills","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"943:17:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(uint256 => uint256[] storage ref)"}},"id":5748,"indexExpression":{"hexValue":"32","id":5747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"943:20:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"hexValue":"30","id":5749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"967:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"31","id":5750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"970:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"32","id":5751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"973:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},{"hexValue":"33","id":5752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"976:1:25","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},{"hexValue":"34","id":5753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"979:1:25","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},{"hexValue":"35","id":5754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"982:1:25","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},{"hexValue":"36","id":5755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"985:1:25","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},{"hexValue":"37","id":5756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"988:1:25","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},{"hexValue":"38","id":5757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"991:1:25","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"hexValue":"39","id":5758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"994:1:25","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},{"hexValue":"3130","id":5759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"997:2:25","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"}],"id":5760,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"966:34:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$11_memory_ptr","typeString":"uint8[11] memory"}},"src":"943:57:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5762,"nodeType":"ExpressionStatement","src":"943:57:25"},{"expression":{"id":5778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5763,"name":"charClassToSkills","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"1025:17:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(uint256 => uint256[] storage ref)"}},"id":5765,"indexExpression":{"hexValue":"33","id":5764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1043:1:25","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1025:20:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"hexValue":"30","id":5766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1049:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"31","id":5767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1052:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"32","id":5768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1055:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},{"hexValue":"33","id":5769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1058:1:25","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},{"hexValue":"34","id":5770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1061:1:25","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},{"hexValue":"35","id":5771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1064:1:25","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},{"hexValue":"36","id":5772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1067:1:25","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},{"hexValue":"37","id":5773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1070:1:25","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},{"hexValue":"38","id":5774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1073:1:25","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"hexValue":"39","id":5775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1076:1:25","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},{"hexValue":"3130","id":5776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1079:2:25","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"}],"id":5777,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1048:34:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$11_memory_ptr","typeString":"uint8[11] memory"}},"src":"1025:57:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5779,"nodeType":"ExpressionStatement","src":"1025:57:25"},{"expression":{"id":5795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5780,"name":"charClassToSkills","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"1103:17:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(uint256 => uint256[] storage ref)"}},"id":5782,"indexExpression":{"hexValue":"34","id":5781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1121:1:25","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1103:20:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"hexValue":"30","id":5783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1127:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"31","id":5784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1130:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"32","id":5785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1133:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},{"hexValue":"33","id":5786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1136:1:25","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},{"hexValue":"34","id":5787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1139:1:25","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},{"hexValue":"35","id":5788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1142:1:25","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},{"hexValue":"36","id":5789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1145:1:25","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},{"hexValue":"37","id":5790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1148:1:25","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},{"hexValue":"38","id":5791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1151:1:25","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"hexValue":"39","id":5792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1154:1:25","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},{"hexValue":"3130","id":5793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1157:2:25","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"}],"id":5794,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1126:34:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$11_memory_ptr","typeString":"uint8[11] memory"}},"src":"1103:57:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5796,"nodeType":"ExpressionStatement","src":"1103:57:25"},{"expression":{"id":5812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5797,"name":"charClassToSkills","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"1183:17:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(uint256 => uint256[] storage ref)"}},"id":5799,"indexExpression":{"hexValue":"35","id":5798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1201:1:25","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1183:20:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"hexValue":"30","id":5800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1207:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"31","id":5801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1210:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"32","id":5802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1213:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},{"hexValue":"33","id":5803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1216:1:25","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},{"hexValue":"34","id":5804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1219:1:25","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},{"hexValue":"35","id":5805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1222:1:25","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},{"hexValue":"36","id":5806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1225:1:25","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},{"hexValue":"37","id":5807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1228:1:25","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},{"hexValue":"38","id":5808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1231:1:25","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"hexValue":"39","id":5809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1234:1:25","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},{"hexValue":"3130","id":5810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1237:2:25","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"}],"id":5811,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1206:34:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$11_memory_ptr","typeString":"uint8[11] memory"}},"src":"1183:57:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5813,"nodeType":"ExpressionStatement","src":"1183:57:25"},{"expression":{"id":5829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5814,"name":"charClassToSkills","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"1260:17:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(uint256 => uint256[] storage ref)"}},"id":5816,"indexExpression":{"hexValue":"36","id":5815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1278:1:25","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1260:20:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"hexValue":"30","id":5817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1284:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"31","id":5818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1287:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"32","id":5819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1290:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},{"hexValue":"33","id":5820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1293:1:25","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},{"hexValue":"34","id":5821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1296:1:25","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},{"hexValue":"35","id":5822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1299:1:25","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},{"hexValue":"36","id":5823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1302:1:25","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},{"hexValue":"37","id":5824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1305:1:25","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},{"hexValue":"38","id":5825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1308:1:25","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"hexValue":"39","id":5826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1311:1:25","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},{"hexValue":"3130","id":5827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1314:2:25","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"}],"id":5828,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1283:34:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$11_memory_ptr","typeString":"uint8[11] memory"}},"src":"1260:57:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5830,"nodeType":"ExpressionStatement","src":"1260:57:25"},{"expression":{"id":5846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5831,"name":"charClassToSkills","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"1339:17:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(uint256 => uint256[] storage ref)"}},"id":5833,"indexExpression":{"hexValue":"37","id":5832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1357:1:25","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1339:20:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"hexValue":"30","id":5834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1363:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"31","id":5835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1366:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"32","id":5836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1369:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},{"hexValue":"33","id":5837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1372:1:25","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},{"hexValue":"34","id":5838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1375:1:25","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},{"hexValue":"35","id":5839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1378:1:25","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},{"hexValue":"36","id":5840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1381:1:25","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},{"hexValue":"37","id":5841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1384:1:25","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},{"hexValue":"38","id":5842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1387:1:25","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},{"hexValue":"39","id":5843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1390:1:25","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},{"hexValue":"3130","id":5844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1393:2:25","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"}],"id":5845,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1362:34:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint8_$11_memory_ptr","typeString":"uint8[11] memory"}},"src":"1339:57:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5847,"nodeType":"ExpressionStatement","src":"1339:57:25"}]},"documentation":{"id":5718,"nodeType":"StructuredDocumentation","src":"656:17:25","text":"FUNCTIONS *"},"functionSelector":"c4d66de8","id":5849,"implemented":true,"kind":"function","modifiers":[{"id":5723,"kind":"modifierInvocation","modifierName":{"id":5722,"name":"initializer","nameLocations":["728:11:25"],"nodeType":"IdentifierPath","referencedDeclaration":470,"src":"728:11:25"},"nodeType":"ModifierInvocation","src":"728:11:25"}],"name":"initialize","nameLocation":"688:10:25","nodeType":"FunctionDefinition","parameters":{"id":5721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5720,"mutability":"mutable","name":"initialOwner","nameLocation":"707:12:25","nodeType":"VariableDeclaration","scope":5849,"src":"699:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5719,"name":"address","nodeType":"ElementaryTypeName","src":"699:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"698:22:25"},"returnParameters":{"id":5724,"nodeType":"ParameterList","parameters":[],"src":"740:0:25"},"scope":5940,"src":"679:733:25","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5862,"nodeType":"Block","src":"1602:59:25","statements":[{"expression":{"id":5860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5858,"name":"characterNFTManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5714,"src":"1612:19:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5859,"name":"_characterNFTManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5852,"src":"1634:20:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1612:42:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5861,"nodeType":"ExpressionStatement","src":"1612:42:25"}]},"documentation":{"id":5850,"nodeType":"StructuredDocumentation","src":"1418:75:25","text":" @dev Set the address of the CharacterNFTManager contract"},"functionSelector":"94dd3215","id":5863,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5855,"name":"OWNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4242,"src":"1590:10:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5856,"kind":"modifierInvocation","modifierName":{"id":5854,"name":"onlyRole","nameLocations":["1581:8:25"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1581:8:25"},"nodeType":"ModifierInvocation","src":"1581:20:25"}],"name":"setCharacterNFTManager","nameLocation":"1507:22:25","nodeType":"FunctionDefinition","parameters":{"id":5853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5852,"mutability":"mutable","name":"_characterNFTManager","nameLocation":"1547:20:25","nodeType":"VariableDeclaration","scope":5863,"src":"1539:28:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5851,"name":"address","nodeType":"ElementaryTypeName","src":"1539:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1529:44:25"},"returnParameters":{"id":5857,"nodeType":"ParameterList","parameters":[],"src":"1602:0:25"},"scope":5940,"src":"1498:163:25","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5876,"nodeType":"Block","src":"1825:54:25","statements":[{"expression":{"id":5874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5872,"name":"levelContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5712,"src":"1835:20:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5873,"name":"_levelContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5866,"src":"1858:14:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1835:37:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5875,"nodeType":"ExpressionStatement","src":"1835:37:25"}]},"documentation":{"id":5864,"nodeType":"StructuredDocumentation","src":"1667:61:25","text":" @dev Set the address of the Level contract"},"functionSelector":"5adaa492","id":5877,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5869,"name":"OWNER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4242,"src":"1813:10:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5870,"kind":"modifierInvocation","modifierName":{"id":5868,"name":"onlyRole","nameLocations":["1804:8:25"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1804:8:25"},"nodeType":"ModifierInvocation","src":"1804:20:25"}],"name":"setLevelContract","nameLocation":"1742:16:25","nodeType":"FunctionDefinition","parameters":{"id":5867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5866,"mutability":"mutable","name":"_levelContract","nameLocation":"1776:14:25","nodeType":"VariableDeclaration","scope":5877,"src":"1768:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5865,"name":"address","nodeType":"ElementaryTypeName","src":"1768:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1758:38:25"},"returnParameters":{"id":5871,"nodeType":"ParameterList","parameters":[],"src":"1825:0:25"},"scope":5940,"src":"1733:146:25","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5938,"nodeType":"Block","src":"2042:713:25","statements":[{"assignments":[5887],"declarations":[{"constant":false,"id":5887,"mutability":"mutable","name":"characterNFTManagerContract","nameLocation":"2123:27:25","nodeType":"VariableDeclaration","scope":5938,"src":"2103:47:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_CharacterNFTManager_$5095","typeString":"contract CharacterNFTManager"},"typeName":{"id":5886,"nodeType":"UserDefinedTypeName","pathNode":{"id":5885,"name":"CharacterNFTManager","nameLocations":["2103:19:25"],"nodeType":"IdentifierPath","referencedDeclaration":5095,"src":"2103:19:25"},"referencedDeclaration":5095,"src":"2103:19:25","typeDescriptions":{"typeIdentifier":"t_contract$_CharacterNFTManager_$5095","typeString":"contract CharacterNFTManager"}},"visibility":"internal"}],"id":5891,"initialValue":{"arguments":[{"id":5889,"name":"characterNFTManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5714,"src":"2186:19:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5888,"name":"CharacterNFTManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5095,"src":"2153:19:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_CharacterNFTManager_$5095_$","typeString":"type(contract CharacterNFTManager)"}},"id":5890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2153:62:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_CharacterNFTManager_$5095","typeString":"contract CharacterNFTManager"}},"nodeType":"VariableDeclarationStatement","src":"2103:112:25"},{"assignments":[5896],"declarations":[{"constant":false,"id":5896,"mutability":"mutable","name":"classEnumValue","nameLocation":"2260:14:25","nodeType":"VariableDeclaration","scope":5938,"src":"2225:49:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"},"typeName":{"id":5895,"nodeType":"UserDefinedTypeName","pathNode":{"id":5894,"name":"CharacterNFTManager.CharacterClass","nameLocations":["2225:19:25","2245:14:25"],"nodeType":"IdentifierPath","referencedDeclaration":4788,"src":"2225:34:25"},"referencedDeclaration":4788,"src":"2225:34:25","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}},"visibility":"internal"}],"id":5901,"initialValue":{"arguments":[{"id":5899,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5880,"src":"2346:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5897,"name":"characterNFTManagerContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5887,"src":"2277:27:25","typeDescriptions":{"typeIdentifier":"t_contract$_CharacterNFTManager_$5095","typeString":"contract CharacterNFTManager"}},"id":5898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2322:23:25","memberName":"tokenIdToCharacterClass","nodeType":"MemberAccess","referencedDeclaration":4796,"src":"2277:68:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_enum$_CharacterClass_$4788_$","typeString":"function (uint256) view external returns (enum CharacterNFTManager.CharacterClass)"}},"id":5900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2277:77:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}},"nodeType":"VariableDeclarationStatement","src":"2225:129:25"},{"assignments":[5904],"declarations":[{"constant":false,"id":5904,"mutability":"mutable","name":"levelContract","nameLocation":"2411:13:25","nodeType":"VariableDeclaration","scope":5938,"src":"2405:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Level_$5694","typeString":"contract Level"},"typeName":{"id":5903,"nodeType":"UserDefinedTypeName","pathNode":{"id":5902,"name":"Level","nameLocations":["2405:5:25"],"nodeType":"IdentifierPath","referencedDeclaration":5694,"src":"2405:5:25"},"referencedDeclaration":5694,"src":"2405:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_Level_$5694","typeString":"contract Level"}},"visibility":"internal"}],"id":5908,"initialValue":{"arguments":[{"id":5906,"name":"levelContractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5712,"src":"2433:20:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5905,"name":"Level","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5694,"src":"2427:5:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Level_$5694_$","typeString":"type(contract Level)"}},"id":5907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2427:27:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Level_$5694","typeString":"contract Level"}},"nodeType":"VariableDeclarationStatement","src":"2405:49:25"},{"assignments":[5910],"declarations":[{"constant":false,"id":5910,"mutability":"mutable","name":"tokenIdLevel","nameLocation":"2472:12:25","nodeType":"VariableDeclaration","scope":5938,"src":"2464:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5909,"name":"uint256","nodeType":"ElementaryTypeName","src":"2464:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5915,"initialValue":{"arguments":[{"id":5913,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5880,"src":"2515:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5911,"name":"levelContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5904,"src":"2487:13:25","typeDescriptions":{"typeIdentifier":"t_contract$_Level_$5694","typeString":"contract Level"}},"id":5912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2501:13:25","memberName":"getTokenLevel","nodeType":"MemberAccess","referencedDeclaration":5679,"src":"2487:27:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view external returns (uint256)"}},"id":5914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2487:36:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2464:59:25"},{"assignments":[5920],"declarations":[{"constant":false,"id":5920,"mutability":"mutable","name":"skills","nameLocation":"2599:6:25","nodeType":"VariableDeclaration","scope":5938,"src":"2582:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5918,"name":"uint256","nodeType":"ElementaryTypeName","src":"2582:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5919,"nodeType":"ArrayTypeName","src":"2582:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":5927,"initialValue":{"baseExpression":{"id":5921,"name":"charClassToSkills","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"2608:17:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(uint256 => uint256[] storage ref)"}},"id":5926,"indexExpression":{"arguments":[{"id":5924,"name":"classEnumValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5896,"src":"2634:14:25","typeDescriptions":{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_CharacterClass_$4788","typeString":"enum CharacterNFTManager.CharacterClass"}],"id":5923,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2626:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5922,"name":"uint256","nodeType":"ElementaryTypeName","src":"2626:7:25","typeDescriptions":{}}},"id":5925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2626:23:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2608:42:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"nodeType":"VariableDeclarationStatement","src":"2582:68:25"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5928,"name":"skillChosen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5882,"src":"2664:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"baseExpression":{"id":5929,"name":"skills","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5920,"src":"2678:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5931,"indexExpression":{"id":5930,"name":"tokenIdLevel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5910,"src":"2685:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2678:20:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2664:34:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5937,"nodeType":"IfStatement","src":"2660:89:25","trueBody":{"id":5936,"nodeType":"Block","src":"2700:49:25","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5933,"name":"SkillNotAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5717,"src":"2721:15:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2721:17:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5935,"nodeType":"RevertStatement","src":"2714:24:25"}]}}]},"documentation":{"id":5878,"nodeType":"StructuredDocumentation","src":"1885:81:25","text":" @dev Check that the character class and skill chosen are valid"},"functionSelector":"5d1b973a","id":5939,"implemented":true,"kind":"function","modifiers":[],"name":"canUseSkill","nameLocation":"1980:11:25","nodeType":"FunctionDefinition","parameters":{"id":5883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5880,"mutability":"mutable","name":"tokenId","nameLocation":"2000:7:25","nodeType":"VariableDeclaration","scope":5939,"src":"1992:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5879,"name":"uint256","nodeType":"ElementaryTypeName","src":"1992:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5882,"mutability":"mutable","name":"skillChosen","nameLocation":"2017:11:25","nodeType":"VariableDeclaration","scope":5939,"src":"2009:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5881,"name":"uint256","nodeType":"ElementaryTypeName","src":"2009:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1991:38:25"},"returnParameters":{"id":5884,"nodeType":"ParameterList","parameters":[],"src":"2042:0:25"},"scope":5940,"src":"1971:784:25","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":5941,"src":"261:2496:25","usedErrors":[379,382,701,704,869,1313,1316,4265,5717],"usedEvents":[387,693,698,1325,1334,1343]}],"src":"32:2726:25"},"id":25}},"contracts":{"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol":{"AccessControlUpgradeable":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":\"AccessControlUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","errors":{"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","errors":{"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol":{"PausableUpgradeable":{"abi":[{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","errors":{"EnforcedPause()":[{"details":"The operation failed because the contract is paused."}],"ExpectedPause()":[{"details":"The operation failed because the contract is not paused."}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":\"PausableUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol":{"ReentrancyGuardUpgradeable":{"abi":[{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","errors":{"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":\"ReentrancyGuardUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ERC165Upgradeable":{"abi":[{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","errors":{"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1034,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)1029_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)1029_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)1029_storage"},"t_struct(RoleData)1029_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":1026,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"hasRole","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":1028,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/IAccessControl.sol":{"IAccessControl":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"IERC1155Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"}],"devdoc":{"details":"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.","errors":{"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC20Errors":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"}],"devdoc":{"details":"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.","errors":{"ERC20InsufficientAllowance(address,uint256,uint256)":[{"details":"Indicates a failure with the `spender`’s `allowance`. Used in transfers.","params":{"allowance":"Amount of tokens a `spender` is allowed to operate with.","needed":"Minimum amount required to perform a transfer.","spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC20InsufficientBalance(address,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred."}}],"ERC20InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC20InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC20InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC20InvalidSpender(address)":[{"details":"Indicates a failure with the `spender` to be approved. Used in approvals.","params":{"spender":"Address that may be allowed to operate on tokens without being their owner."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC721Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"}],"devdoc":{"details":"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1556,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":1558,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":1562,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":1566,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":1570,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":1576,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Base64.sol":{"Base64":{"abi":[],"devdoc":{"details":"Provides a set of functions to operate with Base64 strings.","kind":"dev","methods":{},"stateVariables":{"_TABLE":{"details":"Base64 Encoding/Decoding Table"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e4a1ce3b0cdb865c116e6a1ca07f103dc472e6ed936c85756408b73debf1a2fa64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 LOG1 0xCE EXTCODESIZE 0xC 0xDB DUP7 0x5C GT PUSH15 0x6A1CA07F103DC472E6ED936C857564 ADDMOD 0xB7 RETURNDATASIZE 0xEB CALL LOG2 STATICCALL PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"202:3302:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:3302:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e4a1ce3b0cdb865c116e6a1ca07f103dc472e6ed936c85756408b73debf1a2fa64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 LOG1 0xCE EXTCODESIZE 0xC 0xDB DUP7 0x5C GT PUSH15 0x6A1CA07F103DC472E6ED936C857564 ADDMOD 0xB7 RETURNDATASIZE 0xEB CALL LOG2 STATICCALL PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"202:3302:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"encode(bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides a set of functions to operate with Base64 strings.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_TABLE\":{\"details\":\"Base64 Encoding/Decoding Table\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Base64.sol\":\"Base64\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x6f7014d688c4386c26e8c02371ecb7f7740d2542f1ecadffd5a3084511e2a344\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"StringsInsufficientHexLength","type":"error"}],"devdoc":{"details":"String operations.","errors":{"StringsInsufficientHexLength(uint256,uint256)":[{"details":"The `value` string doesn't fit in the specified `length`."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122014361ae278094b127bedfe2e8cb2fd31667231c7b831bedf7b6576e352ff5d4464736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ CALLDATASIZE BYTE 0xE2 PUSH25 0x94B127BEDFE2E8CB2FD31667231C7B831BEDF7B6576E352FF 0x5D PREVRANDAO PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"251:2847:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;251:2847:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122014361ae278094b127bedfe2e8cb2fd31667231c7b831bedf7b6576e352ff5d4464736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ CALLDATASIZE BYTE 0xE2 PUSH25 0x94B127BEDFE2E8CB2FD31667231C7B831BEDF7B6576E352FF 0x5D PREVRANDAO PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"251:2847:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite","toStringSigned(int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[{"inputs":[],"name":"MathOverflowedMulDiv","type":"error"}],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","errors":{"MathOverflowedMulDiv()":[{"details":"Muldiv operation overflow."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205668e942167f71b57b39fdd3181a46cc44d9e606ae111ad83102b2d9038f111564736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP PUSH9 0xE942167F71B57B39FD 0xD3 XOR BYTE CHAINID 0xCC PREVRANDAO 0xD9 0xE6 MOD 0xAE GT BYTE 0xD8 BALANCE MUL 0xB2 0xD9 SUB DUP16 GT ISZERO PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"203:14914:18:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;203:14914:18;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205668e942167f71b57b39fdd3181a46cc44d9e606ae111ad83102b2d9038f111564736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP PUSH9 0xE942167F71B57B39FD 0xD3 XOR BYTE CHAINID 0xCC PREVRANDAO 0xD9 0xE6 MOD 0xAE GT BYTE 0xD8 BALANCE MUL 0xB2 0xD9 SUB DUP16 GT ISZERO PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"203:14914:18:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite","unsignedRoundsUp(enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f4964af4e40dcf6c065c71071b1bffd923984b12e9cb29e4e7ca16d1e7e7840264736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL SWAP7 0x4A DELEGATECALL 0xE4 0xD 0xCF PUSH13 0x65C71071B1BFFD923984B12E9 0xCB 0x29 0xE4 0xE7 0xCA AND 0xD1 0xE7 0xE7 DUP5 MUL PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"216:1047:19:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;216:1047:19;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f4964af4e40dcf6c065c71071b1bffd923984b12e9cb29e4e7ca16d1e7e7840264736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL SWAP7 0x4A DELEGATECALL 0xE4 0xD 0xCF PUSH13 0x65C71071B1BFFD923984B12E9 0xCB 0x29 0xE4 0xE7 0xCA AND 0xD1 0xE7 0xE7 DUP5 MUL PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"216:1047:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/BaseHelper.sol":{"BaseHelper":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"InvalidValues","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OWNER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"UTILITY_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}],"EnforcedPause()":[{"details":"The operation failed because the contract is paused."}],"ExpectedPause()":[{"details":"The operation failed because the contract is not paused."}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"ADMIN_ROLE()":"75b238fc","DEFAULT_ADMIN_ROLE()":"a217fddf","MINTER_ROLE()":"d5391393","OWNER_ROLE()":"e58378bb","PAUSER_ROLE()":"e63ab1e9","UTILITY_ROLE()":"8f296759","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","pause()":"8456cb59","paused()":"5c975abb","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","unpause()":"3f4ba83a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValues\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UTILITY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidValues()\":[{\"notice\":\"ERRORS *\"}]},\"kind\":\"user\",\"methods\":{\"OWNER_ROLE()\":{\"notice\":\"ROLES *\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BaseHelper.sol\":\"BaseHelper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/BaseHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract BaseHelper is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    /** ROLES **/\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant UTILITY_ROLE = keccak256(\\\"UTILITY_ROLE\\\");\\n\\n    /** ERRORS **/\\n\\n    error InvalidValues();\\n\\n    /** MODIFIERS **/\\n\\n    /** FUNCTIONS **/\\n\\n    function _baseInitialize(address initialOwner) internal onlyInitializing {\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        // Grant default admin role to initialOwner\\n        _grantRole(DEFAULT_ADMIN_ROLE, initialOwner);\\n        // Grant pauser role to initialOwner\\n        _grantRole(PAUSER_ROLE, initialOwner);\\n        _grantRole(OWNER_ROLE, initialOwner);\\n        _grantRole(MINTER_ROLE, initialOwner);\\n        _grantRole(ADMIN_ROLE, initialOwner);\\n        _grantRole(UTILITY_ROLE, initialOwner);\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    // The gap is needed to avoid overwriting storage variables in future upgrades\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa7a00044dbab2a0f885e29248f5cd0d12fd4639169795202883ff28bee439756\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4337,"contract":"contracts/BaseHelper.sol:BaseHelper","label":"__gap","offset":0,"slot":"0","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"InvalidValues()":[{"notice":"ERRORS *"}]},"kind":"user","methods":{"OWNER_ROLE()":{"notice":"ROLES *"}},"version":1}}},"contracts/erc721/CharacterNFT.sol":{"CharacterNFT":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"inputs":[],"name":"InvalidValues","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"BURNER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OWNER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"characterNFTManagerContract","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"classIdToCharacterData","outputs":[{"internalType":"string","name":"className","type":"string"},{"internalType":"string","name":"classImage","type":"string"},{"internalType":"string","name":"classDescription","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getClassDescription","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getClassImage","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getClassName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"to","type":"address"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"characterNFTManagerAddress","type":"address"}],"name":"setCharacterNFTManager","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenUriContractAddress","type":"address"}],"name":"setTokenUriContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tokenUriContract","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"classEnumValue","type":"uint256"},{"internalType":"string","name":"classDescriptions","type":"string"}],"name":"updateClassDescriptions","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"classEnumValue","type":"uint256"},{"internalType":"string","name":"classImages","type":"string"}],"name":"updateClassImages","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"classEnumValue","type":"uint256"},{"internalType":"string","name":"classNames","type":"string"}],"name":"updateClassNames","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}],"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"burn(uint256)":{"details":"Burn a token, only a burner can call this function"},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"mint(uint256,address)":{"details":"Mint a new token, only a minter can call this function"},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"setCharacterNFTManager(address)":{"details":"Set the address of the CharacterNFTManager contract"},"setTokenUriContract(address)":{"details":"Set the address of the CharacterNFTTokenURI contract"},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenName(uint256)":{"details":"Returns the name of a given token ID"},"tokenURI(uint256)":{"details":"Returns the URI for a given token ID"},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."},"updateClassDescriptions(uint256,string)":{"details":"Update the class descriptions"},"updateClassImages(uint256,string)":{"details":"Update the class images"},"updateClassNames(uint256,string)":{"details":"Update the class names"}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1593":{"entryPoint":null,"id":1593,"parameterSlots":2,"returnSlots":0},"@_4470":{"entryPoint":null,"id":4470,"parameterSlots":0,"returnSlots":0},"@_grantRole_1264":{"entryPoint":905,"id":1264,"parameterSlots":2,"returnSlots":1},"@_msgSender_2754":{"entryPoint":null,"id":2754,"parameterSlots":0,"returnSlots":1},"@hasRole_1088":{"entryPoint":null,"id":1088,"parameterSlots":2,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":1166,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1249,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":1106,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":1084,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2732:26","statements":[{"nodeType":"YulBlock","src":"6:3:26","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:26"},"nodeType":"YulFunctionCall","src":"66:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:26"},"nodeType":"YulFunctionCall","src":"56:31:26"},"nodeType":"YulExpressionStatement","src":"56:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:26","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:26"},"nodeType":"YulFunctionCall","src":"96:15:26"},"nodeType":"YulExpressionStatement","src":"96:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:26"},"nodeType":"YulFunctionCall","src":"120:15:26"},"nodeType":"YulExpressionStatement","src":"120:15:26"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:26"},{"body":{"nodeType":"YulBlock","src":"201:325:26","statements":[{"nodeType":"YulAssignment","src":"211:22:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"225:1:26","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"228:4:26"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"221:3:26"},"nodeType":"YulFunctionCall","src":"221:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"211:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"242:38:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"272:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"278:1:26","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"268:3:26"},"nodeType":"YulFunctionCall","src":"268:12:26"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"246:18:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"319:31:26","statements":[{"nodeType":"YulAssignment","src":"321:27:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"335:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"343:4:26","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"331:3:26"},"nodeType":"YulFunctionCall","src":"331:17:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"321:6:26"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"299:18:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"292:6:26"},"nodeType":"YulFunctionCall","src":"292:26:26"},"nodeType":"YulIf","src":"289:61:26"},{"body":{"nodeType":"YulBlock","src":"409:111:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"430:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"437:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"442:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"433:3:26"},"nodeType":"YulFunctionCall","src":"433:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"423:6:26"},"nodeType":"YulFunctionCall","src":"423:31:26"},"nodeType":"YulExpressionStatement","src":"423:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"474:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"477:4:26","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"467:6:26"},"nodeType":"YulFunctionCall","src":"467:15:26"},"nodeType":"YulExpressionStatement","src":"467:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"502:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"505:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"495:6:26"},"nodeType":"YulFunctionCall","src":"495:15:26"},"nodeType":"YulExpressionStatement","src":"495:15:26"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"365:18:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"388:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"396:2:26","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"385:2:26"},"nodeType":"YulFunctionCall","src":"385:14:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"362:2:26"},"nodeType":"YulFunctionCall","src":"362:38:26"},"nodeType":"YulIf","src":"359:161:26"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"181:4:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"190:6:26","type":""}],"src":"146:380:26"},{"body":{"nodeType":"YulBlock","src":"587:65:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"604:1:26","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"607:3:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"597:6:26"},"nodeType":"YulFunctionCall","src":"597:14:26"},"nodeType":"YulExpressionStatement","src":"597:14:26"},{"nodeType":"YulAssignment","src":"620:26:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"638:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"641:4:26","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"628:9:26"},"nodeType":"YulFunctionCall","src":"628:18:26"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"620:4:26"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"570:3:26","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"578:4:26","type":""}],"src":"531:121:26"},{"body":{"nodeType":"YulBlock","src":"738:464:26","statements":[{"body":{"nodeType":"YulBlock","src":"771:425:26","statements":[{"nodeType":"YulVariableDeclaration","src":"785:11:26","value":{"kind":"number","nodeType":"YulLiteral","src":"795:1:26","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"789:2:26","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"816:2:26"},{"name":"array","nodeType":"YulIdentifier","src":"820:5:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"809:6:26"},"nodeType":"YulFunctionCall","src":"809:17:26"},"nodeType":"YulExpressionStatement","src":"809:17:26"},{"nodeType":"YulVariableDeclaration","src":"839:31:26","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"861:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"865:4:26","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"851:9:26"},"nodeType":"YulFunctionCall","src":"851:19:26"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"843:4:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"883:57:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"906:4:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"916:1:26","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"923:10:26"},{"kind":"number","nodeType":"YulLiteral","src":"935:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"919:3:26"},"nodeType":"YulFunctionCall","src":"919:19:26"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"912:3:26"},"nodeType":"YulFunctionCall","src":"912:27:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"902:3:26"},"nodeType":"YulFunctionCall","src":"902:38:26"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"887:11:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"977:23:26","statements":[{"nodeType":"YulAssignment","src":"979:19:26","value":{"name":"data","nodeType":"YulIdentifier","src":"994:4:26"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"979:11:26"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"959:10:26"},{"kind":"number","nodeType":"YulLiteral","src":"971:4:26","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"956:2:26"},"nodeType":"YulFunctionCall","src":"956:20:26"},"nodeType":"YulIf","src":"953:47:26"},{"nodeType":"YulVariableDeclaration","src":"1013:41:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1027:4:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1037:1:26","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"1044:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"1049:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1040:3:26"},"nodeType":"YulFunctionCall","src":"1040:12:26"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1033:3:26"},"nodeType":"YulFunctionCall","src":"1033:20:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1023:3:26"},"nodeType":"YulFunctionCall","src":"1023:31:26"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1017:2:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1067:24:26","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"1080:11:26"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"1071:5:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1165:21:26","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1174:5:26"},{"name":"_1","nodeType":"YulIdentifier","src":"1181:2:26"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"1167:6:26"},"nodeType":"YulFunctionCall","src":"1167:17:26"},"nodeType":"YulExpressionStatement","src":"1167:17:26"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1115:5:26"},{"name":"_2","nodeType":"YulIdentifier","src":"1122:2:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1112:2:26"},"nodeType":"YulFunctionCall","src":"1112:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1126:26:26","statements":[{"nodeType":"YulAssignment","src":"1128:22:26","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1141:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"1148:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1137:3:26"},"nodeType":"YulFunctionCall","src":"1137:13:26"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"1128:5:26"}]}]},"pre":{"nodeType":"YulBlock","src":"1108:3:26","statements":[]},"src":"1104:82:26"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"754:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"759:2:26","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"751:2:26"},"nodeType":"YulFunctionCall","src":"751:11:26"},"nodeType":"YulIf","src":"748:448:26"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"710:5:26","type":""},{"name":"len","nodeType":"YulTypedName","src":"717:3:26","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"722:10:26","type":""}],"src":"657:545:26"},{"body":{"nodeType":"YulBlock","src":"1292:81:26","statements":[{"nodeType":"YulAssignment","src":"1302:65:26","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1317:4:26"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1335:1:26","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"1338:3:26"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1331:3:26"},"nodeType":"YulFunctionCall","src":"1331:11:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1348:1:26","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1344:3:26"},"nodeType":"YulFunctionCall","src":"1344:6:26"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1327:3:26"},"nodeType":"YulFunctionCall","src":"1327:24:26"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1323:3:26"},"nodeType":"YulFunctionCall","src":"1323:29:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1313:3:26"},"nodeType":"YulFunctionCall","src":"1313:40:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1359:1:26","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"1362:3:26"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1355:3:26"},"nodeType":"YulFunctionCall","src":"1355:11:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1310:2:26"},"nodeType":"YulFunctionCall","src":"1310:57:26"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"1302:4:26"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1269:4:26","type":""},{"name":"len","nodeType":"YulTypedName","src":"1275:3:26","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"1283:4:26","type":""}],"src":"1207:166:26"},{"body":{"nodeType":"YulBlock","src":"1474:1256:26","statements":[{"nodeType":"YulVariableDeclaration","src":"1484:24:26","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1504:3:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1498:5:26"},"nodeType":"YulFunctionCall","src":"1498:10:26"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"1488:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1551:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1553:16:26"},"nodeType":"YulFunctionCall","src":"1553:18:26"},"nodeType":"YulExpressionStatement","src":"1553:18:26"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1523:6:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1539:2:26","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1543:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1535:3:26"},"nodeType":"YulFunctionCall","src":"1535:10:26"},{"kind":"number","nodeType":"YulLiteral","src":"1547:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1531:3:26"},"nodeType":"YulFunctionCall","src":"1531:18:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1520:2:26"},"nodeType":"YulFunctionCall","src":"1520:30:26"},"nodeType":"YulIf","src":"1517:56:26"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1626:4:26"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1664:4:26"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"1658:5:26"},"nodeType":"YulFunctionCall","src":"1658:11:26"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"1632:25:26"},"nodeType":"YulFunctionCall","src":"1632:38:26"},{"name":"newLen","nodeType":"YulIdentifier","src":"1672:6:26"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"1582:43:26"},"nodeType":"YulFunctionCall","src":"1582:97:26"},"nodeType":"YulExpressionStatement","src":"1582:97:26"},{"nodeType":"YulVariableDeclaration","src":"1688:18:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1705:1:26","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"1692:9:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1715:23:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1734:4:26","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"1719:11:26","type":""}]},{"nodeType":"YulAssignment","src":"1747:24:26","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"1760:11:26"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"1747:9:26"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"1817:656:26","statements":[{"nodeType":"YulVariableDeclaration","src":"1831:35:26","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1850:6:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1862:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1858:3:26"},"nodeType":"YulFunctionCall","src":"1858:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1846:3:26"},"nodeType":"YulFunctionCall","src":"1846:20:26"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"1835:7:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1879:49:26","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1923:4:26"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"1893:29:26"},"nodeType":"YulFunctionCall","src":"1893:35:26"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"1883:6:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1941:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1950:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1945:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"2028:172:26","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2053:6:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2071:3:26"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2076:9:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2067:3:26"},"nodeType":"YulFunctionCall","src":"2067:19:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2061:5:26"},"nodeType":"YulFunctionCall","src":"2061:26:26"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2046:6:26"},"nodeType":"YulFunctionCall","src":"2046:42:26"},"nodeType":"YulExpressionStatement","src":"2046:42:26"},{"nodeType":"YulAssignment","src":"2105:24:26","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2119:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2127:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2115:3:26"},"nodeType":"YulFunctionCall","src":"2115:14:26"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2105:6:26"}]},{"nodeType":"YulAssignment","src":"2146:40:26","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2163:9:26"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2174:11:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2159:3:26"},"nodeType":"YulFunctionCall","src":"2159:27:26"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2146:9:26"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1975:1:26"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"1978:7:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1972:2:26"},"nodeType":"YulFunctionCall","src":"1972:14:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1987:28:26","statements":[{"nodeType":"YulAssignment","src":"1989:24:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1998:1:26"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2001:11:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1994:3:26"},"nodeType":"YulFunctionCall","src":"1994:19:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1989:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"1968:3:26","statements":[]},"src":"1964:236:26"},{"body":{"nodeType":"YulBlock","src":"2248:166:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:43:26","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2293:3:26"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2298:9:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2289:3:26"},"nodeType":"YulFunctionCall","src":"2289:19:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2283:5:26"},"nodeType":"YulFunctionCall","src":"2283:26:26"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"2270:9:26","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2333:6:26"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"2345:9:26"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2372:1:26","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"2375:6:26"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2368:3:26"},"nodeType":"YulFunctionCall","src":"2368:14:26"},{"kind":"number","nodeType":"YulLiteral","src":"2384:3:26","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2364:3:26"},"nodeType":"YulFunctionCall","src":"2364:24:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2394:1:26","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2390:3:26"},"nodeType":"YulFunctionCall","src":"2390:6:26"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2360:3:26"},"nodeType":"YulFunctionCall","src":"2360:37:26"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2356:3:26"},"nodeType":"YulFunctionCall","src":"2356:42:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2341:3:26"},"nodeType":"YulFunctionCall","src":"2341:58:26"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2326:6:26"},"nodeType":"YulFunctionCall","src":"2326:74:26"},"nodeType":"YulExpressionStatement","src":"2326:74:26"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"2219:7:26"},{"name":"newLen","nodeType":"YulIdentifier","src":"2228:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2216:2:26"},"nodeType":"YulFunctionCall","src":"2216:19:26"},"nodeType":"YulIf","src":"2213:201:26"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2434:4:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2448:1:26","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"2451:6:26"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2444:3:26"},"nodeType":"YulFunctionCall","src":"2444:14:26"},{"kind":"number","nodeType":"YulLiteral","src":"2460:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2440:3:26"},"nodeType":"YulFunctionCall","src":"2440:22:26"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2427:6:26"},"nodeType":"YulFunctionCall","src":"2427:36:26"},"nodeType":"YulExpressionStatement","src":"2427:36:26"}]},"nodeType":"YulCase","src":"1810:663:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1815:1:26","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"2490:234:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2504:14:26","value":{"kind":"number","nodeType":"YulLiteral","src":"2517:1:26","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2508:5:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"2553:67:26","statements":[{"nodeType":"YulAssignment","src":"2571:35:26","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2590:3:26"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2595:9:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2586:3:26"},"nodeType":"YulFunctionCall","src":"2586:19:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2580:5:26"},"nodeType":"YulFunctionCall","src":"2580:26:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2571:5:26"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"2534:6:26"},"nodeType":"YulIf","src":"2531:89:26"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2640:4:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2699:5:26"},{"name":"newLen","nodeType":"YulIdentifier","src":"2706:6:26"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"2646:52:26"},"nodeType":"YulFunctionCall","src":"2646:67:26"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2633:6:26"},"nodeType":"YulFunctionCall","src":"2633:81:26"},"nodeType":"YulExpressionStatement","src":"2633:81:26"}]},"nodeType":"YulCase","src":"2482:242:26","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1790:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"1798:2:26","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1787:2:26"},"nodeType":"YulFunctionCall","src":"1787:14:26"},"nodeType":"YulSwitch","src":"1780:944:26"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"1459:4:26","type":""},{"name":"src","nodeType":"YulTypedName","src":"1465:3:26","type":""}],"src":"1378:1352:26"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":26,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060405180604001604052806006815260200165446961626c6f60d01b81525060405180604001604052806005815260200164110c93919560da1b8152508160009081620000609190620004e1565b5060016200006f8282620004e1565b50620000819150600090503362000389565b50620000ae7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e3362000389565b50620000db7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a63362000389565b50620001087f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a8483362000389565b506040805180820190915260098152682120a92120a924a0a760b91b6020808301919091526001600052600790527fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b82890620001649082620004e1565b5060408051808201909152600b81526a2722a1a927a6a0a721a2a960a91b6020808301919091526002600052600790527fb7c774451310d1be4108bc180d1b52823cb0ee0274a6c0081bcaf94f115fb96d90620001c29082620004e1565b50604080518082019091526007808252662820a620a224a760c91b6020808401919091526003600052527f3be6fd20d5acfde5b873b48692cd31f4d3c7e8ee8a813af4696af8859e5ca6c6906200021a9082620004e1565b50604080518082019091526009815268534f5243455245535360b81b6020808301919091526004600052600790527fb805995a7ec585a251200611a61d179cfd7fb105e1ab17dc415a7336783786f790620002769082620004e1565b5060408051808201909152600681526520a6a0ad27a760d11b6020808301919091526005600052600790527fbcdda56b5d08466ec462cbbe0adfa57cb0a15fcc8940ef68f702f21b787bc93590620002cf9082620004e1565b5060408051808201909152600881526720a9a9a0a9a9a4a760c11b6020808301919091526006600052600790527f55c5b153ab560fcde54a63b18c7f53d75501706907cef8767fbded79ab9997c7906200032a9082620004e1565b50604080518082019091526005815264111495525160da1b6020808301919091526007600081905290527fb7c49cceb9f85950584035457a41ebbd8cf93b9b612733ad25aa9731ac43aad690620003829082620004e1565b50620005ad565b60008281526006602090815260408083206001600160a01b038516845290915281205460ff16620004325760008381526006602090815260408083206001600160a01b03861684529091529020805460ff19166001179055620003e93390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600162000436565b5060005b92915050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200046757607f821691505b6020821081036200048857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004dc57600081815260208120601f850160051c81016020861015620004b75750805b601f850160051c820191505b81811015620004d857828155600101620004c3565b5050505b505050565b81516001600160401b03811115620004fd57620004fd6200043c565b62000515816200050e845462000452565b846200048e565b602080601f8311600181146200054d5760008415620005345750858301515b600019600386901b1c1916600185901b178555620004d8565b600085815260208120601f198616915b828110156200057e578886015182559484019460019091019084016200055d565b50858210156200059d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b611f5d80620005bd6000396000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c8063877b79b811610125578063b88d4fde116100ad578063d547741f1161007c578063d547741f146104de578063e58378bb146104f1578063e725f87714610506578063e985e9c514610519578063f210ace41461052c57600080fd5b8063b88d4fde1461047e578063c87b56dd14610491578063c8cc5175146104a4578063d5391393146104b757600080fd5b806395d89b41116100f457806395d89b4114610435578063a217fddf1461043d578063a22cb46514610445578063a41f617914610458578063ae53a1a11461046b57600080fd5b8063877b79b8146103da57806391d14854146103fc57806394bf804d1461040f57806394dd32151461042257600080fd5b806331bcb9d8116101a857806342842e0e1161017757806342842e0e1461037b57806342966c681461038e57806358342c90146103a15780636352211e146103b457806370a08231146103c757600080fd5b806331bcb9d81461032f57806336568abe1461034257806336e67256146103555780633ddfbd8b1461036857600080fd5b806323b872dd116101ef57806323b872dd1461029e578063248a9ca3146102b1578063282c51f3146102e25780632d537851146103095780632f2ff15d1461031c57600080fd5b806301ffc9a71461022157806306fdde0314610249578063081812fc1461025e578063095ea7b314610289575b600080fd5b61023461022f3660046118ee565b61053f565b60405190151581526020015b60405180910390f35b610251610550565b6040516102409190611962565b61027161026c366004611975565b6105e2565b6040516001600160a01b039091168152602001610240565b61029c6102973660046119aa565b61060b565b005b61029c6102ac3660046119d4565b61061a565b6102d46102bf366004611975565b60009081526006602052604090206001015490565b604051908152602001610240565b6102d47f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84881565b610251610317366004611975565b6106aa565b61029c61032a366004611a10565b6107d4565b61025161033d366004611975565b6107f9565b61029c610350366004611a10565b61089d565b600854610271906001600160a01b031681565b610251610376366004611975565b6108d5565b61029c6103893660046119d4565b610976565b61029c61039c366004611975565b610991565b61029c6103af366004611ae9565b6109e5565b6102716103c2366004611975565b610a15565b6102d46103d5366004611b44565b610a20565b6103ed6103e8366004611975565b610a68565b60405161024093929190611b5f565b61023461040a366004611a10565b610c22565b61029c61041d366004611a10565b610c4d565b61029c610430366004611b44565b610cb3565b610251610cee565b6102d4600081565b61029c610453366004611ba2565b610cfd565b61029c610466366004611ae9565b610d08565b61029c610479366004611ae9565b610d3b565b61029c61048c366004611bde565b610d6e565b61025161049f366004611975565b610d85565b600954610271906001600160a01b031681565b6102d47f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61029c6104ec366004611a10565b610e26565b6102d4600080516020611f0883398151915281565b610251610514366004611975565b610e4b565b610234610527366004611c5a565b610fa0565b61029c61053a366004611b44565b610fce565b600061054a82611009565b92915050565b60606000805461055f90611c84565b80601f016020809104026020016040519081016040528092919081815260200182805461058b90611c84565b80156105d85780601f106105ad576101008083540402835291602001916105d8565b820191906000526020600020905b8154815290600101906020018083116105bb57829003601f168201915b5050505050905090565b60006105ed8261102e565b506000828152600460205260409020546001600160a01b031661054a565b610616828233611067565b5050565b6001600160a01b03821661064957604051633250574960e11b8152600060048201526024015b60405180910390fd5b6000610656838333611074565b9050836001600160a01b0316816001600160a01b0316146106a4576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610640565b50505050565b600854604051633de9d8f160e21b8152600481018390526060916000916001600160a01b039091169063f7a763c490602401602060405180830381865afa1580156106f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071d9190611cbe565b600781111561072e5761072e611cdf565b600081815260076020526040902060010180549192509061074e90611c84565b80601f016020809104026020016040519081016040528092919081815260200182805461077a90611c84565b80156107c75780601f1061079c576101008083540402835291602001916107c7565b820191906000526020600020905b8154815290600101906020018083116107aa57829003601f168201915b5050505050915050919050565b6000828152600660205260409020600101546107ef8161116d565b6106a4838361117a565b600854604051633de9d8f160e21b8152600481018390526060916000916001600160a01b039091169063f7a763c490602401602060405180830381865afa158015610848573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086c9190611cbe565b600781111561087d5761087d611cdf565b600081815260076020526040902060020180549192509061074e90611c84565b6001600160a01b03811633146108c65760405163334bd91960e11b815260040160405180910390fd5b6108d0828261120e565b505050565b600854604051633de9d8f160e21b8152600481018390526060916000916001600160a01b039091169063f7a763c490602401602060405180830381865afa158015610924573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109489190611cbe565b600781111561095957610959611cdf565b600081815260076020526040902080549192509061074e90611c84565b6108d083838360405180602001604052806000815250610d6e565b7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a8486109bb8161116d565b816000036109dc5760405163516e361d60e11b815260040160405180910390fd5b6106168261127b565b600080516020611f088339815191526109fd8161116d565b60008381526007602052604090206106a48382611d43565b600061054a8261102e565b60006001600160a01b038216610a4c576040516322718ad960e21b815260006004820152602401610640565b506001600160a01b031660009081526003602052604090205490565b600760205260009081526040902080548190610a8390611c84565b80601f0160208091040260200160405190810160405280929190818152602001828054610aaf90611c84565b8015610afc5780601f10610ad157610100808354040283529160200191610afc565b820191906000526020600020905b815481529060010190602001808311610adf57829003601f168201915b505050505090806001018054610b1190611c84565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3d90611c84565b8015610b8a5780601f10610b5f57610100808354040283529160200191610b8a565b820191906000526020600020905b815481529060010190602001808311610b6d57829003601f168201915b505050505090806002018054610b9f90611c84565b80601f0160208091040260200160405190810160405280929190818152602001828054610bcb90611c84565b8015610c185780601f10610bed57610100808354040283529160200191610c18565b820191906000526020600020905b815481529060010190602001808311610bfb57829003601f168201915b5050505050905083565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610c778161116d565b821580610c8b57506001600160a01b038216155b15610ca95760405163516e361d60e11b815260040160405180910390fd5b6108d082846112b6565b600080516020611f08833981519152610ccb8161116d565b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b60606001805461055f90611c84565b6106163383836112d0565b600080516020611f08833981519152610d208161116d565b60008381526007602052604090206001016106a48382611d43565b600080516020611f08833981519152610d538161116d565b60008381526007602052604090206002016106a48382611d43565b610d7984848461061a565b6106a48484848461136f565b6060610d908261102e565b506009546001600160a01b0316610db557505060408051602081019091526000815290565b60095460405163c87b56dd60e01b8152600481018490526001600160a01b039091169063c87b56dd90602401600060405180830381865afa158015610dfe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261054a9190810190611e03565b600082815260066020526040902060010154610e418161116d565b6106a4838361120e565b600854604051633de9d8f160e21b8152600481018390526060916000916001600160a01b039091169063f7a763c490602401602060405180830381865afa158015610e9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebe9190611cbe565b6007811115610ecf57610ecf611cdf565b600081815260076020526040812080549293509091610eed90611c84565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1990611c84565b8015610f665780601f10610f3b57610100808354040283529160200191610f66565b820191906000526020600020905b815481529060010190602001808311610f4957829003601f168201915b5050505050905080610f7785611498565b604051602001610f88929190611e7a565b60405160208183030381529060405292505050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600080516020611f08833981519152610fe68161116d565b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216637965db0b60e01b148061054a575061054a8261152b565b6000818152600260205260408120546001600160a01b03168061054a57604051637e27328960e01b815260048101849052602401610640565b6108d0838383600161157b565b6000828152600260205260408120546001600160a01b03908116908316156110a1576110a1818486611681565b6001600160a01b038116156110df576110be60008560008061157b565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b0385161561110e576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b61117781336116e5565b50565b60006111868383610c22565b6112065760008381526006602090815260408083206001600160a01b03861684529091529020805460ff191660011790556111be3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161054a565b50600061054a565b600061121a8383610c22565b156112065760008381526006602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161054a565b600061128a6000836000611074565b90506001600160a01b03811661061657604051637e27328960e01b815260048101839052602401610640565b61061682826040518060200160405280600081525061171e565b6001600160a01b03821661130257604051630b61174360e31b81526001600160a01b0383166004820152602401610640565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b156106a457604051630a85bd0160e11b81526001600160a01b0384169063150b7a02906113b1903390889087908790600401611eb7565b6020604051808303816000875af19250505080156113ec575060408051601f3d908101601f191682019092526113e991810190611eea565b60015b611455573d80801561141a576040519150601f19603f3d011682016040523d82523d6000602084013e61141f565b606091505b50805160000361144d57604051633250574960e11b81526001600160a01b0385166004820152602401610640565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b1461149157604051633250574960e11b81526001600160a01b0385166004820152602401610640565b5050505050565b606060006114a583611735565b600101905060008167ffffffffffffffff8111156114c5576114c5611a3c565b6040519080825280601f01601f1916602001820160405280156114ef576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846114f957509392505050565b60006001600160e01b031982166380ac58cd60e01b148061155c57506001600160e01b03198216635b5e139f60e01b145b8061054a57506301ffc9a760e01b6001600160e01b031983161461054a565b808061158f57506001600160a01b03821615155b1561165157600061159f8461102e565b90506001600160a01b038316158015906115cb5750826001600160a01b0316816001600160a01b031614155b80156115de57506115dc8184610fa0565b155b156116075760405163a9fbf51f60e01b81526001600160a01b0384166004820152602401610640565b811561164f5783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b61168c83838361180d565b6108d0576001600160a01b0383166116ba57604051637e27328960e01b815260048101829052602401610640565b60405163177e802f60e01b81526001600160a01b038316600482015260248101829052604401610640565b6116ef8282610c22565b6106165760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610640565b6117288383611873565b6108d0600084848461136f565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106117745772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106117a0576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106117be57662386f26fc10000830492506010015b6305f5e10083106117d6576305f5e100830492506008015b61271083106117ea57612710830492506004015b606483106117fc576064830492506002015b600a831061054a5760010192915050565b60006001600160a01b0383161580159061186b5750826001600160a01b0316846001600160a01b0316148061184757506118478484610fa0565b8061186b57506000828152600460205260409020546001600160a01b038481169116145b949350505050565b6001600160a01b03821661189d57604051633250574960e11b815260006004820152602401610640565b60006118ab83836000611074565b90506001600160a01b038116156108d0576040516339e3563760e11b815260006004820152602401610640565b6001600160e01b03198116811461117757600080fd5b60006020828403121561190057600080fd5b813561190b816118d8565b9392505050565b60005b8381101561192d578181015183820152602001611915565b50506000910152565b6000815180845261194e816020860160208601611912565b601f01601f19169290920160200192915050565b60208152600061190b6020830184611936565b60006020828403121561198757600080fd5b5035919050565b80356001600160a01b03811681146119a557600080fd5b919050565b600080604083850312156119bd57600080fd5b6119c68361198e565b946020939093013593505050565b6000806000606084860312156119e957600080fd5b6119f28461198e565b9250611a006020850161198e565b9150604084013590509250925092565b60008060408385031215611a2357600080fd5b82359150611a336020840161198e565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611a7b57611a7b611a3c565b604052919050565b600067ffffffffffffffff821115611a9d57611a9d611a3c565b50601f01601f191660200190565b6000611abe611ab984611a83565b611a52565b9050828152838383011115611ad257600080fd5b828260208301376000602084830101529392505050565b60008060408385031215611afc57600080fd5b82359150602083013567ffffffffffffffff811115611b1a57600080fd5b8301601f81018513611b2b57600080fd5b611b3a85823560208401611aab565b9150509250929050565b600060208284031215611b5657600080fd5b61190b8261198e565b606081526000611b726060830186611936565b8281036020840152611b848186611936565b90508281036040840152611b988185611936565b9695505050505050565b60008060408385031215611bb557600080fd5b611bbe8361198e565b915060208301358015158114611bd357600080fd5b809150509250929050565b60008060008060808587031215611bf457600080fd5b611bfd8561198e565b9350611c0b6020860161198e565b925060408501359150606085013567ffffffffffffffff811115611c2e57600080fd5b8501601f81018713611c3f57600080fd5b611c4e87823560208401611aab565b91505092959194509250565b60008060408385031215611c6d57600080fd5b611c768361198e565b9150611a336020840161198e565b600181811c90821680611c9857607f821691505b602082108103611cb857634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215611cd057600080fd5b81516008811061190b57600080fd5b634e487b7160e01b600052602160045260246000fd5b601f8211156108d057600081815260208120601f850160051c81016020861015611d1c5750805b601f850160051c820191505b81811015611d3b57828155600101611d28565b505050505050565b815167ffffffffffffffff811115611d5d57611d5d611a3c565b611d7181611d6b8454611c84565b84611cf5565b602080601f831160018114611da65760008415611d8e5750858301515b600019600386901b1c1916600185901b178555611d3b565b600085815260208120601f198616915b82811015611dd557888601518255948401946001909101908401611db6565b5085821015611df35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215611e1557600080fd5b815167ffffffffffffffff811115611e2c57600080fd5b8201601f81018413611e3d57600080fd5b8051611e4b611ab982611a83565b818152856020838501011115611e6057600080fd5b611e71826020830160208601611912565b95945050505050565b60008351611e8c818460208801611912565b61202360f01b9083019081528351611eab816002840160208801611912565b01600201949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611b9890830184611936565b600060208284031215611efc57600080fd5b815161190b816118d856feb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214ea2646970667358221220f439fd1815b246e379e9133efbd9e98c72b92e6e54040bd515833ab3d4540bab64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH6 0x446961626C6F PUSH1 0xD0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x110C939195 PUSH1 0xDA SHL DUP2 MSTORE POP DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH3 0x60 SWAP2 SWAP1 PUSH3 0x4E1 JUMP JUMPDEST POP PUSH1 0x1 PUSH3 0x6F DUP3 DUP3 PUSH3 0x4E1 JUMP JUMPDEST POP PUSH3 0x81 SWAP2 POP PUSH1 0x0 SWAP1 POP CALLER PUSH3 0x389 JUMP JUMPDEST POP PUSH3 0xAE PUSH32 0xB19546DFF01E856FB3F010C267A7B1C60363CF8A4664E21CC89C26224620214E CALLER PUSH3 0x389 JUMP JUMPDEST POP PUSH3 0xDB PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 CALLER PUSH3 0x389 JUMP JUMPDEST POP PUSH3 0x108 PUSH32 0x3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848 CALLER PUSH3 0x389 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH9 0x2120A92120A924A0A7 PUSH1 0xB9 SHL PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x7 SWAP1 MSTORE PUSH32 0xB39221ACE053465EC3453CE2B36430BD138B997ECEA25C1043DA0C366812B828 SWAP1 PUSH3 0x164 SWAP1 DUP3 PUSH3 0x4E1 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xB DUP2 MSTORE PUSH11 0x2722A1A927A6A0A721A2A9 PUSH1 0xA9 SHL PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0x7 SWAP1 MSTORE PUSH32 0xB7C774451310D1BE4108BC180D1B52823CB0EE0274A6C0081BCAF94F115FB96D SWAP1 PUSH3 0x1C2 SWAP1 DUP3 PUSH3 0x4E1 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x7 DUP1 DUP3 MSTORE PUSH7 0x2820A620A224A7 PUSH1 0xC9 SHL PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 PUSH1 0x0 MSTORE MSTORE PUSH32 0x3BE6FD20D5ACFDE5B873B48692CD31F4D3C7E8EE8A813AF4696AF8859E5CA6C6 SWAP1 PUSH3 0x21A SWAP1 DUP3 PUSH3 0x4E1 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH9 0x534F52434552455353 PUSH1 0xB8 SHL PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x4 PUSH1 0x0 MSTORE PUSH1 0x7 SWAP1 MSTORE PUSH32 0xB805995A7EC585A251200611A61D179CFD7FB105E1AB17DC415A7336783786F7 SWAP1 PUSH3 0x276 SWAP1 DUP3 PUSH3 0x4E1 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x6 DUP2 MSTORE PUSH6 0x20A6A0AD27A7 PUSH1 0xD1 SHL PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x5 PUSH1 0x0 MSTORE PUSH1 0x7 SWAP1 MSTORE PUSH32 0xBCDDA56B5D08466EC462CBBE0ADFA57CB0A15FCC8940EF68F702F21B787BC935 SWAP1 PUSH3 0x2CF SWAP1 DUP3 PUSH3 0x4E1 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x8 DUP2 MSTORE PUSH8 0x20A9A9A0A9A9A4A7 PUSH1 0xC1 SHL PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x6 PUSH1 0x0 MSTORE PUSH1 0x7 SWAP1 MSTORE PUSH32 0x55C5B153AB560FCDE54A63B18C7F53D75501706907CEF8767FBDED79AB9997C7 SWAP1 PUSH3 0x32A SWAP1 DUP3 PUSH3 0x4E1 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH5 0x1114955251 PUSH1 0xDA SHL PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x7 PUSH1 0x0 DUP2 SWAP1 MSTORE SWAP1 MSTORE PUSH32 0xB7C49CCEB9F85950584035457A41EBBD8CF93B9B612733AD25AA9731AC43AAD6 SWAP1 PUSH3 0x382 SWAP1 DUP3 PUSH3 0x4E1 JUMP JUMPDEST POP PUSH3 0x5AD JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH3 0x432 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH3 0x3E9 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH3 0x436 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x467 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x488 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x4DC JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x4B7 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x4D8 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x4C3 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x4FD JUMPI PUSH3 0x4FD PUSH3 0x43C JUMP JUMPDEST PUSH3 0x515 DUP2 PUSH3 0x50E DUP5 SLOAD PUSH3 0x452 JUMP JUMPDEST DUP5 PUSH3 0x48E JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x54D JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x534 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x4D8 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x57E JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x55D JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x59D JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x1F5D DUP1 PUSH3 0x5BD PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x21C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x877B79B8 GT PUSH2 0x125 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x4DE JUMPI DUP1 PUSH4 0xE58378BB EQ PUSH2 0x4F1 JUMPI DUP1 PUSH4 0xE725F877 EQ PUSH2 0x506 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x519 JUMPI DUP1 PUSH4 0xF210ACE4 EQ PUSH2 0x52C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x47E JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x491 JUMPI DUP1 PUSH4 0xC8CC5175 EQ PUSH2 0x4A4 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x4B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x435 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x43D JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x445 JUMPI DUP1 PUSH4 0xA41F6179 EQ PUSH2 0x458 JUMPI DUP1 PUSH4 0xAE53A1A1 EQ PUSH2 0x46B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x877B79B8 EQ PUSH2 0x3DA JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x3FC JUMPI DUP1 PUSH4 0x94BF804D EQ PUSH2 0x40F JUMPI DUP1 PUSH4 0x94DD3215 EQ PUSH2 0x422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x31BCB9D8 GT PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x42842E0E GT PUSH2 0x177 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x37B JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x38E JUMPI DUP1 PUSH4 0x58342C90 EQ PUSH2 0x3A1 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x3B4 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x3C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x31BCB9D8 EQ PUSH2 0x32F JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x342 JUMPI DUP1 PUSH4 0x36E67256 EQ PUSH2 0x355 JUMPI DUP1 PUSH4 0x3DDFBD8B EQ PUSH2 0x368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x1EF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x29E JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2B1 JUMPI DUP1 PUSH4 0x282C51F3 EQ PUSH2 0x2E2 JUMPI DUP1 PUSH4 0x2D537851 EQ PUSH2 0x309 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x31C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x289 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x234 PUSH2 0x22F CALLDATASIZE PUSH1 0x4 PUSH2 0x18EE JUMP JUMPDEST PUSH2 0x53F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x251 PUSH2 0x550 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x240 SWAP2 SWAP1 PUSH2 0x1962 JUMP JUMPDEST PUSH2 0x271 PUSH2 0x26C CALLDATASIZE PUSH1 0x4 PUSH2 0x1975 JUMP JUMPDEST PUSH2 0x5E2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x240 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x19AA JUMP JUMPDEST PUSH2 0x60B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29C PUSH2 0x2AC CALLDATASIZE PUSH1 0x4 PUSH2 0x19D4 JUMP JUMPDEST PUSH2 0x61A JUMP JUMPDEST PUSH2 0x2D4 PUSH2 0x2BF CALLDATASIZE PUSH1 0x4 PUSH2 0x1975 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x240 JUMP JUMPDEST PUSH2 0x2D4 PUSH32 0x3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848 DUP2 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x317 CALLDATASIZE PUSH1 0x4 PUSH2 0x1975 JUMP JUMPDEST PUSH2 0x6AA JUMP JUMPDEST PUSH2 0x29C PUSH2 0x32A CALLDATASIZE PUSH1 0x4 PUSH2 0x1A10 JUMP JUMPDEST PUSH2 0x7D4 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x33D CALLDATASIZE PUSH1 0x4 PUSH2 0x1975 JUMP JUMPDEST PUSH2 0x7F9 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x350 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A10 JUMP JUMPDEST PUSH2 0x89D JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x271 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x376 CALLDATASIZE PUSH1 0x4 PUSH2 0x1975 JUMP JUMPDEST PUSH2 0x8D5 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x389 CALLDATASIZE PUSH1 0x4 PUSH2 0x19D4 JUMP JUMPDEST PUSH2 0x976 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x39C CALLDATASIZE PUSH1 0x4 PUSH2 0x1975 JUMP JUMPDEST PUSH2 0x991 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x3AF CALLDATASIZE PUSH1 0x4 PUSH2 0x1AE9 JUMP JUMPDEST PUSH2 0x9E5 JUMP JUMPDEST PUSH2 0x271 PUSH2 0x3C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1975 JUMP JUMPDEST PUSH2 0xA15 JUMP JUMPDEST PUSH2 0x2D4 PUSH2 0x3D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B44 JUMP JUMPDEST PUSH2 0xA20 JUMP JUMPDEST PUSH2 0x3ED PUSH2 0x3E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1975 JUMP JUMPDEST PUSH2 0xA68 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x240 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B5F JUMP JUMPDEST PUSH2 0x234 PUSH2 0x40A CALLDATASIZE PUSH1 0x4 PUSH2 0x1A10 JUMP JUMPDEST PUSH2 0xC22 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x41D CALLDATASIZE PUSH1 0x4 PUSH2 0x1A10 JUMP JUMPDEST PUSH2 0xC4D JUMP JUMPDEST PUSH2 0x29C PUSH2 0x430 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B44 JUMP JUMPDEST PUSH2 0xCB3 JUMP JUMPDEST PUSH2 0x251 PUSH2 0xCEE JUMP JUMPDEST PUSH2 0x2D4 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x453 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BA2 JUMP JUMPDEST PUSH2 0xCFD JUMP JUMPDEST PUSH2 0x29C PUSH2 0x466 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AE9 JUMP JUMPDEST PUSH2 0xD08 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x479 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AE9 JUMP JUMPDEST PUSH2 0xD3B JUMP JUMPDEST PUSH2 0x29C PUSH2 0x48C CALLDATASIZE PUSH1 0x4 PUSH2 0x1BDE JUMP JUMPDEST PUSH2 0xD6E JUMP JUMPDEST PUSH2 0x251 PUSH2 0x49F CALLDATASIZE PUSH1 0x4 PUSH2 0x1975 JUMP JUMPDEST PUSH2 0xD85 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH2 0x271 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x2D4 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x4EC CALLDATASIZE PUSH1 0x4 PUSH2 0x1A10 JUMP JUMPDEST PUSH2 0xE26 JUMP JUMPDEST PUSH2 0x2D4 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x514 CALLDATASIZE PUSH1 0x4 PUSH2 0x1975 JUMP JUMPDEST PUSH2 0xE4B JUMP JUMPDEST PUSH2 0x234 PUSH2 0x527 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C5A JUMP JUMPDEST PUSH2 0xFA0 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x53A CALLDATASIZE PUSH1 0x4 PUSH2 0x1B44 JUMP JUMPDEST PUSH2 0xFCE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54A DUP3 PUSH2 0x1009 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x55F SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x58B SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5D8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5AD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5D8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5BB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5ED DUP3 PUSH2 0x102E JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x54A JUMP JUMPDEST PUSH2 0x616 DUP3 DUP3 CALLER PUSH2 0x1067 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x649 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x656 DUP4 DUP4 CALLER PUSH2 0x1074 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6A4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x64283D7B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x640 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH4 0x3DE9D8F1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xF7A763C4 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6F9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x71D SWAP2 SWAP1 PUSH2 0x1CBE JUMP JUMPDEST PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x72E JUMPI PUSH2 0x72E PUSH2 0x1CDF JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x74E SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x77A SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7C7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x79C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7C7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7AA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x7EF DUP2 PUSH2 0x116D JUMP JUMPDEST PUSH2 0x6A4 DUP4 DUP4 PUSH2 0x117A JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH4 0x3DE9D8F1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xF7A763C4 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x848 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x86C SWAP2 SWAP1 PUSH2 0x1CBE JUMP JUMPDEST PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x87D JUMPI PUSH2 0x87D PUSH2 0x1CDF JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x74E SWAP1 PUSH2 0x1C84 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x8C6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8D0 DUP3 DUP3 PUSH2 0x120E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH4 0x3DE9D8F1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xF7A763C4 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x924 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x948 SWAP2 SWAP1 PUSH2 0x1CBE JUMP JUMPDEST PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x959 JUMPI PUSH2 0x959 PUSH2 0x1CDF JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x74E SWAP1 PUSH2 0x1C84 JUMP JUMPDEST PUSH2 0x8D0 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xD6E JUMP JUMPDEST PUSH32 0x3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848 PUSH2 0x9BB DUP2 PUSH2 0x116D JUMP JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0x9DC JUMPI PUSH1 0x40 MLOAD PUSH4 0x516E361D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x616 DUP3 PUSH2 0x127B JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x9FD DUP2 PUSH2 0x116D JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x6A4 DUP4 DUP3 PUSH2 0x1D43 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54A DUP3 PUSH2 0x102E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xA4C JUMPI PUSH1 0x40 MLOAD PUSH4 0x22718AD9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x640 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP2 SWAP1 PUSH2 0xA83 SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xAAF SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xAFC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xAD1 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xAFC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xADF JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xB11 SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB3D SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB8A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB5F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB8A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB6D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0xB9F SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xBCB SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xC18 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xBED JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xC18 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xBFB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 PUSH2 0xC77 DUP2 PUSH2 0x116D JUMP JUMPDEST DUP3 ISZERO DUP1 PUSH2 0xC8B JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO JUMPDEST ISZERO PUSH2 0xCA9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x516E361D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8D0 DUP3 DUP5 PUSH2 0x12B6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xCCB DUP2 PUSH2 0x116D JUMP JUMPDEST POP PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x55F SWAP1 PUSH2 0x1C84 JUMP JUMPDEST PUSH2 0x616 CALLER DUP4 DUP4 PUSH2 0x12D0 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xD20 DUP2 PUSH2 0x116D JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD PUSH2 0x6A4 DUP4 DUP3 PUSH2 0x1D43 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xD53 DUP2 PUSH2 0x116D JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD PUSH2 0x6A4 DUP4 DUP3 PUSH2 0x1D43 JUMP JUMPDEST PUSH2 0xD79 DUP5 DUP5 DUP5 PUSH2 0x61A JUMP JUMPDEST PUSH2 0x6A4 DUP5 DUP5 DUP5 DUP5 PUSH2 0x136F JUMP JUMPDEST PUSH1 0x60 PUSH2 0xD90 DUP3 PUSH2 0x102E JUMP JUMPDEST POP PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xDB5 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD PUSH4 0xC87B56DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xC87B56DD SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDFE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x54A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1E03 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xE41 DUP2 PUSH2 0x116D JUMP JUMPDEST PUSH2 0x6A4 DUP4 DUP4 PUSH2 0x120E JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH4 0x3DE9D8F1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xF7A763C4 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE9A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEBE SWAP2 SWAP1 PUSH2 0x1CBE JUMP JUMPDEST PUSH1 0x7 DUP2 GT ISZERO PUSH2 0xECF JUMPI PUSH2 0xECF PUSH2 0x1CDF JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH2 0xEED SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF19 SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF66 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF3B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF66 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF49 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP1 PUSH2 0xF77 DUP6 PUSH2 0x1498 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF88 SWAP3 SWAP2 SWAP1 PUSH2 0x1E7A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xFE6 DUP2 PUSH2 0x116D JUMP JUMPDEST POP PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x54A JUMPI POP PUSH2 0x54A DUP3 PUSH2 0x152B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x54A JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x640 JUMP JUMPDEST PUSH2 0x8D0 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x157B JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND ISZERO PUSH2 0x10A1 JUMPI PUSH2 0x10A1 DUP2 DUP5 DUP7 PUSH2 0x1681 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x10DF JUMPI PUSH2 0x10BE PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x157B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO PUSH2 0x110E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP8 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1177 DUP2 CALLER PUSH2 0x16E5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1186 DUP4 DUP4 PUSH2 0xC22 JUMP JUMPDEST PUSH2 0x1206 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x11BE CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x54A JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x54A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x121A DUP4 DUP4 PUSH2 0xC22 JUMP JUMPDEST ISZERO PUSH2 0x1206 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP7 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x54A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x128A PUSH1 0x0 DUP4 PUSH1 0x0 PUSH2 0x1074 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x616 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x640 JUMP JUMPDEST PUSH2 0x616 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x171E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1302 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB611743 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x640 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x6A4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x13B1 SWAP1 CALLER SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1EB7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x13EC JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x13E9 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1EEA JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1455 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x141A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x141F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x144D JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x640 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ PUSH2 0x1491 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x640 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x14A5 DUP4 PUSH2 0x1735 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x14C5 JUMPI PUSH2 0x14C5 PUSH2 0x1A3C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x14EF JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x14F9 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x155C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x54A JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x54A JUMP JUMPDEST DUP1 DUP1 PUSH2 0x158F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1651 JUMPI PUSH1 0x0 PUSH2 0x159F DUP5 PUSH2 0x102E JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x15CB JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x15DE JUMPI POP PUSH2 0x15DC DUP2 DUP5 PUSH2 0xFA0 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1607 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA9FBF51F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x640 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x164F JUMPI DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x168C DUP4 DUP4 DUP4 PUSH2 0x180D JUMP JUMPDEST PUSH2 0x8D0 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x16BA JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x640 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x177E802F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x640 JUMP JUMPDEST PUSH2 0x16EF DUP3 DUP3 PUSH2 0xC22 JUMP JUMPDEST PUSH2 0x616 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x640 JUMP JUMPDEST PUSH2 0x1728 DUP4 DUP4 PUSH2 0x1873 JUMP JUMPDEST PUSH2 0x8D0 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x136F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1774 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x17A0 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x17BE JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x17D6 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x17EA JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x17FC JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x54A JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x186B JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x1847 JUMPI POP PUSH2 0x1847 DUP5 DUP5 PUSH2 0xFA0 JUMP JUMPDEST DUP1 PUSH2 0x186B JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x189D JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x640 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18AB DUP4 DUP4 PUSH1 0x0 PUSH2 0x1074 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x8D0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x39E35637 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x640 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1900 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x190B DUP2 PUSH2 0x18D8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x192D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1915 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x194E DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1912 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x190B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1936 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1987 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x19A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x19BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19C6 DUP4 PUSH2 0x198E JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x19E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19F2 DUP5 PUSH2 0x198E JUMP JUMPDEST SWAP3 POP PUSH2 0x1A00 PUSH1 0x20 DUP6 ADD PUSH2 0x198E JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1A33 PUSH1 0x20 DUP5 ADD PUSH2 0x198E JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1A7B JUMPI PUSH2 0x1A7B PUSH2 0x1A3C JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1A9D JUMPI PUSH2 0x1A9D PUSH2 0x1A3C JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ABE PUSH2 0x1AB9 DUP5 PUSH2 0x1A83 JUMP JUMPDEST PUSH2 0x1A52 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x1AD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1AFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x1B2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B3A DUP6 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1AAB JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x190B DUP3 PUSH2 0x198E JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1B72 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x1936 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1B84 DUP2 DUP7 PUSH2 0x1936 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1B98 DUP2 DUP6 PUSH2 0x1936 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BBE DUP4 PUSH2 0x198E JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1BD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1BF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BFD DUP6 PUSH2 0x198E JUMP JUMPDEST SWAP4 POP PUSH2 0x1C0B PUSH1 0x20 DUP7 ADD PUSH2 0x198E JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x1C3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C4E DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1AAB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C76 DUP4 PUSH2 0x198E JUMP JUMPDEST SWAP2 POP PUSH2 0x1A33 PUSH1 0x20 DUP5 ADD PUSH2 0x198E JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1C98 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1CB8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x8 DUP2 LT PUSH2 0x190B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x8D0 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x1D1C JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1D3B JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1D28 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D5D JUMPI PUSH2 0x1D5D PUSH2 0x1A3C JUMP JUMPDEST PUSH2 0x1D71 DUP2 PUSH2 0x1D6B DUP5 SLOAD PUSH2 0x1C84 JUMP JUMPDEST DUP5 PUSH2 0x1CF5 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x1DA6 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x1D8E JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x1D3B JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1DD5 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x1DB6 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x1DF3 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x1E3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x1E4B PUSH2 0x1AB9 DUP3 PUSH2 0x1A83 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x1E60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E71 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1912 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1E8C DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x1912 JUMP JUMPDEST PUSH2 0x2023 PUSH1 0xF0 SHL SWAP1 DUP4 ADD SWAP1 DUP2 MSTORE DUP4 MLOAD PUSH2 0x1EAB DUP2 PUSH1 0x2 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1912 JUMP JUMPDEST ADD PUSH1 0x2 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1B98 SWAP1 DUP4 ADD DUP5 PUSH2 0x1936 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x190B DUP2 PUSH2 0x18D8 JUMP INVALID 0xB1 SWAP6 CHAINID 0xDF CREATE 0x1E DUP6 PUSH16 0xB3F010C267A7B1C60363CF8A4664E21C 0xC8 SWAP13 0x26 0x22 CHAINID KECCAK256 0x21 0x4E LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL CODECOPY REVERT XOR ISZERO 0xB2 CHAINID 0xE3 PUSH26 0xE9133EFBD9E98C72B92E6E54040BD515833AB3D4540BAB64736F PUSH13 0x63430008140033000000000000 ","sourceMap":"302:5363:21:-:0;;;1001:737;;;;;;;;;;1381:113:9;;;;;;;;;;;;;-1:-1:-1;;;1381:113:9;;;;;;;;;;;;;;;;-1:-1:-1;;;1381:113:9;;;1455:5;1447;:13;;;;;;:::i;:::-;-1:-1:-1;1470:7:9;:17;1480:7;1470;:17;:::i;:::-;-1:-1:-1;1149:42:21::1;::::0;-1:-1:-1;2232:4:6::1;::::0;-1:-1:-1;1180:10:21::1;1149;:42::i;:::-;-1:-1:-1::0;1201:34:21::1;741:23;1224:10;1201;:34::i;:::-;-1:-1:-1::0;1245:35:21::1;808:24;1269:10;1245;:35::i;:::-;-1:-1:-1::0;1290:35:21::1;876:24;1314:10;1290;:35::i;:::-;-1:-1:-1::0;1336:49:21::1;::::0;;;;::::1;::::0;;;::::1;::::0;;-1:-1:-1;;;1336:49:21::1;::::0;;::::1;::::0;;;;1359:1:::1;-1:-1:-1::0;1336:25:21;:22:::1;:25:::0;;;;:49:::1;::::0;:25;:49:::1;:::i;:::-;-1:-1:-1::0;1395:51:21::1;::::0;;;;::::1;::::0;;;::::1;::::0;;-1:-1:-1;;;1395:51:21::1;::::0;;::::1;::::0;;;;1418:1:::1;-1:-1:-1::0;1395:25:21;:22:::1;:25:::0;;;;:51:::1;::::0;:25;:51:::1;:::i;:::-;-1:-1:-1::0;1456:47:21::1;::::0;;;;::::1;::::0;;;::::1;::::0;;;-1:-1:-1;;;1456:47:21::1;::::0;;::::1;::::0;;;;1479:1:::1;-1:-1:-1::0;1456:25:21;;;;:47:::1;::::0;:25;:47:::1;:::i;:::-;-1:-1:-1::0;1513:49:21::1;::::0;;;;::::1;::::0;;;::::1;::::0;;-1:-1:-1;;;1513:49:21::1;::::0;;::::1;::::0;;;;1536:1:::1;-1:-1:-1::0;1513:25:21;:22:::1;:25:::0;;;;:49:::1;::::0;:25;:49:::1;:::i;:::-;-1:-1:-1::0;1572:46:21::1;::::0;;;;::::1;::::0;;;::::1;::::0;;-1:-1:-1;;;1572:46:21::1;::::0;;::::1;::::0;;;;1595:1:::1;-1:-1:-1::0;1572:25:21;:22:::1;:25:::0;;;;:46:::1;::::0;:25;:46:::1;:::i;:::-;-1:-1:-1::0;1628:48:21::1;::::0;;;;::::1;::::0;;;::::1;::::0;;-1:-1:-1;;;1628:48:21::1;::::0;;::::1;::::0;;;;1651:1:::1;-1:-1:-1::0;1628:25:21;:22:::1;:25:::0;;;;:48:::1;::::0;:25;:48:::1;:::i;:::-;-1:-1:-1::0;1686:45:21::1;::::0;;;;::::1;::::0;;;::::1;::::0;;-1:-1:-1;;;1686:45:21::1;::::0;;::::1;::::0;;;;:22:::1;-1:-1:-1::0;1686:25:21;;;;;;;:45:::1;::::0;:25;:45:::1;:::i;:::-;;302:5363:::0;;6179:316:6;6256:4;2954:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;2954:29:6;;;;;;;;;;;;6272:217;;6315:12;;;;:6;:12;;;;;;;;-1:-1:-1;;;;;6315:29:6;;;;;;;;;:36;;-1:-1:-1;;6315:36:6;6347:4;6315:36;;;6397:12;735:10:14;;656:96;6397:12:6;-1:-1:-1;;;;;6370:40:6;6388:7;-1:-1:-1;;;;;6370:40:6;6382:4;6370:40;;;;;;;;;;-1:-1:-1;6431:4:6;6424:11;;6272:217;-1:-1:-1;6473:5:6;6272:217;6179:316;;;;:::o;14:127:26:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:545::-;759:2;754:3;751:11;748:448;;;795:1;820:5;816:2;809:17;865:4;861:2;851:19;935:2;923:10;919:19;916:1;912:27;906:4;902:38;971:4;959:10;956:20;953:47;;;-1:-1:-1;994:4:26;953:47;1049:2;1044:3;1040:12;1037:1;1033:20;1027:4;1023:31;1013:41;;1104:82;1122:2;1115:5;1112:13;1104:82;;;1167:17;;;1148:1;1137:13;1104:82;;;1108:3;;;748:448;657:545;;;:::o;1378:1352::-;1498:10;;-1:-1:-1;;;;;1520:30:26;;1517:56;;;1553:18;;:::i;:::-;1582:97;1672:6;1632:38;1664:4;1658:11;1632:38;:::i;:::-;1626:4;1582:97;:::i;:::-;1734:4;;1798:2;1787:14;;1815:1;1810:663;;;;2517:1;2534:6;2531:89;;;-1:-1:-1;2586:19:26;;;2580:26;2531:89;-1:-1:-1;;1335:1:26;1331:11;;;1327:24;1323:29;1313:40;1359:1;1355:11;;;1310:57;2633:81;;1780:944;;1810:663;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1846:20:26;;;1964:236;1978:7;1975:1;1972:14;1964:236;;;2067:19;;;2061:26;2046:42;;2159:27;;;;2127:1;2115:14;;;;1994:19;;1964:236;;;1968:3;2228:6;2219:7;2216:19;2213:201;;;2289:19;;;2283:26;-1:-1:-1;;2372:1:26;2368:14;;;2384:3;2364:24;2360:37;2356:42;2341:58;2326:74;;2213:201;-1:-1:-1;;;;;2460:1:26;2444:14;;;2440:22;2427:36;;-1:-1:-1;1378:1352:26:o;:::-;302:5363:21;;;;;;"},"deployedBytecode":{"functionDebugData":{"@BURNER_ROLE_4385":{"entryPoint":null,"id":4385,"parameterSlots":0,"returnSlots":0},"@DEFAULT_ADMIN_ROLE_1037":{"entryPoint":null,"id":1037,"parameterSlots":0,"returnSlots":0},"@MINTER_ROLE_4380":{"entryPoint":null,"id":4380,"parameterSlots":0,"returnSlots":0},"@OWNER_ROLE_4375":{"entryPoint":null,"id":4375,"parameterSlots":0,"returnSlots":0},"@_approve_2335":{"entryPoint":4199,"id":2335,"parameterSlots":3,"returnSlots":0},"@_approve_2401":{"entryPoint":5499,"id":2401,"parameterSlots":4,"returnSlots":0},"@_burn_2213":{"entryPoint":4731,"id":2213,"parameterSlots":1,"returnSlots":0},"@_checkAuthorized_1983":{"entryPoint":5761,"id":1983,"parameterSlots":3,"returnSlots":0},"@_checkOnERC721Received_2531":{"entryPoint":4975,"id":2531,"parameterSlots":4,"returnSlots":0},"@_checkRole_1101":{"entryPoint":4461,"id":1101,"parameterSlots":1,"returnSlots":0},"@_checkRole_1122":{"entryPoint":5861,"id":1122,"parameterSlots":2,"returnSlots":0},"@_getApproved_1910":{"entryPoint":null,"id":1910,"parameterSlots":1,"returnSlots":1},"@_grantRole_1264":{"entryPoint":4474,"id":1264,"parameterSlots":2,"returnSlots":1},"@_isAuthorized_1946":{"entryPoint":6157,"id":1946,"parameterSlots":3,"returnSlots":1},"@_mint_2139":{"entryPoint":6259,"id":2139,"parameterSlots":2,"returnSlots":0},"@_msgSender_2754":{"entryPoint":null,"id":2754,"parameterSlots":0,"returnSlots":1},"@_ownerOf_1897":{"entryPoint":null,"id":1897,"parameterSlots":1,"returnSlots":1},"@_requireOwned_2467":{"entryPoint":4142,"id":2467,"parameterSlots":1,"returnSlots":1},"@_revokeRole_1302":{"entryPoint":4622,"id":1302,"parameterSlots":2,"returnSlots":1},"@_safeMint_2154":{"entryPoint":4790,"id":2154,"parameterSlots":2,"returnSlots":0},"@_safeMint_2180":{"entryPoint":5918,"id":2180,"parameterSlots":3,"returnSlots":0},"@_setApprovalForAll_2438":{"entryPoint":4816,"id":2438,"parameterSlots":3,"returnSlots":0},"@_update_2089":{"entryPoint":4212,"id":2089,"parameterSlots":3,"returnSlots":1},"@approve_1744":{"entryPoint":1547,"id":1744,"parameterSlots":2,"returnSlots":0},"@balanceOf_1652":{"entryPoint":2592,"id":1652,"parameterSlots":1,"returnSlots":1},"@burn_4696":{"entryPoint":2449,"id":4696,"parameterSlots":1,"returnSlots":0},"@characterNFTManagerContract_4367":{"entryPoint":null,"id":4367,"parameterSlots":0,"returnSlots":0},"@classIdToCharacterData_4365":{"entryPoint":2664,"id":4365,"parameterSlots":0,"returnSlots":0},"@getApproved_1761":{"entryPoint":1506,"id":1761,"parameterSlots":1,"returnSlots":1},"@getClassDescription_4721":{"entryPoint":2041,"id":4721,"parameterSlots":1,"returnSlots":1},"@getClassImage_4746":{"entryPoint":1706,"id":4746,"parameterSlots":1,"returnSlots":1},"@getClassName_4771":{"entryPoint":2261,"id":4771,"parameterSlots":1,"returnSlots":1},"@getRoleAdmin_1136":{"entryPoint":null,"id":1136,"parameterSlots":1,"returnSlots":1},"@grantRole_1155":{"entryPoint":2004,"id":1155,"parameterSlots":2,"returnSlots":0},"@hasRole_1088":{"entryPoint":3106,"id":1088,"parameterSlots":2,"returnSlots":1},"@isApprovedForAll_1794":{"entryPoint":4000,"id":1794,"parameterSlots":2,"returnSlots":1},"@log10_3937":{"entryPoint":5941,"id":3937,"parameterSlots":1,"returnSlots":1},"@mint_4674":{"entryPoint":3149,"id":4674,"parameterSlots":2,"returnSlots":0},"@name_1674":{"entryPoint":1360,"id":1674,"parameterSlots":0,"returnSlots":1},"@ownerOf_1665":{"entryPoint":2581,"id":1665,"parameterSlots":1,"returnSlots":1},"@renounceRole_1197":{"entryPoint":2205,"id":1197,"parameterSlots":2,"returnSlots":0},"@revokeRole_1174":{"entryPoint":3622,"id":1174,"parameterSlots":2,"returnSlots":0},"@safeTransferFrom_1858":{"entryPoint":2422,"id":1858,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_1884":{"entryPoint":3438,"id":1884,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_1777":{"entryPoint":3325,"id":1777,"parameterSlots":2,"returnSlots":0},"@setCharacterNFTManager_4500":{"entryPoint":3251,"id":4500,"parameterSlots":1,"returnSlots":0},"@setTokenUriContract_4514":{"entryPoint":4046,"id":4514,"parameterSlots":1,"returnSlots":0},"@supportsInterface_1070":{"entryPoint":4105,"id":1070,"parameterSlots":1,"returnSlots":1},"@supportsInterface_1624":{"entryPoint":5419,"id":1624,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3050":{"entryPoint":null,"id":3050,"parameterSlots":1,"returnSlots":1},"@supportsInterface_4486":{"entryPoint":1343,"id":4486,"parameterSlots":1,"returnSlots":1},"@symbol_1683":{"entryPoint":3310,"id":1683,"parameterSlots":0,"returnSlots":1},"@toString_2840":{"entryPoint":5272,"id":2840,"parameterSlots":1,"returnSlots":1},"@tokenName_4554":{"entryPoint":3659,"id":4554,"parameterSlots":1,"returnSlots":1},"@tokenURI_4585":{"entryPoint":3461,"id":4585,"parameterSlots":1,"returnSlots":1},"@tokenUriContract_4369":{"entryPoint":null,"id":4369,"parameterSlots":0,"returnSlots":0},"@transferFrom_1840":{"entryPoint":1562,"id":1840,"parameterSlots":3,"returnSlots":0},"@updateClassDescriptions_4642":{"entryPoint":3387,"id":4642,"parameterSlots":2,"returnSlots":0},"@updateClassImages_4623":{"entryPoint":3336,"id":4623,"parameterSlots":2,"returnSlots":0},"@updateClassNames_4604":{"entryPoint":2533,"id":4604,"parameterSlots":2,"returnSlots":0},"abi_decode_address":{"entryPoint":6542,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_available_length_string":{"entryPoint":6827,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":6980,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":7258,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":6612,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":7134,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":7074,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":6570,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":6672,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":6382,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":7914,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_enum$_CharacterClass_$4788_fromMemory":{"entryPoint":7358,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr_fromMemory":{"entryPoint":7683,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":6517,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_string_memory_ptr":{"entryPoint":6889,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_string":{"entryPoint":6454,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_21af77cd140717e5867fa5acefcf2fc51f566448915c6d7fd3ac9763b6517a12_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7802,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":7863,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6498,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7007,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":6738,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_string":{"entryPoint":6787,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":7413,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":7491,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":6418,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":7300,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":7391,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6716,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":6360,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:13200:26","statements":[{"nodeType":"YulBlock","src":"6:3:26","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:87:26","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:26"},"nodeType":"YulFunctionCall","src":"125:12:26"},"nodeType":"YulExpressionStatement","src":"125:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"108:10:26","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"99:3:26"},"nodeType":"YulFunctionCall","src":"99:20:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:26"},"nodeType":"YulFunctionCall","src":"88:32:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:26"},"nodeType":"YulFunctionCall","src":"78:43:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:26"},"nodeType":"YulFunctionCall","src":"71:51:26"},"nodeType":"YulIf","src":"68:71:26"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:26","type":""}],"src":"14:131:26"},{"body":{"nodeType":"YulBlock","src":"219:176:26","statements":[{"body":{"nodeType":"YulBlock","src":"265:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"274:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"277:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"267:6:26"},"nodeType":"YulFunctionCall","src":"267:12:26"},"nodeType":"YulExpressionStatement","src":"267:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"240:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"249:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"236:3:26"},"nodeType":"YulFunctionCall","src":"236:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"261:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"232:3:26"},"nodeType":"YulFunctionCall","src":"232:32:26"},"nodeType":"YulIf","src":"229:52:26"},{"nodeType":"YulVariableDeclaration","src":"290:36:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"316:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"303:12:26"},"nodeType":"YulFunctionCall","src":"303:23:26"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"294:5:26","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"359:5:26"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"335:23:26"},"nodeType":"YulFunctionCall","src":"335:30:26"},"nodeType":"YulExpressionStatement","src":"335:30:26"},{"nodeType":"YulAssignment","src":"374:15:26","value":{"name":"value","nodeType":"YulIdentifier","src":"384:5:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"374:6:26"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"185:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"196:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"208:6:26","type":""}],"src":"150:245:26"},{"body":{"nodeType":"YulBlock","src":"495:92:26","statements":[{"nodeType":"YulAssignment","src":"505:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"517:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"528:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"513:3:26"},"nodeType":"YulFunctionCall","src":"513:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"505:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"547:9:26"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"572:6:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"565:6:26"},"nodeType":"YulFunctionCall","src":"565:14:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"558:6:26"},"nodeType":"YulFunctionCall","src":"558:22:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"540:6:26"},"nodeType":"YulFunctionCall","src":"540:41:26"},"nodeType":"YulExpressionStatement","src":"540:41:26"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"464:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"475:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"486:4:26","type":""}],"src":"400:187:26"},{"body":{"nodeType":"YulBlock","src":"658:184:26","statements":[{"nodeType":"YulVariableDeclaration","src":"668:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"677:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"672:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"737:63:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"762:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"767:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"758:3:26"},"nodeType":"YulFunctionCall","src":"758:11:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"781:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"786:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:26"},"nodeType":"YulFunctionCall","src":"777:11:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"771:5:26"},"nodeType":"YulFunctionCall","src":"771:18:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"751:6:26"},"nodeType":"YulFunctionCall","src":"751:39:26"},"nodeType":"YulExpressionStatement","src":"751:39:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"698:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"701:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"695:2:26"},"nodeType":"YulFunctionCall","src":"695:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"709:19:26","statements":[{"nodeType":"YulAssignment","src":"711:15:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"720:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"723:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"716:3:26"},"nodeType":"YulFunctionCall","src":"716:10:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"711:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"691:3:26","statements":[]},"src":"687:113:26"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"820:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"825:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"816:3:26"},"nodeType":"YulFunctionCall","src":"816:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"834:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"809:6:26"},"nodeType":"YulFunctionCall","src":"809:27:26"},"nodeType":"YulExpressionStatement","src":"809:27:26"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"636:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"641:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"646:6:26","type":""}],"src":"592:250:26"},{"body":{"nodeType":"YulBlock","src":"897:221:26","statements":[{"nodeType":"YulVariableDeclaration","src":"907:26:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"927:5:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"921:5:26"},"nodeType":"YulFunctionCall","src":"921:12:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"911:6:26","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"949:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"954:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"942:6:26"},"nodeType":"YulFunctionCall","src":"942:19:26"},"nodeType":"YulExpressionStatement","src":"942:19:26"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1009:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"1016:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1005:3:26"},"nodeType":"YulFunctionCall","src":"1005:16:26"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1027:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"1032:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1023:3:26"},"nodeType":"YulFunctionCall","src":"1023:14:26"},{"name":"length","nodeType":"YulIdentifier","src":"1039:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"970:34:26"},"nodeType":"YulFunctionCall","src":"970:76:26"},"nodeType":"YulExpressionStatement","src":"970:76:26"},{"nodeType":"YulAssignment","src":"1055:57:26","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1070:3:26"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1083:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"1091:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1079:3:26"},"nodeType":"YulFunctionCall","src":"1079:15:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1100:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1096:3:26"},"nodeType":"YulFunctionCall","src":"1096:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1075:3:26"},"nodeType":"YulFunctionCall","src":"1075:29:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1066:3:26"},"nodeType":"YulFunctionCall","src":"1066:39:26"},{"kind":"number","nodeType":"YulLiteral","src":"1107:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1062:3:26"},"nodeType":"YulFunctionCall","src":"1062:50:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1055:3:26"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"874:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"881:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"889:3:26","type":""}],"src":"847:271:26"},{"body":{"nodeType":"YulBlock","src":"1244:99:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1261:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1272:2:26","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1254:6:26"},"nodeType":"YulFunctionCall","src":"1254:21:26"},"nodeType":"YulExpressionStatement","src":"1254:21:26"},{"nodeType":"YulAssignment","src":"1284:53:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1310:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1322:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1333:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1318:3:26"},"nodeType":"YulFunctionCall","src":"1318:18:26"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1292:17:26"},"nodeType":"YulFunctionCall","src":"1292:45:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1284:4:26"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1213:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1224:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1235:4:26","type":""}],"src":"1123:220:26"},{"body":{"nodeType":"YulBlock","src":"1418:110:26","statements":[{"body":{"nodeType":"YulBlock","src":"1464:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1473:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1476:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1466:6:26"},"nodeType":"YulFunctionCall","src":"1466:12:26"},"nodeType":"YulExpressionStatement","src":"1466:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1439:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"1448:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1435:3:26"},"nodeType":"YulFunctionCall","src":"1435:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"1460:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1431:3:26"},"nodeType":"YulFunctionCall","src":"1431:32:26"},"nodeType":"YulIf","src":"1428:52:26"},{"nodeType":"YulAssignment","src":"1489:33:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1512:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1499:12:26"},"nodeType":"YulFunctionCall","src":"1499:23:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1489:6:26"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1384:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1395:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1407:6:26","type":""}],"src":"1348:180:26"},{"body":{"nodeType":"YulBlock","src":"1634:102:26","statements":[{"nodeType":"YulAssignment","src":"1644:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1656:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1667:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1652:3:26"},"nodeType":"YulFunctionCall","src":"1652:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1644:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1686:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1701:6:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1717:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1722:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1713:3:26"},"nodeType":"YulFunctionCall","src":"1713:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"1726:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1709:3:26"},"nodeType":"YulFunctionCall","src":"1709:19:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1697:3:26"},"nodeType":"YulFunctionCall","src":"1697:32:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1679:6:26"},"nodeType":"YulFunctionCall","src":"1679:51:26"},"nodeType":"YulExpressionStatement","src":"1679:51:26"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1603:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1614:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1625:4:26","type":""}],"src":"1533:203:26"},{"body":{"nodeType":"YulBlock","src":"1790:124:26","statements":[{"nodeType":"YulAssignment","src":"1800:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1822:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1809:12:26"},"nodeType":"YulFunctionCall","src":"1809:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1800:5:26"}]},{"body":{"nodeType":"YulBlock","src":"1892:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1901:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1904:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1894:6:26"},"nodeType":"YulFunctionCall","src":"1894:12:26"},"nodeType":"YulExpressionStatement","src":"1894:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1851:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1862:5:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1877:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1882:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1873:3:26"},"nodeType":"YulFunctionCall","src":"1873:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"1886:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1869:3:26"},"nodeType":"YulFunctionCall","src":"1869:19:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1858:3:26"},"nodeType":"YulFunctionCall","src":"1858:31:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1848:2:26"},"nodeType":"YulFunctionCall","src":"1848:42:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1841:6:26"},"nodeType":"YulFunctionCall","src":"1841:50:26"},"nodeType":"YulIf","src":"1838:70:26"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1769:6:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1780:5:26","type":""}],"src":"1741:173:26"},{"body":{"nodeType":"YulBlock","src":"2006:167:26","statements":[{"body":{"nodeType":"YulBlock","src":"2052:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2061:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2064:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2054:6:26"},"nodeType":"YulFunctionCall","src":"2054:12:26"},"nodeType":"YulExpressionStatement","src":"2054:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2027:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2036:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2023:3:26"},"nodeType":"YulFunctionCall","src":"2023:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"2048:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2019:3:26"},"nodeType":"YulFunctionCall","src":"2019:32:26"},"nodeType":"YulIf","src":"2016:52:26"},{"nodeType":"YulAssignment","src":"2077:39:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2106:9:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2087:18:26"},"nodeType":"YulFunctionCall","src":"2087:29:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2077:6:26"}]},{"nodeType":"YulAssignment","src":"2125:42:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2152:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2163:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2148:3:26"},"nodeType":"YulFunctionCall","src":"2148:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2135:12:26"},"nodeType":"YulFunctionCall","src":"2135:32:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2125:6:26"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1964:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1975:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1987:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1995:6:26","type":""}],"src":"1919:254:26"},{"body":{"nodeType":"YulBlock","src":"2282:224:26","statements":[{"body":{"nodeType":"YulBlock","src":"2328:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2337:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2340:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2330:6:26"},"nodeType":"YulFunctionCall","src":"2330:12:26"},"nodeType":"YulExpressionStatement","src":"2330:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2303:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2312:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2299:3:26"},"nodeType":"YulFunctionCall","src":"2299:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"2324:2:26","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2295:3:26"},"nodeType":"YulFunctionCall","src":"2295:32:26"},"nodeType":"YulIf","src":"2292:52:26"},{"nodeType":"YulAssignment","src":"2353:39:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2382:9:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2363:18:26"},"nodeType":"YulFunctionCall","src":"2363:29:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2353:6:26"}]},{"nodeType":"YulAssignment","src":"2401:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2434:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2445:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2430:3:26"},"nodeType":"YulFunctionCall","src":"2430:18:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2411:18:26"},"nodeType":"YulFunctionCall","src":"2411:38:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2401:6:26"}]},{"nodeType":"YulAssignment","src":"2458:42:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2485:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2496:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2481:3:26"},"nodeType":"YulFunctionCall","src":"2481:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2468:12:26"},"nodeType":"YulFunctionCall","src":"2468:32:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2458:6:26"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2232:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2243:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2255:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2263:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2271:6:26","type":""}],"src":"2178:328:26"},{"body":{"nodeType":"YulBlock","src":"2581:110:26","statements":[{"body":{"nodeType":"YulBlock","src":"2627:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2636:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2639:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2629:6:26"},"nodeType":"YulFunctionCall","src":"2629:12:26"},"nodeType":"YulExpressionStatement","src":"2629:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2602:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2611:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2598:3:26"},"nodeType":"YulFunctionCall","src":"2598:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"2623:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2594:3:26"},"nodeType":"YulFunctionCall","src":"2594:32:26"},"nodeType":"YulIf","src":"2591:52:26"},{"nodeType":"YulAssignment","src":"2652:33:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2675:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2662:12:26"},"nodeType":"YulFunctionCall","src":"2662:23:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2652:6:26"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2547:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2558:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2570:6:26","type":""}],"src":"2511:180:26"},{"body":{"nodeType":"YulBlock","src":"2797:76:26","statements":[{"nodeType":"YulAssignment","src":"2807:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2819:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2830:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2815:3:26"},"nodeType":"YulFunctionCall","src":"2815:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2807:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2849:9:26"},{"name":"value0","nodeType":"YulIdentifier","src":"2860:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2842:6:26"},"nodeType":"YulFunctionCall","src":"2842:25:26"},"nodeType":"YulExpressionStatement","src":"2842:25:26"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2766:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2777:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2788:4:26","type":""}],"src":"2696:177:26"},{"body":{"nodeType":"YulBlock","src":"2965:167:26","statements":[{"body":{"nodeType":"YulBlock","src":"3011:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3020:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3023:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3013:6:26"},"nodeType":"YulFunctionCall","src":"3013:12:26"},"nodeType":"YulExpressionStatement","src":"3013:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2986:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2995:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2982:3:26"},"nodeType":"YulFunctionCall","src":"2982:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"3007:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2978:3:26"},"nodeType":"YulFunctionCall","src":"2978:32:26"},"nodeType":"YulIf","src":"2975:52:26"},{"nodeType":"YulAssignment","src":"3036:33:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3059:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3046:12:26"},"nodeType":"YulFunctionCall","src":"3046:23:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3036:6:26"}]},{"nodeType":"YulAssignment","src":"3078:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3111:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3122:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3107:3:26"},"nodeType":"YulFunctionCall","src":"3107:18:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3088:18:26"},"nodeType":"YulFunctionCall","src":"3088:38:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3078:6:26"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2923:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2934:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2946:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2954:6:26","type":""}],"src":"2878:254:26"},{"body":{"nodeType":"YulBlock","src":"3169:95:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3186:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3193:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3198:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3189:3:26"},"nodeType":"YulFunctionCall","src":"3189:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3179:6:26"},"nodeType":"YulFunctionCall","src":"3179:31:26"},"nodeType":"YulExpressionStatement","src":"3179:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3226:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3229:4:26","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3219:6:26"},"nodeType":"YulFunctionCall","src":"3219:15:26"},"nodeType":"YulExpressionStatement","src":"3219:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3250:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3253:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3243:6:26"},"nodeType":"YulFunctionCall","src":"3243:15:26"},"nodeType":"YulExpressionStatement","src":"3243:15:26"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3137:127:26"},{"body":{"nodeType":"YulBlock","src":"3314:230:26","statements":[{"nodeType":"YulAssignment","src":"3324:19:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3340:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3334:5:26"},"nodeType":"YulFunctionCall","src":"3334:9:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3324:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"3352:58:26","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3374:6:26"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"3390:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"3396:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3386:3:26"},"nodeType":"YulFunctionCall","src":"3386:13:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3405:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3401:3:26"},"nodeType":"YulFunctionCall","src":"3401:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3382:3:26"},"nodeType":"YulFunctionCall","src":"3382:27:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3370:3:26"},"nodeType":"YulFunctionCall","src":"3370:40:26"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"3356:10:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3485:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3487:16:26"},"nodeType":"YulFunctionCall","src":"3487:18:26"},"nodeType":"YulExpressionStatement","src":"3487:18:26"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3428:10:26"},{"kind":"number","nodeType":"YulLiteral","src":"3440:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3425:2:26"},"nodeType":"YulFunctionCall","src":"3425:34:26"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3464:10:26"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3476:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3461:2:26"},"nodeType":"YulFunctionCall","src":"3461:22:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3422:2:26"},"nodeType":"YulFunctionCall","src":"3422:62:26"},"nodeType":"YulIf","src":"3419:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3523:2:26","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3527:10:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3516:6:26"},"nodeType":"YulFunctionCall","src":"3516:22:26"},"nodeType":"YulExpressionStatement","src":"3516:22:26"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"3294:4:26","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3303:6:26","type":""}],"src":"3269:275:26"},{"body":{"nodeType":"YulBlock","src":"3607:129:26","statements":[{"body":{"nodeType":"YulBlock","src":"3651:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3653:16:26"},"nodeType":"YulFunctionCall","src":"3653:18:26"},"nodeType":"YulExpressionStatement","src":"3653:18:26"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3623:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3631:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3620:2:26"},"nodeType":"YulFunctionCall","src":"3620:30:26"},"nodeType":"YulIf","src":"3617:56:26"},{"nodeType":"YulAssignment","src":"3682:48:26","value":{"arguments":[{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3702:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3710:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3698:3:26"},"nodeType":"YulFunctionCall","src":"3698:15:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3719:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3715:3:26"},"nodeType":"YulFunctionCall","src":"3715:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3694:3:26"},"nodeType":"YulFunctionCall","src":"3694:29:26"},{"kind":"number","nodeType":"YulLiteral","src":"3725:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3690:3:26"},"nodeType":"YulFunctionCall","src":"3690:40:26"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"3682:4:26"}]}]},"name":"array_allocation_size_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"3587:6:26","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"3598:4:26","type":""}],"src":"3549:187:26"},{"body":{"nodeType":"YulBlock","src":"3816:263:26","statements":[{"nodeType":"YulAssignment","src":"3826:62:26","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3880:6:26"}],"functionName":{"name":"array_allocation_size_string","nodeType":"YulIdentifier","src":"3851:28:26"},"nodeType":"YulFunctionCall","src":"3851:36:26"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3835:15:26"},"nodeType":"YulFunctionCall","src":"3835:53:26"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3826:5:26"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3904:5:26"},{"name":"length","nodeType":"YulIdentifier","src":"3911:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3897:6:26"},"nodeType":"YulFunctionCall","src":"3897:21:26"},"nodeType":"YulExpressionStatement","src":"3897:21:26"},{"body":{"nodeType":"YulBlock","src":"3956:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3965:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3968:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3958:6:26"},"nodeType":"YulFunctionCall","src":"3958:12:26"},"nodeType":"YulExpressionStatement","src":"3958:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3937:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"3942:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3933:3:26"},"nodeType":"YulFunctionCall","src":"3933:16:26"},{"name":"end","nodeType":"YulIdentifier","src":"3951:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3930:2:26"},"nodeType":"YulFunctionCall","src":"3930:25:26"},"nodeType":"YulIf","src":"3927:45:26"},{"expression":{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3998:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"4005:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3994:3:26"},"nodeType":"YulFunctionCall","src":"3994:16:26"},{"name":"src","nodeType":"YulIdentifier","src":"4012:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"4017:6:26"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3981:12:26"},"nodeType":"YulFunctionCall","src":"3981:43:26"},"nodeType":"YulExpressionStatement","src":"3981:43:26"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"4048:5:26"},{"name":"length","nodeType":"YulIdentifier","src":"4055:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4044:3:26"},"nodeType":"YulFunctionCall","src":"4044:18:26"},{"kind":"number","nodeType":"YulLiteral","src":"4064:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4040:3:26"},"nodeType":"YulFunctionCall","src":"4040:29:26"},{"kind":"number","nodeType":"YulLiteral","src":"4071:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4033:6:26"},"nodeType":"YulFunctionCall","src":"4033:40:26"},"nodeType":"YulExpressionStatement","src":"4033:40:26"}]},"name":"abi_decode_available_length_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"3785:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"3790:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"3798:3:26","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3806:5:26","type":""}],"src":"3741:338:26"},{"body":{"nodeType":"YulBlock","src":"4181:422:26","statements":[{"body":{"nodeType":"YulBlock","src":"4227:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4236:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4239:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4229:6:26"},"nodeType":"YulFunctionCall","src":"4229:12:26"},"nodeType":"YulExpressionStatement","src":"4229:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4202:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"4211:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4198:3:26"},"nodeType":"YulFunctionCall","src":"4198:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"4223:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4194:3:26"},"nodeType":"YulFunctionCall","src":"4194:32:26"},"nodeType":"YulIf","src":"4191:52:26"},{"nodeType":"YulAssignment","src":"4252:33:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4275:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4262:12:26"},"nodeType":"YulFunctionCall","src":"4262:23:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4252:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"4294:46:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4325:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4336:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4321:3:26"},"nodeType":"YulFunctionCall","src":"4321:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4308:12:26"},"nodeType":"YulFunctionCall","src":"4308:32:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4298:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"4383:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4392:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4395:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4385:6:26"},"nodeType":"YulFunctionCall","src":"4385:12:26"},"nodeType":"YulExpressionStatement","src":"4385:12:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4355:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"4363:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4352:2:26"},"nodeType":"YulFunctionCall","src":"4352:30:26"},"nodeType":"YulIf","src":"4349:50:26"},{"nodeType":"YulVariableDeclaration","src":"4408:32:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4422:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"4433:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4418:3:26"},"nodeType":"YulFunctionCall","src":"4418:22:26"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4412:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"4488:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4497:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4500:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4490:6:26"},"nodeType":"YulFunctionCall","src":"4490:12:26"},"nodeType":"YulExpressionStatement","src":"4490:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4467:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"4471:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4463:3:26"},"nodeType":"YulFunctionCall","src":"4463:13:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4478:7:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4459:3:26"},"nodeType":"YulFunctionCall","src":"4459:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4452:6:26"},"nodeType":"YulFunctionCall","src":"4452:35:26"},"nodeType":"YulIf","src":"4449:55:26"},{"nodeType":"YulAssignment","src":"4513:84:26","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4562:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"4566:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4558:3:26"},"nodeType":"YulFunctionCall","src":"4558:11:26"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4584:2:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4571:12:26"},"nodeType":"YulFunctionCall","src":"4571:16:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4589:7:26"}],"functionName":{"name":"abi_decode_available_length_string","nodeType":"YulIdentifier","src":"4523:34:26"},"nodeType":"YulFunctionCall","src":"4523:74:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4513:6:26"}]}]},"name":"abi_decode_tuple_t_uint256t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4139:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4150:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4162:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4170:6:26","type":""}],"src":"4084:519:26"},{"body":{"nodeType":"YulBlock","src":"4678:116:26","statements":[{"body":{"nodeType":"YulBlock","src":"4724:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4733:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4736:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4726:6:26"},"nodeType":"YulFunctionCall","src":"4726:12:26"},"nodeType":"YulExpressionStatement","src":"4726:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4699:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"4708:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4695:3:26"},"nodeType":"YulFunctionCall","src":"4695:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"4720:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4691:3:26"},"nodeType":"YulFunctionCall","src":"4691:32:26"},"nodeType":"YulIf","src":"4688:52:26"},{"nodeType":"YulAssignment","src":"4749:39:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4778:9:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4759:18:26"},"nodeType":"YulFunctionCall","src":"4759:29:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4749:6:26"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4644:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4655:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4667:6:26","type":""}],"src":"4608:186:26"},{"body":{"nodeType":"YulBlock","src":"4900:76:26","statements":[{"nodeType":"YulAssignment","src":"4910:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4922:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4933:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4918:3:26"},"nodeType":"YulFunctionCall","src":"4918:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4910:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4952:9:26"},{"name":"value0","nodeType":"YulIdentifier","src":"4963:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4945:6:26"},"nodeType":"YulFunctionCall","src":"4945:25:26"},"nodeType":"YulExpressionStatement","src":"4945:25:26"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4869:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4880:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4891:4:26","type":""}],"src":"4799:177:26"},{"body":{"nodeType":"YulBlock","src":"5198:329:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5215:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"5226:2:26","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5208:6:26"},"nodeType":"YulFunctionCall","src":"5208:21:26"},"nodeType":"YulExpressionStatement","src":"5208:21:26"},{"nodeType":"YulVariableDeclaration","src":"5238:59:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5270:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5282:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"5293:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5278:3:26"},"nodeType":"YulFunctionCall","src":"5278:18:26"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"5252:17:26"},"nodeType":"YulFunctionCall","src":"5252:45:26"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"5242:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5317:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"5328:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5313:3:26"},"nodeType":"YulFunctionCall","src":"5313:18:26"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"5337:6:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"5345:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5333:3:26"},"nodeType":"YulFunctionCall","src":"5333:22:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5306:6:26"},"nodeType":"YulFunctionCall","src":"5306:50:26"},"nodeType":"YulExpressionStatement","src":"5306:50:26"},{"nodeType":"YulVariableDeclaration","src":"5365:47:26","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5397:6:26"},{"name":"tail_1","nodeType":"YulIdentifier","src":"5405:6:26"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"5379:17:26"},"nodeType":"YulFunctionCall","src":"5379:33:26"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"5369:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5432:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"5443:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5428:3:26"},"nodeType":"YulFunctionCall","src":"5428:18:26"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"5452:6:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"5460:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5448:3:26"},"nodeType":"YulFunctionCall","src":"5448:22:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5421:6:26"},"nodeType":"YulFunctionCall","src":"5421:50:26"},"nodeType":"YulExpressionStatement","src":"5421:50:26"},{"nodeType":"YulAssignment","src":"5480:41:26","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"5506:6:26"},{"name":"tail_2","nodeType":"YulIdentifier","src":"5514:6:26"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"5488:17:26"},"nodeType":"YulFunctionCall","src":"5488:33:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5480:4:26"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5151:9:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5162:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5170:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5178:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5189:4:26","type":""}],"src":"4981:546:26"},{"body":{"nodeType":"YulBlock","src":"5619:167:26","statements":[{"body":{"nodeType":"YulBlock","src":"5665:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5674:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5677:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5667:6:26"},"nodeType":"YulFunctionCall","src":"5667:12:26"},"nodeType":"YulExpressionStatement","src":"5667:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5640:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"5649:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5636:3:26"},"nodeType":"YulFunctionCall","src":"5636:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"5661:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5632:3:26"},"nodeType":"YulFunctionCall","src":"5632:32:26"},"nodeType":"YulIf","src":"5629:52:26"},{"nodeType":"YulAssignment","src":"5690:33:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5713:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5700:12:26"},"nodeType":"YulFunctionCall","src":"5700:23:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5690:6:26"}]},{"nodeType":"YulAssignment","src":"5732:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5765:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"5776:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5761:3:26"},"nodeType":"YulFunctionCall","src":"5761:18:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5742:18:26"},"nodeType":"YulFunctionCall","src":"5742:38:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5732:6:26"}]}]},"name":"abi_decode_tuple_t_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5577:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5588:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5600:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5608:6:26","type":""}],"src":"5532:254:26"},{"body":{"nodeType":"YulBlock","src":"5875:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"5921:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5930:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5933:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5923:6:26"},"nodeType":"YulFunctionCall","src":"5923:12:26"},"nodeType":"YulExpressionStatement","src":"5923:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5896:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"5905:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5892:3:26"},"nodeType":"YulFunctionCall","src":"5892:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"5917:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5888:3:26"},"nodeType":"YulFunctionCall","src":"5888:32:26"},"nodeType":"YulIf","src":"5885:52:26"},{"nodeType":"YulAssignment","src":"5946:39:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5975:9:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5956:18:26"},"nodeType":"YulFunctionCall","src":"5956:29:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5946:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"5994:45:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6024:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"6035:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6020:3:26"},"nodeType":"YulFunctionCall","src":"6020:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6007:12:26"},"nodeType":"YulFunctionCall","src":"6007:32:26"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5998:5:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"6092:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6101:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6104:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6094:6:26"},"nodeType":"YulFunctionCall","src":"6094:12:26"},"nodeType":"YulExpressionStatement","src":"6094:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6061:5:26"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6082:5:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6075:6:26"},"nodeType":"YulFunctionCall","src":"6075:13:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6068:6:26"},"nodeType":"YulFunctionCall","src":"6068:21:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6058:2:26"},"nodeType":"YulFunctionCall","src":"6058:32:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6051:6:26"},"nodeType":"YulFunctionCall","src":"6051:40:26"},"nodeType":"YulIf","src":"6048:60:26"},{"nodeType":"YulAssignment","src":"6117:15:26","value":{"name":"value","nodeType":"YulIdentifier","src":"6127:5:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6117:6:26"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5833:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5844:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5856:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5864:6:26","type":""}],"src":"5791:347:26"},{"body":{"nodeType":"YulBlock","src":"6273:537:26","statements":[{"body":{"nodeType":"YulBlock","src":"6320:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6329:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6332:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6322:6:26"},"nodeType":"YulFunctionCall","src":"6322:12:26"},"nodeType":"YulExpressionStatement","src":"6322:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6294:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"6303:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6290:3:26"},"nodeType":"YulFunctionCall","src":"6290:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"6315:3:26","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6286:3:26"},"nodeType":"YulFunctionCall","src":"6286:33:26"},"nodeType":"YulIf","src":"6283:53:26"},{"nodeType":"YulAssignment","src":"6345:39:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6374:9:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6355:18:26"},"nodeType":"YulFunctionCall","src":"6355:29:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6345:6:26"}]},{"nodeType":"YulAssignment","src":"6393:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6426:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"6437:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6422:3:26"},"nodeType":"YulFunctionCall","src":"6422:18:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6403:18:26"},"nodeType":"YulFunctionCall","src":"6403:38:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6393:6:26"}]},{"nodeType":"YulAssignment","src":"6450:42:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6477:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"6488:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6473:3:26"},"nodeType":"YulFunctionCall","src":"6473:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6460:12:26"},"nodeType":"YulFunctionCall","src":"6460:32:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6450:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"6501:46:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6532:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"6543:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6528:3:26"},"nodeType":"YulFunctionCall","src":"6528:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6515:12:26"},"nodeType":"YulFunctionCall","src":"6515:32:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6505:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"6590:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6599:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6602:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6592:6:26"},"nodeType":"YulFunctionCall","src":"6592:12:26"},"nodeType":"YulExpressionStatement","src":"6592:12:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6562:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"6570:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6559:2:26"},"nodeType":"YulFunctionCall","src":"6559:30:26"},"nodeType":"YulIf","src":"6556:50:26"},{"nodeType":"YulVariableDeclaration","src":"6615:32:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6629:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"6640:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6625:3:26"},"nodeType":"YulFunctionCall","src":"6625:22:26"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6619:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"6695:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6704:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6707:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6697:6:26"},"nodeType":"YulFunctionCall","src":"6697:12:26"},"nodeType":"YulExpressionStatement","src":"6697:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"6674:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"6678:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6670:3:26"},"nodeType":"YulFunctionCall","src":"6670:13:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6685:7:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6666:3:26"},"nodeType":"YulFunctionCall","src":"6666:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6659:6:26"},"nodeType":"YulFunctionCall","src":"6659:35:26"},"nodeType":"YulIf","src":"6656:55:26"},{"nodeType":"YulAssignment","src":"6720:84:26","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"6769:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"6773:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6765:3:26"},"nodeType":"YulFunctionCall","src":"6765:11:26"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"6791:2:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6778:12:26"},"nodeType":"YulFunctionCall","src":"6778:16:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6796:7:26"}],"functionName":{"name":"abi_decode_available_length_string","nodeType":"YulIdentifier","src":"6730:34:26"},"nodeType":"YulFunctionCall","src":"6730:74:26"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"6720:6:26"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6215:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6226:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6238:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6246:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6254:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6262:6:26","type":""}],"src":"6143:667:26"},{"body":{"nodeType":"YulBlock","src":"6902:173:26","statements":[{"body":{"nodeType":"YulBlock","src":"6948:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6957:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6960:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6950:6:26"},"nodeType":"YulFunctionCall","src":"6950:12:26"},"nodeType":"YulExpressionStatement","src":"6950:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6923:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"6932:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6919:3:26"},"nodeType":"YulFunctionCall","src":"6919:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"6944:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6915:3:26"},"nodeType":"YulFunctionCall","src":"6915:32:26"},"nodeType":"YulIf","src":"6912:52:26"},{"nodeType":"YulAssignment","src":"6973:39:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7002:9:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6983:18:26"},"nodeType":"YulFunctionCall","src":"6983:29:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6973:6:26"}]},{"nodeType":"YulAssignment","src":"7021:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7054:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"7065:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7050:3:26"},"nodeType":"YulFunctionCall","src":"7050:18:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7031:18:26"},"nodeType":"YulFunctionCall","src":"7031:38:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7021:6:26"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6860:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6871:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6883:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6891:6:26","type":""}],"src":"6815:260:26"},{"body":{"nodeType":"YulBlock","src":"7135:325:26","statements":[{"nodeType":"YulAssignment","src":"7145:22:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7159:1:26","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"7162:4:26"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7155:3:26"},"nodeType":"YulFunctionCall","src":"7155:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"7145:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"7176:38:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7206:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"7212:1:26","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7202:3:26"},"nodeType":"YulFunctionCall","src":"7202:12:26"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"7180:18:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"7253:31:26","statements":[{"nodeType":"YulAssignment","src":"7255:27:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7269:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"7277:4:26","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7265:3:26"},"nodeType":"YulFunctionCall","src":"7265:17:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"7255:6:26"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"7233:18:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7226:6:26"},"nodeType":"YulFunctionCall","src":"7226:26:26"},"nodeType":"YulIf","src":"7223:61:26"},{"body":{"nodeType":"YulBlock","src":"7343:111:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7364:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7371:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"7376:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7367:3:26"},"nodeType":"YulFunctionCall","src":"7367:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7357:6:26"},"nodeType":"YulFunctionCall","src":"7357:31:26"},"nodeType":"YulExpressionStatement","src":"7357:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7408:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7411:4:26","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7401:6:26"},"nodeType":"YulFunctionCall","src":"7401:15:26"},"nodeType":"YulExpressionStatement","src":"7401:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7436:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7439:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7429:6:26"},"nodeType":"YulFunctionCall","src":"7429:15:26"},"nodeType":"YulExpressionStatement","src":"7429:15:26"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"7299:18:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7322:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"7330:2:26","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7319:2:26"},"nodeType":"YulFunctionCall","src":"7319:14:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7296:2:26"},"nodeType":"YulFunctionCall","src":"7296:38:26"},"nodeType":"YulIf","src":"7293:161:26"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"7115:4:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"7124:6:26","type":""}],"src":"7080:380:26"},{"body":{"nodeType":"YulBlock","src":"7622:218:26","statements":[{"nodeType":"YulAssignment","src":"7632:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7644:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"7655:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7640:3:26"},"nodeType":"YulFunctionCall","src":"7640:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7632:4:26"}]},{"nodeType":"YulVariableDeclaration","src":"7667:29:26","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7685:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"7690:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7681:3:26"},"nodeType":"YulFunctionCall","src":"7681:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"7694:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7677:3:26"},"nodeType":"YulFunctionCall","src":"7677:19:26"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7671:2:26","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7712:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7727:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"7735:2:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7723:3:26"},"nodeType":"YulFunctionCall","src":"7723:15:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7705:6:26"},"nodeType":"YulFunctionCall","src":"7705:34:26"},"nodeType":"YulExpressionStatement","src":"7705:34:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7759:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"7770:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7755:3:26"},"nodeType":"YulFunctionCall","src":"7755:18:26"},{"name":"value1","nodeType":"YulIdentifier","src":"7775:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7748:6:26"},"nodeType":"YulFunctionCall","src":"7748:34:26"},"nodeType":"YulExpressionStatement","src":"7748:34:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7802:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"7813:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7798:3:26"},"nodeType":"YulFunctionCall","src":"7798:18:26"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"7822:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"7830:2:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7818:3:26"},"nodeType":"YulFunctionCall","src":"7818:15:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7791:6:26"},"nodeType":"YulFunctionCall","src":"7791:43:26"},"nodeType":"YulExpressionStatement","src":"7791:43:26"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7575:9:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7586:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7594:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7602:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7613:4:26","type":""}],"src":"7465:375:26"},{"body":{"nodeType":"YulBlock","src":"7945:179:26","statements":[{"body":{"nodeType":"YulBlock","src":"7991:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8000:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8003:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7993:6:26"},"nodeType":"YulFunctionCall","src":"7993:12:26"},"nodeType":"YulExpressionStatement","src":"7993:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7966:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"7975:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7962:3:26"},"nodeType":"YulFunctionCall","src":"7962:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"7987:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7958:3:26"},"nodeType":"YulFunctionCall","src":"7958:32:26"},"nodeType":"YulIf","src":"7955:52:26"},{"nodeType":"YulVariableDeclaration","src":"8016:29:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8035:9:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8029:5:26"},"nodeType":"YulFunctionCall","src":"8029:16:26"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8020:5:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"8078:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8087:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8090:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8080:6:26"},"nodeType":"YulFunctionCall","src":"8080:12:26"},"nodeType":"YulExpressionStatement","src":"8080:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8067:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"8074:1:26","type":"","value":"8"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8064:2:26"},"nodeType":"YulFunctionCall","src":"8064:12:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8057:6:26"},"nodeType":"YulFunctionCall","src":"8057:20:26"},"nodeType":"YulIf","src":"8054:40:26"},{"nodeType":"YulAssignment","src":"8103:15:26","value":{"name":"value","nodeType":"YulIdentifier","src":"8113:5:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8103:6:26"}]}]},"name":"abi_decode_tuple_t_enum$_CharacterClass_$4788_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7911:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7922:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7934:6:26","type":""}],"src":"7845:279:26"},{"body":{"nodeType":"YulBlock","src":"8161:95:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8178:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8185:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"8190:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8181:3:26"},"nodeType":"YulFunctionCall","src":"8181:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8171:6:26"},"nodeType":"YulFunctionCall","src":"8171:31:26"},"nodeType":"YulExpressionStatement","src":"8171:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8218:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8221:4:26","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8211:6:26"},"nodeType":"YulFunctionCall","src":"8211:15:26"},"nodeType":"YulExpressionStatement","src":"8211:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8242:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8245:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8235:6:26"},"nodeType":"YulFunctionCall","src":"8235:15:26"},"nodeType":"YulExpressionStatement","src":"8235:15:26"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"8129:127:26"},{"body":{"nodeType":"YulBlock","src":"8317:65:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8334:1:26","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"8337:3:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8327:6:26"},"nodeType":"YulFunctionCall","src":"8327:14:26"},"nodeType":"YulExpressionStatement","src":"8327:14:26"},{"nodeType":"YulAssignment","src":"8350:26:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8368:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8371:4:26","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8358:9:26"},"nodeType":"YulFunctionCall","src":"8358:18:26"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8350:4:26"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"8300:3:26","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"8308:4:26","type":""}],"src":"8261:121:26"},{"body":{"nodeType":"YulBlock","src":"8468:464:26","statements":[{"body":{"nodeType":"YulBlock","src":"8501:425:26","statements":[{"nodeType":"YulVariableDeclaration","src":"8515:11:26","value":{"kind":"number","nodeType":"YulLiteral","src":"8525:1:26","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8519:2:26","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"8546:2:26"},{"name":"array","nodeType":"YulIdentifier","src":"8550:5:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8539:6:26"},"nodeType":"YulFunctionCall","src":"8539:17:26"},"nodeType":"YulExpressionStatement","src":"8539:17:26"},{"nodeType":"YulVariableDeclaration","src":"8569:31:26","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"8591:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"8595:4:26","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8581:9:26"},"nodeType":"YulFunctionCall","src":"8581:19:26"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"8573:4:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8613:57:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"8636:4:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8646:1:26","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"8653:10:26"},{"kind":"number","nodeType":"YulLiteral","src":"8665:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8649:3:26"},"nodeType":"YulFunctionCall","src":"8649:19:26"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8642:3:26"},"nodeType":"YulFunctionCall","src":"8642:27:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8632:3:26"},"nodeType":"YulFunctionCall","src":"8632:38:26"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"8617:11:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"8707:23:26","statements":[{"nodeType":"YulAssignment","src":"8709:19:26","value":{"name":"data","nodeType":"YulIdentifier","src":"8724:4:26"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"8709:11:26"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"8689:10:26"},{"kind":"number","nodeType":"YulLiteral","src":"8701:4:26","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8686:2:26"},"nodeType":"YulFunctionCall","src":"8686:20:26"},"nodeType":"YulIf","src":"8683:47:26"},{"nodeType":"YulVariableDeclaration","src":"8743:41:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"8757:4:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8767:1:26","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"8774:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"8779:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8770:3:26"},"nodeType":"YulFunctionCall","src":"8770:12:26"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8763:3:26"},"nodeType":"YulFunctionCall","src":"8763:20:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8753:3:26"},"nodeType":"YulFunctionCall","src":"8753:31:26"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"8747:2:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8797:24:26","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"8810:11:26"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"8801:5:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"8895:21:26","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"8904:5:26"},{"name":"_1","nodeType":"YulIdentifier","src":"8911:2:26"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8897:6:26"},"nodeType":"YulFunctionCall","src":"8897:17:26"},"nodeType":"YulExpressionStatement","src":"8897:17:26"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"8845:5:26"},{"name":"_2","nodeType":"YulIdentifier","src":"8852:2:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8842:2:26"},"nodeType":"YulFunctionCall","src":"8842:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8856:26:26","statements":[{"nodeType":"YulAssignment","src":"8858:22:26","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"8871:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"8878:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8867:3:26"},"nodeType":"YulFunctionCall","src":"8867:13:26"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"8858:5:26"}]}]},"pre":{"nodeType":"YulBlock","src":"8838:3:26","statements":[]},"src":"8834:82:26"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"8484:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"8489:2:26","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8481:2:26"},"nodeType":"YulFunctionCall","src":"8481:11:26"},"nodeType":"YulIf","src":"8478:448:26"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"8440:5:26","type":""},{"name":"len","nodeType":"YulTypedName","src":"8447:3:26","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"8452:10:26","type":""}],"src":"8387:545:26"},{"body":{"nodeType":"YulBlock","src":"9022:81:26","statements":[{"nodeType":"YulAssignment","src":"9032:65:26","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"9047:4:26"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9065:1:26","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"9068:3:26"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9061:3:26"},"nodeType":"YulFunctionCall","src":"9061:11:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9078:1:26","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9074:3:26"},"nodeType":"YulFunctionCall","src":"9074:6:26"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"9057:3:26"},"nodeType":"YulFunctionCall","src":"9057:24:26"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9053:3:26"},"nodeType":"YulFunctionCall","src":"9053:29:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9043:3:26"},"nodeType":"YulFunctionCall","src":"9043:40:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9089:1:26","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"9092:3:26"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9085:3:26"},"nodeType":"YulFunctionCall","src":"9085:11:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"9040:2:26"},"nodeType":"YulFunctionCall","src":"9040:57:26"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"9032:4:26"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"8999:4:26","type":""},{"name":"len","nodeType":"YulTypedName","src":"9005:3:26","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"9013:4:26","type":""}],"src":"8937:166:26"},{"body":{"nodeType":"YulBlock","src":"9204:1256:26","statements":[{"nodeType":"YulVariableDeclaration","src":"9214:24:26","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"9234:3:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9228:5:26"},"nodeType":"YulFunctionCall","src":"9228:10:26"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"9218:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"9281:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"9283:16:26"},"nodeType":"YulFunctionCall","src":"9283:18:26"},"nodeType":"YulExpressionStatement","src":"9283:18:26"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"9253:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"9261:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9250:2:26"},"nodeType":"YulFunctionCall","src":"9250:30:26"},"nodeType":"YulIf","src":"9247:56:26"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"9356:4:26"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"9394:4:26"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"9388:5:26"},"nodeType":"YulFunctionCall","src":"9388:11:26"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"9362:25:26"},"nodeType":"YulFunctionCall","src":"9362:38:26"},{"name":"newLen","nodeType":"YulIdentifier","src":"9402:6:26"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"9312:43:26"},"nodeType":"YulFunctionCall","src":"9312:97:26"},"nodeType":"YulExpressionStatement","src":"9312:97:26"},{"nodeType":"YulVariableDeclaration","src":"9418:18:26","value":{"kind":"number","nodeType":"YulLiteral","src":"9435:1:26","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"9422:9:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9445:23:26","value":{"kind":"number","nodeType":"YulLiteral","src":"9464:4:26","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"9449:11:26","type":""}]},{"nodeType":"YulAssignment","src":"9477:24:26","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"9490:11:26"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"9477:9:26"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"9547:656:26","statements":[{"nodeType":"YulVariableDeclaration","src":"9561:35:26","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"9580:6:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9592:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9588:3:26"},"nodeType":"YulFunctionCall","src":"9588:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9576:3:26"},"nodeType":"YulFunctionCall","src":"9576:20:26"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"9565:7:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9609:49:26","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"9653:4:26"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"9623:29:26"},"nodeType":"YulFunctionCall","src":"9623:35:26"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"9613:6:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9671:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"9680:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"9675:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"9758:172:26","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"9783:6:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"9801:3:26"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"9806:9:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9797:3:26"},"nodeType":"YulFunctionCall","src":"9797:19:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9791:5:26"},"nodeType":"YulFunctionCall","src":"9791:26:26"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"9776:6:26"},"nodeType":"YulFunctionCall","src":"9776:42:26"},"nodeType":"YulExpressionStatement","src":"9776:42:26"},{"nodeType":"YulAssignment","src":"9835:24:26","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"9849:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"9857:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9845:3:26"},"nodeType":"YulFunctionCall","src":"9845:14:26"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"9835:6:26"}]},{"nodeType":"YulAssignment","src":"9876:40:26","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"9893:9:26"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"9904:11:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9889:3:26"},"nodeType":"YulFunctionCall","src":"9889:27:26"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"9876:9:26"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9705:1:26"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"9708:7:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9702:2:26"},"nodeType":"YulFunctionCall","src":"9702:14:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"9717:28:26","statements":[{"nodeType":"YulAssignment","src":"9719:24:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9728:1:26"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"9731:11:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9724:3:26"},"nodeType":"YulFunctionCall","src":"9724:19:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"9719:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"9698:3:26","statements":[]},"src":"9694:236:26"},{"body":{"nodeType":"YulBlock","src":"9978:166:26","statements":[{"nodeType":"YulVariableDeclaration","src":"9996:43:26","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10023:3:26"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"10028:9:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10019:3:26"},"nodeType":"YulFunctionCall","src":"10019:19:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10013:5:26"},"nodeType":"YulFunctionCall","src":"10013:26:26"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"10000:9:26","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"10063:6:26"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"10075:9:26"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10102:1:26","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"10105:6:26"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10098:3:26"},"nodeType":"YulFunctionCall","src":"10098:14:26"},{"kind":"number","nodeType":"YulLiteral","src":"10114:3:26","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10094:3:26"},"nodeType":"YulFunctionCall","src":"10094:24:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10124:1:26","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10120:3:26"},"nodeType":"YulFunctionCall","src":"10120:6:26"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"10090:3:26"},"nodeType":"YulFunctionCall","src":"10090:37:26"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10086:3:26"},"nodeType":"YulFunctionCall","src":"10086:42:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10071:3:26"},"nodeType":"YulFunctionCall","src":"10071:58:26"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"10056:6:26"},"nodeType":"YulFunctionCall","src":"10056:74:26"},"nodeType":"YulExpressionStatement","src":"10056:74:26"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"9949:7:26"},{"name":"newLen","nodeType":"YulIdentifier","src":"9958:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9946:2:26"},"nodeType":"YulFunctionCall","src":"9946:19:26"},"nodeType":"YulIf","src":"9943:201:26"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"10164:4:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10178:1:26","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"10181:6:26"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10174:3:26"},"nodeType":"YulFunctionCall","src":"10174:14:26"},{"kind":"number","nodeType":"YulLiteral","src":"10190:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10170:3:26"},"nodeType":"YulFunctionCall","src":"10170:22:26"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"10157:6:26"},"nodeType":"YulFunctionCall","src":"10157:36:26"},"nodeType":"YulExpressionStatement","src":"10157:36:26"}]},"nodeType":"YulCase","src":"9540:663:26","value":{"kind":"number","nodeType":"YulLiteral","src":"9545:1:26","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"10220:234:26","statements":[{"nodeType":"YulVariableDeclaration","src":"10234:14:26","value":{"kind":"number","nodeType":"YulLiteral","src":"10247:1:26","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"10238:5:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"10283:67:26","statements":[{"nodeType":"YulAssignment","src":"10301:35:26","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10320:3:26"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"10325:9:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10316:3:26"},"nodeType":"YulFunctionCall","src":"10316:19:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10310:5:26"},"nodeType":"YulFunctionCall","src":"10310:26:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"10301:5:26"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"10264:6:26"},"nodeType":"YulIf","src":"10261:89:26"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"10370:4:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10429:5:26"},{"name":"newLen","nodeType":"YulIdentifier","src":"10436:6:26"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"10376:52:26"},"nodeType":"YulFunctionCall","src":"10376:67:26"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"10363:6:26"},"nodeType":"YulFunctionCall","src":"10363:81:26"},"nodeType":"YulExpressionStatement","src":"10363:81:26"}]},"nodeType":"YulCase","src":"10212:242:26","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"9520:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"9528:2:26","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9517:2:26"},"nodeType":"YulFunctionCall","src":"9517:14:26"},"nodeType":"YulSwitch","src":"9510:944:26"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"9189:4:26","type":""},{"name":"src","nodeType":"YulTypedName","src":"9195:3:26","type":""}],"src":"9108:1352:26"},{"body":{"nodeType":"YulBlock","src":"10556:558:26","statements":[{"body":{"nodeType":"YulBlock","src":"10602:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10611:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10614:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10604:6:26"},"nodeType":"YulFunctionCall","src":"10604:12:26"},"nodeType":"YulExpressionStatement","src":"10604:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10577:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"10586:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10573:3:26"},"nodeType":"YulFunctionCall","src":"10573:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"10598:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10569:3:26"},"nodeType":"YulFunctionCall","src":"10569:32:26"},"nodeType":"YulIf","src":"10566:52:26"},{"nodeType":"YulVariableDeclaration","src":"10627:30:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10647:9:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10641:5:26"},"nodeType":"YulFunctionCall","src":"10641:16:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10631:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"10700:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10709:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10712:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10702:6:26"},"nodeType":"YulFunctionCall","src":"10702:12:26"},"nodeType":"YulExpressionStatement","src":"10702:12:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10672:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"10680:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10669:2:26"},"nodeType":"YulFunctionCall","src":"10669:30:26"},"nodeType":"YulIf","src":"10666:50:26"},{"nodeType":"YulVariableDeclaration","src":"10725:32:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10739:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"10750:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10735:3:26"},"nodeType":"YulFunctionCall","src":"10735:22:26"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"10729:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"10805:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10814:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10817:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10807:6:26"},"nodeType":"YulFunctionCall","src":"10807:12:26"},"nodeType":"YulExpressionStatement","src":"10807:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"10784:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"10788:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10780:3:26"},"nodeType":"YulFunctionCall","src":"10780:13:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10795:7:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10776:3:26"},"nodeType":"YulFunctionCall","src":"10776:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10769:6:26"},"nodeType":"YulFunctionCall","src":"10769:35:26"},"nodeType":"YulIf","src":"10766:55:26"},{"nodeType":"YulVariableDeclaration","src":"10830:19:26","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"10846:2:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10840:5:26"},"nodeType":"YulFunctionCall","src":"10840:9:26"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"10834:2:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10858:62:26","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"10916:2:26"}],"functionName":{"name":"array_allocation_size_string","nodeType":"YulIdentifier","src":"10887:28:26"},"nodeType":"YulFunctionCall","src":"10887:32:26"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"10871:15:26"},"nodeType":"YulFunctionCall","src":"10871:49:26"},"variables":[{"name":"array","nodeType":"YulTypedName","src":"10862:5:26","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"10936:5:26"},{"name":"_2","nodeType":"YulIdentifier","src":"10943:2:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10929:6:26"},"nodeType":"YulFunctionCall","src":"10929:17:26"},"nodeType":"YulExpressionStatement","src":"10929:17:26"},{"body":{"nodeType":"YulBlock","src":"10992:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11001:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11004:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10994:6:26"},"nodeType":"YulFunctionCall","src":"10994:12:26"},"nodeType":"YulExpressionStatement","src":"10994:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"10969:2:26"},{"name":"_2","nodeType":"YulIdentifier","src":"10973:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10965:3:26"},"nodeType":"YulFunctionCall","src":"10965:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"10978:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10961:3:26"},"nodeType":"YulFunctionCall","src":"10961:20:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10983:7:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10958:2:26"},"nodeType":"YulFunctionCall","src":"10958:33:26"},"nodeType":"YulIf","src":"10955:53:26"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"11056:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"11060:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11052:3:26"},"nodeType":"YulFunctionCall","src":"11052:11:26"},{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"11069:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"11076:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11065:3:26"},"nodeType":"YulFunctionCall","src":"11065:14:26"},{"name":"_2","nodeType":"YulIdentifier","src":"11081:2:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"11017:34:26"},"nodeType":"YulFunctionCall","src":"11017:67:26"},"nodeType":"YulExpressionStatement","src":"11017:67:26"},{"nodeType":"YulAssignment","src":"11093:15:26","value":{"name":"array","nodeType":"YulIdentifier","src":"11103:5:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11093:6:26"}]}]},"name":"abi_decode_tuple_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10522:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10533:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10545:6:26","type":""}],"src":"10465:649:26"},{"body":{"nodeType":"YulBlock","src":"11407:353:26","statements":[{"nodeType":"YulVariableDeclaration","src":"11417:27:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11437:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11431:5:26"},"nodeType":"YulFunctionCall","src":"11431:13:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"11421:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11492:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"11500:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11488:3:26"},"nodeType":"YulFunctionCall","src":"11488:17:26"},{"name":"pos","nodeType":"YulIdentifier","src":"11507:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"11512:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"11453:34:26"},"nodeType":"YulFunctionCall","src":"11453:66:26"},"nodeType":"YulExpressionStatement","src":"11453:66:26"},{"nodeType":"YulVariableDeclaration","src":"11528:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11545:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"11550:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11541:3:26"},"nodeType":"YulFunctionCall","src":"11541:16:26"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"11532:5:26","type":""}]},{"expression":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"11573:5:26"},{"hexValue":"2023","kind":"string","nodeType":"YulLiteral","src":"11580:4:26","type":"","value":" #"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11566:6:26"},"nodeType":"YulFunctionCall","src":"11566:19:26"},"nodeType":"YulExpressionStatement","src":"11566:19:26"},{"nodeType":"YulVariableDeclaration","src":"11594:29:26","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11616:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11610:5:26"},"nodeType":"YulFunctionCall","src":"11610:13:26"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"11598:8:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11671:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"11679:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11667:3:26"},"nodeType":"YulFunctionCall","src":"11667:17:26"},{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"11690:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"11697:1:26","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11686:3:26"},"nodeType":"YulFunctionCall","src":"11686:13:26"},{"name":"length_1","nodeType":"YulIdentifier","src":"11701:8:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"11632:34:26"},"nodeType":"YulFunctionCall","src":"11632:78:26"},"nodeType":"YulExpressionStatement","src":"11632:78:26"},{"nodeType":"YulAssignment","src":"11719:35:26","value":{"arguments":[{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"11734:5:26"},{"name":"length_1","nodeType":"YulIdentifier","src":"11741:8:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11730:3:26"},"nodeType":"YulFunctionCall","src":"11730:20:26"},{"kind":"number","nodeType":"YulLiteral","src":"11752:1:26","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11726:3:26"},"nodeType":"YulFunctionCall","src":"11726:28:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11719:3:26"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_21af77cd140717e5867fa5acefcf2fc51f566448915c6d7fd3ac9763b6517a12_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11375:3:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11380:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11388:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11399:3:26","type":""}],"src":"11119:641:26"},{"body":{"nodeType":"YulBlock","src":"11968:286:26","statements":[{"nodeType":"YulVariableDeclaration","src":"11978:29:26","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11996:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"12001:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11992:3:26"},"nodeType":"YulFunctionCall","src":"11992:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"12005:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11988:3:26"},"nodeType":"YulFunctionCall","src":"11988:19:26"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"11982:2:26","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12023:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12038:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"12046:2:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12034:3:26"},"nodeType":"YulFunctionCall","src":"12034:15:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12016:6:26"},"nodeType":"YulFunctionCall","src":"12016:34:26"},"nodeType":"YulExpressionStatement","src":"12016:34:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12070:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12081:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12066:3:26"},"nodeType":"YulFunctionCall","src":"12066:18:26"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12090:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"12098:2:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12086:3:26"},"nodeType":"YulFunctionCall","src":"12086:15:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12059:6:26"},"nodeType":"YulFunctionCall","src":"12059:43:26"},"nodeType":"YulExpressionStatement","src":"12059:43:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12122:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12133:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12118:3:26"},"nodeType":"YulFunctionCall","src":"12118:18:26"},{"name":"value2","nodeType":"YulIdentifier","src":"12138:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12111:6:26"},"nodeType":"YulFunctionCall","src":"12111:34:26"},"nodeType":"YulExpressionStatement","src":"12111:34:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12165:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12176:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12161:3:26"},"nodeType":"YulFunctionCall","src":"12161:18:26"},{"kind":"number","nodeType":"YulLiteral","src":"12181:3:26","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12154:6:26"},"nodeType":"YulFunctionCall","src":"12154:31:26"},"nodeType":"YulExpressionStatement","src":"12154:31:26"},{"nodeType":"YulAssignment","src":"12194:54:26","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"12220:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12232:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12243:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12228:3:26"},"nodeType":"YulFunctionCall","src":"12228:19:26"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"12202:17:26"},"nodeType":"YulFunctionCall","src":"12202:46:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12194:4:26"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11913:9:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11924:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11932:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11940:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11948:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11959:4:26","type":""}],"src":"11765:489:26"},{"body":{"nodeType":"YulBlock","src":"12339:169:26","statements":[{"body":{"nodeType":"YulBlock","src":"12385:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12394:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12397:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12387:6:26"},"nodeType":"YulFunctionCall","src":"12387:12:26"},"nodeType":"YulExpressionStatement","src":"12387:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12360:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"12369:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12356:3:26"},"nodeType":"YulFunctionCall","src":"12356:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"12381:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12352:3:26"},"nodeType":"YulFunctionCall","src":"12352:32:26"},"nodeType":"YulIf","src":"12349:52:26"},{"nodeType":"YulVariableDeclaration","src":"12410:29:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12429:9:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12423:5:26"},"nodeType":"YulFunctionCall","src":"12423:16:26"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"12414:5:26","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12472:5:26"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"12448:23:26"},"nodeType":"YulFunctionCall","src":"12448:30:26"},"nodeType":"YulExpressionStatement","src":"12448:30:26"},{"nodeType":"YulAssignment","src":"12487:15:26","value":{"name":"value","nodeType":"YulIdentifier","src":"12497:5:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12487:6:26"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12305:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12316:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12328:6:26","type":""}],"src":"12259:249:26"},{"body":{"nodeType":"YulBlock","src":"12545:95:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12562:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12569:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"12574:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12565:3:26"},"nodeType":"YulFunctionCall","src":"12565:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12555:6:26"},"nodeType":"YulFunctionCall","src":"12555:31:26"},"nodeType":"YulExpressionStatement","src":"12555:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12602:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12605:4:26","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12595:6:26"},"nodeType":"YulFunctionCall","src":"12595:15:26"},"nodeType":"YulExpressionStatement","src":"12595:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12626:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12629:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12619:6:26"},"nodeType":"YulFunctionCall","src":"12619:15:26"},"nodeType":"YulExpressionStatement","src":"12619:15:26"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"12513:127:26"},{"body":{"nodeType":"YulBlock","src":"12774:145:26","statements":[{"nodeType":"YulAssignment","src":"12784:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12796:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12807:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12792:3:26"},"nodeType":"YulFunctionCall","src":"12792:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12784:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12826:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12841:6:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12857:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"12862:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12853:3:26"},"nodeType":"YulFunctionCall","src":"12853:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"12866:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12849:3:26"},"nodeType":"YulFunctionCall","src":"12849:19:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12837:3:26"},"nodeType":"YulFunctionCall","src":"12837:32:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12819:6:26"},"nodeType":"YulFunctionCall","src":"12819:51:26"},"nodeType":"YulExpressionStatement","src":"12819:51:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12890:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12901:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12886:3:26"},"nodeType":"YulFunctionCall","src":"12886:18:26"},{"name":"value1","nodeType":"YulIdentifier","src":"12906:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12879:6:26"},"nodeType":"YulFunctionCall","src":"12879:34:26"},"nodeType":"YulExpressionStatement","src":"12879:34:26"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12735:9:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12746:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12754:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12765:4:26","type":""}],"src":"12645:274:26"},{"body":{"nodeType":"YulBlock","src":"13053:145:26","statements":[{"nodeType":"YulAssignment","src":"13063:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13075:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"13086:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13071:3:26"},"nodeType":"YulFunctionCall","src":"13071:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13063:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13105:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13120:6:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13136:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"13141:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13132:3:26"},"nodeType":"YulFunctionCall","src":"13132:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"13145:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13128:3:26"},"nodeType":"YulFunctionCall","src":"13128:19:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13116:3:26"},"nodeType":"YulFunctionCall","src":"13116:32:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13098:6:26"},"nodeType":"YulFunctionCall","src":"13098:51:26"},"nodeType":"YulExpressionStatement","src":"13098:51:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13169:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"13180:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13165:3:26"},"nodeType":"YulFunctionCall","src":"13165:18:26"},{"name":"value1","nodeType":"YulIdentifier","src":"13185:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13158:6:26"},"nodeType":"YulFunctionCall","src":"13158:34:26"},"nodeType":"YulExpressionStatement","src":"13158:34:26"}]},"name":"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13014:9:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13025:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13033:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13044:4:26","type":""}],"src":"12924:274:26"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_string(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(and(add(length, 31), not(31)), 0x20)\n    }\n    function abi_decode_available_length_string(src, length, end) -> array\n    {\n        array := allocate_memory(array_allocation_size_string(length))\n        mstore(array, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        calldatacopy(add(array, 0x20), src, length)\n        mstore(add(add(array, length), 0x20), 0)\n    }\n    function abi_decode_tuple_t_uint256t_string_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value1 := abi_decode_available_length_string(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 96)\n        let tail_1 := abi_encode_string(value0, add(headStart, 96))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value1, tail_1)\n        mstore(add(headStart, 64), sub(tail_2, headStart))\n        tail := abi_encode_string(value2, tail_2)\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value3 := abi_decode_available_length_string(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_decode_tuple_t_enum$_CharacterClass_$4788_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(lt(value, 8)) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let _2 := mload(_1)\n        let array := allocate_memory(array_allocation_size_string(_2))\n        mstore(array, _2)\n        if gt(add(add(_1, _2), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(_1, 32), add(array, 32), _2)\n        value0 := array\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_21af77cd140717e5867fa5acefcf2fc51f566448915c6d7fd3ac9763b6517a12_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        mstore(end_1, \" #\")\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(end_1, 2), length_1)\n        end := add(add(end_1, length_1), 2)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n}","id":26,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061021c5760003560e01c8063877b79b811610125578063b88d4fde116100ad578063d547741f1161007c578063d547741f146104de578063e58378bb146104f1578063e725f87714610506578063e985e9c514610519578063f210ace41461052c57600080fd5b8063b88d4fde1461047e578063c87b56dd14610491578063c8cc5175146104a4578063d5391393146104b757600080fd5b806395d89b41116100f457806395d89b4114610435578063a217fddf1461043d578063a22cb46514610445578063a41f617914610458578063ae53a1a11461046b57600080fd5b8063877b79b8146103da57806391d14854146103fc57806394bf804d1461040f57806394dd32151461042257600080fd5b806331bcb9d8116101a857806342842e0e1161017757806342842e0e1461037b57806342966c681461038e57806358342c90146103a15780636352211e146103b457806370a08231146103c757600080fd5b806331bcb9d81461032f57806336568abe1461034257806336e67256146103555780633ddfbd8b1461036857600080fd5b806323b872dd116101ef57806323b872dd1461029e578063248a9ca3146102b1578063282c51f3146102e25780632d537851146103095780632f2ff15d1461031c57600080fd5b806301ffc9a71461022157806306fdde0314610249578063081812fc1461025e578063095ea7b314610289575b600080fd5b61023461022f3660046118ee565b61053f565b60405190151581526020015b60405180910390f35b610251610550565b6040516102409190611962565b61027161026c366004611975565b6105e2565b6040516001600160a01b039091168152602001610240565b61029c6102973660046119aa565b61060b565b005b61029c6102ac3660046119d4565b61061a565b6102d46102bf366004611975565b60009081526006602052604090206001015490565b604051908152602001610240565b6102d47f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84881565b610251610317366004611975565b6106aa565b61029c61032a366004611a10565b6107d4565b61025161033d366004611975565b6107f9565b61029c610350366004611a10565b61089d565b600854610271906001600160a01b031681565b610251610376366004611975565b6108d5565b61029c6103893660046119d4565b610976565b61029c61039c366004611975565b610991565b61029c6103af366004611ae9565b6109e5565b6102716103c2366004611975565b610a15565b6102d46103d5366004611b44565b610a20565b6103ed6103e8366004611975565b610a68565b60405161024093929190611b5f565b61023461040a366004611a10565b610c22565b61029c61041d366004611a10565b610c4d565b61029c610430366004611b44565b610cb3565b610251610cee565b6102d4600081565b61029c610453366004611ba2565b610cfd565b61029c610466366004611ae9565b610d08565b61029c610479366004611ae9565b610d3b565b61029c61048c366004611bde565b610d6e565b61025161049f366004611975565b610d85565b600954610271906001600160a01b031681565b6102d47f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61029c6104ec366004611a10565b610e26565b6102d4600080516020611f0883398151915281565b610251610514366004611975565b610e4b565b610234610527366004611c5a565b610fa0565b61029c61053a366004611b44565b610fce565b600061054a82611009565b92915050565b60606000805461055f90611c84565b80601f016020809104026020016040519081016040528092919081815260200182805461058b90611c84565b80156105d85780601f106105ad576101008083540402835291602001916105d8565b820191906000526020600020905b8154815290600101906020018083116105bb57829003601f168201915b5050505050905090565b60006105ed8261102e565b506000828152600460205260409020546001600160a01b031661054a565b610616828233611067565b5050565b6001600160a01b03821661064957604051633250574960e11b8152600060048201526024015b60405180910390fd5b6000610656838333611074565b9050836001600160a01b0316816001600160a01b0316146106a4576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610640565b50505050565b600854604051633de9d8f160e21b8152600481018390526060916000916001600160a01b039091169063f7a763c490602401602060405180830381865afa1580156106f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071d9190611cbe565b600781111561072e5761072e611cdf565b600081815260076020526040902060010180549192509061074e90611c84565b80601f016020809104026020016040519081016040528092919081815260200182805461077a90611c84565b80156107c75780601f1061079c576101008083540402835291602001916107c7565b820191906000526020600020905b8154815290600101906020018083116107aa57829003601f168201915b5050505050915050919050565b6000828152600660205260409020600101546107ef8161116d565b6106a4838361117a565b600854604051633de9d8f160e21b8152600481018390526060916000916001600160a01b039091169063f7a763c490602401602060405180830381865afa158015610848573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086c9190611cbe565b600781111561087d5761087d611cdf565b600081815260076020526040902060020180549192509061074e90611c84565b6001600160a01b03811633146108c65760405163334bd91960e11b815260040160405180910390fd5b6108d0828261120e565b505050565b600854604051633de9d8f160e21b8152600481018390526060916000916001600160a01b039091169063f7a763c490602401602060405180830381865afa158015610924573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109489190611cbe565b600781111561095957610959611cdf565b600081815260076020526040902080549192509061074e90611c84565b6108d083838360405180602001604052806000815250610d6e565b7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a8486109bb8161116d565b816000036109dc5760405163516e361d60e11b815260040160405180910390fd5b6106168261127b565b600080516020611f088339815191526109fd8161116d565b60008381526007602052604090206106a48382611d43565b600061054a8261102e565b60006001600160a01b038216610a4c576040516322718ad960e21b815260006004820152602401610640565b506001600160a01b031660009081526003602052604090205490565b600760205260009081526040902080548190610a8390611c84565b80601f0160208091040260200160405190810160405280929190818152602001828054610aaf90611c84565b8015610afc5780601f10610ad157610100808354040283529160200191610afc565b820191906000526020600020905b815481529060010190602001808311610adf57829003601f168201915b505050505090806001018054610b1190611c84565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3d90611c84565b8015610b8a5780601f10610b5f57610100808354040283529160200191610b8a565b820191906000526020600020905b815481529060010190602001808311610b6d57829003601f168201915b505050505090806002018054610b9f90611c84565b80601f0160208091040260200160405190810160405280929190818152602001828054610bcb90611c84565b8015610c185780601f10610bed57610100808354040283529160200191610c18565b820191906000526020600020905b815481529060010190602001808311610bfb57829003601f168201915b5050505050905083565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610c778161116d565b821580610c8b57506001600160a01b038216155b15610ca95760405163516e361d60e11b815260040160405180910390fd5b6108d082846112b6565b600080516020611f08833981519152610ccb8161116d565b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b60606001805461055f90611c84565b6106163383836112d0565b600080516020611f08833981519152610d208161116d565b60008381526007602052604090206001016106a48382611d43565b600080516020611f08833981519152610d538161116d565b60008381526007602052604090206002016106a48382611d43565b610d7984848461061a565b6106a48484848461136f565b6060610d908261102e565b506009546001600160a01b0316610db557505060408051602081019091526000815290565b60095460405163c87b56dd60e01b8152600481018490526001600160a01b039091169063c87b56dd90602401600060405180830381865afa158015610dfe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261054a9190810190611e03565b600082815260066020526040902060010154610e418161116d565b6106a4838361120e565b600854604051633de9d8f160e21b8152600481018390526060916000916001600160a01b039091169063f7a763c490602401602060405180830381865afa158015610e9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebe9190611cbe565b6007811115610ecf57610ecf611cdf565b600081815260076020526040812080549293509091610eed90611c84565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1990611c84565b8015610f665780601f10610f3b57610100808354040283529160200191610f66565b820191906000526020600020905b815481529060010190602001808311610f4957829003601f168201915b5050505050905080610f7785611498565b604051602001610f88929190611e7a565b60405160208183030381529060405292505050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600080516020611f08833981519152610fe68161116d565b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216637965db0b60e01b148061054a575061054a8261152b565b6000818152600260205260408120546001600160a01b03168061054a57604051637e27328960e01b815260048101849052602401610640565b6108d0838383600161157b565b6000828152600260205260408120546001600160a01b03908116908316156110a1576110a1818486611681565b6001600160a01b038116156110df576110be60008560008061157b565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b0385161561110e576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b61117781336116e5565b50565b60006111868383610c22565b6112065760008381526006602090815260408083206001600160a01b03861684529091529020805460ff191660011790556111be3390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161054a565b50600061054a565b600061121a8383610c22565b156112065760008381526006602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161054a565b600061128a6000836000611074565b90506001600160a01b03811661061657604051637e27328960e01b815260048101839052602401610640565b61061682826040518060200160405280600081525061171e565b6001600160a01b03821661130257604051630b61174360e31b81526001600160a01b0383166004820152602401610640565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b156106a457604051630a85bd0160e11b81526001600160a01b0384169063150b7a02906113b1903390889087908790600401611eb7565b6020604051808303816000875af19250505080156113ec575060408051601f3d908101601f191682019092526113e991810190611eea565b60015b611455573d80801561141a576040519150601f19603f3d011682016040523d82523d6000602084013e61141f565b606091505b50805160000361144d57604051633250574960e11b81526001600160a01b0385166004820152602401610640565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b1461149157604051633250574960e11b81526001600160a01b0385166004820152602401610640565b5050505050565b606060006114a583611735565b600101905060008167ffffffffffffffff8111156114c5576114c5611a3c565b6040519080825280601f01601f1916602001820160405280156114ef576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846114f957509392505050565b60006001600160e01b031982166380ac58cd60e01b148061155c57506001600160e01b03198216635b5e139f60e01b145b8061054a57506301ffc9a760e01b6001600160e01b031983161461054a565b808061158f57506001600160a01b03821615155b1561165157600061159f8461102e565b90506001600160a01b038316158015906115cb5750826001600160a01b0316816001600160a01b031614155b80156115de57506115dc8184610fa0565b155b156116075760405163a9fbf51f60e01b81526001600160a01b0384166004820152602401610640565b811561164f5783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b61168c83838361180d565b6108d0576001600160a01b0383166116ba57604051637e27328960e01b815260048101829052602401610640565b60405163177e802f60e01b81526001600160a01b038316600482015260248101829052604401610640565b6116ef8282610c22565b6106165760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610640565b6117288383611873565b6108d0600084848461136f565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106117745772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106117a0576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106117be57662386f26fc10000830492506010015b6305f5e10083106117d6576305f5e100830492506008015b61271083106117ea57612710830492506004015b606483106117fc576064830492506002015b600a831061054a5760010192915050565b60006001600160a01b0383161580159061186b5750826001600160a01b0316846001600160a01b0316148061184757506118478484610fa0565b8061186b57506000828152600460205260409020546001600160a01b038481169116145b949350505050565b6001600160a01b03821661189d57604051633250574960e11b815260006004820152602401610640565b60006118ab83836000611074565b90506001600160a01b038116156108d0576040516339e3563760e11b815260006004820152602401610640565b6001600160e01b03198116811461117757600080fd5b60006020828403121561190057600080fd5b813561190b816118d8565b9392505050565b60005b8381101561192d578181015183820152602001611915565b50506000910152565b6000815180845261194e816020860160208601611912565b601f01601f19169290920160200192915050565b60208152600061190b6020830184611936565b60006020828403121561198757600080fd5b5035919050565b80356001600160a01b03811681146119a557600080fd5b919050565b600080604083850312156119bd57600080fd5b6119c68361198e565b946020939093013593505050565b6000806000606084860312156119e957600080fd5b6119f28461198e565b9250611a006020850161198e565b9150604084013590509250925092565b60008060408385031215611a2357600080fd5b82359150611a336020840161198e565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611a7b57611a7b611a3c565b604052919050565b600067ffffffffffffffff821115611a9d57611a9d611a3c565b50601f01601f191660200190565b6000611abe611ab984611a83565b611a52565b9050828152838383011115611ad257600080fd5b828260208301376000602084830101529392505050565b60008060408385031215611afc57600080fd5b82359150602083013567ffffffffffffffff811115611b1a57600080fd5b8301601f81018513611b2b57600080fd5b611b3a85823560208401611aab565b9150509250929050565b600060208284031215611b5657600080fd5b61190b8261198e565b606081526000611b726060830186611936565b8281036020840152611b848186611936565b90508281036040840152611b988185611936565b9695505050505050565b60008060408385031215611bb557600080fd5b611bbe8361198e565b915060208301358015158114611bd357600080fd5b809150509250929050565b60008060008060808587031215611bf457600080fd5b611bfd8561198e565b9350611c0b6020860161198e565b925060408501359150606085013567ffffffffffffffff811115611c2e57600080fd5b8501601f81018713611c3f57600080fd5b611c4e87823560208401611aab565b91505092959194509250565b60008060408385031215611c6d57600080fd5b611c768361198e565b9150611a336020840161198e565b600181811c90821680611c9857607f821691505b602082108103611cb857634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215611cd057600080fd5b81516008811061190b57600080fd5b634e487b7160e01b600052602160045260246000fd5b601f8211156108d057600081815260208120601f850160051c81016020861015611d1c5750805b601f850160051c820191505b81811015611d3b57828155600101611d28565b505050505050565b815167ffffffffffffffff811115611d5d57611d5d611a3c565b611d7181611d6b8454611c84565b84611cf5565b602080601f831160018114611da65760008415611d8e5750858301515b600019600386901b1c1916600185901b178555611d3b565b600085815260208120601f198616915b82811015611dd557888601518255948401946001909101908401611db6565b5085821015611df35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215611e1557600080fd5b815167ffffffffffffffff811115611e2c57600080fd5b8201601f81018413611e3d57600080fd5b8051611e4b611ab982611a83565b818152856020838501011115611e6057600080fd5b611e71826020830160208601611912565b95945050505050565b60008351611e8c818460208801611912565b61202360f01b9083019081528351611eab816002840160208801611912565b01600201949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611b9890830184611936565b600060208284031215611efc57600080fd5b815161190b816118d856feb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214ea2646970667358221220f439fd1815b246e379e9133efbd9e98c72b92e6e54040bd515833ab3d4540bab64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x21C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x877B79B8 GT PUSH2 0x125 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x4DE JUMPI DUP1 PUSH4 0xE58378BB EQ PUSH2 0x4F1 JUMPI DUP1 PUSH4 0xE725F877 EQ PUSH2 0x506 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x519 JUMPI DUP1 PUSH4 0xF210ACE4 EQ PUSH2 0x52C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x47E JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x491 JUMPI DUP1 PUSH4 0xC8CC5175 EQ PUSH2 0x4A4 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x4B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x435 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x43D JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x445 JUMPI DUP1 PUSH4 0xA41F6179 EQ PUSH2 0x458 JUMPI DUP1 PUSH4 0xAE53A1A1 EQ PUSH2 0x46B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x877B79B8 EQ PUSH2 0x3DA JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x3FC JUMPI DUP1 PUSH4 0x94BF804D EQ PUSH2 0x40F JUMPI DUP1 PUSH4 0x94DD3215 EQ PUSH2 0x422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x31BCB9D8 GT PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x42842E0E GT PUSH2 0x177 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x37B JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x38E JUMPI DUP1 PUSH4 0x58342C90 EQ PUSH2 0x3A1 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x3B4 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x3C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x31BCB9D8 EQ PUSH2 0x32F JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x342 JUMPI DUP1 PUSH4 0x36E67256 EQ PUSH2 0x355 JUMPI DUP1 PUSH4 0x3DDFBD8B EQ PUSH2 0x368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x1EF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x29E JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2B1 JUMPI DUP1 PUSH4 0x282C51F3 EQ PUSH2 0x2E2 JUMPI DUP1 PUSH4 0x2D537851 EQ PUSH2 0x309 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x31C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x289 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x234 PUSH2 0x22F CALLDATASIZE PUSH1 0x4 PUSH2 0x18EE JUMP JUMPDEST PUSH2 0x53F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x251 PUSH2 0x550 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x240 SWAP2 SWAP1 PUSH2 0x1962 JUMP JUMPDEST PUSH2 0x271 PUSH2 0x26C CALLDATASIZE PUSH1 0x4 PUSH2 0x1975 JUMP JUMPDEST PUSH2 0x5E2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x240 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x19AA JUMP JUMPDEST PUSH2 0x60B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29C PUSH2 0x2AC CALLDATASIZE PUSH1 0x4 PUSH2 0x19D4 JUMP JUMPDEST PUSH2 0x61A JUMP JUMPDEST PUSH2 0x2D4 PUSH2 0x2BF CALLDATASIZE PUSH1 0x4 PUSH2 0x1975 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x240 JUMP JUMPDEST PUSH2 0x2D4 PUSH32 0x3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848 DUP2 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x317 CALLDATASIZE PUSH1 0x4 PUSH2 0x1975 JUMP JUMPDEST PUSH2 0x6AA JUMP JUMPDEST PUSH2 0x29C PUSH2 0x32A CALLDATASIZE PUSH1 0x4 PUSH2 0x1A10 JUMP JUMPDEST PUSH2 0x7D4 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x33D CALLDATASIZE PUSH1 0x4 PUSH2 0x1975 JUMP JUMPDEST PUSH2 0x7F9 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x350 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A10 JUMP JUMPDEST PUSH2 0x89D JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x271 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x376 CALLDATASIZE PUSH1 0x4 PUSH2 0x1975 JUMP JUMPDEST PUSH2 0x8D5 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x389 CALLDATASIZE PUSH1 0x4 PUSH2 0x19D4 JUMP JUMPDEST PUSH2 0x976 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x39C CALLDATASIZE PUSH1 0x4 PUSH2 0x1975 JUMP JUMPDEST PUSH2 0x991 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x3AF CALLDATASIZE PUSH1 0x4 PUSH2 0x1AE9 JUMP JUMPDEST PUSH2 0x9E5 JUMP JUMPDEST PUSH2 0x271 PUSH2 0x3C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1975 JUMP JUMPDEST PUSH2 0xA15 JUMP JUMPDEST PUSH2 0x2D4 PUSH2 0x3D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B44 JUMP JUMPDEST PUSH2 0xA20 JUMP JUMPDEST PUSH2 0x3ED PUSH2 0x3E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1975 JUMP JUMPDEST PUSH2 0xA68 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x240 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B5F JUMP JUMPDEST PUSH2 0x234 PUSH2 0x40A CALLDATASIZE PUSH1 0x4 PUSH2 0x1A10 JUMP JUMPDEST PUSH2 0xC22 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x41D CALLDATASIZE PUSH1 0x4 PUSH2 0x1A10 JUMP JUMPDEST PUSH2 0xC4D JUMP JUMPDEST PUSH2 0x29C PUSH2 0x430 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B44 JUMP JUMPDEST PUSH2 0xCB3 JUMP JUMPDEST PUSH2 0x251 PUSH2 0xCEE JUMP JUMPDEST PUSH2 0x2D4 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x453 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BA2 JUMP JUMPDEST PUSH2 0xCFD JUMP JUMPDEST PUSH2 0x29C PUSH2 0x466 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AE9 JUMP JUMPDEST PUSH2 0xD08 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x479 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AE9 JUMP JUMPDEST PUSH2 0xD3B JUMP JUMPDEST PUSH2 0x29C PUSH2 0x48C CALLDATASIZE PUSH1 0x4 PUSH2 0x1BDE JUMP JUMPDEST PUSH2 0xD6E JUMP JUMPDEST PUSH2 0x251 PUSH2 0x49F CALLDATASIZE PUSH1 0x4 PUSH2 0x1975 JUMP JUMPDEST PUSH2 0xD85 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH2 0x271 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x2D4 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x4EC CALLDATASIZE PUSH1 0x4 PUSH2 0x1A10 JUMP JUMPDEST PUSH2 0xE26 JUMP JUMPDEST PUSH2 0x2D4 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x251 PUSH2 0x514 CALLDATASIZE PUSH1 0x4 PUSH2 0x1975 JUMP JUMPDEST PUSH2 0xE4B JUMP JUMPDEST PUSH2 0x234 PUSH2 0x527 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C5A JUMP JUMPDEST PUSH2 0xFA0 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x53A CALLDATASIZE PUSH1 0x4 PUSH2 0x1B44 JUMP JUMPDEST PUSH2 0xFCE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54A DUP3 PUSH2 0x1009 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x55F SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x58B SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5D8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5AD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5D8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5BB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5ED DUP3 PUSH2 0x102E JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x54A JUMP JUMPDEST PUSH2 0x616 DUP3 DUP3 CALLER PUSH2 0x1067 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x649 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x656 DUP4 DUP4 CALLER PUSH2 0x1074 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6A4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x64283D7B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x640 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH4 0x3DE9D8F1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xF7A763C4 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6F9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x71D SWAP2 SWAP1 PUSH2 0x1CBE JUMP JUMPDEST PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x72E JUMPI PUSH2 0x72E PUSH2 0x1CDF JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x74E SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x77A SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7C7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x79C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7C7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7AA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x7EF DUP2 PUSH2 0x116D JUMP JUMPDEST PUSH2 0x6A4 DUP4 DUP4 PUSH2 0x117A JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH4 0x3DE9D8F1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xF7A763C4 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x848 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x86C SWAP2 SWAP1 PUSH2 0x1CBE JUMP JUMPDEST PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x87D JUMPI PUSH2 0x87D PUSH2 0x1CDF JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x74E SWAP1 PUSH2 0x1C84 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x8C6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8D0 DUP3 DUP3 PUSH2 0x120E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH4 0x3DE9D8F1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xF7A763C4 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x924 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x948 SWAP2 SWAP1 PUSH2 0x1CBE JUMP JUMPDEST PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x959 JUMPI PUSH2 0x959 PUSH2 0x1CDF JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x74E SWAP1 PUSH2 0x1C84 JUMP JUMPDEST PUSH2 0x8D0 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xD6E JUMP JUMPDEST PUSH32 0x3C11D16CBAFFD01DF69CE1C404F6340EE057498F5F00246190EA54220576A848 PUSH2 0x9BB DUP2 PUSH2 0x116D JUMP JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0x9DC JUMPI PUSH1 0x40 MLOAD PUSH4 0x516E361D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x616 DUP3 PUSH2 0x127B JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x9FD DUP2 PUSH2 0x116D JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x6A4 DUP4 DUP3 PUSH2 0x1D43 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54A DUP3 PUSH2 0x102E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xA4C JUMPI PUSH1 0x40 MLOAD PUSH4 0x22718AD9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x640 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP2 SWAP1 PUSH2 0xA83 SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xAAF SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xAFC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xAD1 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xAFC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xADF JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xB11 SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB3D SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB8A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB5F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB8A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB6D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0xB9F SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xBCB SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xC18 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xBED JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xC18 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xBFB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP4 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 PUSH2 0xC77 DUP2 PUSH2 0x116D JUMP JUMPDEST DUP3 ISZERO DUP1 PUSH2 0xC8B JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO JUMPDEST ISZERO PUSH2 0xCA9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x516E361D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8D0 DUP3 DUP5 PUSH2 0x12B6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xCCB DUP2 PUSH2 0x116D JUMP JUMPDEST POP PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x55F SWAP1 PUSH2 0x1C84 JUMP JUMPDEST PUSH2 0x616 CALLER DUP4 DUP4 PUSH2 0x12D0 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xD20 DUP2 PUSH2 0x116D JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD PUSH2 0x6A4 DUP4 DUP3 PUSH2 0x1D43 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xD53 DUP2 PUSH2 0x116D JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD PUSH2 0x6A4 DUP4 DUP3 PUSH2 0x1D43 JUMP JUMPDEST PUSH2 0xD79 DUP5 DUP5 DUP5 PUSH2 0x61A JUMP JUMPDEST PUSH2 0x6A4 DUP5 DUP5 DUP5 DUP5 PUSH2 0x136F JUMP JUMPDEST PUSH1 0x60 PUSH2 0xD90 DUP3 PUSH2 0x102E JUMP JUMPDEST POP PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xDB5 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD PUSH4 0xC87B56DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xC87B56DD SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDFE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x54A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1E03 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xE41 DUP2 PUSH2 0x116D JUMP JUMPDEST PUSH2 0x6A4 DUP4 DUP4 PUSH2 0x120E JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH4 0x3DE9D8F1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xF7A763C4 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE9A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEBE SWAP2 SWAP1 PUSH2 0x1CBE JUMP JUMPDEST PUSH1 0x7 DUP2 GT ISZERO PUSH2 0xECF JUMPI PUSH2 0xECF PUSH2 0x1CDF JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH2 0xEED SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF19 SWAP1 PUSH2 0x1C84 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF66 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF3B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF66 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF49 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP1 PUSH2 0xF77 DUP6 PUSH2 0x1498 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF88 SWAP3 SWAP2 SWAP1 PUSH2 0x1E7A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F08 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xFE6 DUP2 PUSH2 0x116D JUMP JUMPDEST POP PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x54A JUMPI POP PUSH2 0x54A DUP3 PUSH2 0x152B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x54A JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x640 JUMP JUMPDEST PUSH2 0x8D0 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x157B JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND ISZERO PUSH2 0x10A1 JUMPI PUSH2 0x10A1 DUP2 DUP5 DUP7 PUSH2 0x1681 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x10DF JUMPI PUSH2 0x10BE PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x157B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO PUSH2 0x110E JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP8 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1177 DUP2 CALLER PUSH2 0x16E5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1186 DUP4 DUP4 PUSH2 0xC22 JUMP JUMPDEST PUSH2 0x1206 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x11BE CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x54A JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x54A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x121A DUP4 DUP4 PUSH2 0xC22 JUMP JUMPDEST ISZERO PUSH2 0x1206 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP7 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP PUSH1 0x1 PUSH2 0x54A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x128A PUSH1 0x0 DUP4 PUSH1 0x0 PUSH2 0x1074 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x616 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x640 JUMP JUMPDEST PUSH2 0x616 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x171E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1302 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB611743 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x640 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x6A4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x13B1 SWAP1 CALLER SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1EB7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x13EC JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x13E9 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1EEA JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1455 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x141A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x141F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x144D JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x640 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ PUSH2 0x1491 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x640 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x14A5 DUP4 PUSH2 0x1735 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x14C5 JUMPI PUSH2 0x14C5 PUSH2 0x1A3C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x14EF JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x14F9 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x155C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x54A JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x54A JUMP JUMPDEST DUP1 DUP1 PUSH2 0x158F JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1651 JUMPI PUSH1 0x0 PUSH2 0x159F DUP5 PUSH2 0x102E JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x15CB JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x15DE JUMPI POP PUSH2 0x15DC DUP2 DUP5 PUSH2 0xFA0 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1607 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA9FBF51F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x640 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x164F JUMPI DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x168C DUP4 DUP4 DUP4 PUSH2 0x180D JUMP JUMPDEST PUSH2 0x8D0 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x16BA JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x640 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x177E802F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x640 JUMP JUMPDEST PUSH2 0x16EF DUP3 DUP3 PUSH2 0xC22 JUMP JUMPDEST PUSH2 0x616 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x640 JUMP JUMPDEST PUSH2 0x1728 DUP4 DUP4 PUSH2 0x1873 JUMP JUMPDEST PUSH2 0x8D0 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x136F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1774 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x17A0 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x17BE JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x17D6 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x17EA JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x17FC JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x54A JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x186B JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x1847 JUMPI POP PUSH2 0x1847 DUP5 DUP5 PUSH2 0xFA0 JUMP JUMPDEST DUP1 PUSH2 0x186B JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x189D JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x640 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18AB DUP4 DUP4 PUSH1 0x0 PUSH2 0x1074 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x8D0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x39E35637 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x640 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1900 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x190B DUP2 PUSH2 0x18D8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x192D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1915 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x194E DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1912 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x190B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1936 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1987 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x19A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x19BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19C6 DUP4 PUSH2 0x198E JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x19E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19F2 DUP5 PUSH2 0x198E JUMP JUMPDEST SWAP3 POP PUSH2 0x1A00 PUSH1 0x20 DUP6 ADD PUSH2 0x198E JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1A33 PUSH1 0x20 DUP5 ADD PUSH2 0x198E JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1A7B JUMPI PUSH2 0x1A7B PUSH2 0x1A3C JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1A9D JUMPI PUSH2 0x1A9D PUSH2 0x1A3C JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ABE PUSH2 0x1AB9 DUP5 PUSH2 0x1A83 JUMP JUMPDEST PUSH2 0x1A52 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x1AD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1AFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x1B2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B3A DUP6 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1AAB JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x190B DUP3 PUSH2 0x198E JUMP JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1B72 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x1936 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1B84 DUP2 DUP7 PUSH2 0x1936 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1B98 DUP2 DUP6 PUSH2 0x1936 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BBE DUP4 PUSH2 0x198E JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1BD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1BF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BFD DUP6 PUSH2 0x198E JUMP JUMPDEST SWAP4 POP PUSH2 0x1C0B PUSH1 0x20 DUP7 ADD PUSH2 0x198E JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x1C3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C4E DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1AAB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C76 DUP4 PUSH2 0x198E JUMP JUMPDEST SWAP2 POP PUSH2 0x1A33 PUSH1 0x20 DUP5 ADD PUSH2 0x198E JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1C98 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1CB8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x8 DUP2 LT PUSH2 0x190B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x8D0 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x1D1C JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1D3B JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1D28 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D5D JUMPI PUSH2 0x1D5D PUSH2 0x1A3C JUMP JUMPDEST PUSH2 0x1D71 DUP2 PUSH2 0x1D6B DUP5 SLOAD PUSH2 0x1C84 JUMP JUMPDEST DUP5 PUSH2 0x1CF5 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x1DA6 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x1D8E JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x1D3B JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1DD5 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x1DB6 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x1DF3 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x1E3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x1E4B PUSH2 0x1AB9 DUP3 PUSH2 0x1A83 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x1E60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E71 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1912 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1E8C DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x1912 JUMP JUMPDEST PUSH2 0x2023 PUSH1 0xF0 SHL SWAP1 DUP4 ADD SWAP1 DUP2 MSTORE DUP4 MLOAD PUSH2 0x1EAB DUP2 PUSH1 0x2 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1912 JUMP JUMPDEST ADD PUSH1 0x2 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1B98 SWAP1 DUP4 ADD DUP5 PUSH2 0x1936 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x190B DUP2 PUSH2 0x18D8 JUMP INVALID 0xB1 SWAP6 CHAINID 0xDF CREATE 0x1E DUP6 PUSH16 0xB3F010C267A7B1C60363CF8A4664E21C 0xC8 SWAP13 0x26 0x22 CHAINID KECCAK256 0x21 0x4E LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL CODECOPY REVERT XOR ISZERO 0xB2 CHAINID 0xE3 PUSH26 0xE9133EFBD9E98C72B92E6E54040BD515833AB3D4540BAB64736F PUSH13 0x63430008140033000000000000 ","sourceMap":"302:5363:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1744:180;;;;;;:::i;:::-;;:::i;:::-;;;565:14:26;;558:22;540:41;;528:2;513:18;1744:180:21;;;;;;;;2365:89:9;;;:::i;:::-;;;;;;;:::i;3497:154::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1697:32:26;;;1679:51;;1667:2;1652:18;3497:154:9;1533:203:26;3323:113:9;;;;;;:::i;:::-;;:::i;:::-;;4143:578;;;;;;:::i;:::-;;:::i;3810:120:6:-;;;;;;:::i;:::-;3875:7;3901:12;;;:6;:12;;;;;:22;;;;3810:120;;;;2842:25:26;;;2830:2;2815:18;3810:120:6;2696:177:26;838:62:21;;876:24;838:62;;5019:327;;;;;;:::i;:::-;;:::i;4226:136:6:-;;;;;;:::i;:::-;;:::i;4674:339:21:-;;;;;;:::i;:::-;;:::i;5328:245:6:-;;;;;;:::i;:::-;;:::i;599:42:21:-;;;;;-1:-1:-1;;;;;599:42:21;;;5352:311;;;;;;:::i;:::-;;:::i;4787:132:9:-;;;;;;:::i;:::-;;:::i;4503:165:21:-;;;;;;:::i;:::-;;:::i;3345:204::-;;;;;;:::i;:::-;;:::i;2185:118:9:-;;;;;;:::i;:::-;;:::i;1920:208::-;;;;;;:::i;:::-;;:::i;530:63:21:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;2854:136:6:-;;;;;;:::i;:::-;;:::i;4213:205:21:-;;;;;;:::i;:::-;;:::i;2010:183::-;;;;;;:::i;:::-;;:::i;2518:93:9:-;;;:::i;2187:49:6:-;;2232:4;2187:49;;3718:144:9;;;;;;:::i;:::-;;:::i;3607:208:21:-;;;;;;:::i;:::-;;:::i;3879:245::-;;;;;;:::i;:::-;;:::i;4985:208:9:-;;;;;;:::i;:::-;;:::i;3003:285:21:-;;;;;;:::i;:::-;;:::i;647:31::-;;;;;-1:-1:-1;;;;;647:31:21;;;770:62;;808:24;770:62;;4642:138:6;;;;;;:::i;:::-;;:::i;704:60:21:-;;-1:-1:-1;;;;;;;;;;;704:60:21;;2514:418;;;;;;:::i;:::-;;:::i;3928:153:9:-;;;;;;:::i;:::-;;:::i;2280:163:21:-;;;;;;:::i;:::-;;:::i;1744:180::-;1858:4;1881:36;1905:11;1881:23;:36::i;:::-;1874:43;1744:180;-1:-1:-1;;1744:180:21:o;2365:89:9:-;2410:13;2442:5;2435:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2365:89;:::o;3497:154::-;3564:7;3583:22;3597:7;3583:13;:22::i;:::-;-1:-1:-1;6008:7:9;6034:24;;;:15;:24;;;;;;-1:-1:-1;;;;;6034:24:9;3623:21;5938:127;3323:113;3394:35;3403:2;3407:7;735:10:14;3394:8:9;:35::i;:::-;3323:113;;:::o;4143:578::-;-1:-1:-1;;;;;4237:16:9;;4233:87;;4276:33;;-1:-1:-1;;;4276:33:9;;4306:1;4276:33;;;1679:51:26;1652:18;;4276:33:9;;;;;;;;4233:87;4538:21;4562:34;4570:2;4574:7;735:10:14;4562:7:9;:34::i;:::-;4538:58;;4627:4;-1:-1:-1;;;;;4610:21:9;:13;-1:-1:-1;;;;;4610:21:9;;4606:109;;4654:50;;-1:-1:-1;;;4654:50:9;;-1:-1:-1;;;;;7723:15:26;;;4654:50:9;;;7705:34:26;7755:18;;;7748:34;;;7818:15;;7798:18;;;7791:43;7640:18;;4654:50:9;7465:375:26;4606:109:9;4223:498;4143:578;;;:::o;5019:327:21:-;5185:27;;5165:98;;-1:-1:-1;;;5165:98:21;;;;;2842:25:26;;;5094:13:21;;5119:22;;-1:-1:-1;;;;;5185:27:21;;;;5165:89;;2815:18:26;;5165:98:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5144:129;;;;;;;;:::i;:::-;5290:38;;;;:22;:38;;;;;:49;;5283:56;;5119:154;;-1:-1:-1;5290:49:21;5283:56;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5019:327;;;:::o;4226:136:6:-;3875:7;3901:12;;;:6;:12;;;;;:22;;;2464:16;2475:4;2464:10;:16::i;:::-;4330:25:::1;4341:4;4347:7;4330:10;:25::i;4674:339:21:-:0;4846:27;;4826:98;;-1:-1:-1;;;4826:98:21;;;;;2842:25:26;;;4755:13:21;;4780:22;;-1:-1:-1;;;;;4846:27:21;;;;4826:89;;2815:18:26;;4826:98:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4805:129;;;;;;;;:::i;:::-;4951:38;;;;:22;:38;;;;;:55;;4944:62;;4780:154;;-1:-1:-1;4951:55:21;4944:62;;;:::i;5328:245:6:-;-1:-1:-1;;;;;5421:34:6;;735:10:14;5421:34:6;5417:102;;5478:30;;-1:-1:-1;;;5478:30:6;;;;;;;;;;;5417:102;5529:37;5541:4;5547:18;5529:11;:37::i;:::-;;5328:245;;:::o;5352:311:21:-;5503:27;;5483:98;;-1:-1:-1;;;5483:98:21;;;;;2842:25:26;;;5412:13:21;;5437:22;;-1:-1:-1;;;;;5503:27:21;;;;5483:89;;2815:18:26;;5483:98:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5462:129;;;;;;;;:::i;:::-;5608:38;;;;:22;:38;;;;;5601:55;;5437:154;;-1:-1:-1;5608:38:21;5601:55;;;:::i;4787:132:9:-;4873:39;4890:4;4896:2;4900:7;4873:39;;;;;;;;;;;;:16;:39::i;4503:165:21:-;876:24;2464:16:6;2475:4;2464:10;:16::i;:::-;4577:7:21::1;4588:1;4577:12:::0;4573:65:::1;;4612:15;;-1:-1:-1::0;;;4612:15:21::1;;;;;;;;;;;4573:65;4647:14;4653:7;4647:5;:14::i;3345:204::-:0;-1:-1:-1;;;;;;;;;;;2464:16:6;2475:4;2464:10;:16::i;:::-;3481:38:21::1;::::0;;;:22:::1;:38;::::0;;;;:61:::1;3532:10:::0;3481:38;:61:::1;:::i;2185:118:9:-:0;2248:7;2274:22;2288:7;2274:13;:22::i;1920:208::-;1983:7;-1:-1:-1;;;;;2006:19:9;;2002:87;;2048:30;;-1:-1:-1;;;2048:30:9;;2075:1;2048:30;;;1679:51:26;1652:18;;2048:30:9;1533:203:26;2002:87:9;-1:-1:-1;;;;;;2105:16:9;;;;;:9;:16;;;;;;;1920:208::o;530:63:21:-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2854:136:6:-;2931:4;2954:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;2954:29:6;;;;;;;;;;;;;;;2854:136::o;4213:205:21:-;808:24;2464:16:6;2475:4;2464:10;:16::i;:::-;4299:12:21;;;:32:::1;;-1:-1:-1::0;;;;;;4315:16:21;::::1;::::0;4299:32:::1;4295:85;;;4354:15;;-1:-1:-1::0;;;4354:15:21::1;;;;;;;;;;;4295:85;4389:22;4399:2;4403:7;4389:9;:22::i;2010:183::-:0;-1:-1:-1;;;;;;;;;;;2464:16:6;2475:4;2464:10;:16::i;:::-;-1:-1:-1;2130:27:21::1;:56:::0;;-1:-1:-1;;;;;;2130:56:21::1;-1:-1:-1::0;;;;;2130:56:21;;;::::1;::::0;;;::::1;::::0;;2010:183::o;2518:93:9:-;2565:13;2597:7;2590:14;;;;;:::i;3718:144::-;3803:52;735:10:14;3836:8:9;3846;3803:18;:52::i;3607:208:21:-;-1:-1:-1;;;;;;;;;;;2464:16:6;2475:4;2464:10;:16::i;:::-;3745:38:21::1;::::0;;;:22:::1;:38;::::0;;;;:49:::1;;:63;3797:11:::0;3745:49;:63:::1;:::i;3879:245::-:0;-1:-1:-1;;;;;;;;;;;2464:16:6;2475:4;2464:10;:16::i;:::-;4029:38:21::1;::::0;;;:22:::1;:38;::::0;;;;:68:::1;;:88;4100:17:::0;4029:68;:88:::1;:::i;4985:208:9:-:0;5098:31;5111:4;5117:2;5121:7;5098:12;:31::i;:::-;5139:47;5162:4;5168:2;5172:7;5181:4;5139:22;:47::i;3003:285:21:-;3082:13;3107:22;3121:7;3107:13;:22::i;:::-;-1:-1:-1;3143:16:21;;-1:-1:-1;;;;;3143:16:21;3139:70;;-1:-1:-1;;3189:9:21;;;;;;;;;-1:-1:-1;3189:9:21;;;3003:285::o;3139:70::-;3246:16;;3225:56;;-1:-1:-1;;;3225:56:21;;;;;2842:25:26;;;-1:-1:-1;;;;;3246:16:21;;;;3225:47;;2815:18:26;;3225:56:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3225:56:21;;;;;;;;;;;;:::i;4642:138:6:-;3875:7;3901:12;;;:6;:12;;;;;:22;;;2464:16;2475:4;2464:10;:16::i;:::-;4747:26:::1;4759:4;4765:7;4747:11;:26::i;2514:418:21:-:0;2662:27;;2642:98;;-1:-1:-1;;;2642:98:21;;;;;2842:25:26;;;2571:13:21;;2596:22;;-1:-1:-1;;;;;2662:27:21;;;;2642:89;;2815:18:26;;2642:98:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2621:129;;;;;;;;:::i;:::-;2760:23;2786:38;;;:22;:38;;;;;2760:87;;2596:154;;-1:-1:-1;2760:23:21;;:87;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2888:9;2905:18;:7;:16;:18::i;:::-;2871:53;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2857:68;;;;2514:418;;;:::o;3928:153:9:-;-1:-1:-1;;;;;4039:25:9;;;4016:4;4039:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;3928:153::o;2280:163:21:-;-1:-1:-1;;;;;;;;;;;2464:16:6;2475:4;2464:10;:16::i;:::-;-1:-1:-1;2394:16:21::1;:42:::0;;-1:-1:-1;;;;;;2394:42:21::1;-1:-1:-1::0;;;;;2394:42:21;;;::::1;::::0;;;::::1;::::0;;2280:163::o;2565:202:6:-;2650:4;-1:-1:-1;;;;;;2673:47:6;;-1:-1:-1;;;2673:47:6;;:87;;;2724:36;2748:11;2724:23;:36::i;16138:241:9:-;16201:7;5799:16;;;:7;:16;;;;;;-1:-1:-1;;;;;5799:16:9;;16263:88;;16309:31;;-1:-1:-1;;;16309:31:9;;;;;2842:25:26;;;2815:18;;16309:31:9;2696:177:26;14418:120:9;14498:33;14507:2;14511:7;14520:4;14526;14498:8;:33::i;8838:795::-;8924:7;5799:16;;;:7;:16;;;;;;-1:-1:-1;;;;;5799:16:9;;;;9035:18;;;9031:86;;9069:37;9086:4;9092;9098:7;9069:16;:37::i;:::-;-1:-1:-1;;;;;9161:18:9;;;9157:256;;9277:48;9294:1;9298:7;9315:1;9319:5;9277:8;:48::i;:::-;-1:-1:-1;;;;;9368:15:9;;;;;;:9;:15;;;;;:20;;-1:-1:-1;;9368:20:9;;;9157:256;-1:-1:-1;;;;;9427:16:9;;;9423:107;;-1:-1:-1;;;;;9487:13:9;;;;;;:9;:13;;;;;:18;;9504:1;9487:18;;;9423:107;9540:16;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;9540:21:9;-1:-1:-1;;;;;9540:21:9;;;;;;;;;9577:27;;9540:16;;9577:27;;;;;;;9622:4;8838:795;-1:-1:-1;;;;8838:795:9:o;3199:103:6:-;3265:30;3276:4;735:10:14;3265::6;:30::i;:::-;3199:103;:::o;6179:316::-;6256:4;6277:22;6285:4;6291:7;6277;:22::i;:::-;6272:217;;6315:12;;;;:6;:12;;;;;;;;-1:-1:-1;;;;;6315:29:6;;;;;;;;;:36;;-1:-1:-1;;6315:36:6;6347:4;6315:36;;;6397:12;735:10:14;;656:96;6397:12:6;-1:-1:-1;;;;;6370:40:6;6388:7;-1:-1:-1;;;;;6370:40:6;6382:4;6370:40;;;;;;;;;;-1:-1:-1;6431:4:6;6424:11;;6272:217;-1:-1:-1;6473:5:6;6466:12;;6730:317;6808:4;6828:22;6836:4;6842:7;6828;:22::i;:::-;6824:217;;;6898:5;6866:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;6866:29:6;;;;;;;;;;:37;;-1:-1:-1;;6866:37:6;;;6922:40;735:10:14;;6866:12:6;;6922:40;;6898:5;6922:40;-1:-1:-1;6983:4:6;6976:11;;11462:227:9;11513:21;11537:40;11553:1;11557:7;11574:1;11537:7;:40::i;:::-;11513:64;-1:-1:-1;;;;;;11591:27:9;;11587:96;;11641:31;;-1:-1:-1;;;11641:31:9;;;;;2842:25:26;;;2815:18;;11641:31:9;2696:177:26;10633:100:9;10700:26;10710:2;10714:7;10700:26;;;;;;;;;;;;:9;:26::i;15591:312::-;-1:-1:-1;;;;;15698:22:9;;15694:91;;15743:31;;-1:-1:-1;;;15743:31:9;;-1:-1:-1;;;;;1697:32:26;;15743:31:9;;;1679:51:26;1652:18;;15743:31:9;1533:203:26;15694:91:9;-1:-1:-1;;;;;15794:25:9;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;15794:46:9;;;;;;;;;;15855:41;;540::26;;;15855::9;;513:18:26;15855:41:9;;;;;;;15591:312;;;:::o;16918:782::-;-1:-1:-1;;;;;17034:14:9;;;:18;17030:664;;17072:71;;-1:-1:-1;;;17072:71:9;;-1:-1:-1;;;;;17072:36:9;;;;;:71;;735:10:14;;17123:4:9;;17129:7;;17138:4;;17072:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;17072:71:9;;;;;;;;-1:-1:-1;;17072:71:9;;;;;;;;;;;;:::i;:::-;;;17068:616;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17381:6;:13;17398:1;17381:18;17377:293;;17430:25;;-1:-1:-1;;;17430:25:9;;-1:-1:-1;;;;;1697:32:26;;17430:25:9;;;1679:51:26;1652:18;;17430:25:9;1533:203:26;17377:293:9;17622:6;17616:13;17607:6;17603:2;17599:15;17592:38;17068:616;-1:-1:-1;;;;;;17190:51:9;;-1:-1:-1;;;17190:51:9;17186:130;;17272:25;;-1:-1:-1;;;17272:25:9;;-1:-1:-1;;;;;1697:32:26;;17272:25:9;;;1679:51:26;1652:18;;17272:25:9;1533:203:26;17186:130:9;17144:186;16918:782;;;;:::o;637:698:15:-;693:13;742:14;759:17;770:5;759:10;:17::i;:::-;779:1;759:21;742:38;;794:20;828:6;817:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;817:18:15;-1:-1:-1;794:41:15;-1:-1:-1;955:28:15;;;971:2;955:28;1010:282;-1:-1:-1;;1041:5:15;-1:-1:-1;;;1175:2:15;1164:14;;1159:32;1041:5;1146:46;1236:2;1227:11;;;-1:-1:-1;1256:21:15;1010:282;1256:21;-1:-1:-1;1312:6:15;637:698;-1:-1:-1;;;637:698:15:o;1561:300:9:-;1663:4;-1:-1:-1;;;;;;1698:40:9;;-1:-1:-1;;;1698:40:9;;:104;;-1:-1:-1;;;;;;;1754:48:9;;-1:-1:-1;;;1754:48:9;1698:104;:156;;;-1:-1:-1;;;;;;;;;;861:40:16;;;1818:36:9;762:146:16;14720:662:9;14880:9;:31;;;-1:-1:-1;;;;;;14893:18:9;;;;14880:31;14876:460;;;14927:13;14943:22;14957:7;14943:13;:22::i;:::-;14927:38;-1:-1:-1;;;;;;15093:18:9;;;;;;:35;;;15124:4;-1:-1:-1;;;;;15115:13:9;:5;-1:-1:-1;;;;;15115:13:9;;;15093:35;:69;;;;;15133:29;15150:5;15157:4;15133:16;:29::i;:::-;15132:30;15093:69;15089:142;;;15189:27;;-1:-1:-1;;;15189:27:9;;-1:-1:-1;;;;;1697:32:26;;15189:27:9;;;1679:51:26;1652:18;;15189:27:9;1533:203:26;15089:142:9;15249:9;15245:81;;;15303:7;15299:2;-1:-1:-1;;;;;15283:28:9;15292:5;-1:-1:-1;;;;;15283:28:9;;;;;;;;;;;15245:81;14913:423;14876:460;-1:-1:-1;;15346:24:9;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;15346:29:9;-1:-1:-1;;;;;15346:29:9;;;;;;;;;;14720:662::o;7082:368::-;7194:38;7208:5;7215:7;7224;7194:13;:38::i;:::-;7189:255;;-1:-1:-1;;;;;7252:19:9;;7248:186;;7298:31;;-1:-1:-1;;;7298:31:9;;;;;2842:25:26;;;2815:18;;7298:31:9;2696:177:26;7248:186:9;7375:44;;-1:-1:-1;;;7375:44:9;;-1:-1:-1;;;;;12837:32:26;;7375:44:9;;;12819:51:26;12886:18;;;12879:34;;;12792:18;;7375:44:9;12645:274:26;3432:197:6;3520:22;3528:4;3534:7;3520;:22::i;:::-;3515:108;;3565:47;;-1:-1:-1;;;3565:47:6;;-1:-1:-1;;;;;12837:32:26;;3565:47:6;;;12819:51:26;12886:18;;;12879:34;;;12792:18;;3565:47:6;12645:274:26;10954:182:9;11048:18;11054:2;11058:7;11048:5;:18::i;:::-;11076:53;11107:1;11111:2;11115:7;11124:4;11076:22;:53::i;12214:916:18:-;12267:7;;-1:-1:-1;;;12342:17:18;;12338:103;;-1:-1:-1;;;12379:17:18;;;-1:-1:-1;12424:2:18;12414:12;12338:103;12467:8;12458:5;:17;12454:103;;12504:8;12495:17;;;-1:-1:-1;12540:2:18;12530:12;12454:103;12583:8;12574:5;:17;12570:103;;12620:8;12611:17;;;-1:-1:-1;12656:2:18;12646:12;12570:103;12699:7;12690:5;:16;12686:100;;12735:7;12726:16;;;-1:-1:-1;12770:1:18;12760:11;12686:100;12812:7;12803:5;:16;12799:100;;12848:7;12839:16;;;-1:-1:-1;12883:1:18;12873:11;12799:100;12925:7;12916:5;:16;12912:100;;12961:7;12952:16;;;-1:-1:-1;12996:1:18;12986:11;12912:100;13038:7;13029:5;:16;13025:66;;13075:1;13065:11;13117:6;12214:916;-1:-1:-1;;12214:916:18:o;6376:272:9:-;6479:4;-1:-1:-1;;;;;6514:21:9;;;;;;:127;;;6561:7;-1:-1:-1;;;;;6552:16:9;:5;-1:-1:-1;;;;;6552:16:9;;:52;;;;6572:32;6589:5;6596:7;6572:16;:32::i;:::-;6552:88;;;-1:-1:-1;6008:7:9;6034:24;;;:15;:24;;;;;;-1:-1:-1;;;;;6608:32:9;;;6034:24;;6608:32;6552:88;6495:146;6376:272;-1:-1:-1;;;;6376:272:9:o;9955:327::-;-1:-1:-1;;;;;10022:16:9;;10018:87;;10061:33;;-1:-1:-1;;;10061:33:9;;10091:1;10061:33;;;1679:51:26;1652:18;;10061:33:9;1533:203:26;10018:87:9;10114:21;10138:32;10146:2;10150:7;10167:1;10138:7;:32::i;:::-;10114:56;-1:-1:-1;;;;;;10184:27:9;;;10180:96;;10234:31;;-1:-1:-1;;;10234:31:9;;10262:1;10234:31;;;1679:51:26;1652:18;;10234:31:9;1533:203:26;14:131;-1:-1:-1;;;;;;88:32:26;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;:::-;384:5;150:245;-1:-1:-1;;;150:245:26:o;592:250::-;677:1;687:113;701:6;698:1;695:13;687:113;;;777:11;;;771:18;758:11;;;751:39;723:2;716:10;687:113;;;-1:-1:-1;;834:1:26;816:16;;809:27;592:250::o;847:271::-;889:3;927:5;921:12;954:6;949:3;942:19;970:76;1039:6;1032:4;1027:3;1023:14;1016:4;1009:5;1005:16;970:76;:::i;:::-;1100:2;1079:15;-1:-1:-1;;1075:29:26;1066:39;;;;1107:4;1062:50;;847:271;-1:-1:-1;;847:271:26:o;1123:220::-;1272:2;1261:9;1254:21;1235:4;1292:45;1333:2;1322:9;1318:18;1310:6;1292:45;:::i;1348:180::-;1407:6;1460:2;1448:9;1439:7;1435:23;1431:32;1428:52;;;1476:1;1473;1466:12;1428:52;-1:-1:-1;1499:23:26;;1348:180;-1:-1:-1;1348:180:26:o;1741:173::-;1809:20;;-1:-1:-1;;;;;1858:31:26;;1848:42;;1838:70;;1904:1;1901;1894:12;1838:70;1741:173;;;:::o;1919:254::-;1987:6;1995;2048:2;2036:9;2027:7;2023:23;2019:32;2016:52;;;2064:1;2061;2054:12;2016:52;2087:29;2106:9;2087:29;:::i;:::-;2077:39;2163:2;2148:18;;;;2135:32;;-1:-1:-1;;;1919:254:26:o;2178:328::-;2255:6;2263;2271;2324:2;2312:9;2303:7;2299:23;2295:32;2292:52;;;2340:1;2337;2330:12;2292:52;2363:29;2382:9;2363:29;:::i;:::-;2353:39;;2411:38;2445:2;2434:9;2430:18;2411:38;:::i;:::-;2401:48;;2496:2;2485:9;2481:18;2468:32;2458:42;;2178:328;;;;;:::o;2878:254::-;2946:6;2954;3007:2;2995:9;2986:7;2982:23;2978:32;2975:52;;;3023:1;3020;3013:12;2975:52;3059:9;3046:23;3036:33;;3088:38;3122:2;3111:9;3107:18;3088:38;:::i;:::-;3078:48;;2878:254;;;;;:::o;3137:127::-;3198:10;3193:3;3189:20;3186:1;3179:31;3229:4;3226:1;3219:15;3253:4;3250:1;3243:15;3269:275;3340:2;3334:9;3405:2;3386:13;;-1:-1:-1;;3382:27:26;3370:40;;3440:18;3425:34;;3461:22;;;3422:62;3419:88;;;3487:18;;:::i;:::-;3523:2;3516:22;3269:275;;-1:-1:-1;3269:275:26:o;3549:187::-;3598:4;3631:18;3623:6;3620:30;3617:56;;;3653:18;;:::i;:::-;-1:-1:-1;3719:2:26;3698:15;-1:-1:-1;;3694:29:26;3725:4;3690:40;;3549:187::o;3741:338::-;3806:5;3835:53;3851:36;3880:6;3851:36;:::i;:::-;3835:53;:::i;:::-;3826:62;;3911:6;3904:5;3897:21;3951:3;3942:6;3937:3;3933:16;3930:25;3927:45;;;3968:1;3965;3958:12;3927:45;4017:6;4012:3;4005:4;3998:5;3994:16;3981:43;4071:1;4064:4;4055:6;4048:5;4044:18;4040:29;4033:40;3741:338;;;;;:::o;4084:519::-;4162:6;4170;4223:2;4211:9;4202:7;4198:23;4194:32;4191:52;;;4239:1;4236;4229:12;4191:52;4275:9;4262:23;4252:33;;4336:2;4325:9;4321:18;4308:32;4363:18;4355:6;4352:30;4349:50;;;4395:1;4392;4385:12;4349:50;4418:22;;4471:4;4463:13;;4459:27;-1:-1:-1;4449:55:26;;4500:1;4497;4490:12;4449:55;4523:74;4589:7;4584:2;4571:16;4566:2;4562;4558:11;4523:74;:::i;:::-;4513:84;;;4084:519;;;;;:::o;4608:186::-;4667:6;4720:2;4708:9;4699:7;4695:23;4691:32;4688:52;;;4736:1;4733;4726:12;4688:52;4759:29;4778:9;4759:29;:::i;4981:546::-;5226:2;5215:9;5208:21;5189:4;5252:45;5293:2;5282:9;5278:18;5270:6;5252:45;:::i;:::-;5345:9;5337:6;5333:22;5328:2;5317:9;5313:18;5306:50;5379:33;5405:6;5397;5379:33;:::i;:::-;5365:47;;5460:9;5452:6;5448:22;5443:2;5432:9;5428:18;5421:50;5488:33;5514:6;5506;5488:33;:::i;:::-;5480:41;4981:546;-1:-1:-1;;;;;;4981:546:26:o;5791:347::-;5856:6;5864;5917:2;5905:9;5896:7;5892:23;5888:32;5885:52;;;5933:1;5930;5923:12;5885:52;5956:29;5975:9;5956:29;:::i;:::-;5946:39;;6035:2;6024:9;6020:18;6007:32;6082:5;6075:13;6068:21;6061:5;6058:32;6048:60;;6104:1;6101;6094:12;6048:60;6127:5;6117:15;;;5791:347;;;;;:::o;6143:667::-;6238:6;6246;6254;6262;6315:3;6303:9;6294:7;6290:23;6286:33;6283:53;;;6332:1;6329;6322:12;6283:53;6355:29;6374:9;6355:29;:::i;:::-;6345:39;;6403:38;6437:2;6426:9;6422:18;6403:38;:::i;:::-;6393:48;;6488:2;6477:9;6473:18;6460:32;6450:42;;6543:2;6532:9;6528:18;6515:32;6570:18;6562:6;6559:30;6556:50;;;6602:1;6599;6592:12;6556:50;6625:22;;6678:4;6670:13;;6666:27;-1:-1:-1;6656:55:26;;6707:1;6704;6697:12;6656:55;6730:74;6796:7;6791:2;6778:16;6773:2;6769;6765:11;6730:74;:::i;:::-;6720:84;;;6143:667;;;;;;;:::o;6815:260::-;6883:6;6891;6944:2;6932:9;6923:7;6919:23;6915:32;6912:52;;;6960:1;6957;6950:12;6912:52;6983:29;7002:9;6983:29;:::i;:::-;6973:39;;7031:38;7065:2;7054:9;7050:18;7031:38;:::i;7080:380::-;7159:1;7155:12;;;;7202;;;7223:61;;7277:4;7269:6;7265:17;7255:27;;7223:61;7330:2;7322:6;7319:14;7299:18;7296:38;7293:161;;7376:10;7371:3;7367:20;7364:1;7357:31;7411:4;7408:1;7401:15;7439:4;7436:1;7429:15;7293:161;;7080:380;;;:::o;7845:279::-;7934:6;7987:2;7975:9;7966:7;7962:23;7958:32;7955:52;;;8003:1;8000;7993:12;7955:52;8035:9;8029:16;8074:1;8067:5;8064:12;8054:40;;8090:1;8087;8080:12;8129:127;8190:10;8185:3;8181:20;8178:1;8171:31;8221:4;8218:1;8211:15;8245:4;8242:1;8235:15;8387:545;8489:2;8484:3;8481:11;8478:448;;;8525:1;8550:5;8546:2;8539:17;8595:4;8591:2;8581:19;8665:2;8653:10;8649:19;8646:1;8642:27;8636:4;8632:38;8701:4;8689:10;8686:20;8683:47;;;-1:-1:-1;8724:4:26;8683:47;8779:2;8774:3;8770:12;8767:1;8763:20;8757:4;8753:31;8743:41;;8834:82;8852:2;8845:5;8842:13;8834:82;;;8897:17;;;8878:1;8867:13;8834:82;;;8838:3;;;8387:545;;;:::o;9108:1352::-;9234:3;9228:10;9261:18;9253:6;9250:30;9247:56;;;9283:18;;:::i;:::-;9312:97;9402:6;9362:38;9394:4;9388:11;9362:38;:::i;:::-;9356:4;9312:97;:::i;:::-;9464:4;;9528:2;9517:14;;9545:1;9540:663;;;;10247:1;10264:6;10261:89;;;-1:-1:-1;10316:19:26;;;10310:26;10261:89;-1:-1:-1;;9065:1:26;9061:11;;;9057:24;9053:29;9043:40;9089:1;9085:11;;;9040:57;10363:81;;9510:944;;9540:663;8334:1;8327:14;;;8371:4;8358:18;;-1:-1:-1;;9576:20:26;;;9694:236;9708:7;9705:1;9702:14;9694:236;;;9797:19;;;9791:26;9776:42;;9889:27;;;;9857:1;9845:14;;;;9724:19;;9694:236;;;9698:3;9958:6;9949:7;9946:19;9943:201;;;10019:19;;;10013:26;-1:-1:-1;;10102:1:26;10098:14;;;10114:3;10094:24;10090:37;10086:42;10071:58;10056:74;;9943:201;-1:-1:-1;;;;;10190:1:26;10174:14;;;10170:22;10157:36;;-1:-1:-1;9108:1352:26:o;10465:649::-;10545:6;10598:2;10586:9;10577:7;10573:23;10569:32;10566:52;;;10614:1;10611;10604:12;10566:52;10647:9;10641:16;10680:18;10672:6;10669:30;10666:50;;;10712:1;10709;10702:12;10666:50;10735:22;;10788:4;10780:13;;10776:27;-1:-1:-1;10766:55:26;;10817:1;10814;10807:12;10766:55;10846:2;10840:9;10871:49;10887:32;10916:2;10887:32;:::i;10871:49::-;10943:2;10936:5;10929:17;10983:7;10978:2;10973;10969;10965:11;10961:20;10958:33;10955:53;;;11004:1;11001;10994:12;10955:53;11017:67;11081:2;11076;11069:5;11065:14;11060:2;11056;11052:11;11017:67;:::i;:::-;11103:5;10465:649;-1:-1:-1;;;;;10465:649:26:o;11119:641::-;11399:3;11437:6;11431:13;11453:66;11512:6;11507:3;11500:4;11492:6;11488:17;11453:66;:::i;:::-;-1:-1:-1;;;11541:16:26;;;11566:19;;;11610:13;;11632:78;11610:13;11697:1;11686:13;;11679:4;11667:17;;11632:78;:::i;:::-;11730:20;11752:1;11726:28;;11119:641;-1:-1:-1;;;;11119:641:26:o;11765:489::-;-1:-1:-1;;;;;12034:15:26;;;12016:34;;12086:15;;12081:2;12066:18;;12059:43;12133:2;12118:18;;12111:34;;;12181:3;12176:2;12161:18;;12154:31;;;11959:4;;12202:46;;12228:19;;12220:6;12202:46;:::i;12259:249::-;12328:6;12381:2;12369:9;12360:7;12356:23;12352:32;12349:52;;;12397:1;12394;12387:12;12349:52;12429:9;12423:16;12448:30;12472:5;12448:30;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"1605800","executionCost":"infinite","totalCost":"infinite"},"external":{"BURNER_ROLE()":"285","DEFAULT_ADMIN_ROLE()":"262","MINTER_ROLE()":"306","OWNER_ROLE()":"infinite","approve(address,uint256)":"31560","balanceOf(address)":"2722","burn(uint256)":"infinite","characterNFTManagerContract()":"2427","classIdToCharacterData(uint256)":"infinite","getApproved(uint256)":"infinite","getClassDescription(uint256)":"infinite","getClassImage(uint256)":"infinite","getClassName(uint256)":"infinite","getRoleAdmin(bytes32)":"2512","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"2722","isApprovedForAll(address,address)":"infinite","mint(uint256,address)":"infinite","name()":"infinite","ownerOf(uint256)":"infinite","renounceRole(bytes32,address)":"29097","revokeRole(bytes32,address)":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26748","setCharacterNFTManager(address)":"infinite","setTokenUriContract(address)":"infinite","supportsInterface(bytes4)":"infinite","symbol()":"infinite","tokenName(uint256)":"infinite","tokenURI(uint256)":"infinite","tokenUriContract()":"2426","transferFrom(address,address,uint256)":"infinite","updateClassDescriptions(uint256,string)":"infinite","updateClassImages(uint256,string)":"infinite","updateClassNames(uint256,string)":"infinite"}},"methodIdentifiers":{"BURNER_ROLE()":"282c51f3","DEFAULT_ADMIN_ROLE()":"a217fddf","MINTER_ROLE()":"d5391393","OWNER_ROLE()":"e58378bb","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","characterNFTManagerContract()":"36e67256","classIdToCharacterData(uint256)":"877b79b8","getApproved(uint256)":"081812fc","getClassDescription(uint256)":"31bcb9d8","getClassImage(uint256)":"2d537851","getClassName(uint256)":"3ddfbd8b","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isApprovedForAll(address,address)":"e985e9c5","mint(uint256,address)":"94bf804d","name()":"06fdde03","ownerOf(uint256)":"6352211e","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","setCharacterNFTManager(address)":"94dd3215","setTokenUriContract(address)":"f210ace4","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenName(uint256)":"e725f877","tokenURI(uint256)":"c87b56dd","tokenUriContract()":"c8cc5175","transferFrom(address,address,uint256)":"23b872dd","updateClassDescriptions(uint256,string)":"ae53a1a1","updateClassImages(uint256,string)":"a41f6179","updateClassNames(uint256,string)":"58342c90"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValues\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"characterNFTManagerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"classIdToCharacterData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"className\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"classImage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"classDescription\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getClassDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getClassImage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getClassName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"characterNFTManagerAddress\",\"type\":\"address\"}],\"name\":\"setCharacterNFTManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenUriContractAddress\",\"type\":\"address\"}],\"name\":\"setTokenUriContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenUriContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classEnumValue\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"classDescriptions\",\"type\":\"string\"}],\"name\":\"updateClassDescriptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classEnumValue\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"classImages\",\"type\":\"string\"}],\"name\":\"updateClassImages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"classEnumValue\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"classNames\",\"type\":\"string\"}],\"name\":\"updateClassNames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burn a token, only a burner can call this function\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(uint256,address)\":{\"details\":\"Mint a new token, only a minter can call this function\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setCharacterNFTManager(address)\":{\"details\":\"Set the address of the CharacterNFTManager contract\"},\"setTokenUriContract(address)\":{\"details\":\"Set the address of the CharacterNFTTokenURI contract\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenName(uint256)\":{\"details\":\"Returns the name of a given token ID\"},\"tokenURI(uint256)\":{\"details\":\"Returns the URI for a given token ID\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"updateClassDescriptions(uint256,string)\":{\"details\":\"Update the class descriptions\"},\"updateClassImages(uint256,string)\":{\"details\":\"Update the class images\"},\"updateClassNames(uint256,string)\":{\"details\":\"Update the class names\"}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidValues()\":[{\"notice\":\"ERRORS *\"}]},\"kind\":\"user\",\"methods\":{\"OWNER_ROLE()\":{\"notice\":\"ROLES *\"},\"constructor\":{\"notice\":\"FUNCTIONS *\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/erc721/CharacterNFT.sol\":\"CharacterNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x6f7014d688c4386c26e8c02371ecb7f7740d2542f1ecadffd5a3084511e2a344\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/BaseHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract BaseHelper is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    /** ROLES **/\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant UTILITY_ROLE = keccak256(\\\"UTILITY_ROLE\\\");\\n\\n    /** ERRORS **/\\n\\n    error InvalidValues();\\n\\n    /** MODIFIERS **/\\n\\n    /** FUNCTIONS **/\\n\\n    function _baseInitialize(address initialOwner) internal onlyInitializing {\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        // Grant default admin role to initialOwner\\n        _grantRole(DEFAULT_ADMIN_ROLE, initialOwner);\\n        // Grant pauser role to initialOwner\\n        _grantRole(PAUSER_ROLE, initialOwner);\\n        _grantRole(OWNER_ROLE, initialOwner);\\n        _grantRole(MINTER_ROLE, initialOwner);\\n        _grantRole(ADMIN_ROLE, initialOwner);\\n        _grantRole(UTILITY_ROLE, initialOwner);\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    // The gap is needed to avoid overwriting storage variables in future upgrades\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa7a00044dbab2a0f885e29248f5cd0d12fd4639169795202883ff28bee439756\",\"license\":\"MIT\"},\"contracts/erc721/CharacterNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./CharacterNFTManager.sol\\\";\\nimport \\\"./CharacterNFTTokenURI.sol\\\";\\n\\ncontract CharacterNFT is ERC721, AccessControl {\\n    using Strings for uint256;\\n\\n    /** VARIABLES **/\\n\\n    struct CharacterData {\\n        string className;\\n        string classImage;\\n        string classDescription;\\n    }\\n\\n    mapping(uint256 => CharacterData) public classIdToCharacterData;\\n    address public characterNFTManagerContract;\\n    address public tokenUriContract;\\n\\n    /** ROLES **/\\n\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n    /** ERRORS **/\\n\\n    error InvalidValues();\\n\\n    /** MODIFIERS **/\\n\\n    /** FUNCTIONS **/\\n\\n    constructor() ERC721(\\\"Diablo\\\", \\\"D2NFT\\\") {\\n        // DEFAULT_ADMIN_ROLE is a special role that acts as the default admin role for all roles\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(OWNER_ROLE, msg.sender);\\n        _grantRole(MINTER_ROLE, msg.sender);\\n        _grantRole(BURNER_ROLE, msg.sender);\\n\\n        classIdToCharacterData[1].className = \\\"BARBARIAN\\\";\\n        classIdToCharacterData[2].className = \\\"NECROMANCER\\\";\\n        classIdToCharacterData[3].className = \\\"PALADIN\\\";\\n        classIdToCharacterData[4].className = \\\"SORCERESS\\\";\\n        classIdToCharacterData[5].className = \\\"AMAZON\\\";\\n        classIdToCharacterData[6].className = \\\"ASSASSIN\\\";\\n        classIdToCharacterData[7].className = \\\"DRUID\\\";\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ERC721, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Set the address of the CharacterNFTManager contract\\n     */\\n    function setCharacterNFTManager(\\n        address characterNFTManagerAddress\\n    ) public onlyRole(OWNER_ROLE) {\\n        characterNFTManagerContract = characterNFTManagerAddress;\\n    }\\n\\n    /**\\n     * @dev Set the address of the CharacterNFTTokenURI contract\\n     */\\n    function setTokenUriContract(\\n        address tokenUriContractAddress\\n    ) public onlyRole(OWNER_ROLE) {\\n        tokenUriContract = tokenUriContractAddress;\\n    }\\n\\n    /**\\n     * @dev Returns the name of a given token ID\\n     */\\n    function tokenName(uint256 tokenId) public view returns (string memory) {\\n        uint256 classEnumValue = uint256(\\n            CharacterNFTManager(characterNFTManagerContract)\\n                .tokenIdToCharacterClass(tokenId)\\n        );\\n        string memory className = classIdToCharacterData[classEnumValue]\\n            .className;\\n        return string(abi.encodePacked(className, \\\" #\\\", tokenId.toString()));\\n    }\\n\\n    /**\\n     * @dev Returns the URI for a given token ID\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override returns (string memory) {\\n        _requireOwned(tokenId);\\n        if (tokenUriContract == address(0)) {\\n            return \\\"\\\";\\n        }\\n        return CharacterNFTTokenURI(tokenUriContract).tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Update the class names\\n     */\\n    function updateClassNames(\\n        uint256 classEnumValue,\\n        string memory classNames\\n    ) public onlyRole(OWNER_ROLE) {\\n        classIdToCharacterData[classEnumValue].className = classNames;\\n    }\\n\\n    /**\\n     * @dev Update the class images\\n     */\\n    function updateClassImages(\\n        uint256 classEnumValue,\\n        string memory classImages\\n    ) public onlyRole(OWNER_ROLE) {\\n        classIdToCharacterData[classEnumValue].classImage = classImages;\\n    }\\n\\n    /**\\n     * @dev Update the class descriptions\\n     */\\n    function updateClassDescriptions(\\n        uint256 classEnumValue,\\n        string memory classDescriptions\\n    ) public onlyRole(OWNER_ROLE) {\\n        classIdToCharacterData[classEnumValue]\\n            .classDescription = classDescriptions;\\n    }\\n\\n    /**\\n     * @dev Mint a new token, only a minter can call this function\\n     */\\n    function mint(uint256 tokenId, address to) public onlyRole(MINTER_ROLE) {\\n        if (tokenId == 0 || to == address(0)) {\\n            revert InvalidValues();\\n        }\\n        _safeMint(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Burn a token, only a burner can call this function\\n     */\\n    function burn(uint256 tokenId) public onlyRole(BURNER_ROLE) {\\n        if (tokenId == 0) {\\n            revert InvalidValues();\\n        }\\n        _burn(tokenId);\\n    }\\n\\n    function getClassDescription(\\n        uint256 tokenId\\n    ) public view returns (string memory) {\\n        uint256 classEnumValue = uint256(\\n            CharacterNFTManager(characterNFTManagerContract)\\n                .tokenIdToCharacterClass(tokenId)\\n        );\\n        return classIdToCharacterData[classEnumValue].classDescription;\\n    }\\n\\n    function getClassImage(\\n        uint256 tokenId\\n    ) public view returns (string memory) {\\n        uint256 classEnumValue = uint256(\\n            CharacterNFTManager(characterNFTManagerContract)\\n                .tokenIdToCharacterClass(tokenId)\\n        );\\n        return classIdToCharacterData[classEnumValue].classImage;\\n    }\\n\\n    function getClassName(uint256 tokenId) public view returns (string memory) {\\n        uint256 classEnumValue = uint256(\\n            CharacterNFTManager(characterNFTManagerContract)\\n                .tokenIdToCharacterClass(tokenId)\\n        );\\n        return classIdToCharacterData[classEnumValue].className;\\n    }\\n}\\n\",\"keccak256\":\"0xbcbce91362dda57eb5f22ea6986e9153fa70254ac36401c8b425f61c2898118f\",\"license\":\"MIT\"},\"contracts/erc721/CharacterNFTManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../BaseHelper.sol\\\";\\nimport \\\"./CharacterNFT.sol\\\";\\n\\ncontract CharacterNFTManager is BaseHelper {\\n    /** ENUMS **/\\n    enum CharacterClass {\\n        NULL,\\n        BARBARIAN,\\n        NECROMANCER,\\n        PALADIN,\\n        SORCERESS,\\n        AMAZON,\\n        ASSASSIN,\\n        DRUID\\n    }\\n\\n    /** VARIABLES **/\\n\\n    // Track the last token ID minted\\n    uint256 public tokenIdCounter;\\n    // Track the character class of each token ID\\n    mapping(uint256 => CharacterClass) public tokenIdToCharacterClass;\\n    // Price per mint\\n    uint256 public pricePerMint;\\n    // CharacterNFT contract\\n    address public characterNFT;\\n\\n    /** ERRORS **/\\n\\n    error InsufficientFunds(uint256 pricePerMint, uint256 amount);\\n    error InvalidCharacterClass();\\n\\n    /** MODIFIERS **/\\n\\n    /** FUNCTIONS **/\\n\\n    function initialize(address initialOwner) public initializer {\\n        _baseInitialize(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Set the price per mint\\n     */\\n    function setPricePerMint(\\n        uint256 _pricePerMint\\n    ) public onlyRole(OWNER_ROLE) {\\n        pricePerMint = _pricePerMint;\\n    }\\n\\n    /**\\n     * @dev Set the address of the CharacterNFT contract\\n     */\\n    function setCharacterNFT(\\n        address _characterNFT\\n    ) public onlyRole(OWNER_ROLE) {\\n        characterNFT = _characterNFT;\\n    }\\n\\n    /**\\n     * @dev Withdraw the contract balance\\n     */\\n    function withdraw() public onlyRole(OWNER_ROLE) {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @dev Mint a character NFT, open for public use, requires payment\\n     */\\n    function mintCharacterPublic(\\n        uint256 amount,\\n        CharacterClass charType\\n    ) public payable whenNotPaused nonReentrant {\\n        if (charType == CharacterClass.NULL) {\\n            revert InvalidCharacterClass();\\n        }\\n        if (amount == 0) {\\n            revert InvalidValues();\\n        }\\n        if (msg.value < pricePerMint * amount) {\\n            revert InsufficientFunds(pricePerMint, amount);\\n        }\\n        for (uint256 i = 0; i < amount; i++) {\\n            tokenIdCounter++;\\n            uint256 newTokenId = tokenIdCounter;\\n            tokenIdToCharacterClass[newTokenId] = charType;\\n            CharacterNFT(characterNFT).mint(newTokenId, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Mint a character NFT, only for MINTER use, no payment required\\n     */\\n    function mintCharacterPrivate(\\n        uint256 amount,\\n        address to,\\n        CharacterClass charType\\n    ) public onlyRole(MINTER_ROLE) {\\n        _mintChar(amount, to, charType);\\n    }\\n\\n    /**\\n     * @dev Mint a batch of character NFTs, only for owner use, no payment required\\n     */\\n    function mintBatch(\\n        uint256[] calldata amounts,\\n        address[] calldata toAddresses,\\n        CharacterClass[] calldata charTypes\\n    ) public onlyRole(MINTER_ROLE) {\\n        if (\\n            amounts.length != toAddresses.length ||\\n            amounts.length != charTypes.length\\n        ) {\\n            revert InvalidValues();\\n        }\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            _mintChar(amounts[i], toAddresses[i], charTypes[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal mint helper\\n     */\\n    function _mintChar(\\n        uint256 amount,\\n        address to,\\n        CharacterClass charType\\n    ) internal {\\n        if (\\n            charType == CharacterClass.NULL || amount == 0 || to == address(0)\\n        ) {\\n            revert InvalidValues();\\n        }\\n\\n        for (uint256 i = 0; i < amount; i++) {\\n            tokenIdCounter++;\\n            uint256 newTokenId = tokenIdCounter;\\n            tokenIdToCharacterClass[newTokenId] = charType;\\n            CharacterNFT(characterNFT).mint(newTokenId, to);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc637dd0e44d9f5bc39d0708eb915b1c46758678dfb568e8ac094e2f866166996\",\"license\":\"MIT\"},\"contracts/erc721/CharacterNFTTokenURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\nimport \\\"../BaseHelper.sol\\\";\\nimport \\\"./CharacterNFT.sol\\\";\\nimport \\\"../leveling/Level.sol\\\";\\n\\ncontract CharacterNFTTokenURI is BaseHelper {\\n    using Strings for uint256;\\n    /** STRUCTS **/\\n\\n    struct Attribute {\\n        string name;\\n        uint256 value;\\n    }\\n\\n    /** VARIABLES **/\\n\\n    address public characterNFT;\\n\\n    address public levelContractAddress;\\n\\n    /** ERRORS **/\\n\\n    /** MODIFIERS **/\\n\\n    /** FUNCTIONS **/\\n\\n    function initialize(address initialOwner) public initializer {\\n        _baseInitialize(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Set the address of the CharacterNFT contract\\n     */\\n    function setCharacterNFT(\\n        address _characterNFT\\n    ) public onlyRole(OWNER_ROLE) {\\n        characterNFT = _characterNFT;\\n    }\\n\\n    /**\\n     * @dev Set the address of the Level contract\\n     */\\n    function setLevelContract(\\n        address _levelContract\\n    ) public onlyRole(OWNER_ROLE) {\\n        levelContractAddress = _levelContract;\\n    }\\n\\n    /**\\n     * @dev Returns the URI for a given token ID\\n     */\\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\\n        return _createURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Creates the URI for a given token ID\\n     */\\n    function _createURI(uint256 tokenId) internal view returns (string memory) {\\n        string memory attributesString = \\\"\\\";\\n\\n        attributesString = string.concat(\\n            _addAttribute(\\n                \\\"Character Class\\\",\\n                CharacterNFT(characterNFT).getClassName(tokenId)\\n            ),\\n            \\\",\\\"\\n        );\\n\\n        uint256 level = Level(levelContractAddress).getTokenLevel(tokenId);\\n        uint256 xp = Level(levelContractAddress).getTokenXp(tokenId);\\n\\n        Attribute[] memory attributes = new Attribute[](2);\\n        attributes[0] = Attribute(\\\"Level\\\", level);\\n        attributes[1] = Attribute(\\\"Xp\\\", xp);\\n\\n        for (uint256 i = 0; i < attributes.length; i++) {\\n            if (i == attributes.length - 1) {\\n                attributesString = string.concat(\\n                    attributesString,\\n                    _addAttribute(\\n                        attributes[i].name,\\n                        Strings.toString(attributes[i].value)\\n                    )\\n                );\\n            } else {\\n                attributesString = string.concat(\\n                    attributesString,\\n                    _addAttribute(\\n                        attributes[i].name,\\n                        Strings.toString(attributes[i].value)\\n                    ),\\n                    \\\",\\\"\\n                );\\n            }\\n        }\\n\\n        string memory propertiesJSON = string.concat(\\n            '\\\"name\\\":\\\"',\\n            CharacterNFT(characterNFT).tokenName(tokenId),\\n            '\\\",',\\n            '\\\"description\\\":\\\"',\\n            CharacterNFT(characterNFT).getClassDescription(tokenId),\\n            '\\\",',\\n            '\\\"image\\\":\\\"',\\n            CharacterNFT(characterNFT).getClassImage(tokenId),\\n            '\\\",',\\n            '\\\"external_url\\\":\\\"',\\n            \\\"https://diablo.fandom.com/wiki/Diablo_II\\\",\\n            '\\\"'\\n        );\\n        string memory fullOpenSeaMetadata = string.concat(\\n            \\\"{\\\",\\n            propertiesJSON,\\n            \\\",\\\",\\n            '\\\"attributes\\\":[',\\n            attributesString,\\n            \\\"]}\\\"\\n        );\\n        return\\n            string.concat(\\n                \\\"data:application/json;base64,\\\",\\n                Base64.encode(bytes(fullOpenSeaMetadata))\\n            );\\n    }\\n\\n    function _addAttribute(\\n        string memory key,\\n        string memory value\\n    ) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"trait_type\\\": \\\"',\\n                    key,\\n                    '\\\", \\\"value\\\": \\\"',\\n                    value,\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x6c7957aec1ce587a77f3ab32c169991f70983e33ddd72f83267a15e20537c74b\",\"license\":\"MIT\"},\"contracts/leveling/Level.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"../BaseHelper.sol\\\";\\n\\ncontract Level is BaseHelper {\\n    /** STRUCTS **/\\n\\n    // Packed struct\\n    struct LevelData {\\n        uint128 level;\\n        uint128 xp;\\n    }\\n\\n    /** VARIABLES **/\\n\\n    // Track the Level and Xp of each token ID\\n    mapping(uint256 => LevelData) public tokenIdToLevelData;\\n\\n    // Each level has an xp requirement\\n    uint256[] public xpPerLevel;\\n\\n    // CharacterNFT contract\\n    address public characterNFT;\\n\\n    /** ERRORS **/\\n\\n    error MaxLevelReached();\\n\\n    /** MODIFIERS **/\\n\\n    /** EVENTS **/\\n\\n    /// @notice An event emitted when a character gets xp\\n    event LevelUp(uint256 indexed tokenId, uint256 level, uint256 xp);\\n\\n    /** FUNCTIONS **/\\n\\n    function initialize(address initialOwner) public initializer {\\n        _baseInitialize(initialOwner);\\n        // Each level has an xp requirement, start with 10 levels, we can add more later\\n        xpPerLevel.push(0); // Ignore the 0 index\\n        xpPerLevel.push(0); // Everyone starts at level 1 with 0 xp so index 1 is 0\\n        xpPerLevel.push(100); // Level 2 is 100 xp\\n        xpPerLevel.push(200); // Level 3 is 200 xp\\n        xpPerLevel.push(300); // Level 4 is 300 xp\\n        xpPerLevel.push(400); // Level 5 is 400 xp\\n        xpPerLevel.push(500); // Level 6 is 500 xp\\n        xpPerLevel.push(600); // Level 7 is 600 xp\\n        xpPerLevel.push(700); // Level 8 is 700 xp\\n        xpPerLevel.push(800); // Level 9 is 800 xp\\n        xpPerLevel.push(1000); // Level 10 is 1000 xp\\n    }\\n\\n    /**\\n     * @dev Update the XpPerLevel array if needed\\n     */\\n    function updateXpPerLevelArray(\\n        uint256[] memory _xpPerLevel\\n    ) external onlyRole(ADMIN_ROLE) {\\n        xpPerLevel = _xpPerLevel;\\n    }\\n\\n    /**\\n     * @dev Set the address of the CharacterNFT contract\\n     */\\n    function setCharacterNFT(\\n        address _characterNFT\\n    ) public onlyRole(OWNER_ROLE) {\\n        characterNFT = _characterNFT;\\n    }\\n\\n    /**\\n     * @dev Utility-contract only. Grant the user experience and increase their level if valid\\n     */\\n    function gainExperience(\\n        uint256 tokenId,\\n        uint256 xp\\n    ) public onlyRole(UTILITY_ROLE) {\\n        // Make sure the token ID is valid\\n        require(\\n            IERC721(characterNFT).ownerOf(tokenId) != address(0),\\n            \\\"Invalid token ID\\\"\\n        );\\n        LevelData storage levelData = tokenIdToLevelData[tokenId];\\n        // Update the users xp\\n        levelData.xp += uint128(xp);\\n        // Make sure user cannot go past max level\\n        if (levelData.level >= xpPerLevel.length - 1) {\\n            revert MaxLevelReached();\\n        }\\n        // User xp cannot surpass level 10\\n        if (levelData.xp > xpPerLevel[xpPerLevel.length - 1]) {\\n            revert MaxLevelReached();\\n        }\\n        uint256 currentLevel = levelData.level;\\n        // Update the level if the new xp falls with the range\\n        for (uint256 i = currentLevel + 1; i < xpPerLevel.length; i++) {\\n            if (levelData.xp >= xpPerLevel[i]) {\\n                levelData.level = uint128(i);\\n                emit LevelUp(tokenId, i, levelData.xp);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper view function returns just the level\\n     */\\n    function getTokenLevel(uint256 tokenId) public view returns (uint256) {\\n        if (tokenIdToLevelData[tokenId].level == 0) {\\n            return 1;\\n        } else {\\n            return tokenIdToLevelData[tokenId].level;\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper view function returns just the xp\\n     */\\n    function getTokenXp(uint256 tokenId) public view returns (uint256) {\\n        return tokenIdToLevelData[tokenId].xp;\\n    }\\n}\\n\",\"keccak256\":\"0x0664a492fbd955da4e2c9fceae699f88de3f96d414b2d64861e32f0053a1973f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1556,"contract":"contracts/erc721/CharacterNFT.sol:CharacterNFT","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":1558,"contract":"contracts/erc721/CharacterNFT.sol:CharacterNFT","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":1562,"contract":"contracts/erc721/CharacterNFT.sol:CharacterNFT","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":1566,"contract":"contracts/erc721/CharacterNFT.sol:CharacterNFT","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":1570,"contract":"contracts/erc721/CharacterNFT.sol:CharacterNFT","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":1576,"contract":"contracts/erc721/CharacterNFT.sol:CharacterNFT","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":1034,"contract":"contracts/erc721/CharacterNFT.sol:CharacterNFT","label":"_roles","offset":0,"slot":"6","type":"t_mapping(t_bytes32,t_struct(RoleData)1029_storage)"},{"astId":4365,"contract":"contracts/erc721/CharacterNFT.sol:CharacterNFT","label":"classIdToCharacterData","offset":0,"slot":"7","type":"t_mapping(t_uint256,t_struct(CharacterData)4360_storage)"},{"astId":4367,"contract":"contracts/erc721/CharacterNFT.sol:CharacterNFT","label":"characterNFTManagerContract","offset":0,"slot":"8","type":"t_address"},{"astId":4369,"contract":"contracts/erc721/CharacterNFT.sol:CharacterNFT","label":"tokenUriContract","offset":0,"slot":"9","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_struct(RoleData)1029_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)1029_storage"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_struct(CharacterData)4360_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct CharacterNFT.CharacterData)","numberOfBytes":"32","value":"t_struct(CharacterData)4360_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(CharacterData)4360_storage":{"encoding":"inplace","label":"struct CharacterNFT.CharacterData","members":[{"astId":4355,"contract":"contracts/erc721/CharacterNFT.sol:CharacterNFT","label":"className","offset":0,"slot":"0","type":"t_string_storage"},{"astId":4357,"contract":"contracts/erc721/CharacterNFT.sol:CharacterNFT","label":"classImage","offset":0,"slot":"1","type":"t_string_storage"},{"astId":4359,"contract":"contracts/erc721/CharacterNFT.sol:CharacterNFT","label":"classDescription","offset":0,"slot":"2","type":"t_string_storage"}],"numberOfBytes":"96"},"t_struct(RoleData)1029_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":1026,"contract":"contracts/erc721/CharacterNFT.sol:CharacterNFT","label":"hasRole","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":1028,"contract":"contracts/erc721/CharacterNFT.sol:CharacterNFT","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"InvalidValues()":[{"notice":"ERRORS *"}]},"kind":"user","methods":{"OWNER_ROLE()":{"notice":"ROLES *"},"constructor":{"notice":"FUNCTIONS *"}},"version":1}}},"contracts/erc721/CharacterNFTManager.sol":{"CharacterNFTManager":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"inputs":[{"internalType":"uint256","name":"pricePerMint","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"InsufficientFunds","type":"error"},{"inputs":[],"name":"InvalidCharacterClass","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"InvalidValues","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OWNER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"UTILITY_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"characterNFT","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"initialOwner","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"address[]","name":"toAddresses","type":"address[]"},{"internalType":"enum CharacterNFTManager.CharacterClass[]","name":"charTypes","type":"uint8[]"}],"name":"mintBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"enum CharacterNFTManager.CharacterClass","name":"charType","type":"uint8"}],"name":"mintCharacterPrivate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"enum CharacterNFTManager.CharacterClass","name":"charType","type":"uint8"}],"name":"mintCharacterPublic","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pricePerMint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_characterNFT","type":"address"}],"name":"setCharacterNFT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_pricePerMint","type":"uint256"}],"name":"setPricePerMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tokenIdCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tokenIdToCharacterClass","outputs":[{"internalType":"enum CharacterNFTManager.CharacterClass","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}],"EnforcedPause()":[{"details":"The operation failed because the contract is paused."}],"ExpectedPause()":[{"details":"The operation failed because the contract is not paused."}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"mintBatch(uint256[],address[],uint8[])":{"details":"Mint a batch of character NFTs, only for owner use, no payment required"},"mintCharacterPrivate(uint256,address,uint8)":{"details":"Mint a character NFT, only for MINTER use, no payment required"},"mintCharacterPublic(uint256,uint8)":{"details":"Mint a character NFT, open for public use, requires payment"},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setCharacterNFT(address)":{"details":"Set the address of the CharacterNFT contract"},"setPricePerMint(uint256)":{"details":"Set the price per mint"},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"withdraw()":{"details":"Withdraw the contract balance"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1384 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x181 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8F296759 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xD049963E GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xE524145B GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE524145B EQ PUSH2 0x472 JUMPI DUP1 PUSH4 0xE58378BB EQ PUSH2 0x485 JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0x4A7 JUMPI DUP1 PUSH4 0xF7A763C4 EQ PUSH2 0x4C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD049963E EQ PUSH2 0x410 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x430 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8F296759 EQ PUSH2 0x35B JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x38F JUMPI DUP1 PUSH4 0x98BDF6F5 EQ PUSH2 0x3AF JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x3C5 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x3DA JUMPI DUP1 PUSH4 0xC5610A29 EQ PUSH2 0x3FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3CCFD60B GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x5C975ABB GT PUSH2 0x118 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x2CD JUMPI DUP1 PUSH4 0x7174326A EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x312 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0x5C75CADB EQ PUSH2 0x2AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1466BC0 EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x1DD JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x20B JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x384D10EE EQ PUSH2 0x24B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x1A1 CALLDATASIZE PUSH1 0x4 PUSH2 0xFF8 JUMP JUMPDEST PUSH2 0x506 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C8 PUSH2 0x1C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1011 JUMP JUMPDEST PUSH2 0x524 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH2 0x1F8 CALLDATASIZE PUSH1 0x4 PUSH2 0xFF8 JUMP JUMPDEST PUSH2 0x55B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x226 CALLDATASIZE PUSH1 0x4 PUSH2 0x105E JUMP JUMPDEST PUSH2 0x57D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x237 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x246 CALLDATASIZE PUSH1 0x4 PUSH2 0x105E JUMP JUMPDEST PUSH2 0x59F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x35 SLOAD PUSH2 0x26B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x5D7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x61F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x2C8 CALLDATASIZE PUSH1 0x4 PUSH2 0x108A JUMP JUMPDEST PUSH2 0x642 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x132F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND PUSH2 0x1C8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x30D CALLDATASIZE PUSH1 0x4 PUSH2 0x10F1 JUMP JUMPDEST PUSH2 0x67D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x352 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x758 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x367 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH32 0x35AF5B5A3FB4C88A8CB5E26E8A68A53CC8F6CAFCC4000A1DB1AE5753E25A168E DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C8 PUSH2 0x3AA CALLDATASIZE PUSH1 0x4 PUSH2 0x105E JUMP JUMPDEST PUSH2 0x778 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH1 0x32 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x3F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x108A JUMP JUMPDEST PUSH2 0x7B0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x406 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH1 0x34 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x42B CALLDATASIZE PUSH1 0x4 PUSH2 0x119A JUMP JUMPDEST PUSH2 0x8C0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12EF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x46D CALLDATASIZE PUSH1 0x4 PUSH2 0x105E JUMP JUMPDEST PUSH2 0x8E3 JUMP JUMPDEST PUSH2 0x1A6 PUSH2 0x480 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D6 JUMP JUMPDEST PUSH2 0x8FF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x491 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12AF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12CF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F9 PUSH2 0x4E4 CALLDATASIZE PUSH1 0x4 PUSH2 0xFF8 JUMP JUMPDEST PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D4 SWAP2 SWAP1 PUSH2 0x120F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12AF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x51E DUP2 PUSH2 0xA97 JUMP JUMPDEST POP PUSH1 0x34 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x555 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x130F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x586 DUP3 PUSH2 0x55B JUMP JUMPDEST PUSH2 0x58F DUP2 PUSH2 0xA97 JUMP JUMPDEST PUSH2 0x599 DUP4 DUP4 PUSH2 0xAA1 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x5C8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5D2 DUP3 DUP3 PUSH2 0xB46 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12AF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x5EF DUP2 PUSH2 0xA97 JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x61B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12CF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x637 DUP2 PUSH2 0xA97 JUMP JUMPDEST PUSH2 0x63F PUSH2 0xBC2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12AF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x65A DUP2 PUSH2 0xA97 JUMP JUMPDEST POP PUSH1 0x35 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12EF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x695 DUP2 PUSH2 0xA97 JUMP JUMPDEST DUP6 DUP5 EQ ISZERO DUP1 PUSH2 0x6A4 JUMPI POP DUP6 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x6C2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x516E361D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x74E JUMPI PUSH2 0x73C DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x6E2 JUMPI PUSH2 0x6E2 PUSH2 0x1237 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x6FB JUMPI PUSH2 0x6FB PUSH2 0x1237 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x108A JUMP JUMPDEST DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x722 JUMPI PUSH2 0x722 PUSH2 0x1237 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x737 SWAP2 SWAP1 PUSH2 0x124D JUMP JUMPDEST PUSH2 0xC22 JUMP JUMPDEST DUP1 PUSH2 0x746 DUP2 PUSH2 0x127E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x6C5 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12CF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x770 DUP2 PUSH2 0xA97 JUMP JUMPDEST PUSH2 0x63F PUSH2 0xD3D JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x130F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x7F6 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x813 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x821 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x83F JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x869 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH2 0x872 DUP7 PUSH2 0xD86 JUMP JUMPDEST DUP4 ISZERO PUSH2 0x8B8 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12EF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x8D8 DUP2 PUSH2 0xA97 JUMP JUMPDEST PUSH2 0x599 DUP5 DUP5 DUP5 PUSH2 0xC22 JUMP JUMPDEST PUSH2 0x8EC DUP3 PUSH2 0x55B JUMP JUMPDEST PUSH2 0x8F5 DUP2 PUSH2 0xA97 JUMP JUMPDEST PUSH2 0x599 DUP4 DUP4 PUSH2 0xB46 JUMP JUMPDEST PUSH2 0x907 PUSH2 0xE52 JUMP JUMPDEST PUSH2 0x90F PUSH2 0xE85 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x923 JUMPI PUSH2 0x923 PUSH2 0x11F9 JUMP JUMPDEST SUB PUSH2 0x941 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2ADF37A3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0x962 JUMPI PUSH1 0x40 MLOAD PUSH4 0x516E361D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x34 SLOAD PUSH2 0x970 SWAP2 SWAP1 PUSH2 0x1297 JUMP JUMPDEST CALLVALUE LT ISZERO PUSH2 0x9A2 JUMPI PUSH1 0x34 SLOAD PUSH1 0x40 MLOAD PUSH3 0xFAE2D5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xA6D JUMPI PUSH1 0x32 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x9BD DUP4 PUSH2 0x127E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x32 SLOAD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP5 SWAP2 SWAP1 PUSH1 0xFF NOT AND PUSH1 0x1 DUP4 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x9F0 JUMPI PUSH2 0x9F0 PUSH2 0x11F9 JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x35 SLOAD PUSH1 0x40 MLOAD PUSH4 0x94BF804D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x94BF804D SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA55 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP DUP1 DUP1 PUSH2 0xA65 SWAP1 PUSH2 0x127E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x9A5 JUMP JUMPDEST POP PUSH2 0x61B PUSH1 0x1 PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 SSTORE JUMP JUMPDEST PUSH2 0x63F DUP2 CALLER PUSH2 0xEF5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x130F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xABC DUP5 DUP5 PUSH2 0x778 JUMP JUMPDEST PUSH2 0xB3C JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xAF2 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x555 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x555 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x130F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xB61 DUP5 DUP5 PUSH2 0x778 JUMP JUMPDEST ISZERO PUSH2 0xB3C JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP8 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x555 JUMP JUMPDEST PUSH2 0xBCA PUSH2 0xF2E JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x132F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND DUP2 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0xC36 JUMPI PUSH2 0xC36 PUSH2 0x11F9 JUMP JUMPDEST EQ DUP1 PUSH2 0xC40 JUMPI POP DUP3 ISZERO JUMPDEST DUP1 PUSH2 0xC52 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO JUMPDEST ISZERO PUSH2 0xC70 JUMPI PUSH1 0x40 MLOAD PUSH4 0x516E361D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x599 JUMPI PUSH1 0x32 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0xC8B DUP4 PUSH2 0x127E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x32 SLOAD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP5 SWAP2 SWAP1 PUSH1 0xFF NOT AND PUSH1 0x1 DUP4 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0xCBE JUMPI PUSH2 0xCBE PUSH2 0x11F9 JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x35 SLOAD PUSH1 0x40 MLOAD PUSH4 0x94BF804D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x94BF804D SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD25 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP DUP1 DUP1 PUSH2 0xD35 SWAP1 PUSH2 0x127E JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC73 JUMP JUMPDEST PUSH2 0xD45 PUSH2 0xE52 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x132F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 CALLER PUSH2 0xC04 JUMP JUMPDEST PUSH2 0xD8E PUSH2 0xF5E JUMP JUMPDEST PUSH2 0xD96 PUSH2 0xFA7 JUMP JUMPDEST PUSH2 0xD9E PUSH2 0xFB7 JUMP JUMPDEST PUSH2 0xDA6 PUSH2 0xFBF JUMP JUMPDEST PUSH2 0xDB1 PUSH1 0x0 DUP3 PUSH2 0xAA1 JUMP JUMPDEST POP PUSH2 0xDCA PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12CF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0xAA1 JUMP JUMPDEST POP PUSH2 0xDE3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12AF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0xAA1 JUMP JUMPDEST POP PUSH2 0xDFC PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12EF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0xAA1 JUMP JUMPDEST POP PUSH2 0xE27 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP3 PUSH2 0xAA1 JUMP JUMPDEST POP PUSH2 0x61B PUSH32 0x35AF5B5A3FB4C88A8CB5E26E8A68A53CC8F6CAFCC4000A1DB1AE5753E25A168E DUP3 PUSH2 0xAA1 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x132F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xE83 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 DUP1 SLOAD PUSH1 0x1 NOT ADD PUSH2 0xEC9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 SSTORE JUMP JUMPDEST PUSH2 0xEFF DUP3 DUP3 PUSH2 0x778 JUMP JUMPDEST PUSH2 0x61B JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x999 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x132F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND PUSH2 0xE83 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0xE83 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xFAF PUSH2 0xF5E JUMP JUMPDEST PUSH2 0xE83 PUSH2 0xFCF JUMP JUMPDEST PUSH2 0xE83 PUSH2 0xF5E JUMP JUMPDEST PUSH2 0xFC7 PUSH2 0xF5E JUMP JUMPDEST PUSH2 0xE83 PUSH2 0xFF0 JUMP JUMPDEST PUSH2 0xFD7 PUSH2 0xF5E JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x132F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xECF PUSH2 0xF5E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x100A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1023 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x103B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1059 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1071 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1081 PUSH1 0x20 DUP5 ADD PUSH2 0x1042 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x109C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x103B DUP3 PUSH2 0x1042 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x10B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x10EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x110A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1122 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x112E DUP11 DUP4 DUP12 ADD PUSH2 0x10A5 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1153 DUP11 DUP4 DUP12 ADD PUSH2 0x10A5 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x116C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1179 DUP10 DUP3 DUP11 ADD PUSH2 0x10A5 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x8 DUP2 LT PUSH2 0x1059 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x11AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0x11BF PUSH1 0x20 DUP6 ADD PUSH2 0x1042 JUMP JUMPDEST SWAP2 POP PUSH2 0x11CD PUSH1 0x40 DUP6 ADD PUSH2 0x118B JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x11E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1081 PUSH1 0x20 DUP5 ADD PUSH2 0x118B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x8 DUP4 LT PUSH2 0x1231 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x125F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x103B DUP3 PUSH2 0x118B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1290 JUMPI PUSH2 0x1290 PUSH2 0x1268 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x555 JUMPI PUSH2 0x555 PUSH2 0x1268 JUMP INVALID 0xB1 SWAP6 CHAINID 0xDF CREATE 0x1E DUP6 PUSH16 0xB3F010C267A7B1C60363CF8A4664E21C 0xC8 SWAP13 0x26 0x22 CHAINID KECCAK256 0x21 0x4E PUSH6 0xD7A28E3265B3 PUSH27 0x6474929F336521B332C1681B933F6CB9F3376673440D862A9F2DF0 INVALID 0xD2 0xC7 PUSH23 0x48DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C89 JUMP 0xA6 MUL 0xDD PUSH28 0xC7DEC4DCEEDDA775E58DD541E08A116C6C53815C0BD028192F7B6268 STOP 0xCD 0x5E 0xD1 0x5C PUSH15 0x187E77E9AEE88184C21F4F2182AB58 0x27 0xCB EXTCODESIZE PUSH31 0x7FBEDCD63F03300A2646970667358221220C3A9D25ECD95DE97F573439B4E SWAP9 PREVRANDAO CREATE 0xC4 0xEC EXTCODECOPY 0xBF DUP2 BASEFEE 0xDA 0xD1 0xBF PUSH9 0x5A12D7FD78E164736F PUSH13 0x63430008140033000000000000 ","sourceMap":"116:3687:22:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ADMIN_ROLE_4257":{"entryPoint":null,"id":4257,"parameterSlots":0,"returnSlots":0},"@DEFAULT_ADMIN_ROLE_28":{"entryPoint":null,"id":28,"parameterSlots":0,"returnSlots":0},"@MINTER_ROLE_4252":{"entryPoint":null,"id":4252,"parameterSlots":0,"returnSlots":0},"@OWNER_ROLE_4242":{"entryPoint":null,"id":4242,"parameterSlots":0,"returnSlots":0},"@PAUSER_ROLE_4247":{"entryPoint":null,"id":4247,"parameterSlots":0,"returnSlots":0},"@UTILITY_ROLE_4262":{"entryPoint":null,"id":4262,"parameterSlots":0,"returnSlots":0},"@__AccessControl_init_63":{"entryPoint":4023,"id":63,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_714":{"entryPoint":4007,"id":714,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_732":{"entryPoint":4047,"id":732,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_878":{"entryPoint":4031,"id":878,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_unchained_896":{"entryPoint":4080,"id":896,"parameterSlots":0,"returnSlots":0},"@_baseInitialize_4313":{"entryPoint":3462,"id":4313,"parameterSlots":1,"returnSlots":0},"@_checkInitializing_538":{"entryPoint":3934,"id":538,"parameterSlots":0,"returnSlots":0},"@_checkRole_129":{"entryPoint":2711,"id":129,"parameterSlots":1,"returnSlots":0},"@_checkRole_150":{"entryPoint":3829,"id":150,"parameterSlots":2,"returnSlots":0},"@_getAccessControlStorage_46":{"entryPoint":null,"id":46,"parameterSlots":0,"returnSlots":1},"@_getInitializableStorage_615":{"entryPoint":null,"id":615,"parameterSlots":0,"returnSlots":1},"@_getPausableStorage_688":{"entryPoint":null,"id":688,"parameterSlots":0,"returnSlots":1},"@_getReentrancyGuardStorage_866":{"entryPoint":null,"id":866,"parameterSlots":0,"returnSlots":1},"@_grantRole_315":{"entryPoint":2721,"id":315,"parameterSlots":2,"returnSlots":1},"@_isInitializing_606":{"entryPoint":null,"id":606,"parameterSlots":0,"returnSlots":1},"@_mintChar_5094":{"entryPoint":3106,"id":5094,"parameterSlots":3,"returnSlots":0},"@_msgSender_644":{"entryPoint":null,"id":644,"parameterSlots":0,"returnSlots":1},"@_nonReentrantAfter_948":{"entryPoint":3791,"id":948,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_932":{"entryPoint":3717,"id":932,"parameterSlots":0,"returnSlots":0},"@_pause_813":{"entryPoint":3389,"id":813,"parameterSlots":0,"returnSlots":0},"@_requireNotPaused_776":{"entryPoint":3666,"id":776,"parameterSlots":0,"returnSlots":0},"@_requirePaused_789":{"entryPoint":3886,"id":789,"parameterSlots":0,"returnSlots":0},"@_revokeRole_361":{"entryPoint":2886,"id":361,"parameterSlots":2,"returnSlots":1},"@_unpause_837":{"entryPoint":3010,"id":837,"parameterSlots":0,"returnSlots":0},"@characterNFT_4800":{"entryPoint":null,"id":4800,"parameterSlots":0,"returnSlots":0},"@getRoleAdmin_171":{"entryPoint":1371,"id":171,"parameterSlots":1,"returnSlots":1},"@grantRole_190":{"entryPoint":1405,"id":190,"parameterSlots":2,"returnSlots":0},"@hasRole_116":{"entryPoint":1912,"id":116,"parameterSlots":2,"returnSlots":1},"@initialize_4822":{"entryPoint":1968,"id":4822,"parameterSlots":1,"returnSlots":0},"@mintBatch_5029":{"entryPoint":1661,"id":5029,"parameterSlots":6,"returnSlots":0},"@mintCharacterPrivate_4970":{"entryPoint":2240,"id":4970,"parameterSlots":3,"returnSlots":0},"@mintCharacterPublic_4949":{"entryPoint":2303,"id":4949,"parameterSlots":2,"returnSlots":0},"@pause_4323":{"entryPoint":1880,"id":4323,"parameterSlots":0,"returnSlots":0},"@paused_764":{"entryPoint":null,"id":764,"parameterSlots":0,"returnSlots":1},"@pricePerMint_4798":{"entryPoint":null,"id":4798,"parameterSlots":0,"returnSlots":0},"@renounceRole_232":{"entryPoint":1439,"id":232,"parameterSlots":2,"returnSlots":0},"@revokeRole_209":{"entryPoint":2275,"id":209,"parameterSlots":2,"returnSlots":0},"@setCharacterNFT_4850":{"entryPoint":1602,"id":4850,"parameterSlots":1,"returnSlots":0},"@setPricePerMint_4836":{"entryPoint":1286,"id":4836,"parameterSlots":1,"returnSlots":0},"@supportsInterface_1006":{"entryPoint":null,"id":1006,"parameterSlots":1,"returnSlots":1},"@supportsInterface_91":{"entryPoint":1316,"id":91,"parameterSlots":1,"returnSlots":1},"@tokenIdCounter_4791":{"entryPoint":null,"id":4791,"parameterSlots":0,"returnSlots":0},"@tokenIdToCharacterClass_4796":{"entryPoint":null,"id":4796,"parameterSlots":0,"returnSlots":0},"@unpause_4333":{"entryPoint":1567,"id":4333,"parameterSlots":0,"returnSlots":0},"@withdraw_4871":{"entryPoint":1495,"id":4871,"parameterSlots":0,"returnSlots":0},"abi_decode_address":{"entryPoint":4162,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn_calldata":{"entryPoint":4261,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_enum_CharacterClass":{"entryPoint":4491,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":4234,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptrt_array$_t_address_$dyn_calldata_ptrt_array$_t_enum$_CharacterClass_$4788_$dyn_calldata_ptr":{"entryPoint":4337,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":4190,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":4113,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_enum$_CharacterClass_$4788":{"entryPoint":4685,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":4088,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_addresst_enum$_CharacterClass_$4788":{"entryPoint":4506,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint256t_enum$_CharacterClass_$4788":{"entryPoint":4566,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_enum$_CharacterClass_$4788__to_t_uint8__fromStack_reversed":{"entryPoint":4623,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":4759,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":4734,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4712,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":4601,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4663,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:6670:26","statements":[{"nodeType":"YulBlock","src":"6:3:26","statements":[]},{"body":{"nodeType":"YulBlock","src":"84:110:26","statements":[{"body":{"nodeType":"YulBlock","src":"130:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"139:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"142:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"132:6:26"},"nodeType":"YulFunctionCall","src":"132:12:26"},"nodeType":"YulExpressionStatement","src":"132:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"105:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"114:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"101:3:26"},"nodeType":"YulFunctionCall","src":"101:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"126:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"97:3:26"},"nodeType":"YulFunctionCall","src":"97:32:26"},"nodeType":"YulIf","src":"94:52:26"},{"nodeType":"YulAssignment","src":"155:33:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"178:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"165:12:26"},"nodeType":"YulFunctionCall","src":"165:23:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"155:6:26"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"50:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"61:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"73:6:26","type":""}],"src":"14:180:26"},{"body":{"nodeType":"YulBlock","src":"268:217:26","statements":[{"body":{"nodeType":"YulBlock","src":"314:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"323:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"326:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"316:6:26"},"nodeType":"YulFunctionCall","src":"316:12:26"},"nodeType":"YulExpressionStatement","src":"316:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"289:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"298:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"285:3:26"},"nodeType":"YulFunctionCall","src":"285:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"310:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"281:3:26"},"nodeType":"YulFunctionCall","src":"281:32:26"},"nodeType":"YulIf","src":"278:52:26"},{"nodeType":"YulVariableDeclaration","src":"339:36:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"365:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"352:12:26"},"nodeType":"YulFunctionCall","src":"352:23:26"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"343:5:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"439:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"448:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"451:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"441:6:26"},"nodeType":"YulFunctionCall","src":"441:12:26"},"nodeType":"YulExpressionStatement","src":"441:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"397:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"408:5:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"419:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"424:10:26","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"415:3:26"},"nodeType":"YulFunctionCall","src":"415:20:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"404:3:26"},"nodeType":"YulFunctionCall","src":"404:32:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"394:2:26"},"nodeType":"YulFunctionCall","src":"394:43:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"387:6:26"},"nodeType":"YulFunctionCall","src":"387:51:26"},"nodeType":"YulIf","src":"384:71:26"},{"nodeType":"YulAssignment","src":"464:15:26","value":{"name":"value","nodeType":"YulIdentifier","src":"474:5:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"464:6:26"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"234:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"245:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"257:6:26","type":""}],"src":"199:286:26"},{"body":{"nodeType":"YulBlock","src":"585:92:26","statements":[{"nodeType":"YulAssignment","src":"595:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"607:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"618:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"603:3:26"},"nodeType":"YulFunctionCall","src":"603:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"595:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"637:9:26"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"662:6:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"655:6:26"},"nodeType":"YulFunctionCall","src":"655:14:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"648:6:26"},"nodeType":"YulFunctionCall","src":"648:22:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"630:6:26"},"nodeType":"YulFunctionCall","src":"630:41:26"},"nodeType":"YulExpressionStatement","src":"630:41:26"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"554:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"565:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"576:4:26","type":""}],"src":"490:187:26"},{"body":{"nodeType":"YulBlock","src":"752:110:26","statements":[{"body":{"nodeType":"YulBlock","src":"798:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"807:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"810:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"800:6:26"},"nodeType":"YulFunctionCall","src":"800:12:26"},"nodeType":"YulExpressionStatement","src":"800:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"773:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"782:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"769:3:26"},"nodeType":"YulFunctionCall","src":"769:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"794:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"765:3:26"},"nodeType":"YulFunctionCall","src":"765:32:26"},"nodeType":"YulIf","src":"762:52:26"},{"nodeType":"YulAssignment","src":"823:33:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"846:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"833:12:26"},"nodeType":"YulFunctionCall","src":"833:23:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"823:6:26"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"718:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"729:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"741:6:26","type":""}],"src":"682:180:26"},{"body":{"nodeType":"YulBlock","src":"968:76:26","statements":[{"nodeType":"YulAssignment","src":"978:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"990:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1001:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"986:3:26"},"nodeType":"YulFunctionCall","src":"986:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"978:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1020:9:26"},{"name":"value0","nodeType":"YulIdentifier","src":"1031:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1013:6:26"},"nodeType":"YulFunctionCall","src":"1013:25:26"},"nodeType":"YulExpressionStatement","src":"1013:25:26"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"937:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"948:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"959:4:26","type":""}],"src":"867:177:26"},{"body":{"nodeType":"YulBlock","src":"1098:124:26","statements":[{"nodeType":"YulAssignment","src":"1108:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1130:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1117:12:26"},"nodeType":"YulFunctionCall","src":"1117:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1108:5:26"}]},{"body":{"nodeType":"YulBlock","src":"1200:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1209:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1212:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1202:6:26"},"nodeType":"YulFunctionCall","src":"1202:12:26"},"nodeType":"YulExpressionStatement","src":"1202:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1159:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1170:5:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1185:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1190:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1181:3:26"},"nodeType":"YulFunctionCall","src":"1181:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"1194:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1177:3:26"},"nodeType":"YulFunctionCall","src":"1177:19:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1166:3:26"},"nodeType":"YulFunctionCall","src":"1166:31:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1156:2:26"},"nodeType":"YulFunctionCall","src":"1156:42:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1149:6:26"},"nodeType":"YulFunctionCall","src":"1149:50:26"},"nodeType":"YulIf","src":"1146:70:26"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1077:6:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1088:5:26","type":""}],"src":"1049:173:26"},{"body":{"nodeType":"YulBlock","src":"1314:167:26","statements":[{"body":{"nodeType":"YulBlock","src":"1360:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1369:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1372:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1362:6:26"},"nodeType":"YulFunctionCall","src":"1362:12:26"},"nodeType":"YulExpressionStatement","src":"1362:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1335:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"1344:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1331:3:26"},"nodeType":"YulFunctionCall","src":"1331:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"1356:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1327:3:26"},"nodeType":"YulFunctionCall","src":"1327:32:26"},"nodeType":"YulIf","src":"1324:52:26"},{"nodeType":"YulAssignment","src":"1385:33:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1408:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1395:12:26"},"nodeType":"YulFunctionCall","src":"1395:23:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1385:6:26"}]},{"nodeType":"YulAssignment","src":"1427:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1460:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1471:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1456:3:26"},"nodeType":"YulFunctionCall","src":"1456:18:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1437:18:26"},"nodeType":"YulFunctionCall","src":"1437:38:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1427:6:26"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1272:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1283:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1295:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1303:6:26","type":""}],"src":"1227:254:26"},{"body":{"nodeType":"YulBlock","src":"1587:102:26","statements":[{"nodeType":"YulAssignment","src":"1597:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1609:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1620:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1605:3:26"},"nodeType":"YulFunctionCall","src":"1605:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1597:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1639:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1654:6:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1670:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1675:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1666:3:26"},"nodeType":"YulFunctionCall","src":"1666:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"1679:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1662:3:26"},"nodeType":"YulFunctionCall","src":"1662:19:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1650:3:26"},"nodeType":"YulFunctionCall","src":"1650:32:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1632:6:26"},"nodeType":"YulFunctionCall","src":"1632:51:26"},"nodeType":"YulExpressionStatement","src":"1632:51:26"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1556:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1567:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1578:4:26","type":""}],"src":"1486:203:26"},{"body":{"nodeType":"YulBlock","src":"1764:116:26","statements":[{"body":{"nodeType":"YulBlock","src":"1810:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1819:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1822:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1812:6:26"},"nodeType":"YulFunctionCall","src":"1812:12:26"},"nodeType":"YulExpressionStatement","src":"1812:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1785:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"1794:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1781:3:26"},"nodeType":"YulFunctionCall","src":"1781:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"1806:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1777:3:26"},"nodeType":"YulFunctionCall","src":"1777:32:26"},"nodeType":"YulIf","src":"1774:52:26"},{"nodeType":"YulAssignment","src":"1835:39:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1864:9:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1845:18:26"},"nodeType":"YulFunctionCall","src":"1845:29:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1835:6:26"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1730:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1741:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1753:6:26","type":""}],"src":"1694:186:26"},{"body":{"nodeType":"YulBlock","src":"1969:283:26","statements":[{"body":{"nodeType":"YulBlock","src":"2018:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2027:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2030:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2020:6:26"},"nodeType":"YulFunctionCall","src":"2020:12:26"},"nodeType":"YulExpressionStatement","src":"2020:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1997:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2005:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1993:3:26"},"nodeType":"YulFunctionCall","src":"1993:17:26"},{"name":"end","nodeType":"YulIdentifier","src":"2012:3:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1989:3:26"},"nodeType":"YulFunctionCall","src":"1989:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1982:6:26"},"nodeType":"YulFunctionCall","src":"1982:35:26"},"nodeType":"YulIf","src":"1979:55:26"},{"nodeType":"YulAssignment","src":"2043:30:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2066:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2053:12:26"},"nodeType":"YulFunctionCall","src":"2053:20:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2043:6:26"}]},{"body":{"nodeType":"YulBlock","src":"2116:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2125:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2128:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2118:6:26"},"nodeType":"YulFunctionCall","src":"2118:12:26"},"nodeType":"YulExpressionStatement","src":"2118:12:26"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2088:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2096:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2085:2:26"},"nodeType":"YulFunctionCall","src":"2085:30:26"},"nodeType":"YulIf","src":"2082:50:26"},{"nodeType":"YulAssignment","src":"2141:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2157:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2165:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2153:3:26"},"nodeType":"YulFunctionCall","src":"2153:17:26"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"2141:8:26"}]},{"body":{"nodeType":"YulBlock","src":"2230:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2239:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2242:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2232:6:26"},"nodeType":"YulFunctionCall","src":"2232:12:26"},"nodeType":"YulExpressionStatement","src":"2232:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2193:6:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2205:1:26","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"2208:6:26"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2201:3:26"},"nodeType":"YulFunctionCall","src":"2201:14:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2189:3:26"},"nodeType":"YulFunctionCall","src":"2189:27:26"},{"kind":"number","nodeType":"YulLiteral","src":"2218:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2185:3:26"},"nodeType":"YulFunctionCall","src":"2185:38:26"},{"name":"end","nodeType":"YulIdentifier","src":"2225:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2182:2:26"},"nodeType":"YulFunctionCall","src":"2182:47:26"},"nodeType":"YulIf","src":"2179:67:26"}]},"name":"abi_decode_array_uint256_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1932:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"1940:3:26","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"1948:8:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"1958:6:26","type":""}],"src":"1885:367:26"},{"body":{"nodeType":"YulBlock","src":"2485:879:26","statements":[{"body":{"nodeType":"YulBlock","src":"2531:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2540:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2543:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2533:6:26"},"nodeType":"YulFunctionCall","src":"2533:12:26"},"nodeType":"YulExpressionStatement","src":"2533:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2506:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2515:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2502:3:26"},"nodeType":"YulFunctionCall","src":"2502:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"2527:2:26","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2498:3:26"},"nodeType":"YulFunctionCall","src":"2498:32:26"},"nodeType":"YulIf","src":"2495:52:26"},{"nodeType":"YulVariableDeclaration","src":"2556:37:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2583:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2570:12:26"},"nodeType":"YulFunctionCall","src":"2570:23:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2560:6:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2602:28:26","value":{"kind":"number","nodeType":"YulLiteral","src":"2612:18:26","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2606:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"2657:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2666:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2669:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2659:6:26"},"nodeType":"YulFunctionCall","src":"2659:12:26"},"nodeType":"YulExpressionStatement","src":"2659:12:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2645:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"2653:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2642:2:26"},"nodeType":"YulFunctionCall","src":"2642:14:26"},"nodeType":"YulIf","src":"2639:34:26"},{"nodeType":"YulVariableDeclaration","src":"2682:96:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2750:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"2761:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2746:3:26"},"nodeType":"YulFunctionCall","src":"2746:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2770:7:26"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nodeType":"YulIdentifier","src":"2708:37:26"},"nodeType":"YulFunctionCall","src":"2708:70:26"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"2686:8:26","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"2696:8:26","type":""}]},{"nodeType":"YulAssignment","src":"2787:18:26","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"2797:8:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2787:6:26"}]},{"nodeType":"YulAssignment","src":"2814:18:26","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"2824:8:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2814:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"2841:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2874:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2885:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2870:3:26"},"nodeType":"YulFunctionCall","src":"2870:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2857:12:26"},"nodeType":"YulFunctionCall","src":"2857:32:26"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"2845:8:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"2918:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2927:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2930:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2920:6:26"},"nodeType":"YulFunctionCall","src":"2920:12:26"},"nodeType":"YulExpressionStatement","src":"2920:12:26"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"2904:8:26"},{"name":"_1","nodeType":"YulIdentifier","src":"2914:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2901:2:26"},"nodeType":"YulFunctionCall","src":"2901:16:26"},"nodeType":"YulIf","src":"2898:36:26"},{"nodeType":"YulVariableDeclaration","src":"2943:98:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3011:9:26"},{"name":"offset_1","nodeType":"YulIdentifier","src":"3022:8:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3007:3:26"},"nodeType":"YulFunctionCall","src":"3007:24:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3033:7:26"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nodeType":"YulIdentifier","src":"2969:37:26"},"nodeType":"YulFunctionCall","src":"2969:72:26"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"2947:8:26","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"2957:8:26","type":""}]},{"nodeType":"YulAssignment","src":"3050:18:26","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"3060:8:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3050:6:26"}]},{"nodeType":"YulAssignment","src":"3077:18:26","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"3087:8:26"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3077:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"3104:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3137:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3148:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3133:3:26"},"nodeType":"YulFunctionCall","src":"3133:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3120:12:26"},"nodeType":"YulFunctionCall","src":"3120:32:26"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"3108:8:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3181:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3190:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3193:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3183:6:26"},"nodeType":"YulFunctionCall","src":"3183:12:26"},"nodeType":"YulExpressionStatement","src":"3183:12:26"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"3167:8:26"},{"name":"_1","nodeType":"YulIdentifier","src":"3177:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3164:2:26"},"nodeType":"YulFunctionCall","src":"3164:16:26"},"nodeType":"YulIf","src":"3161:36:26"},{"nodeType":"YulVariableDeclaration","src":"3206:98:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3274:9:26"},{"name":"offset_2","nodeType":"YulIdentifier","src":"3285:8:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3270:3:26"},"nodeType":"YulFunctionCall","src":"3270:24:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3296:7:26"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nodeType":"YulIdentifier","src":"3232:37:26"},"nodeType":"YulFunctionCall","src":"3232:72:26"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"3210:8:26","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"3220:8:26","type":""}]},{"nodeType":"YulAssignment","src":"3313:18:26","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"3323:8:26"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"3313:6:26"}]},{"nodeType":"YulAssignment","src":"3340:18:26","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"3350:8:26"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"3340:6:26"}]}]},"name":"abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptrt_array$_t_address_$dyn_calldata_ptrt_array$_t_enum$_CharacterClass_$4788_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2411:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2422:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2434:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2442:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2450:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2458:6:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2466:6:26","type":""},{"name":"value5","nodeType":"YulTypedName","src":"2474:6:26","type":""}],"src":"2257:1107:26"},{"body":{"nodeType":"YulBlock","src":"3470:76:26","statements":[{"nodeType":"YulAssignment","src":"3480:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3492:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3503:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3488:3:26"},"nodeType":"YulFunctionCall","src":"3488:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3480:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3522:9:26"},{"name":"value0","nodeType":"YulIdentifier","src":"3533:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3515:6:26"},"nodeType":"YulFunctionCall","src":"3515:25:26"},"nodeType":"YulExpressionStatement","src":"3515:25:26"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3439:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3450:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3461:4:26","type":""}],"src":"3369:177:26"},{"body":{"nodeType":"YulBlock","src":"3612:94:26","statements":[{"nodeType":"YulAssignment","src":"3622:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3644:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3631:12:26"},"nodeType":"YulFunctionCall","src":"3631:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3622:5:26"}]},{"body":{"nodeType":"YulBlock","src":"3684:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3693:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3696:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3686:6:26"},"nodeType":"YulFunctionCall","src":"3686:12:26"},"nodeType":"YulExpressionStatement","src":"3686:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3673:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"3680:1:26","type":"","value":"8"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3670:2:26"},"nodeType":"YulFunctionCall","src":"3670:12:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3663:6:26"},"nodeType":"YulFunctionCall","src":"3663:20:26"},"nodeType":"YulIf","src":"3660:40:26"}]},"name":"abi_decode_enum_CharacterClass","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3591:6:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3602:5:26","type":""}],"src":"3551:155:26"},{"body":{"nodeType":"YulBlock","src":"3834:236:26","statements":[{"body":{"nodeType":"YulBlock","src":"3880:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3889:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3892:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3882:6:26"},"nodeType":"YulFunctionCall","src":"3882:12:26"},"nodeType":"YulExpressionStatement","src":"3882:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3855:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"3864:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3851:3:26"},"nodeType":"YulFunctionCall","src":"3851:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"3876:2:26","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3847:3:26"},"nodeType":"YulFunctionCall","src":"3847:32:26"},"nodeType":"YulIf","src":"3844:52:26"},{"nodeType":"YulAssignment","src":"3905:33:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3928:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3915:12:26"},"nodeType":"YulFunctionCall","src":"3915:23:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3905:6:26"}]},{"nodeType":"YulAssignment","src":"3947:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3980:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3991:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3976:3:26"},"nodeType":"YulFunctionCall","src":"3976:18:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3957:18:26"},"nodeType":"YulFunctionCall","src":"3957:38:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3947:6:26"}]},{"nodeType":"YulAssignment","src":"4004:60:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4049:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4060:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4045:3:26"},"nodeType":"YulFunctionCall","src":"4045:18:26"}],"functionName":{"name":"abi_decode_enum_CharacterClass","nodeType":"YulIdentifier","src":"4014:30:26"},"nodeType":"YulFunctionCall","src":"4014:50:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4004:6:26"}]}]},"name":"abi_decode_tuple_t_uint256t_addresst_enum$_CharacterClass_$4788","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3784:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3795:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3807:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3815:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3823:6:26","type":""}],"src":"3711:359:26"},{"body":{"nodeType":"YulBlock","src":"4181:179:26","statements":[{"body":{"nodeType":"YulBlock","src":"4227:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4236:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4239:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4229:6:26"},"nodeType":"YulFunctionCall","src":"4229:12:26"},"nodeType":"YulExpressionStatement","src":"4229:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4202:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"4211:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4198:3:26"},"nodeType":"YulFunctionCall","src":"4198:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"4223:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4194:3:26"},"nodeType":"YulFunctionCall","src":"4194:32:26"},"nodeType":"YulIf","src":"4191:52:26"},{"nodeType":"YulAssignment","src":"4252:33:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4275:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4262:12:26"},"nodeType":"YulFunctionCall","src":"4262:23:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4252:6:26"}]},{"nodeType":"YulAssignment","src":"4294:60:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4339:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4350:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4335:3:26"},"nodeType":"YulFunctionCall","src":"4335:18:26"}],"functionName":{"name":"abi_decode_enum_CharacterClass","nodeType":"YulIdentifier","src":"4304:30:26"},"nodeType":"YulFunctionCall","src":"4304:50:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4294:6:26"}]}]},"name":"abi_decode_tuple_t_uint256t_enum$_CharacterClass_$4788","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4139:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4150:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4162:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4170:6:26","type":""}],"src":"4075:285:26"},{"body":{"nodeType":"YulBlock","src":"4397:95:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4414:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4421:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4426:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4417:3:26"},"nodeType":"YulFunctionCall","src":"4417:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4407:6:26"},"nodeType":"YulFunctionCall","src":"4407:31:26"},"nodeType":"YulExpressionStatement","src":"4407:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4454:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4457:4:26","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4447:6:26"},"nodeType":"YulFunctionCall","src":"4447:15:26"},"nodeType":"YulExpressionStatement","src":"4447:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4478:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4481:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4471:6:26"},"nodeType":"YulFunctionCall","src":"4471:15:26"},"nodeType":"YulExpressionStatement","src":"4471:15:26"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"4365:127:26"},{"body":{"nodeType":"YulBlock","src":"4615:229:26","statements":[{"nodeType":"YulAssignment","src":"4625:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4637:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4648:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4633:3:26"},"nodeType":"YulFunctionCall","src":"4633:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4625:4:26"}]},{"body":{"nodeType":"YulBlock","src":"4693:111:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4714:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4721:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4726:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4717:3:26"},"nodeType":"YulFunctionCall","src":"4717:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4707:6:26"},"nodeType":"YulFunctionCall","src":"4707:31:26"},"nodeType":"YulExpressionStatement","src":"4707:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4758:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4761:4:26","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4751:6:26"},"nodeType":"YulFunctionCall","src":"4751:15:26"},"nodeType":"YulExpressionStatement","src":"4751:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4786:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4789:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4779:6:26"},"nodeType":"YulFunctionCall","src":"4779:15:26"},"nodeType":"YulExpressionStatement","src":"4779:15:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4673:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"4681:1:26","type":"","value":"8"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4670:2:26"},"nodeType":"YulFunctionCall","src":"4670:13:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4663:6:26"},"nodeType":"YulFunctionCall","src":"4663:21:26"},"nodeType":"YulIf","src":"4660:144:26"},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4820:9:26"},{"name":"value0","nodeType":"YulIdentifier","src":"4831:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4813:6:26"},"nodeType":"YulFunctionCall","src":"4813:25:26"},"nodeType":"YulExpressionStatement","src":"4813:25:26"}]},"name":"abi_encode_tuple_t_enum$_CharacterClass_$4788__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4584:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4595:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4606:4:26","type":""}],"src":"4497:347:26"},{"body":{"nodeType":"YulBlock","src":"4881:95:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4898:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4905:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4910:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4901:3:26"},"nodeType":"YulFunctionCall","src":"4901:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4891:6:26"},"nodeType":"YulFunctionCall","src":"4891:31:26"},"nodeType":"YulExpressionStatement","src":"4891:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4938:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4941:4:26","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4931:6:26"},"nodeType":"YulFunctionCall","src":"4931:15:26"},"nodeType":"YulExpressionStatement","src":"4931:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4962:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4965:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4955:6:26"},"nodeType":"YulFunctionCall","src":"4955:15:26"},"nodeType":"YulExpressionStatement","src":"4955:15:26"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"4849:127:26"},{"body":{"nodeType":"YulBlock","src":"5070:128:26","statements":[{"body":{"nodeType":"YulBlock","src":"5116:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5125:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5128:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5118:6:26"},"nodeType":"YulFunctionCall","src":"5118:12:26"},"nodeType":"YulExpressionStatement","src":"5118:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5091:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"5100:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5087:3:26"},"nodeType":"YulFunctionCall","src":"5087:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"5112:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5083:3:26"},"nodeType":"YulFunctionCall","src":"5083:32:26"},"nodeType":"YulIf","src":"5080:52:26"},{"nodeType":"YulAssignment","src":"5141:51:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5182:9:26"}],"functionName":{"name":"abi_decode_enum_CharacterClass","nodeType":"YulIdentifier","src":"5151:30:26"},"nodeType":"YulFunctionCall","src":"5151:41:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5141:6:26"}]}]},"name":"abi_decode_tuple_t_enum$_CharacterClass_$4788","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5036:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5047:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5059:6:26","type":""}],"src":"4981:217:26"},{"body":{"nodeType":"YulBlock","src":"5235:95:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5252:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5259:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5264:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5255:3:26"},"nodeType":"YulFunctionCall","src":"5255:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5245:6:26"},"nodeType":"YulFunctionCall","src":"5245:31:26"},"nodeType":"YulExpressionStatement","src":"5245:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5292:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5295:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5285:6:26"},"nodeType":"YulFunctionCall","src":"5285:15:26"},"nodeType":"YulExpressionStatement","src":"5285:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5316:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5319:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5309:6:26"},"nodeType":"YulFunctionCall","src":"5309:15:26"},"nodeType":"YulExpressionStatement","src":"5309:15:26"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"5203:127:26"},{"body":{"nodeType":"YulBlock","src":"5382:88:26","statements":[{"body":{"nodeType":"YulBlock","src":"5413:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5415:16:26"},"nodeType":"YulFunctionCall","src":"5415:18:26"},"nodeType":"YulExpressionStatement","src":"5415:18:26"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5398:5:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5409:1:26","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5405:3:26"},"nodeType":"YulFunctionCall","src":"5405:6:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5395:2:26"},"nodeType":"YulFunctionCall","src":"5395:17:26"},"nodeType":"YulIf","src":"5392:43:26"},{"nodeType":"YulAssignment","src":"5444:20:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5455:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"5462:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5451:3:26"},"nodeType":"YulFunctionCall","src":"5451:13:26"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5444:3:26"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5364:5:26","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5374:3:26","type":""}],"src":"5335:135:26"},{"body":{"nodeType":"YulBlock","src":"5583:101:26","statements":[{"nodeType":"YulAssignment","src":"5593:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5605:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"5616:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5601:3:26"},"nodeType":"YulFunctionCall","src":"5601:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5593:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5635:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5650:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"5658:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5646:3:26"},"nodeType":"YulFunctionCall","src":"5646:31:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5628:6:26"},"nodeType":"YulFunctionCall","src":"5628:50:26"},"nodeType":"YulExpressionStatement","src":"5628:50:26"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5552:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5563:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5574:4:26","type":""}],"src":"5475:209:26"},{"body":{"nodeType":"YulBlock","src":"5741:116:26","statements":[{"nodeType":"YulAssignment","src":"5751:20:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5766:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"5769:1:26"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5762:3:26"},"nodeType":"YulFunctionCall","src":"5762:9:26"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"5751:7:26"}]},{"body":{"nodeType":"YulBlock","src":"5829:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5831:16:26"},"nodeType":"YulFunctionCall","src":"5831:18:26"},"nodeType":"YulExpressionStatement","src":"5831:18:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5800:1:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5793:6:26"},"nodeType":"YulFunctionCall","src":"5793:9:26"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"5807:1:26"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"5814:7:26"},{"name":"x","nodeType":"YulIdentifier","src":"5823:1:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"5810:3:26"},"nodeType":"YulFunctionCall","src":"5810:15:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5804:2:26"},"nodeType":"YulFunctionCall","src":"5804:22:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5790:2:26"},"nodeType":"YulFunctionCall","src":"5790:37:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5783:6:26"},"nodeType":"YulFunctionCall","src":"5783:45:26"},"nodeType":"YulIf","src":"5780:71:26"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5720:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"5723:1:26","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"5729:7:26","type":""}],"src":"5689:168:26"},{"body":{"nodeType":"YulBlock","src":"5991:119:26","statements":[{"nodeType":"YulAssignment","src":"6001:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6013:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"6024:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6009:3:26"},"nodeType":"YulFunctionCall","src":"6009:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6001:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6043:9:26"},{"name":"value0","nodeType":"YulIdentifier","src":"6054:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6036:6:26"},"nodeType":"YulFunctionCall","src":"6036:25:26"},"nodeType":"YulExpressionStatement","src":"6036:25:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6081:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"6092:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6077:3:26"},"nodeType":"YulFunctionCall","src":"6077:18:26"},{"name":"value1","nodeType":"YulIdentifier","src":"6097:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6070:6:26"},"nodeType":"YulFunctionCall","src":"6070:34:26"},"nodeType":"YulExpressionStatement","src":"6070:34:26"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5952:9:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5963:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5971:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5982:4:26","type":""}],"src":"5862:248:26"},{"body":{"nodeType":"YulBlock","src":"6244:145:26","statements":[{"nodeType":"YulAssignment","src":"6254:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6266:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"6277:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6262:3:26"},"nodeType":"YulFunctionCall","src":"6262:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6254:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6296:9:26"},{"name":"value0","nodeType":"YulIdentifier","src":"6307:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6289:6:26"},"nodeType":"YulFunctionCall","src":"6289:25:26"},"nodeType":"YulExpressionStatement","src":"6289:25:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6334:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"6345:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6330:3:26"},"nodeType":"YulFunctionCall","src":"6330:18:26"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"6354:6:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6370:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"6375:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6366:3:26"},"nodeType":"YulFunctionCall","src":"6366:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"6379:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6362:3:26"},"nodeType":"YulFunctionCall","src":"6362:19:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6350:3:26"},"nodeType":"YulFunctionCall","src":"6350:32:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6323:6:26"},"nodeType":"YulFunctionCall","src":"6323:60:26"},"nodeType":"YulExpressionStatement","src":"6323:60:26"}]},"name":"abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6205:9:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6216:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6224:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6235:4:26","type":""}],"src":"6115:274:26"},{"body":{"nodeType":"YulBlock","src":"6523:145:26","statements":[{"nodeType":"YulAssignment","src":"6533:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6545:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"6556:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6541:3:26"},"nodeType":"YulFunctionCall","src":"6541:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6533:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6575:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6590:6:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6606:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"6611:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6602:3:26"},"nodeType":"YulFunctionCall","src":"6602:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"6615:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6598:3:26"},"nodeType":"YulFunctionCall","src":"6598:19:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6586:3:26"},"nodeType":"YulFunctionCall","src":"6586:32:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6568:6:26"},"nodeType":"YulFunctionCall","src":"6568:51:26"},"nodeType":"YulExpressionStatement","src":"6568:51:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6639:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"6650:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6635:3:26"},"nodeType":"YulFunctionCall","src":"6635:18:26"},{"name":"value1","nodeType":"YulIdentifier","src":"6655:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6628:6:26"},"nodeType":"YulFunctionCall","src":"6628:34:26"},"nodeType":"YulExpressionStatement","src":"6628:34:26"}]},"name":"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6484:9:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6495:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6503:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6514:4:26","type":""}],"src":"6394:274:26"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_array_uint256_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptrt_array$_t_address_$dyn_calldata_ptrt_array$_t_enum$_CharacterClass_$4788_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_enum_CharacterClass(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(lt(value, 8)) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_addresst_enum$_CharacterClass_$4788(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := abi_decode_enum_CharacterClass(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint256t_enum$_CharacterClass_$4788(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_enum_CharacterClass(add(headStart, 32))\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_enum$_CharacterClass_$4788__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        if iszero(lt(value0, 8))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(headStart, value0)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_enum$_CharacterClass_$4788(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_enum_CharacterClass(headStart)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffff))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n}","id":26,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x181 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8F296759 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0xD049963E GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xE524145B GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE524145B EQ PUSH2 0x472 JUMPI DUP1 PUSH4 0xE58378BB EQ PUSH2 0x485 JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0x4A7 JUMPI DUP1 PUSH4 0xF7A763C4 EQ PUSH2 0x4C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xD049963E EQ PUSH2 0x410 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x430 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8F296759 EQ PUSH2 0x35B JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x38F JUMPI DUP1 PUSH4 0x98BDF6F5 EQ PUSH2 0x3AF JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x3C5 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x3DA JUMPI DUP1 PUSH4 0xC5610A29 EQ PUSH2 0x3FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3CCFD60B GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x5C975ABB GT PUSH2 0x118 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x2CD JUMPI DUP1 PUSH4 0x7174326A EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x312 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0x5C75CADB EQ PUSH2 0x2AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1466BC0 EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x1DD JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x20B JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x384D10EE EQ PUSH2 0x24B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x1A1 CALLDATASIZE PUSH1 0x4 PUSH2 0xFF8 JUMP JUMPDEST PUSH2 0x506 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C8 PUSH2 0x1C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1011 JUMP JUMPDEST PUSH2 0x524 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH2 0x1F8 CALLDATASIZE PUSH1 0x4 PUSH2 0xFF8 JUMP JUMPDEST PUSH2 0x55B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x226 CALLDATASIZE PUSH1 0x4 PUSH2 0x105E JUMP JUMPDEST PUSH2 0x57D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x237 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x246 CALLDATASIZE PUSH1 0x4 PUSH2 0x105E JUMP JUMPDEST PUSH2 0x59F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x257 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x35 SLOAD PUSH2 0x26B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x5D7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x61F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x2C8 CALLDATASIZE PUSH1 0x4 PUSH2 0x108A JUMP JUMPDEST PUSH2 0x642 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x132F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND PUSH2 0x1C8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x30D CALLDATASIZE PUSH1 0x4 PUSH2 0x10F1 JUMP JUMPDEST PUSH2 0x67D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x352 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x758 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x367 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH32 0x35AF5B5A3FB4C88A8CB5E26E8A68A53CC8F6CAFCC4000A1DB1AE5753E25A168E DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C8 PUSH2 0x3AA CALLDATASIZE PUSH1 0x4 PUSH2 0x105E JUMP JUMPDEST PUSH2 0x778 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH1 0x32 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x3F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x108A JUMP JUMPDEST PUSH2 0x7B0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x406 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH1 0x34 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x42B CALLDATASIZE PUSH1 0x4 PUSH2 0x119A JUMP JUMPDEST PUSH2 0x8C0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12EF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x46D CALLDATASIZE PUSH1 0x4 PUSH2 0x105E JUMP JUMPDEST PUSH2 0x8E3 JUMP JUMPDEST PUSH2 0x1A6 PUSH2 0x480 CALLDATASIZE PUSH1 0x4 PUSH2 0x11D6 JUMP JUMPDEST PUSH2 0x8FF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x491 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12AF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12CF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F9 PUSH2 0x4E4 CALLDATASIZE PUSH1 0x4 PUSH2 0xFF8 JUMP JUMPDEST PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D4 SWAP2 SWAP1 PUSH2 0x120F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12AF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x51E DUP2 PUSH2 0xA97 JUMP JUMPDEST POP PUSH1 0x34 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x555 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x130F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x586 DUP3 PUSH2 0x55B JUMP JUMPDEST PUSH2 0x58F DUP2 PUSH2 0xA97 JUMP JUMPDEST PUSH2 0x599 DUP4 DUP4 PUSH2 0xAA1 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x5C8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5D2 DUP3 DUP3 PUSH2 0xB46 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12AF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x5EF DUP2 PUSH2 0xA97 JUMP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x61B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12CF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x637 DUP2 PUSH2 0xA97 JUMP JUMPDEST PUSH2 0x63F PUSH2 0xBC2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12AF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x65A DUP2 PUSH2 0xA97 JUMP JUMPDEST POP PUSH1 0x35 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12EF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x695 DUP2 PUSH2 0xA97 JUMP JUMPDEST DUP6 DUP5 EQ ISZERO DUP1 PUSH2 0x6A4 JUMPI POP DUP6 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x6C2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x516E361D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x74E JUMPI PUSH2 0x73C DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x6E2 JUMPI PUSH2 0x6E2 PUSH2 0x1237 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x6FB JUMPI PUSH2 0x6FB PUSH2 0x1237 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x108A JUMP JUMPDEST DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x722 JUMPI PUSH2 0x722 PUSH2 0x1237 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x737 SWAP2 SWAP1 PUSH2 0x124D JUMP JUMPDEST PUSH2 0xC22 JUMP JUMPDEST DUP1 PUSH2 0x746 DUP2 PUSH2 0x127E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x6C5 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12CF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x770 DUP2 PUSH2 0xA97 JUMP JUMPDEST PUSH2 0x63F PUSH2 0xD3D JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x130F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x7F6 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x813 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x821 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x83F JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x869 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH2 0x872 DUP7 PUSH2 0xD86 JUMP JUMPDEST DUP4 ISZERO PUSH2 0x8B8 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12EF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x8D8 DUP2 PUSH2 0xA97 JUMP JUMPDEST PUSH2 0x599 DUP5 DUP5 DUP5 PUSH2 0xC22 JUMP JUMPDEST PUSH2 0x8EC DUP3 PUSH2 0x55B JUMP JUMPDEST PUSH2 0x8F5 DUP2 PUSH2 0xA97 JUMP JUMPDEST PUSH2 0x599 DUP4 DUP4 PUSH2 0xB46 JUMP JUMPDEST PUSH2 0x907 PUSH2 0xE52 JUMP JUMPDEST PUSH2 0x90F PUSH2 0xE85 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x923 JUMPI PUSH2 0x923 PUSH2 0x11F9 JUMP JUMPDEST SUB PUSH2 0x941 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2ADF37A3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0x962 JUMPI PUSH1 0x40 MLOAD PUSH4 0x516E361D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x34 SLOAD PUSH2 0x970 SWAP2 SWAP1 PUSH2 0x1297 JUMP JUMPDEST CALLVALUE LT ISZERO PUSH2 0x9A2 JUMPI PUSH1 0x34 SLOAD PUSH1 0x40 MLOAD PUSH3 0xFAE2D5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xA6D JUMPI PUSH1 0x32 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0x9BD DUP4 PUSH2 0x127E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x32 SLOAD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP5 SWAP2 SWAP1 PUSH1 0xFF NOT AND PUSH1 0x1 DUP4 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x9F0 JUMPI PUSH2 0x9F0 PUSH2 0x11F9 JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x35 SLOAD PUSH1 0x40 MLOAD PUSH4 0x94BF804D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x94BF804D SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA55 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP DUP1 DUP1 PUSH2 0xA65 SWAP1 PUSH2 0x127E JUMP JUMPDEST SWAP2 POP POP PUSH2 0x9A5 JUMP JUMPDEST POP PUSH2 0x61B PUSH1 0x1 PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 SSTORE JUMP JUMPDEST PUSH2 0x63F DUP2 CALLER PUSH2 0xEF5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x130F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xABC DUP5 DUP5 PUSH2 0x778 JUMP JUMPDEST PUSH2 0xB3C JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xAF2 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x555 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x555 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x130F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xB61 DUP5 DUP5 PUSH2 0x778 JUMP JUMPDEST ISZERO PUSH2 0xB3C JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP8 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x555 JUMP JUMPDEST PUSH2 0xBCA PUSH2 0xF2E JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x132F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND DUP2 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0xC36 JUMPI PUSH2 0xC36 PUSH2 0x11F9 JUMP JUMPDEST EQ DUP1 PUSH2 0xC40 JUMPI POP DUP3 ISZERO JUMPDEST DUP1 PUSH2 0xC52 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO JUMPDEST ISZERO PUSH2 0xC70 JUMPI PUSH1 0x40 MLOAD PUSH4 0x516E361D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x599 JUMPI PUSH1 0x32 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0xC8B DUP4 PUSH2 0x127E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x32 SLOAD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP5 SWAP2 SWAP1 PUSH1 0xFF NOT AND PUSH1 0x1 DUP4 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0xCBE JUMPI PUSH2 0xCBE PUSH2 0x11F9 JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x35 SLOAD PUSH1 0x40 MLOAD PUSH4 0x94BF804D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x94BF804D SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD25 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP DUP1 DUP1 PUSH2 0xD35 SWAP1 PUSH2 0x127E JUMP JUMPDEST SWAP2 POP POP PUSH2 0xC73 JUMP JUMPDEST PUSH2 0xD45 PUSH2 0xE52 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x132F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 CALLER PUSH2 0xC04 JUMP JUMPDEST PUSH2 0xD8E PUSH2 0xF5E JUMP JUMPDEST PUSH2 0xD96 PUSH2 0xFA7 JUMP JUMPDEST PUSH2 0xD9E PUSH2 0xFB7 JUMP JUMPDEST PUSH2 0xDA6 PUSH2 0xFBF JUMP JUMPDEST PUSH2 0xDB1 PUSH1 0x0 DUP3 PUSH2 0xAA1 JUMP JUMPDEST POP PUSH2 0xDCA PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12CF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0xAA1 JUMP JUMPDEST POP PUSH2 0xDE3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12AF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0xAA1 JUMP JUMPDEST POP PUSH2 0xDFC PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x12EF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0xAA1 JUMP JUMPDEST POP PUSH2 0xE27 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP3 PUSH2 0xAA1 JUMP JUMPDEST POP PUSH2 0x61B PUSH32 0x35AF5B5A3FB4C88A8CB5E26E8A68A53CC8F6CAFCC4000A1DB1AE5753E25A168E DUP3 PUSH2 0xAA1 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x132F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xE83 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 DUP1 SLOAD PUSH1 0x1 NOT ADD PUSH2 0xEC9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 SSTORE JUMP JUMPDEST PUSH2 0xEFF DUP3 DUP3 PUSH2 0x778 JUMP JUMPDEST PUSH2 0x61B JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x999 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x132F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND PUSH2 0xE83 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0xE83 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xFAF PUSH2 0xF5E JUMP JUMPDEST PUSH2 0xE83 PUSH2 0xFCF JUMP JUMPDEST PUSH2 0xE83 PUSH2 0xF5E JUMP JUMPDEST PUSH2 0xFC7 PUSH2 0xF5E JUMP JUMPDEST PUSH2 0xE83 PUSH2 0xFF0 JUMP JUMPDEST PUSH2 0xFD7 PUSH2 0xF5E JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x132F DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xECF PUSH2 0xF5E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x100A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1023 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x103B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1059 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1071 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1081 PUSH1 0x20 DUP5 ADD PUSH2 0x1042 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x109C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x103B DUP3 PUSH2 0x1042 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x10B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x10EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x110A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1122 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x112E DUP11 DUP4 DUP12 ADD PUSH2 0x10A5 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1153 DUP11 DUP4 DUP12 ADD PUSH2 0x10A5 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x116C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1179 DUP10 DUP3 DUP11 ADD PUSH2 0x10A5 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x8 DUP2 LT PUSH2 0x1059 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x11AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0x11BF PUSH1 0x20 DUP6 ADD PUSH2 0x1042 JUMP JUMPDEST SWAP2 POP PUSH2 0x11CD PUSH1 0x40 DUP6 ADD PUSH2 0x118B JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x11E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1081 PUSH1 0x20 DUP5 ADD PUSH2 0x118B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x8 DUP4 LT PUSH2 0x1231 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x125F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x103B DUP3 PUSH2 0x118B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1290 JUMPI PUSH2 0x1290 PUSH2 0x1268 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x555 JUMPI PUSH2 0x555 PUSH2 0x1268 JUMP INVALID 0xB1 SWAP6 CHAINID 0xDF CREATE 0x1E DUP6 PUSH16 0xB3F010C267A7B1C60363CF8A4664E21C 0xC8 SWAP13 0x26 0x22 CHAINID KECCAK256 0x21 0x4E PUSH6 0xD7A28E3265B3 PUSH27 0x6474929F336521B332C1681B933F6CB9F3376673440D862A9F2DF0 INVALID 0xD2 0xC7 PUSH23 0x48DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C89 JUMP 0xA6 MUL 0xDD PUSH28 0xC7DEC4DCEEDDA775E58DD541E08A116C6C53815C0BD028192F7B6268 STOP 0xCD 0x5E 0xD1 0x5C PUSH15 0x187E77E9AEE88184C21F4F2182AB58 0x27 0xCB EXTCODESIZE PUSH31 0x7FBEDCD63F03300A2646970667358221220C3A9D25ECD95DE97F573439B4E SWAP9 PREVRANDAO CREATE 0xC4 0xEC EXTCODECOPY 0xBF DUP2 BASEFEE 0xDA 0xD1 0xBF PUSH9 0x5A12D7FD78E164736F PUSH13 0x63430008140033000000000000 ","sourceMap":"116:3687:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1022:135;;;;;;;;;;-1:-1:-1;1022:135:22;;;;;:::i;:::-;;:::i;:::-;;3443:202:0;;;;;;;;;;-1:-1:-1;3443:202:0;;;;;:::i;:::-;;:::i;:::-;;;655:14:26;;648:22;630:41;;618:2;603:18;3443:202:0;;;;;;;;4759:191;;;;;;;;;;-1:-1:-1;4759:191:0;;;;;:::i;:::-;;:::i;:::-;;;1013:25:26;;;1001:2;986:18;4759:191:0;867:177:26;5246:136:0;;;;;;;;;;-1:-1:-1;5246:136:0;;;;;:::i;:::-;;:::i;6348:245::-;;;;;;;;;;-1:-1:-1;6348:245:0;;;;;:::i;:::-;;:::i;655:27:22:-;;;;;;;;;;-1:-1:-1;655:27:22;;;;-1:-1:-1;;;;;655:27:22;;;;;;-1:-1:-1;;;;;1650:32:26;;;1632:51;;1620:2;1605:18;655:27:22;1486:203:26;1435:116:22;;;;;;;;;;;;;:::i;1612:75:20:-;;;;;;;;;;;;;:::i;1236:135:22:-;;;;;;;;;;-1:-1:-1;1236:135:22;;;;;:::i;:::-;;:::i;2692:145:3:-;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;2821:9:3;;;2692:145;;2737:483:22;;;;;;;;;;-1:-1:-1;2737:483:22;;;;;:::i;:::-;;:::i;739:60:20:-;;;;;;;;;;;;776:23;739:60;;1535:71;;;;;;;;;;;;;:::i;805:64::-;;;;;;;;;;;;844:25;805:64;;3732:207:0;;;;;;;;;;-1:-1:-1;3732:207:0;;;;;:::i;:::-;;:::i;415:29:22:-;;;;;;;;;;;;;;;;2317:49:0;;;;;;;;;;-1:-1:-1;2317:49:0;2362:4;2317:49;;858:107:22;;;;;;;;;;-1:-1:-1;858:107:22;;;;;:::i;:::-;;:::i;593:27::-;;;;;;;;;;;;;;;;2441:190;;;;;;;;;;-1:-1:-1;2441:190:22;;;;;:::i;:::-;;:::i;671:62:20:-;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;671:62:20;;5662:138:0;;;;;;;;;;-1:-1:-1;5662:138:0;;;;;:::i;:::-;;:::i;1645:699:22:-;;;;;;:::i;:::-;;:::i;537:60:20:-;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;537:60:20;;603:62;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;603:62:20;;500:65:22;;;;;;;;;;-1:-1:-1;500:65:22;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;1022:135::-;-1:-1:-1;;;;;;;;;;;3191:16:0;3202:4;3191:10;:16::i;:::-;-1:-1:-1;1122:12:22::1;:28:::0;1022:135::o;3443:202:0:-;3528:4;-1:-1:-1;;;;;;3551:47:0;;-1:-1:-1;;;3551:47:0;;:87;;-1:-1:-1;;;;;;;;;;1133:40:5;;;3602:36:0;3544:94;3443:202;-1:-1:-1;;3443:202:0:o;4759:191::-;4824:7;4919:14;;;-1:-1:-1;;;;;;;;;;;4919:14:0;;;;;:24;;;;4759:191::o;5246:136::-;5320:18;5333:4;5320:12;:18::i;:::-;3191:16;3202:4;3191:10;:16::i;:::-;5350:25:::1;5361:4;5367:7;5350:10;:25::i;:::-;;5246:136:::0;;;:::o;6348:245::-;-1:-1:-1;;;;;6441:34:0;;966:10:2;6441:34:0;6437:102;;6498:30;;-1:-1:-1;;;6498:30:0;;;;;;;;;;;6437:102;6549:37;6561:4;6567:18;6549:11;:37::i;:::-;;6348:245;;:::o;1435:116:22:-;-1:-1:-1;;;;;;;;;;;3191:16:0;3202:4;3191:10;:16::i;:::-;1493:51:22::1;::::0;1501:10:::1;::::0;1522:21:::1;1493:51:::0;::::1;;;::::0;::::1;::::0;;;1522:21;1501:10;1493:51;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;1435:116:::0;:::o;1612:75:20:-;-1:-1:-1;;;;;;;;;;;3191:16:0;3202:4;3191:10;:16::i;:::-;1670:10:20::1;:8;:10::i;:::-;1612:75:::0;:::o;1236:135:22:-;-1:-1:-1;;;;;;;;;;;3191:16:0;3202:4;3191:10;:16::i;:::-;-1:-1:-1;1336:12:22::1;:28:::0;;-1:-1:-1;;;;;;1336:28:22::1;-1:-1:-1::0;;;;;1336:28:22;;;::::1;::::0;;;::::1;::::0;;1236:135::o;2737:483::-;-1:-1:-1;;;;;;;;;;;3191:16:0;3202:4;3191:10;:16::i;:::-;2939:36:22;;::::1;;::::0;:86:::1;;-1:-1:-1::0;2991:34:22;;::::1;;2939:86;2922:161;;;3057:15;;-1:-1:-1::0;;;3057:15:22::1;;;;;;;;;;;2922:161;3098:9;3093:121;3113:18:::0;;::::1;3093:121;;;3152:51;3162:7;;3170:1;3162:10;;;;;;;:::i;:::-;;;;;;;3174:11;;3186:1;3174:14;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3190:9;;3200:1;3190:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3152:9;:51::i;:::-;3133:3:::0;::::1;::::0;::::1;:::i;:::-;;;;3093:121;;;;2737:483:::0;;;;;;;:::o;1535:71:20:-;-1:-1:-1;;;;;;;;;;;3191:16:0;3202:4;3191:10;:16::i;:::-;1591:8:20::1;:6;:8::i;3732:207:0:-:0;3809:4;3901:14;;;-1:-1:-1;;;;;;;;;;;3901:14:0;;;;;;;;-1:-1:-1;;;;;3901:31:0;;;;;;;;;;;;;;;3732:207::o;858:107:22:-;8870:21:1;4302:15;;-1:-1:-1;;;4302:15:1;;;;4301:16;;4348:14;;4158:30;4726:16;;:34;;;;;4746:14;4726:34;4706:54;;4770:17;4790:11;:16;;4805:1;4790:16;:50;;;;-1:-1:-1;4818:4:1;4810:25;:30;4790:50;4770:70;;4856:12;4855:13;:30;;;;;4873:12;4872:13;4855:30;4851:91;;;4908:23;;-1:-1:-1;;;4908:23:1;;;;;;;;;;;4851:91;4951:18;;-1:-1:-1;;4951:18:1;4968:1;4951:18;;;4979:67;;;;5013:22;;-1:-1:-1;;;;5013:22:1;-1:-1:-1;;;5013:22:1;;;4979:67;929:29:22::1;945:12;929:15;:29::i;:::-;5070:14:1::0;5066:101;;;5100:23;;-1:-1:-1;;;;5100:23:1;;;5142:14;;-1:-1:-1;5628:50:26;;5142:14:1;;5616:2:26;5601:18;5142:14:1;;;;;;;5066:101;4092:1081;;;;;858:107:22;:::o;2441:190::-;-1:-1:-1;;;;;;;;;;;3191:16:0;3202:4;3191:10;:16::i;:::-;2593:31:22::1;2603:6;2611:2;2615:8;2593:9;:31::i;5662:138:0:-:0;5737:18;5750:4;5737:12;:18::i;:::-;3191:16;3202:4;3191:10;:16::i;:::-;5767:26:::1;5779:4;5785:7;5767:11;:26::i;1645:699:22:-:0;2316:19:3;:17;:19::i;:::-;3251:21:4::1;:19;:21::i;:::-;1805:19:22::2;1793:8;:31;;;;;;;;:::i;:::-;::::0;1789:92:::2;;1847:23;;-1:-1:-1::0;;;1847:23:22::2;;;;;;;;;;;1789:92;1894:6;1904:1;1894:11:::0;1890:64:::2;;1928:15;;-1:-1:-1::0;;;1928:15:22::2;;;;;;;;;;;1890:64;1994:6;1979:12;;:21;;;;:::i;:::-;1967:9;:33;1963:110;;;2041:12;::::0;2023:39:::2;::::0;-1:-1:-1;;;2023:39:22;;::::2;::::0;::::2;6036:25:26::0;;;;6077:18;;;6070:34;;;6009:18;;2023:39:22::2;;;;;;;;1963:110;2087:9;2082:256;2106:6;2102:1;:10;2082:256;;;2133:14;:16:::0;;;:14:::2;:16;::::0;::::2;:::i;:::-;::::0;;;-1:-1:-1;;2184:14:22::2;::::0;2163:18:::2;2212:35:::0;;;:23:::2;:35;::::0;;;;:46;;2250:8;;2212:35;-1:-1:-1;;2212:46:22::2;::::0;2250:8;2212:46:::2;::::0;::::2;;;;;;:::i;:::-;;;::::0;;-1:-1:-1;2285:12:22::2;::::0;2272:55:::2;::::0;-1:-1:-1;;;2272:55:22;;::::2;::::0;::::2;6289:25:26::0;;;2316:10:22::2;6330:18:26::0;;;6323:60;-1:-1:-1;;;;;2285:12:22;;::::2;::::0;2272:31:::2;::::0;6262:18:26;;2272:55:22::2;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;2119:219;2114:3;;;;;:::i;:::-;;;;2082:256;;;;3293:20:4::1;1805:1:::0;2388:30;3969:23;3716:283;4148:103:0;4214:30;4225:4;966:10:2;4214::0;:30::i;7270:387::-;7347:4;-1:-1:-1;;;;;;;;;;;7437:22:0;7445:4;7451:7;7437;:22::i;:::-;7432:219;;7475:8;:14;;;;;;;;;;;-1:-1:-1;;;;;7475:31:0;;;;;;;;;:38;;-1:-1:-1;;7475:38:0;7509:4;7475:38;;;7559:12;966:10:2;;887:96;7559:12:0;-1:-1:-1;;;;;7532:40:0;7550:7;-1:-1:-1;;;;;7532:40:0;7544:4;7532:40;;;;;;;;;;7593:4;7586:11;;;;;7432:219;7635:5;7628:12;;;;;7892:388;7970:4;-1:-1:-1;;;;;;;;;;;8059:22:0;8067:4;8073:7;8059;:22::i;:::-;8055:219;;;8131:5;8097:14;;;;;;;;;;;-1:-1:-1;;;;;8097:31:0;;;;;;;;;;:39;;-1:-1:-1;;8097:39:0;;;8155:40;966:10:2;;8097:14:0;;8155:40;;8131:5;8155:40;8216:4;8209:11;;;;;3674:178:3;2563:16;:14;:16::i;:::-;-1:-1:-1;;;;;;;;;;;3791:17:3;;-1:-1:-1;;3791:17:3::1;::::0;;3823:22:::1;966:10:2::0;3832:12:3::1;3823:22;::::0;-1:-1:-1;;;;;1650:32:26;;;1632:51;;1620:2;1605:18;3823:22:3::1;;;;;;;3722:130;3674:178::o:0;3275:526:22:-;3425:19;3413:8;:31;;;;;;;;:::i;:::-;;:46;;;-1:-1:-1;3448:11:22;;3413:46;:66;;;-1:-1:-1;;;;;;3463:16:22;;;3413:66;3396:141;;;3511:15;;-1:-1:-1;;;3511:15:22;;;;;;;;;;;3396:141;3552:9;3547:248;3571:6;3567:1;:10;3547:248;;;3598:14;:16;;;:14;:16;;;:::i;:::-;;;;-1:-1:-1;;3649:14:22;;3628:18;3677:35;;;:23;:35;;;;;:46;;3715:8;;3677:35;-1:-1:-1;;3677:46:22;;3715:8;3677:46;;;;;;;;:::i;:::-;;;;;-1:-1:-1;3750:12:22;;3737:47;;-1:-1:-1;;;3737:47:22;;;;;6289:25:26;;;-1:-1:-1;;;;;6350:32:26;;;6330:18;;;6323:60;3750:12:22;;;;3737:31;;6262:18:26;;3737:47:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3584:211;3579:3;;;;;:::i;:::-;;;;3547:248;;3366:176:3;2316:19;:17;:19::i;:::-;-1:-1:-1;;;;;;;;;;;3484:16:3;;-1:-1:-1;;3484:16:3::1;3496:4;3484:16;::::0;;3515:20:::1;966:10:2::0;3522:12:3::1;887:96:2::0;970:559:20;6931:20:1;:18;:20::i;:::-;1053:17:20::1;:15;:17::i;:::-;1080:22;:20;:22::i;:::-;1112:24;:22;:24::i;:::-;1199:44;2362:4:0;1230:12:20::0;1199:10:::1;:44::i;:::-;;1298:37;-1:-1:-1::0;;;;;;;;;;;1322:12:20::1;1298:10;:37::i;:::-;;1345:36;-1:-1:-1::0;;;;;;;;;;;1368:12:20::1;1345:10;:36::i;:::-;;1391:37;-1:-1:-1::0;;;;;;;;;;;1415:12:20::1;1391:10;:37::i;:::-;;1438:36;776:23;1461:12;1438:10;:36::i;:::-;;1484:38;844:25;1509:12;1484:10;:38::i;2905:128:3:-:0;-1:-1:-1;;;;;;;;;;;2821:9:3;;;2966:61;;;3001:15;;-1:-1:-1;;;3001:15:3;;;;;;;;;;;2966:61;2905:128::o;3326:384:4:-;2388:30;3526:9;;-1:-1:-1;;3526:20:4;3522:88;;3569:30;;-1:-1:-1;;;3569:30:4;;;;;;;;;;;3522:88;1847:1;3684:19;;3326:384::o;3716:283::-;1805:1;2388:30;3969:23;3716:283::o;4381:197:0:-;4469:22;4477:4;4483:7;4469;:22::i;:::-;4464:108;;4514:47;;-1:-1:-1;;;4514:47:0;;-1:-1:-1;;;;;6586:32:26;;4514:47:0;;;6568:51:26;6635:18;;;6628:34;;;6541:18;;4514:47:0;6394:274:26;3105:126:3;-1:-1:-1;;;;;;;;;;;2821:9:3;;;3163:62;;3199:15;;-1:-1:-1;;;3199:15:3;;;;;;;;;;;7084:141:1;8870:21;8560:40;-1:-1:-1;;;8560:40:1;;;;7146:73;;7191:17;;-1:-1:-1;;;7191:17:1;;;;;;;;;;;1836:97:3;6931:20:1;:18;:20::i;:::-;1899:27:3::1;:25;:27::i;3231:65:0:-:0;6931:20:1;:18;:20::i;2540:111:4:-;6931:20:1;:18;:20::i;:::-;2610:34:4::1;:32;:34::i;1939:156:3:-:0;6931:20:1;:18;:20::i;:::-;-1:-1:-1;;;;;;;;;;;2071:17:3;;-1:-1:-1;;2071:17:3::1;::::0;;1939:156::o;2657:183:4:-;6931:20:1;:18;:20::i;14:180:26:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:26;;14:180;-1:-1:-1;14:180:26:o;199:286::-;257:6;310:2;298:9;289:7;285:23;281:32;278:52;;;326:1;323;316:12;278:52;352:23;;-1:-1:-1;;;;;;404:32:26;;394:43;;384:71;;451:1;448;441:12;384:71;474:5;199:286;-1:-1:-1;;;199:286:26:o;1049:173::-;1117:20;;-1:-1:-1;;;;;1166:31:26;;1156:42;;1146:70;;1212:1;1209;1202:12;1146:70;1049:173;;;:::o;1227:254::-;1295:6;1303;1356:2;1344:9;1335:7;1331:23;1327:32;1324:52;;;1372:1;1369;1362:12;1324:52;1408:9;1395:23;1385:33;;1437:38;1471:2;1460:9;1456:18;1437:38;:::i;:::-;1427:48;;1227:254;;;;;:::o;1694:186::-;1753:6;1806:2;1794:9;1785:7;1781:23;1777:32;1774:52;;;1822:1;1819;1812:12;1774:52;1845:29;1864:9;1845:29;:::i;1885:367::-;1948:8;1958:6;2012:3;2005:4;1997:6;1993:17;1989:27;1979:55;;2030:1;2027;2020:12;1979:55;-1:-1:-1;2053:20:26;;2096:18;2085:30;;2082:50;;;2128:1;2125;2118:12;2082:50;2165:4;2157:6;2153:17;2141:29;;2225:3;2218:4;2208:6;2205:1;2201:14;2193:6;2189:27;2185:38;2182:47;2179:67;;;2242:1;2239;2232:12;2179:67;1885:367;;;;;:::o;2257:1107::-;2434:6;2442;2450;2458;2466;2474;2527:2;2515:9;2506:7;2502:23;2498:32;2495:52;;;2543:1;2540;2533:12;2495:52;2583:9;2570:23;2612:18;2653:2;2645:6;2642:14;2639:34;;;2669:1;2666;2659:12;2639:34;2708:70;2770:7;2761:6;2750:9;2746:22;2708:70;:::i;:::-;2797:8;;-1:-1:-1;2682:96:26;-1:-1:-1;2885:2:26;2870:18;;2857:32;;-1:-1:-1;2901:16:26;;;2898:36;;;2930:1;2927;2920:12;2898:36;2969:72;3033:7;3022:8;3011:9;3007:24;2969:72;:::i;:::-;3060:8;;-1:-1:-1;2943:98:26;-1:-1:-1;3148:2:26;3133:18;;3120:32;;-1:-1:-1;3164:16:26;;;3161:36;;;3193:1;3190;3183:12;3161:36;;3232:72;3296:7;3285:8;3274:9;3270:24;3232:72;:::i;:::-;2257:1107;;;;-1:-1:-1;2257:1107:26;;-1:-1:-1;2257:1107:26;;3323:8;;2257:1107;-1:-1:-1;;;2257:1107:26:o;3551:155::-;3631:20;;3680:1;3670:12;;3660:40;;3696:1;3693;3686:12;3711:359;3807:6;3815;3823;3876:2;3864:9;3855:7;3851:23;3847:32;3844:52;;;3892:1;3889;3882:12;3844:52;3928:9;3915:23;3905:33;;3957:38;3991:2;3980:9;3976:18;3957:38;:::i;:::-;3947:48;;4014:50;4060:2;4049:9;4045:18;4014:50;:::i;:::-;4004:60;;3711:359;;;;;:::o;4075:285::-;4162:6;4170;4223:2;4211:9;4202:7;4198:23;4194:32;4191:52;;;4239:1;4236;4229:12;4191:52;4275:9;4262:23;4252:33;;4304:50;4350:2;4339:9;4335:18;4304:50;:::i;4365:127::-;4426:10;4421:3;4417:20;4414:1;4407:31;4457:4;4454:1;4447:15;4481:4;4478:1;4471:15;4497:347;4648:2;4633:18;;4681:1;4670:13;;4660:144;;4726:10;4721:3;4717:20;4714:1;4707:31;4761:4;4758:1;4751:15;4789:4;4786:1;4779:15;4660:144;4813:25;;;4497:347;:::o;4849:127::-;4910:10;4905:3;4901:20;4898:1;4891:31;4941:4;4938:1;4931:15;4965:4;4962:1;4955:15;4981:217;5059:6;5112:2;5100:9;5091:7;5087:23;5083:32;5080:52;;;5128:1;5125;5118:12;5080:52;5151:41;5182:9;5151:41;:::i;5203:127::-;5264:10;5259:3;5255:20;5252:1;5245:31;5295:4;5292:1;5285:15;5319:4;5316:1;5309:15;5335:135;5374:3;5395:17;;;5392:43;;5415:18;;:::i;:::-;-1:-1:-1;5462:1:26;5451:13;;5335:135::o;5689:168::-;5762:9;;;5793;;5810:15;;;5804:22;;5790:37;5780:71;;5831:18;;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"999200","executionCost":"1041","totalCost":"1000241"},"external":{"ADMIN_ROLE()":"284","DEFAULT_ADMIN_ROLE()":"284","MINTER_ROLE()":"infinite","OWNER_ROLE()":"infinite","PAUSER_ROLE()":"infinite","UTILITY_ROLE()":"218","characterNFT()":"2471","getRoleAdmin(bytes32)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"infinite","initialize(address)":"infinite","mintBatch(uint256[],address[],uint8[])":"infinite","mintCharacterPrivate(uint256,address,uint8)":"infinite","mintCharacterPublic(uint256,uint8)":"infinite","pause()":"infinite","paused()":"infinite","pricePerMint()":"2428","renounceRole(bytes32,address)":"29212","revokeRole(bytes32,address)":"infinite","setCharacterNFT(address)":"infinite","setPricePerMint(uint256)":"infinite","supportsInterface(bytes4)":"472","tokenIdCounter()":"2362","tokenIdToCharacterClass(uint256)":"2601","unpause()":"infinite","withdraw()":"infinite"},"internal":{"_mintChar(uint256,address,enum CharacterNFTManager.CharacterClass)":"infinite"}},"methodIdentifiers":{"ADMIN_ROLE()":"75b238fc","DEFAULT_ADMIN_ROLE()":"a217fddf","MINTER_ROLE()":"d5391393","OWNER_ROLE()":"e58378bb","PAUSER_ROLE()":"e63ab1e9","UTILITY_ROLE()":"8f296759","characterNFT()":"384d10ee","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","initialize(address)":"c4d66de8","mintBatch(uint256[],address[],uint8[])":"7174326a","mintCharacterPrivate(uint256,address,uint8)":"d049963e","mintCharacterPublic(uint256,uint8)":"e524145b","pause()":"8456cb59","paused()":"5c975abb","pricePerMint()":"c5610a29","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","setCharacterNFT(address)":"5c75cadb","setPricePerMint(uint256)":"01466bc0","supportsInterface(bytes4)":"01ffc9a7","tokenIdCounter()":"98bdf6f5","tokenIdToCharacterClass(uint256)":"f7a763c4","unpause()":"3f4ba83a","withdraw()":"3ccfd60b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pricePerMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCharacterClass\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValues\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UTILITY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"characterNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"toAddresses\",\"type\":\"address[]\"},{\"internalType\":\"enum CharacterNFTManager.CharacterClass[]\",\"name\":\"charTypes\",\"type\":\"uint8[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"enum CharacterNFTManager.CharacterClass\",\"name\":\"charType\",\"type\":\"uint8\"}],\"name\":\"mintCharacterPrivate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum CharacterNFTManager.CharacterClass\",\"name\":\"charType\",\"type\":\"uint8\"}],\"name\":\"mintCharacterPublic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_characterNFT\",\"type\":\"address\"}],\"name\":\"setCharacterNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pricePerMint\",\"type\":\"uint256\"}],\"name\":\"setPricePerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToCharacterClass\",\"outputs\":[{\"internalType\":\"enum CharacterNFTManager.CharacterClass\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"mintBatch(uint256[],address[],uint8[])\":{\"details\":\"Mint a batch of character NFTs, only for owner use, no payment required\"},\"mintCharacterPrivate(uint256,address,uint8)\":{\"details\":\"Mint a character NFT, only for MINTER use, no payment required\"},\"mintCharacterPublic(uint256,uint8)\":{\"details\":\"Mint a character NFT, open for public use, requires payment\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setCharacterNFT(address)\":{\"details\":\"Set the address of the CharacterNFT contract\"},\"setPricePerMint(uint256)\":{\"details\":\"Set the price per mint\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"withdraw()\":{\"details\":\"Withdraw the contract balance\"}},\"version\":1},\"userdoc\":{\"errors\":{\"InsufficientFunds(uint256,uint256)\":[{\"notice\":\"ERRORS *\"}],\"InvalidValues()\":[{\"notice\":\"ERRORS *\"}]},\"kind\":\"user\",\"methods\":{\"OWNER_ROLE()\":{\"notice\":\"ROLES *\"},\"initialize(address)\":{\"notice\":\"FUNCTIONS *\"},\"tokenIdCounter()\":{\"notice\":\"VARIABLES *\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/erc721/CharacterNFTManager.sol\":\"CharacterNFTManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x6f7014d688c4386c26e8c02371ecb7f7740d2542f1ecadffd5a3084511e2a344\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/BaseHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract BaseHelper is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    /** ROLES **/\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant UTILITY_ROLE = keccak256(\\\"UTILITY_ROLE\\\");\\n\\n    /** ERRORS **/\\n\\n    error InvalidValues();\\n\\n    /** MODIFIERS **/\\n\\n    /** FUNCTIONS **/\\n\\n    function _baseInitialize(address initialOwner) internal onlyInitializing {\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        // Grant default admin role to initialOwner\\n        _grantRole(DEFAULT_ADMIN_ROLE, initialOwner);\\n        // Grant pauser role to initialOwner\\n        _grantRole(PAUSER_ROLE, initialOwner);\\n        _grantRole(OWNER_ROLE, initialOwner);\\n        _grantRole(MINTER_ROLE, initialOwner);\\n        _grantRole(ADMIN_ROLE, initialOwner);\\n        _grantRole(UTILITY_ROLE, initialOwner);\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    // The gap is needed to avoid overwriting storage variables in future upgrades\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa7a00044dbab2a0f885e29248f5cd0d12fd4639169795202883ff28bee439756\",\"license\":\"MIT\"},\"contracts/erc721/CharacterNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./CharacterNFTManager.sol\\\";\\nimport \\\"./CharacterNFTTokenURI.sol\\\";\\n\\ncontract CharacterNFT is ERC721, AccessControl {\\n    using Strings for uint256;\\n\\n    /** VARIABLES **/\\n\\n    struct CharacterData {\\n        string className;\\n        string classImage;\\n        string classDescription;\\n    }\\n\\n    mapping(uint256 => CharacterData) public classIdToCharacterData;\\n    address public characterNFTManagerContract;\\n    address public tokenUriContract;\\n\\n    /** ROLES **/\\n\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n    /** ERRORS **/\\n\\n    error InvalidValues();\\n\\n    /** MODIFIERS **/\\n\\n    /** FUNCTIONS **/\\n\\n    constructor() ERC721(\\\"Diablo\\\", \\\"D2NFT\\\") {\\n        // DEFAULT_ADMIN_ROLE is a special role that acts as the default admin role for all roles\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(OWNER_ROLE, msg.sender);\\n        _grantRole(MINTER_ROLE, msg.sender);\\n        _grantRole(BURNER_ROLE, msg.sender);\\n\\n        classIdToCharacterData[1].className = \\\"BARBARIAN\\\";\\n        classIdToCharacterData[2].className = \\\"NECROMANCER\\\";\\n        classIdToCharacterData[3].className = \\\"PALADIN\\\";\\n        classIdToCharacterData[4].className = \\\"SORCERESS\\\";\\n        classIdToCharacterData[5].className = \\\"AMAZON\\\";\\n        classIdToCharacterData[6].className = \\\"ASSASSIN\\\";\\n        classIdToCharacterData[7].className = \\\"DRUID\\\";\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ERC721, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Set the address of the CharacterNFTManager contract\\n     */\\n    function setCharacterNFTManager(\\n        address characterNFTManagerAddress\\n    ) public onlyRole(OWNER_ROLE) {\\n        characterNFTManagerContract = characterNFTManagerAddress;\\n    }\\n\\n    /**\\n     * @dev Set the address of the CharacterNFTTokenURI contract\\n     */\\n    function setTokenUriContract(\\n        address tokenUriContractAddress\\n    ) public onlyRole(OWNER_ROLE) {\\n        tokenUriContract = tokenUriContractAddress;\\n    }\\n\\n    /**\\n     * @dev Returns the name of a given token ID\\n     */\\n    function tokenName(uint256 tokenId) public view returns (string memory) {\\n        uint256 classEnumValue = uint256(\\n            CharacterNFTManager(characterNFTManagerContract)\\n                .tokenIdToCharacterClass(tokenId)\\n        );\\n        string memory className = classIdToCharacterData[classEnumValue]\\n            .className;\\n        return string(abi.encodePacked(className, \\\" #\\\", tokenId.toString()));\\n    }\\n\\n    /**\\n     * @dev Returns the URI for a given token ID\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override returns (string memory) {\\n        _requireOwned(tokenId);\\n        if (tokenUriContract == address(0)) {\\n            return \\\"\\\";\\n        }\\n        return CharacterNFTTokenURI(tokenUriContract).tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Update the class names\\n     */\\n    function updateClassNames(\\n        uint256 classEnumValue,\\n        string memory classNames\\n    ) public onlyRole(OWNER_ROLE) {\\n        classIdToCharacterData[classEnumValue].className = classNames;\\n    }\\n\\n    /**\\n     * @dev Update the class images\\n     */\\n    function updateClassImages(\\n        uint256 classEnumValue,\\n        string memory classImages\\n    ) public onlyRole(OWNER_ROLE) {\\n        classIdToCharacterData[classEnumValue].classImage = classImages;\\n    }\\n\\n    /**\\n     * @dev Update the class descriptions\\n     */\\n    function updateClassDescriptions(\\n        uint256 classEnumValue,\\n        string memory classDescriptions\\n    ) public onlyRole(OWNER_ROLE) {\\n        classIdToCharacterData[classEnumValue]\\n            .classDescription = classDescriptions;\\n    }\\n\\n    /**\\n     * @dev Mint a new token, only a minter can call this function\\n     */\\n    function mint(uint256 tokenId, address to) public onlyRole(MINTER_ROLE) {\\n        if (tokenId == 0 || to == address(0)) {\\n            revert InvalidValues();\\n        }\\n        _safeMint(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Burn a token, only a burner can call this function\\n     */\\n    function burn(uint256 tokenId) public onlyRole(BURNER_ROLE) {\\n        if (tokenId == 0) {\\n            revert InvalidValues();\\n        }\\n        _burn(tokenId);\\n    }\\n\\n    function getClassDescription(\\n        uint256 tokenId\\n    ) public view returns (string memory) {\\n        uint256 classEnumValue = uint256(\\n            CharacterNFTManager(characterNFTManagerContract)\\n                .tokenIdToCharacterClass(tokenId)\\n        );\\n        return classIdToCharacterData[classEnumValue].classDescription;\\n    }\\n\\n    function getClassImage(\\n        uint256 tokenId\\n    ) public view returns (string memory) {\\n        uint256 classEnumValue = uint256(\\n            CharacterNFTManager(characterNFTManagerContract)\\n                .tokenIdToCharacterClass(tokenId)\\n        );\\n        return classIdToCharacterData[classEnumValue].classImage;\\n    }\\n\\n    function getClassName(uint256 tokenId) public view returns (string memory) {\\n        uint256 classEnumValue = uint256(\\n            CharacterNFTManager(characterNFTManagerContract)\\n                .tokenIdToCharacterClass(tokenId)\\n        );\\n        return classIdToCharacterData[classEnumValue].className;\\n    }\\n}\\n\",\"keccak256\":\"0xbcbce91362dda57eb5f22ea6986e9153fa70254ac36401c8b425f61c2898118f\",\"license\":\"MIT\"},\"contracts/erc721/CharacterNFTManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../BaseHelper.sol\\\";\\nimport \\\"./CharacterNFT.sol\\\";\\n\\ncontract CharacterNFTManager is BaseHelper {\\n    /** ENUMS **/\\n    enum CharacterClass {\\n        NULL,\\n        BARBARIAN,\\n        NECROMANCER,\\n        PALADIN,\\n        SORCERESS,\\n        AMAZON,\\n        ASSASSIN,\\n        DRUID\\n    }\\n\\n    /** VARIABLES **/\\n\\n    // Track the last token ID minted\\n    uint256 public tokenIdCounter;\\n    // Track the character class of each token ID\\n    mapping(uint256 => CharacterClass) public tokenIdToCharacterClass;\\n    // Price per mint\\n    uint256 public pricePerMint;\\n    // CharacterNFT contract\\n    address public characterNFT;\\n\\n    /** ERRORS **/\\n\\n    error InsufficientFunds(uint256 pricePerMint, uint256 amount);\\n    error InvalidCharacterClass();\\n\\n    /** MODIFIERS **/\\n\\n    /** FUNCTIONS **/\\n\\n    function initialize(address initialOwner) public initializer {\\n        _baseInitialize(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Set the price per mint\\n     */\\n    function setPricePerMint(\\n        uint256 _pricePerMint\\n    ) public onlyRole(OWNER_ROLE) {\\n        pricePerMint = _pricePerMint;\\n    }\\n\\n    /**\\n     * @dev Set the address of the CharacterNFT contract\\n     */\\n    function setCharacterNFT(\\n        address _characterNFT\\n    ) public onlyRole(OWNER_ROLE) {\\n        characterNFT = _characterNFT;\\n    }\\n\\n    /**\\n     * @dev Withdraw the contract balance\\n     */\\n    function withdraw() public onlyRole(OWNER_ROLE) {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @dev Mint a character NFT, open for public use, requires payment\\n     */\\n    function mintCharacterPublic(\\n        uint256 amount,\\n        CharacterClass charType\\n    ) public payable whenNotPaused nonReentrant {\\n        if (charType == CharacterClass.NULL) {\\n            revert InvalidCharacterClass();\\n        }\\n        if (amount == 0) {\\n            revert InvalidValues();\\n        }\\n        if (msg.value < pricePerMint * amount) {\\n            revert InsufficientFunds(pricePerMint, amount);\\n        }\\n        for (uint256 i = 0; i < amount; i++) {\\n            tokenIdCounter++;\\n            uint256 newTokenId = tokenIdCounter;\\n            tokenIdToCharacterClass[newTokenId] = charType;\\n            CharacterNFT(characterNFT).mint(newTokenId, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Mint a character NFT, only for MINTER use, no payment required\\n     */\\n    function mintCharacterPrivate(\\n        uint256 amount,\\n        address to,\\n        CharacterClass charType\\n    ) public onlyRole(MINTER_ROLE) {\\n        _mintChar(amount, to, charType);\\n    }\\n\\n    /**\\n     * @dev Mint a batch of character NFTs, only for owner use, no payment required\\n     */\\n    function mintBatch(\\n        uint256[] calldata amounts,\\n        address[] calldata toAddresses,\\n        CharacterClass[] calldata charTypes\\n    ) public onlyRole(MINTER_ROLE) {\\n        if (\\n            amounts.length != toAddresses.length ||\\n            amounts.length != charTypes.length\\n        ) {\\n            revert InvalidValues();\\n        }\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            _mintChar(amounts[i], toAddresses[i], charTypes[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal mint helper\\n     */\\n    function _mintChar(\\n        uint256 amount,\\n        address to,\\n        CharacterClass charType\\n    ) internal {\\n        if (\\n            charType == CharacterClass.NULL || amount == 0 || to == address(0)\\n        ) {\\n            revert InvalidValues();\\n        }\\n\\n        for (uint256 i = 0; i < amount; i++) {\\n            tokenIdCounter++;\\n            uint256 newTokenId = tokenIdCounter;\\n            tokenIdToCharacterClass[newTokenId] = charType;\\n            CharacterNFT(characterNFT).mint(newTokenId, to);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc637dd0e44d9f5bc39d0708eb915b1c46758678dfb568e8ac094e2f866166996\",\"license\":\"MIT\"},\"contracts/erc721/CharacterNFTTokenURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\nimport \\\"../BaseHelper.sol\\\";\\nimport \\\"./CharacterNFT.sol\\\";\\nimport \\\"../leveling/Level.sol\\\";\\n\\ncontract CharacterNFTTokenURI is BaseHelper {\\n    using Strings for uint256;\\n    /** STRUCTS **/\\n\\n    struct Attribute {\\n        string name;\\n        uint256 value;\\n    }\\n\\n    /** VARIABLES **/\\n\\n    address public characterNFT;\\n\\n    address public levelContractAddress;\\n\\n    /** ERRORS **/\\n\\n    /** MODIFIERS **/\\n\\n    /** FUNCTIONS **/\\n\\n    function initialize(address initialOwner) public initializer {\\n        _baseInitialize(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Set the address of the CharacterNFT contract\\n     */\\n    function setCharacterNFT(\\n        address _characterNFT\\n    ) public onlyRole(OWNER_ROLE) {\\n        characterNFT = _characterNFT;\\n    }\\n\\n    /**\\n     * @dev Set the address of the Level contract\\n     */\\n    function setLevelContract(\\n        address _levelContract\\n    ) public onlyRole(OWNER_ROLE) {\\n        levelContractAddress = _levelContract;\\n    }\\n\\n    /**\\n     * @dev Returns the URI for a given token ID\\n     */\\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\\n        return _createURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Creates the URI for a given token ID\\n     */\\n    function _createURI(uint256 tokenId) internal view returns (string memory) {\\n        string memory attributesString = \\\"\\\";\\n\\n        attributesString = string.concat(\\n            _addAttribute(\\n                \\\"Character Class\\\",\\n                CharacterNFT(characterNFT).getClassName(tokenId)\\n            ),\\n            \\\",\\\"\\n        );\\n\\n        uint256 level = Level(levelContractAddress).getTokenLevel(tokenId);\\n        uint256 xp = Level(levelContractAddress).getTokenXp(tokenId);\\n\\n        Attribute[] memory attributes = new Attribute[](2);\\n        attributes[0] = Attribute(\\\"Level\\\", level);\\n        attributes[1] = Attribute(\\\"Xp\\\", xp);\\n\\n        for (uint256 i = 0; i < attributes.length; i++) {\\n            if (i == attributes.length - 1) {\\n                attributesString = string.concat(\\n                    attributesString,\\n                    _addAttribute(\\n                        attributes[i].name,\\n                        Strings.toString(attributes[i].value)\\n                    )\\n                );\\n            } else {\\n                attributesString = string.concat(\\n                    attributesString,\\n                    _addAttribute(\\n                        attributes[i].name,\\n                        Strings.toString(attributes[i].value)\\n                    ),\\n                    \\\",\\\"\\n                );\\n            }\\n        }\\n\\n        string memory propertiesJSON = string.concat(\\n            '\\\"name\\\":\\\"',\\n            CharacterNFT(characterNFT).tokenName(tokenId),\\n            '\\\",',\\n            '\\\"description\\\":\\\"',\\n            CharacterNFT(characterNFT).getClassDescription(tokenId),\\n            '\\\",',\\n            '\\\"image\\\":\\\"',\\n            CharacterNFT(characterNFT).getClassImage(tokenId),\\n            '\\\",',\\n            '\\\"external_url\\\":\\\"',\\n            \\\"https://diablo.fandom.com/wiki/Diablo_II\\\",\\n            '\\\"'\\n        );\\n        string memory fullOpenSeaMetadata = string.concat(\\n            \\\"{\\\",\\n            propertiesJSON,\\n            \\\",\\\",\\n            '\\\"attributes\\\":[',\\n            attributesString,\\n            \\\"]}\\\"\\n        );\\n        return\\n            string.concat(\\n                \\\"data:application/json;base64,\\\",\\n                Base64.encode(bytes(fullOpenSeaMetadata))\\n            );\\n    }\\n\\n    function _addAttribute(\\n        string memory key,\\n        string memory value\\n    ) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"trait_type\\\": \\\"',\\n                    key,\\n                    '\\\", \\\"value\\\": \\\"',\\n                    value,\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x6c7957aec1ce587a77f3ab32c169991f70983e33ddd72f83267a15e20537c74b\",\"license\":\"MIT\"},\"contracts/leveling/Level.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"../BaseHelper.sol\\\";\\n\\ncontract Level is BaseHelper {\\n    /** STRUCTS **/\\n\\n    // Packed struct\\n    struct LevelData {\\n        uint128 level;\\n        uint128 xp;\\n    }\\n\\n    /** VARIABLES **/\\n\\n    // Track the Level and Xp of each token ID\\n    mapping(uint256 => LevelData) public tokenIdToLevelData;\\n\\n    // Each level has an xp requirement\\n    uint256[] public xpPerLevel;\\n\\n    // CharacterNFT contract\\n    address public characterNFT;\\n\\n    /** ERRORS **/\\n\\n    error MaxLevelReached();\\n\\n    /** MODIFIERS **/\\n\\n    /** EVENTS **/\\n\\n    /// @notice An event emitted when a character gets xp\\n    event LevelUp(uint256 indexed tokenId, uint256 level, uint256 xp);\\n\\n    /** FUNCTIONS **/\\n\\n    function initialize(address initialOwner) public initializer {\\n        _baseInitialize(initialOwner);\\n        // Each level has an xp requirement, start with 10 levels, we can add more later\\n        xpPerLevel.push(0); // Ignore the 0 index\\n        xpPerLevel.push(0); // Everyone starts at level 1 with 0 xp so index 1 is 0\\n        xpPerLevel.push(100); // Level 2 is 100 xp\\n        xpPerLevel.push(200); // Level 3 is 200 xp\\n        xpPerLevel.push(300); // Level 4 is 300 xp\\n        xpPerLevel.push(400); // Level 5 is 400 xp\\n        xpPerLevel.push(500); // Level 6 is 500 xp\\n        xpPerLevel.push(600); // Level 7 is 600 xp\\n        xpPerLevel.push(700); // Level 8 is 700 xp\\n        xpPerLevel.push(800); // Level 9 is 800 xp\\n        xpPerLevel.push(1000); // Level 10 is 1000 xp\\n    }\\n\\n    /**\\n     * @dev Update the XpPerLevel array if needed\\n     */\\n    function updateXpPerLevelArray(\\n        uint256[] memory _xpPerLevel\\n    ) external onlyRole(ADMIN_ROLE) {\\n        xpPerLevel = _xpPerLevel;\\n    }\\n\\n    /**\\n     * @dev Set the address of the CharacterNFT contract\\n     */\\n    function setCharacterNFT(\\n        address _characterNFT\\n    ) public onlyRole(OWNER_ROLE) {\\n        characterNFT = _characterNFT;\\n    }\\n\\n    /**\\n     * @dev Utility-contract only. Grant the user experience and increase their level if valid\\n     */\\n    function gainExperience(\\n        uint256 tokenId,\\n        uint256 xp\\n    ) public onlyRole(UTILITY_ROLE) {\\n        // Make sure the token ID is valid\\n        require(\\n            IERC721(characterNFT).ownerOf(tokenId) != address(0),\\n            \\\"Invalid token ID\\\"\\n        );\\n        LevelData storage levelData = tokenIdToLevelData[tokenId];\\n        // Update the users xp\\n        levelData.xp += uint128(xp);\\n        // Make sure user cannot go past max level\\n        if (levelData.level >= xpPerLevel.length - 1) {\\n            revert MaxLevelReached();\\n        }\\n        // User xp cannot surpass level 10\\n        if (levelData.xp > xpPerLevel[xpPerLevel.length - 1]) {\\n            revert MaxLevelReached();\\n        }\\n        uint256 currentLevel = levelData.level;\\n        // Update the level if the new xp falls with the range\\n        for (uint256 i = currentLevel + 1; i < xpPerLevel.length; i++) {\\n            if (levelData.xp >= xpPerLevel[i]) {\\n                levelData.level = uint128(i);\\n                emit LevelUp(tokenId, i, levelData.xp);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper view function returns just the level\\n     */\\n    function getTokenLevel(uint256 tokenId) public view returns (uint256) {\\n        if (tokenIdToLevelData[tokenId].level == 0) {\\n            return 1;\\n        } else {\\n            return tokenIdToLevelData[tokenId].level;\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper view function returns just the xp\\n     */\\n    function getTokenXp(uint256 tokenId) public view returns (uint256) {\\n        return tokenIdToLevelData[tokenId].xp;\\n    }\\n}\\n\",\"keccak256\":\"0x0664a492fbd955da4e2c9fceae699f88de3f96d414b2d64861e32f0053a1973f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4337,"contract":"contracts/erc721/CharacterNFTManager.sol:CharacterNFTManager","label":"__gap","offset":0,"slot":"0","type":"t_array(t_uint256)50_storage"},{"astId":4791,"contract":"contracts/erc721/CharacterNFTManager.sol:CharacterNFTManager","label":"tokenIdCounter","offset":0,"slot":"50","type":"t_uint256"},{"astId":4796,"contract":"contracts/erc721/CharacterNFTManager.sol:CharacterNFTManager","label":"tokenIdToCharacterClass","offset":0,"slot":"51","type":"t_mapping(t_uint256,t_enum(CharacterClass)4788)"},{"astId":4798,"contract":"contracts/erc721/CharacterNFTManager.sol:CharacterNFTManager","label":"pricePerMint","offset":0,"slot":"52","type":"t_uint256"},{"astId":4800,"contract":"contracts/erc721/CharacterNFTManager.sol:CharacterNFTManager","label":"characterNFT","offset":0,"slot":"53","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_enum(CharacterClass)4788":{"encoding":"inplace","label":"enum CharacterNFTManager.CharacterClass","numberOfBytes":"1"},"t_mapping(t_uint256,t_enum(CharacterClass)4788)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => enum CharacterNFTManager.CharacterClass)","numberOfBytes":"32","value":"t_enum(CharacterClass)4788"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"InsufficientFunds(uint256,uint256)":[{"notice":"ERRORS *"}],"InvalidValues()":[{"notice":"ERRORS *"}]},"kind":"user","methods":{"OWNER_ROLE()":{"notice":"ROLES *"},"initialize(address)":{"notice":"FUNCTIONS *"},"tokenIdCounter()":{"notice":"VARIABLES *"}},"version":1}}},"contracts/erc721/CharacterNFTTokenURI.sol":{"CharacterNFTTokenURI":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"InvalidValues","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OWNER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"UTILITY_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"characterNFT","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"initialOwner","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"levelContractAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_characterNFT","type":"address"}],"name":"setCharacterNFT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_levelContract","type":"address"}],"name":"setLevelContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}],"EnforcedPause()":[{"details":"The operation failed because the contract is paused."}],"ExpectedPause()":[{"details":"The operation failed because the contract is not paused."}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setCharacterNFT(address)":{"details":"Set the address of the CharacterNFT contract"},"setLevelContract(address)":{"details":"Set the address of the Level contract"},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"tokenURI(uint256)":{"details":"Returns the URI for a given token ID"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50611888806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80638456cb59116100b8578063c87b56dd1161007c578063c87b56dd146102a2578063d5391393146102c2578063d547741f146102e9578063d9741275146102fc578063e58378bb1461030f578063e63ab1e91461032457600080fd5b80638456cb59146102455780638f2967591461024d57806391d1485414610274578063a217fddf14610287578063c4d66de81461028f57600080fd5b80633f4ba83a116100ff5780633f4ba83a146101d85780635adaa492146101e05780635c75cadb146101f35780635c975abb1461020657806375b238fc1461021e57600080fd5b806301ffc9a71461013c578063248a9ca3146101645780632f2ff15d1461018557806336568abe1461019a578063384d10ee146101ad575b600080fd5b61014f61014a366004611252565b610339565b60405190151581526020015b60405180910390f35b610177610172366004611283565b610370565b60405190815260200161015b565b6101986101933660046112b8565b610392565b005b6101986101a83660046112b8565b6103b4565b6032546101c0906001600160a01b031681565b6040516001600160a01b03909116815260200161015b565b6101986103ec565b6101986101ee3660046112e4565b61040f565b6101986102013660046112e4565b61044a565b6000805160206118338339815191525460ff1661014f565b6101777fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b610198610485565b6101777f35af5b5a3fb4c88a8cb5e26e8a68a53cc8f6cafcc4000a1db1ae5753e25a168e81565b61014f6102823660046112b8565b6104a5565b610177600081565b61019861029d3660046112e4565b6104dd565b6102b56102b0366004611283565b6105ed565b60405161015b9190611323565b6101777f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6101986102f73660046112b8565b6105f8565b6033546101c0906001600160a01b031681565b61017760008051602061179383398151915281565b6101776000805160206117f383398151915281565b60006001600160e01b03198216637965db0b60e01b148061036a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000908152600080516020611813833981519152602052604090206001015490565b61039b82610370565b6103a481610614565b6103ae838361061e565b50505050565b6001600160a01b03811633146103dd5760405163334bd91960e11b815260040160405180910390fd5b6103e782826106c3565b505050565b6000805160206117f383398151915261040481610614565b61040c61073f565b50565b60008051602061179383398151915261042781610614565b50603380546001600160a01b0319166001600160a01b0392909216919091179055565b60008051602061179383398151915261046281610614565b50603280546001600160a01b0319166001600160a01b0392909216919091179055565b6000805160206117f383398151915261049d81610614565b61040c61079f565b6000918252600080516020611813833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156105235750825b905060008267ffffffffffffffff1660011480156105405750303b155b90508115801561054e575080155b1561056c5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561059657845460ff60401b1916600160401b1785555b61059f866107e8565b83156105e557845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b606061036a826108ca565b61060182610370565b61060a81610614565b6103ae83836106c3565b61040c8133610e08565b600060008051602061181383398151915261063984846104a5565b6106b9576000848152602082815260408083206001600160a01b03871684529091529020805460ff1916600117905561066f3390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600191505061036a565b600091505061036a565b60006000805160206118138339815191526106de84846104a5565b156106b9576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4600191505061036a565b610747610e45565b600080516020611833833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b6107a7610e77565b600080516020611833833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833610781565b6107f0610ea8565b6107f8610ef1565b610800610f01565b610808610f09565b61081360008261061e565b5061082c6000805160206117f38339815191528261061e565b506108456000805160206117938339815191528261061e565b506108707f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68261061e565b5061089b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758261061e565b506108c67f35af5b5a3fb4c88a8cb5e26e8a68a53cc8f6cafcc4000a1db1ae5753e25a168e8261061e565b5050565b60408051602080820183526000825282518084018452600f81526e43686172616374657220436c61737360881b918101919091526032549251633ddfbd8b60e01b81526004810185905260609361097b92916001600160a01b0390911690633ddfbd8b90602401600060405180830381865afa15801561094e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610976919081019061136c565b610f19565b60405160200161098b9190611419565b60408051808303601f1901815290829052603354633404591760e21b8352600483018690529092506000916001600160a01b039091169063d011645c90602401602060405180830381865afa1580156109e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0c919061143e565b60335460405163c995a3b360e01b8152600481018790529192506000916001600160a01b039091169063c995a3b390602401602060405180830381865afa158015610a5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7f919061143e565b6040805160028082526060820190925291925060009190816020015b604080518082019091526060815260006020820152815260200190600190039081610a9b5750506040805160808101825260059181019182526413195d995b60da1b6060820152908152602081018590528151919250908290600090610b0357610b03611457565b6020026020010181905250604051806040016040528060405180604001604052806002815260200161058760f41b81525081526020018381525081600181518110610b5057610b50611457565b602002602001018190525060005b8151811015610c355760018251610b759190611483565b8103610bea5784610bc3838381518110610b9157610b91611457565b602002602001015160000151610976858581518110610bb257610bb2611457565b602002602001015160200151610f45565b604051602001610bd4929190611496565b6040516020818303038152906040529450610c23565b84610c00838381518110610b9157610b91611457565b604051602001610c119291906114c5565b60405160208183030381529060405294505b80610c2d81611500565b915050610b5e565b5060325460405163e725f87760e01b8152600481018890526000916001600160a01b03169063e725f87790602401600060405180830381865afa158015610c80573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ca8919081019061136c565b603254604051630637973b60e31b8152600481018a90526001600160a01b03909116906331bcb9d890602401600060405180830381865afa158015610cf1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d19919081019061136c565b603254604051632d53785160e01b8152600481018b90526001600160a01b0390911690632d53785190602401600060405180830381865afa158015610d62573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d8a919081019061136c565b604051602001610d9c93929190611519565b604051602081830303815290604052905060008186604051602001610dc292919061161e565b6040516020818303038152906040529050610ddc81610fd8565b604051602001610dec919061168d565b6040516020818303038152906040529650505050505050919050565b610e1282826104a5565b6108c65760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440160405180910390fd5b6000805160206118338339815191525460ff16610e7557604051638dfc202b60e01b815260040160405180910390fd5b565b6000805160206118338339815191525460ff1615610e755760405163d93c066560e01b815260040160405180910390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610e7557604051631afcd79f60e31b815260040160405180910390fd5b610ef9610ea8565b610e7561112b565b610e75610ea8565b610f11610ea8565b610e7561114c565b60608282604051602001610f2e9291906116d2565b604051602081830303815290604052905092915050565b60606000610f528361117a565b600101905060008167ffffffffffffffff811115610f7257610f72611356565b6040519080825280601f01601f191660200182016040528015610f9c576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610fa657509392505050565b60608151600003610ff757505060408051602081019091526000815290565b60006040518060600160405280604081526020016117b360409139905060006003845160026110269190611746565b6110309190611759565b61103b90600461177b565b67ffffffffffffffff81111561105357611053611356565b6040519080825280601f01601f19166020018201604052801561107d576020820181803683370190505b509050600182016020820185865187015b808210156110e9576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f811685015184535060018301925061108e565b5050600386510660018114611105576002811461111857611120565b603d6001830353603d6002830353611120565b603d60018303535b509195945050505050565b611133610ea8565b600080516020611833833981519152805460ff19169055565b611154610ea8565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106111b95772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106111e5576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061120357662386f26fc10000830492506010015b6305f5e100831061121b576305f5e100830492506008015b612710831061122f57612710830492506004015b60648310611241576064830492506002015b600a831061036a5760010192915050565b60006020828403121561126457600080fd5b81356001600160e01b03198116811461127c57600080fd5b9392505050565b60006020828403121561129557600080fd5b5035919050565b80356001600160a01b03811681146112b357600080fd5b919050565b600080604083850312156112cb57600080fd5b823591506112db6020840161129c565b90509250929050565b6000602082840312156112f657600080fd5b61127c8261129c565b60005b8381101561131a578181015183820152602001611302565b50506000910152565b60208152600082518060208401526113428160408501602087016112ff565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561137e57600080fd5b815167ffffffffffffffff8082111561139657600080fd5b818401915084601f8301126113aa57600080fd5b8151818111156113bc576113bc611356565b604051601f8201601f19908116603f011681019083821181831017156113e4576113e4611356565b816040528281528760208487010111156113fd57600080fd5b61140e8360208301602088016112ff565b979650505050505050565b6000825161142b8184602087016112ff565b600b60fa1b920191825250600101919050565b60006020828403121561145057600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561036a5761036a61146d565b600083516114a88184602088016112ff565b8351908301906114bc8183602088016112ff565b01949350505050565b600083516114d78184602088016112ff565b8351908301906114eb8183602088016112ff565b600b60fa1b9101908152600101949350505050565b6000600182016115125761151261146d565b5060010190565b67113730b6b2911d1160c11b8152835160009061153d8160088501602089016112ff565b61088b60f21b60089184019182018190526e113232b9b1b934b83a34b7b7111d1160891b600a8301528551611579816019850160208a016112ff565b60199201918201819052681134b6b0b3b2911d1160b91b601b83015284516115a88160248501602089016112ff565b60249201918201526f1132bc3a32b93730b62fbab936111d1160811b602682015261160a603682017f68747470733a2f2f646961626c6f2e66616e646f6d2e636f6d2f77696b692f448152676961626c6f5f494960c01b602082015260280190565b601160f91b81526001019695505050505050565b607b60f81b81526000835161163a8160018501602088016112ff565b600b60fa1b6001918401918201526d2261747472696275746573223a5b60901b600282015283516116728160108401602088016112ff565b615d7d60f01b60109290910191820152601201949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516116c581601d8501602087016112ff565b91909101601d0192915050565b6f3d913a3930b4ba2fba3cb832911d101160811b815282516000906116fe8160108501602088016112ff565b6c111610113b30b63ab2911d101160991b601091840191820152835161172b81601d8401602088016112ff565b61227d60f01b601d9290910191820152601f01949350505050565b8082018082111561036a5761036a61146d565b60008261177657634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761036a5761036a61146d56feb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300a26469706673582212207c0574b691df93093d8dbed397a6922b4292dc3cd2dec5f10f1d59b5733e557464736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1888 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x137 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8456CB59 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x2A2 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0xD9741275 EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0xE58378BB EQ PUSH2 0x30F JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0x324 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0x8F296759 EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x287 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3F4BA83A GT PUSH2 0xFF JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0x5ADAA492 EQ PUSH2 0x1E0 JUMPI DUP1 PUSH4 0x5C75CADB EQ PUSH2 0x1F3 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x21E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x164 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x185 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x384D10EE EQ PUSH2 0x1AD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14F PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0x1252 JUMP JUMPDEST PUSH2 0x339 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x177 PUSH2 0x172 CALLDATASIZE PUSH1 0x4 PUSH2 0x1283 JUMP JUMPDEST PUSH2 0x370 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15B JUMP JUMPDEST PUSH2 0x198 PUSH2 0x193 CALLDATASIZE PUSH1 0x4 PUSH2 0x12B8 JUMP JUMPDEST PUSH2 0x392 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x198 PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x12B8 JUMP JUMPDEST PUSH2 0x3B4 JUMP JUMPDEST PUSH1 0x32 SLOAD PUSH2 0x1C0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15B JUMP JUMPDEST PUSH2 0x198 PUSH2 0x3EC JUMP JUMPDEST PUSH2 0x198 PUSH2 0x1EE CALLDATASIZE PUSH1 0x4 PUSH2 0x12E4 JUMP JUMPDEST PUSH2 0x40F JUMP JUMPDEST PUSH2 0x198 PUSH2 0x201 CALLDATASIZE PUSH1 0x4 PUSH2 0x12E4 JUMP JUMPDEST PUSH2 0x44A JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1833 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND PUSH2 0x14F JUMP JUMPDEST PUSH2 0x177 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST PUSH2 0x198 PUSH2 0x485 JUMP JUMPDEST PUSH2 0x177 PUSH32 0x35AF5B5A3FB4C88A8CB5E26E8A68A53CC8F6CAFCC4000A1DB1AE5753E25A168E DUP2 JUMP JUMPDEST PUSH2 0x14F PUSH2 0x282 CALLDATASIZE PUSH1 0x4 PUSH2 0x12B8 JUMP JUMPDEST PUSH2 0x4A5 JUMP JUMPDEST PUSH2 0x177 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x198 PUSH2 0x29D CALLDATASIZE PUSH1 0x4 PUSH2 0x12E4 JUMP JUMPDEST PUSH2 0x4DD JUMP JUMPDEST PUSH2 0x2B5 PUSH2 0x2B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1283 JUMP JUMPDEST PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15B SWAP2 SWAP1 PUSH2 0x1323 JUMP JUMPDEST PUSH2 0x177 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST PUSH2 0x198 PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x12B8 JUMP JUMPDEST PUSH2 0x5F8 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH2 0x1C0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x177 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1793 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x177 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x17F3 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x36A JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1813 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x39B DUP3 PUSH2 0x370 JUMP JUMPDEST PUSH2 0x3A4 DUP2 PUSH2 0x614 JUMP JUMPDEST PUSH2 0x3AE DUP4 DUP4 PUSH2 0x61E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x3DD JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3E7 DUP3 DUP3 PUSH2 0x6C3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x17F3 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x404 DUP2 PUSH2 0x614 JUMP JUMPDEST PUSH2 0x40C PUSH2 0x73F JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1793 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x427 DUP2 PUSH2 0x614 JUMP JUMPDEST POP PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1793 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x462 DUP2 PUSH2 0x614 JUMP JUMPDEST POP PUSH1 0x32 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x17F3 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x49D DUP2 PUSH2 0x614 JUMP JUMPDEST PUSH2 0x40C PUSH2 0x79F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1813 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x523 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x540 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x54E JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x56C JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x596 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH2 0x59F DUP7 PUSH2 0x7E8 JUMP JUMPDEST DUP4 ISZERO PUSH2 0x5E5 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x36A DUP3 PUSH2 0x8CA JUMP JUMPDEST PUSH2 0x601 DUP3 PUSH2 0x370 JUMP JUMPDEST PUSH2 0x60A DUP2 PUSH2 0x614 JUMP JUMPDEST PUSH2 0x3AE DUP4 DUP4 PUSH2 0x6C3 JUMP JUMPDEST PUSH2 0x40C DUP2 CALLER PUSH2 0xE08 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1813 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x639 DUP5 DUP5 PUSH2 0x4A5 JUMP JUMPDEST PUSH2 0x6B9 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x66F CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x36A JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x36A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1813 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x6DE DUP5 DUP5 PUSH2 0x4A5 JUMP JUMPDEST ISZERO PUSH2 0x6B9 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP8 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x36A JUMP JUMPDEST PUSH2 0x747 PUSH2 0xE45 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1833 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND DUP2 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x7A7 PUSH2 0xE77 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1833 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 CALLER PUSH2 0x781 JUMP JUMPDEST PUSH2 0x7F0 PUSH2 0xEA8 JUMP JUMPDEST PUSH2 0x7F8 PUSH2 0xEF1 JUMP JUMPDEST PUSH2 0x800 PUSH2 0xF01 JUMP JUMPDEST PUSH2 0x808 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0x813 PUSH1 0x0 DUP3 PUSH2 0x61E JUMP JUMPDEST POP PUSH2 0x82C PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x17F3 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0x61E JUMP JUMPDEST POP PUSH2 0x845 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1793 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0x61E JUMP JUMPDEST POP PUSH2 0x870 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP3 PUSH2 0x61E JUMP JUMPDEST POP PUSH2 0x89B PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP3 PUSH2 0x61E JUMP JUMPDEST POP PUSH2 0x8C6 PUSH32 0x35AF5B5A3FB4C88A8CB5E26E8A68A53CC8F6CAFCC4000A1DB1AE5753E25A168E DUP3 PUSH2 0x61E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x0 DUP3 MSTORE DUP3 MLOAD DUP1 DUP5 ADD DUP5 MSTORE PUSH1 0xF DUP2 MSTORE PUSH15 0x43686172616374657220436C617373 PUSH1 0x88 SHL SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x32 SLOAD SWAP3 MLOAD PUSH4 0x3DDFBD8B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x60 SWAP4 PUSH2 0x97B SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x3DDFBD8B SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x94E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x976 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x136C JUMP JUMPDEST PUSH2 0xF19 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x98B SWAP2 SWAP1 PUSH2 0x1419 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH1 0x33 SLOAD PUSH4 0x34045917 PUSH1 0xE2 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xD011645C SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9E8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA0C SWAP2 SWAP1 PUSH2 0x143E JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH4 0xC995A3B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xC995A3B3 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA5B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA7F SWAP2 SWAP1 PUSH2 0x143E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xA9B JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x5 SWAP2 DUP2 ADD SWAP2 DUP3 MSTORE PUSH5 0x13195D995B PUSH1 0xDA SHL PUSH1 0x60 DUP3 ADD MSTORE SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE DUP2 MLOAD SWAP2 SWAP3 POP SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0xB03 JUMPI PUSH2 0xB03 PUSH2 0x1457 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x587 PUSH1 0xF4 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xB50 JUMPI PUSH2 0xB50 PUSH2 0x1457 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xC35 JUMPI PUSH1 0x1 DUP3 MLOAD PUSH2 0xB75 SWAP2 SWAP1 PUSH2 0x1483 JUMP JUMPDEST DUP2 SUB PUSH2 0xBEA JUMPI DUP5 PUSH2 0xBC3 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xB91 JUMPI PUSH2 0xB91 PUSH2 0x1457 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH2 0x976 DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xBB2 JUMPI PUSH2 0xBB2 PUSH2 0x1457 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0xF45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xBD4 SWAP3 SWAP2 SWAP1 PUSH2 0x1496 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP5 POP PUSH2 0xC23 JUMP JUMPDEST DUP5 PUSH2 0xC00 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xB91 JUMPI PUSH2 0xB91 PUSH2 0x1457 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xC11 SWAP3 SWAP2 SWAP1 PUSH2 0x14C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP5 POP JUMPDEST DUP1 PUSH2 0xC2D DUP2 PUSH2 0x1500 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB5E JUMP JUMPDEST POP PUSH1 0x32 SLOAD PUSH1 0x40 MLOAD PUSH4 0xE725F877 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xE725F877 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC80 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xCA8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x136C JUMP JUMPDEST PUSH1 0x32 SLOAD PUSH1 0x40 MLOAD PUSH4 0x637973B PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x31BCB9D8 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCF1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xD19 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x136C JUMP JUMPDEST PUSH1 0x32 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2D537851 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x2D537851 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD62 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xD8A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x136C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xD9C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1519 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x0 DUP2 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xDC2 SWAP3 SWAP2 SWAP1 PUSH2 0x161E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0xDDC DUP2 PUSH2 0xFD8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xDEC SWAP2 SWAP1 PUSH2 0x168D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP7 POP POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE12 DUP3 DUP3 PUSH2 0x4A5 JUMP JUMPDEST PUSH2 0x8C6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1833 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND PUSH2 0xE75 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1833 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xE75 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0xE75 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xEF9 PUSH2 0xEA8 JUMP JUMPDEST PUSH2 0xE75 PUSH2 0x112B JUMP JUMPDEST PUSH2 0xE75 PUSH2 0xEA8 JUMP JUMPDEST PUSH2 0xF11 PUSH2 0xEA8 JUMP JUMPDEST PUSH2 0xE75 PUSH2 0x114C JUMP JUMPDEST PUSH1 0x60 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF2E SWAP3 SWAP2 SWAP1 PUSH2 0x16D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xF52 DUP4 PUSH2 0x117A JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF72 JUMPI PUSH2 0xF72 PUSH2 0x1356 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xF9C JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xFA6 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x0 SUB PUSH2 0xFF7 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x17B3 PUSH1 0x40 SWAP2 CODECOPY SWAP1 POP PUSH1 0x0 PUSH1 0x3 DUP5 MLOAD PUSH1 0x2 PUSH2 0x1026 SWAP2 SWAP1 PUSH2 0x1746 JUMP JUMPDEST PUSH2 0x1030 SWAP2 SWAP1 PUSH2 0x1759 JUMP JUMPDEST PUSH2 0x103B SWAP1 PUSH1 0x4 PUSH2 0x177B JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1053 JUMPI PUSH2 0x1053 PUSH2 0x1356 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x107D JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x1 DUP3 ADD PUSH1 0x20 DUP3 ADD DUP6 DUP7 MLOAD DUP8 ADD JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x10E9 JUMPI PUSH1 0x3 DUP3 ADD SWAP2 POP DUP2 MLOAD PUSH1 0x3F DUP2 PUSH1 0x12 SHR AND DUP6 ADD MLOAD DUP5 MSTORE8 PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH1 0x3F DUP2 PUSH1 0xC SHR AND DUP6 ADD MLOAD DUP5 MSTORE8 PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH1 0x3F DUP2 PUSH1 0x6 SHR AND DUP6 ADD MLOAD DUP5 MSTORE8 PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH1 0x3F DUP2 AND DUP6 ADD MLOAD DUP5 MSTORE8 POP PUSH1 0x1 DUP4 ADD SWAP3 POP PUSH2 0x108E JUMP JUMPDEST POP POP PUSH1 0x3 DUP7 MLOAD MOD PUSH1 0x1 DUP2 EQ PUSH2 0x1105 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x1118 JUMPI PUSH2 0x1120 JUMP JUMPDEST PUSH1 0x3D PUSH1 0x1 DUP4 SUB MSTORE8 PUSH1 0x3D PUSH1 0x2 DUP4 SUB MSTORE8 PUSH2 0x1120 JUMP JUMPDEST PUSH1 0x3D PUSH1 0x1 DUP4 SUB MSTORE8 JUMPDEST POP SWAP2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1133 PUSH2 0xEA8 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1833 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1154 PUSH2 0xEA8 JUMP JUMPDEST PUSH1 0x1 PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x11B9 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x11E5 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1203 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x121B JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x122F JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1241 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x36A JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1264 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x127C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x12B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x12DB PUSH1 0x20 DUP5 ADD PUSH2 0x129C JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x127C DUP3 PUSH2 0x129C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x131A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1302 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1342 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x12FF JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x137E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1396 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x13AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x13BC JUMPI PUSH2 0x13BC PUSH2 0x1356 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x13E4 JUMPI PUSH2 0x13E4 PUSH2 0x1356 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x13FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x140E DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x12FF JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x142B DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x12FF JUMP JUMPDEST PUSH1 0xB PUSH1 0xFA SHL SWAP3 ADD SWAP2 DUP3 MSTORE POP PUSH1 0x1 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x36A JUMPI PUSH2 0x36A PUSH2 0x146D JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x14A8 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x12FF JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x14BC DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x12FF JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x14D7 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x12FF JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x14EB DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x12FF JUMP JUMPDEST PUSH1 0xB PUSH1 0xFA SHL SWAP2 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1512 JUMPI PUSH2 0x1512 PUSH2 0x146D JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH8 0x113730B6B2911D11 PUSH1 0xC1 SHL DUP2 MSTORE DUP4 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x153D DUP2 PUSH1 0x8 DUP6 ADD PUSH1 0x20 DUP10 ADD PUSH2 0x12FF JUMP JUMPDEST PUSH2 0x88B PUSH1 0xF2 SHL PUSH1 0x8 SWAP2 DUP5 ADD SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE PUSH15 0x113232B9B1B934B83A34B7B7111D11 PUSH1 0x89 SHL PUSH1 0xA DUP4 ADD MSTORE DUP6 MLOAD PUSH2 0x1579 DUP2 PUSH1 0x19 DUP6 ADD PUSH1 0x20 DUP11 ADD PUSH2 0x12FF JUMP JUMPDEST PUSH1 0x19 SWAP3 ADD SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE PUSH9 0x1134B6B0B3B2911D11 PUSH1 0xB9 SHL PUSH1 0x1B DUP4 ADD MSTORE DUP5 MLOAD PUSH2 0x15A8 DUP2 PUSH1 0x24 DUP6 ADD PUSH1 0x20 DUP10 ADD PUSH2 0x12FF JUMP JUMPDEST PUSH1 0x24 SWAP3 ADD SWAP2 DUP3 ADD MSTORE PUSH16 0x1132BC3A32B93730B62FBAB936111D11 PUSH1 0x81 SHL PUSH1 0x26 DUP3 ADD MSTORE PUSH2 0x160A PUSH1 0x36 DUP3 ADD PUSH32 0x68747470733A2F2F646961626C6F2E66616E646F6D2E636F6D2F77696B692F44 DUP2 MSTORE PUSH8 0x6961626C6F5F4949 PUSH1 0xC0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x28 ADD SWAP1 JUMP JUMPDEST PUSH1 0x11 PUSH1 0xF9 SHL DUP2 MSTORE PUSH1 0x1 ADD SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x7B PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x163A DUP2 PUSH1 0x1 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x12FF JUMP JUMPDEST PUSH1 0xB PUSH1 0xFA SHL PUSH1 0x1 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE PUSH14 0x2261747472696275746573223A5B PUSH1 0x90 SHL PUSH1 0x2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x1672 DUP2 PUSH1 0x10 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x12FF JUMP JUMPDEST PUSH2 0x5D7D PUSH1 0xF0 SHL PUSH1 0x10 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE PUSH1 0x12 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x646174613A6170706C69636174696F6E2F6A736F6E3B6261736536342C000000 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x16C5 DUP2 PUSH1 0x1D DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x12FF JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1D ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH16 0x3D913A3930B4BA2FBA3CB832911D1011 PUSH1 0x81 SHL DUP2 MSTORE DUP3 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x16FE DUP2 PUSH1 0x10 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x12FF JUMP JUMPDEST PUSH13 0x111610113B30B63AB2911D1011 PUSH1 0x99 SHL PUSH1 0x10 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x172B DUP2 PUSH1 0x1D DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x12FF JUMP JUMPDEST PUSH2 0x227D PUSH1 0xF0 SHL PUSH1 0x1D SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE PUSH1 0x1F ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x36A JUMPI PUSH2 0x36A PUSH2 0x146D JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1776 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x36A JUMPI PUSH2 0x36A PUSH2 0x146D JUMP INVALID 0xB1 SWAP6 CHAINID 0xDF CREATE 0x1E DUP6 PUSH16 0xB3F010C267A7B1C60363CF8A4664E21C 0xC8 SWAP13 0x26 0x22 CHAINID KECCAK256 0x21 0x4E COINBASE TIMESTAMP NUMBER PREVRANDAO GASLIMIT CHAINID SELFBALANCE BASEFEE 0x49 0x4A 0x4B 0x4C 0x4D 0x4E 0x4F POP MLOAD MSTORE MSTORE8 SLOAD SSTORE JUMP JUMPI PC MSIZE GAS PUSH2 0x6263 PUSH5 0x6566676869 PUSH11 0x6B6C6D6E6F707172737475 PUSH23 0x7778797A303132333435363738392B2F65D7A28E3265B3 PUSH27 0x6474929F336521B332C1681B933F6CB9F3376673440D862A02DD7B 0xC7 0xDE 0xC4 0xDC 0xEE 0xDD 0xA7 PUSH22 0xE58DD541E08A116C6C53815C0BD028192F7B626800CD 0x5E 0xD1 0x5C PUSH15 0x187E77E9AEE88184C21F4F2182AB58 0x27 0xCB EXTCODESIZE PUSH31 0x7FBEDCD63F03300A26469706673582212207C0574B691DF93093D8DBED397 0xA6 SWAP3 0x2B TIMESTAMP SWAP3 0xDC EXTCODECOPY 0xD2 0xDE 0xC5 CALL 0xF SAR MSIZE 0xB5 PUSH20 0x3E557464736F6C63430008140033000000000000 ","sourceMap":"252:3756:23:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ADMIN_ROLE_4257":{"entryPoint":null,"id":4257,"parameterSlots":0,"returnSlots":0},"@DEFAULT_ADMIN_ROLE_28":{"entryPoint":null,"id":28,"parameterSlots":0,"returnSlots":0},"@MINTER_ROLE_4252":{"entryPoint":null,"id":4252,"parameterSlots":0,"returnSlots":0},"@OWNER_ROLE_4242":{"entryPoint":null,"id":4242,"parameterSlots":0,"returnSlots":0},"@PAUSER_ROLE_4247":{"entryPoint":null,"id":4247,"parameterSlots":0,"returnSlots":0},"@UTILITY_ROLE_4262":{"entryPoint":null,"id":4262,"parameterSlots":0,"returnSlots":0},"@__AccessControl_init_63":{"entryPoint":3841,"id":63,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_714":{"entryPoint":3825,"id":714,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_732":{"entryPoint":4395,"id":732,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_878":{"entryPoint":3849,"id":878,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_unchained_896":{"entryPoint":4428,"id":896,"parameterSlots":0,"returnSlots":0},"@_addAttribute_5397":{"entryPoint":3865,"id":5397,"parameterSlots":2,"returnSlots":1},"@_baseInitialize_4313":{"entryPoint":2024,"id":4313,"parameterSlots":1,"returnSlots":0},"@_checkInitializing_538":{"entryPoint":3752,"id":538,"parameterSlots":0,"returnSlots":0},"@_checkRole_129":{"entryPoint":1556,"id":129,"parameterSlots":1,"returnSlots":0},"@_checkRole_150":{"entryPoint":3592,"id":150,"parameterSlots":2,"returnSlots":0},"@_createURI_5375":{"entryPoint":2250,"id":5375,"parameterSlots":1,"returnSlots":1},"@_getAccessControlStorage_46":{"entryPoint":null,"id":46,"parameterSlots":0,"returnSlots":1},"@_getInitializableStorage_615":{"entryPoint":null,"id":615,"parameterSlots":0,"returnSlots":1},"@_getPausableStorage_688":{"entryPoint":null,"id":688,"parameterSlots":0,"returnSlots":1},"@_getReentrancyGuardStorage_866":{"entryPoint":null,"id":866,"parameterSlots":0,"returnSlots":1},"@_grantRole_315":{"entryPoint":1566,"id":315,"parameterSlots":2,"returnSlots":1},"@_isInitializing_606":{"entryPoint":null,"id":606,"parameterSlots":0,"returnSlots":1},"@_msgSender_644":{"entryPoint":null,"id":644,"parameterSlots":0,"returnSlots":1},"@_pause_813":{"entryPoint":1951,"id":813,"parameterSlots":0,"returnSlots":0},"@_requireNotPaused_776":{"entryPoint":3703,"id":776,"parameterSlots":0,"returnSlots":0},"@_requirePaused_789":{"entryPoint":3653,"id":789,"parameterSlots":0,"returnSlots":0},"@_revokeRole_361":{"entryPoint":1731,"id":361,"parameterSlots":2,"returnSlots":1},"@_unpause_837":{"entryPoint":1855,"id":837,"parameterSlots":0,"returnSlots":0},"@characterNFT_5116":{"entryPoint":null,"id":5116,"parameterSlots":0,"returnSlots":0},"@encode_2741":{"entryPoint":4056,"id":2741,"parameterSlots":1,"returnSlots":1},"@getRoleAdmin_171":{"entryPoint":880,"id":171,"parameterSlots":1,"returnSlots":1},"@grantRole_190":{"entryPoint":914,"id":190,"parameterSlots":2,"returnSlots":0},"@hasRole_116":{"entryPoint":1189,"id":116,"parameterSlots":2,"returnSlots":1},"@initialize_5131":{"entryPoint":1245,"id":5131,"parameterSlots":1,"returnSlots":0},"@levelContractAddress_5118":{"entryPoint":null,"id":5118,"parameterSlots":0,"returnSlots":0},"@log10_3937":{"entryPoint":4474,"id":3937,"parameterSlots":1,"returnSlots":1},"@pause_4323":{"entryPoint":1157,"id":4323,"parameterSlots":0,"returnSlots":0},"@paused_764":{"entryPoint":null,"id":764,"parameterSlots":0,"returnSlots":1},"@renounceRole_232":{"entryPoint":948,"id":232,"parameterSlots":2,"returnSlots":0},"@revokeRole_209":{"entryPoint":1528,"id":209,"parameterSlots":2,"returnSlots":0},"@setCharacterNFT_5145":{"entryPoint":1098,"id":5145,"parameterSlots":1,"returnSlots":0},"@setLevelContract_5159":{"entryPoint":1039,"id":5159,"parameterSlots":1,"returnSlots":0},"@supportsInterface_1006":{"entryPoint":null,"id":1006,"parameterSlots":1,"returnSlots":1},"@supportsInterface_91":{"entryPoint":825,"id":91,"parameterSlots":1,"returnSlots":1},"@toString_2840":{"entryPoint":3909,"id":2840,"parameterSlots":1,"returnSlots":1},"@tokenURI_5172":{"entryPoint":1517,"id":5172,"parameterSlots":1,"returnSlots":1},"@unpause_4333":{"entryPoint":1004,"id":4333,"parameterSlots":0,"returnSlots":0},"abi_decode_address":{"entryPoint":4764,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":4836,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":4739,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":4792,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":4690,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr_fromMemory":{"entryPoint":4972,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":5182,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_stringliteral":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_stringliteral_6e9f":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":5270,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr_t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb__to_t_string_memory_ptr_t_string_memory_ptr_t_bytes1__nonPadded_inplace_fromStack_reversed":{"entryPoint":5317,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb__to_t_string_memory_ptr_t_bytes1__nonPadded_inplace_fromStack_reversed":{"entryPoint":5145,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_0fad31bde8ef6d9d8631c2e7aa54975d5fec99408295f9e9645c87e9422727f9_t_string_memory_ptr_t_stringliteral_44d6c99d3e56b857c06a35864739b41fbb2e541a5d7d24712e21af15533261a5_t_string_memory_ptr_t_stringliteral_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":5842,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_51367d69f1c3baff467b722249990cf2b0f92b1e50edd5a778b81ffc7191408f_t_string_memory_ptr_t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb_t_stringliteral_1f63d9db42efe217d85281c4ef6267f200cbdd8e8d6fd9a3e9d557ed86a373c7_t_string_memory_ptr_t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb_t_stringliteral_813a444dcf0b75d812ca8afb53e513b340ca828208f41bc16bdcde529c0ea551_t_string_memory_ptr_t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb_t_stringliteral_153dd7a4db1a16c0bc09459a32699b07f8a0722d62a40df6d0b30c2d78048b07_t_stringliteral_2484da87e67ecf7cddff1668c6da2fa017370cc0bcdf646dda519da55a336003_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0__to_t_bytes8_t_string_memory_ptr_t_bytes2_t_bytes15_t_string_memory_ptr_t_bytes2_t_bytes9_t_string_memory_ptr_t_bytes2_t_bytes16_t_string_memory_ptr_t_bytes1__nonPadded_inplace_fromStack_reversed":{"entryPoint":5401,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_a91eddf639b0b768929589c1a9fd21dcb0107199bdd82e55c5348018a1572f52_t_string_memory_ptr_t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb_t_stringliteral_fae5f698d2c3462fc5dd818af0f930c00a691ac3968407e92c6f5d64f16b49da_t_string_memory_ptr_t_stringliteral_ab149d31dbf8c3ed1cc7ba15c88205185e426c492b6b350058945b7266ec7e76__to_t_bytes1_t_string_memory_ptr_t_bytes1_t_bytes14_t_string_memory_ptr_t_bytes2__nonPadded_inplace_fromStack_reversed":{"entryPoint":5662,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_bccab2d885f86fda81bfd84dd4248d31f8073b473d187111d36536db073076fa_t_string_memory_ptr__to_t_bytes29_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":5773,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4899,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":5958,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":5977,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":6011,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":5251,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":4863,"id":null,"parameterSlots":3,"returnSlots":0},"increment_t_uint256":{"entryPoint":5376,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":5229,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":5207,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":4950,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:12095:26","statements":[{"nodeType":"YulBlock","src":"6:3:26","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:217:26","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:26"},"nodeType":"YulFunctionCall","src":"131:12:26"},"nodeType":"YulExpressionStatement","src":"131:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:26"},"nodeType":"YulFunctionCall","src":"100:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:26"},"nodeType":"YulFunctionCall","src":"96:32:26"},"nodeType":"YulIf","src":"93:52:26"},{"nodeType":"YulVariableDeclaration","src":"154:36:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:26"},"nodeType":"YulFunctionCall","src":"167:23:26"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"254:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"263:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"266:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"256:6:26"},"nodeType":"YulFunctionCall","src":"256:12:26"},"nodeType":"YulExpressionStatement","src":"256:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"234:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"239:10:26","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"230:3:26"},"nodeType":"YulFunctionCall","src":"230:20:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:26"},"nodeType":"YulFunctionCall","src":"219:32:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:26"},"nodeType":"YulFunctionCall","src":"209:43:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:26"},"nodeType":"YulFunctionCall","src":"202:51:26"},"nodeType":"YulIf","src":"199:71:26"},{"nodeType":"YulAssignment","src":"279:15:26","value":{"name":"value","nodeType":"YulIdentifier","src":"289:5:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"279:6:26"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:26","type":""}],"src":"14:286:26"},{"body":{"nodeType":"YulBlock","src":"400:92:26","statements":[{"nodeType":"YulAssignment","src":"410:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"422:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"433:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"418:3:26"},"nodeType":"YulFunctionCall","src":"418:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"410:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"452:9:26"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"477:6:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"470:6:26"},"nodeType":"YulFunctionCall","src":"470:14:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"463:6:26"},"nodeType":"YulFunctionCall","src":"463:22:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"445:6:26"},"nodeType":"YulFunctionCall","src":"445:41:26"},"nodeType":"YulExpressionStatement","src":"445:41:26"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"369:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"380:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"391:4:26","type":""}],"src":"305:187:26"},{"body":{"nodeType":"YulBlock","src":"567:110:26","statements":[{"body":{"nodeType":"YulBlock","src":"613:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"622:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"625:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"615:6:26"},"nodeType":"YulFunctionCall","src":"615:12:26"},"nodeType":"YulExpressionStatement","src":"615:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"588:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"597:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"584:3:26"},"nodeType":"YulFunctionCall","src":"584:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"609:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"580:3:26"},"nodeType":"YulFunctionCall","src":"580:32:26"},"nodeType":"YulIf","src":"577:52:26"},{"nodeType":"YulAssignment","src":"638:33:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"661:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"648:12:26"},"nodeType":"YulFunctionCall","src":"648:23:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"638:6:26"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"533:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"544:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"556:6:26","type":""}],"src":"497:180:26"},{"body":{"nodeType":"YulBlock","src":"783:76:26","statements":[{"nodeType":"YulAssignment","src":"793:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"805:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"816:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"801:3:26"},"nodeType":"YulFunctionCall","src":"801:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"793:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"835:9:26"},{"name":"value0","nodeType":"YulIdentifier","src":"846:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"828:6:26"},"nodeType":"YulFunctionCall","src":"828:25:26"},"nodeType":"YulExpressionStatement","src":"828:25:26"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"752:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"763:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"774:4:26","type":""}],"src":"682:177:26"},{"body":{"nodeType":"YulBlock","src":"913:124:26","statements":[{"nodeType":"YulAssignment","src":"923:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"945:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"932:12:26"},"nodeType":"YulFunctionCall","src":"932:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"923:5:26"}]},{"body":{"nodeType":"YulBlock","src":"1015:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1024:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1027:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1017:6:26"},"nodeType":"YulFunctionCall","src":"1017:12:26"},"nodeType":"YulExpressionStatement","src":"1017:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"974:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"985:5:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1000:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1005:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"996:3:26"},"nodeType":"YulFunctionCall","src":"996:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"1009:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"992:3:26"},"nodeType":"YulFunctionCall","src":"992:19:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"981:3:26"},"nodeType":"YulFunctionCall","src":"981:31:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"971:2:26"},"nodeType":"YulFunctionCall","src":"971:42:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"964:6:26"},"nodeType":"YulFunctionCall","src":"964:50:26"},"nodeType":"YulIf","src":"961:70:26"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"892:6:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"903:5:26","type":""}],"src":"864:173:26"},{"body":{"nodeType":"YulBlock","src":"1129:167:26","statements":[{"body":{"nodeType":"YulBlock","src":"1175:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1184:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1187:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1177:6:26"},"nodeType":"YulFunctionCall","src":"1177:12:26"},"nodeType":"YulExpressionStatement","src":"1177:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1150:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"1159:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1146:3:26"},"nodeType":"YulFunctionCall","src":"1146:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"1171:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1142:3:26"},"nodeType":"YulFunctionCall","src":"1142:32:26"},"nodeType":"YulIf","src":"1139:52:26"},{"nodeType":"YulAssignment","src":"1200:33:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1223:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1210:12:26"},"nodeType":"YulFunctionCall","src":"1210:23:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1200:6:26"}]},{"nodeType":"YulAssignment","src":"1242:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1275:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1286:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1271:3:26"},"nodeType":"YulFunctionCall","src":"1271:18:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1252:18:26"},"nodeType":"YulFunctionCall","src":"1252:38:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1242:6:26"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1087:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1098:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1110:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1118:6:26","type":""}],"src":"1042:254:26"},{"body":{"nodeType":"YulBlock","src":"1402:102:26","statements":[{"nodeType":"YulAssignment","src":"1412:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1424:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1435:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1420:3:26"},"nodeType":"YulFunctionCall","src":"1420:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1412:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1454:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1469:6:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1485:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1490:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1481:3:26"},"nodeType":"YulFunctionCall","src":"1481:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"1494:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1477:3:26"},"nodeType":"YulFunctionCall","src":"1477:19:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1465:3:26"},"nodeType":"YulFunctionCall","src":"1465:32:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1447:6:26"},"nodeType":"YulFunctionCall","src":"1447:51:26"},"nodeType":"YulExpressionStatement","src":"1447:51:26"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1371:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1382:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1393:4:26","type":""}],"src":"1301:203:26"},{"body":{"nodeType":"YulBlock","src":"1579:116:26","statements":[{"body":{"nodeType":"YulBlock","src":"1625:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1634:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1637:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1627:6:26"},"nodeType":"YulFunctionCall","src":"1627:12:26"},"nodeType":"YulExpressionStatement","src":"1627:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1600:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"1609:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1596:3:26"},"nodeType":"YulFunctionCall","src":"1596:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"1621:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1592:3:26"},"nodeType":"YulFunctionCall","src":"1592:32:26"},"nodeType":"YulIf","src":"1589:52:26"},{"nodeType":"YulAssignment","src":"1650:39:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1679:9:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1660:18:26"},"nodeType":"YulFunctionCall","src":"1660:29:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1650:6:26"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1545:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1556:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1568:6:26","type":""}],"src":"1509:186:26"},{"body":{"nodeType":"YulBlock","src":"1770:110:26","statements":[{"body":{"nodeType":"YulBlock","src":"1816:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1825:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1828:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1818:6:26"},"nodeType":"YulFunctionCall","src":"1818:12:26"},"nodeType":"YulExpressionStatement","src":"1818:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1791:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"1800:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1787:3:26"},"nodeType":"YulFunctionCall","src":"1787:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"1812:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1783:3:26"},"nodeType":"YulFunctionCall","src":"1783:32:26"},"nodeType":"YulIf","src":"1780:52:26"},{"nodeType":"YulAssignment","src":"1841:33:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1864:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1851:12:26"},"nodeType":"YulFunctionCall","src":"1851:23:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1841:6:26"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1736:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1747:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1759:6:26","type":""}],"src":"1700:180:26"},{"body":{"nodeType":"YulBlock","src":"1951:184:26","statements":[{"nodeType":"YulVariableDeclaration","src":"1961:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1970:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1965:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"2030:63:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2055:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"2060:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2051:3:26"},"nodeType":"YulFunctionCall","src":"2051:11:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2074:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"2079:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2070:3:26"},"nodeType":"YulFunctionCall","src":"2070:11:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2064:5:26"},"nodeType":"YulFunctionCall","src":"2064:18:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2044:6:26"},"nodeType":"YulFunctionCall","src":"2044:39:26"},"nodeType":"YulExpressionStatement","src":"2044:39:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1991:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"1994:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1988:2:26"},"nodeType":"YulFunctionCall","src":"1988:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2002:19:26","statements":[{"nodeType":"YulAssignment","src":"2004:15:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2013:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"2016:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2009:3:26"},"nodeType":"YulFunctionCall","src":"2009:10:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2004:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"1984:3:26","statements":[]},"src":"1980:113:26"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2113:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"2118:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2109:3:26"},"nodeType":"YulFunctionCall","src":"2109:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"2127:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2102:6:26"},"nodeType":"YulFunctionCall","src":"2102:27:26"},"nodeType":"YulExpressionStatement","src":"2102:27:26"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1929:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1934:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"1939:6:26","type":""}],"src":"1885:250:26"},{"body":{"nodeType":"YulBlock","src":"2261:275:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2278:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2289:2:26","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2271:6:26"},"nodeType":"YulFunctionCall","src":"2271:21:26"},"nodeType":"YulExpressionStatement","src":"2271:21:26"},{"nodeType":"YulVariableDeclaration","src":"2301:27:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2321:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2315:5:26"},"nodeType":"YulFunctionCall","src":"2315:13:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2305:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2348:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2359:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2344:3:26"},"nodeType":"YulFunctionCall","src":"2344:18:26"},{"name":"length","nodeType":"YulIdentifier","src":"2364:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2337:6:26"},"nodeType":"YulFunctionCall","src":"2337:34:26"},"nodeType":"YulExpressionStatement","src":"2337:34:26"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2419:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2427:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2415:3:26"},"nodeType":"YulFunctionCall","src":"2415:15:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2436:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2447:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2432:3:26"},"nodeType":"YulFunctionCall","src":"2432:18:26"},{"name":"length","nodeType":"YulIdentifier","src":"2452:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2380:34:26"},"nodeType":"YulFunctionCall","src":"2380:79:26"},"nodeType":"YulExpressionStatement","src":"2380:79:26"},{"nodeType":"YulAssignment","src":"2468:62:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2484:9:26"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2503:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2511:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2499:3:26"},"nodeType":"YulFunctionCall","src":"2499:15:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2520:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2516:3:26"},"nodeType":"YulFunctionCall","src":"2516:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2495:3:26"},"nodeType":"YulFunctionCall","src":"2495:29:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2480:3:26"},"nodeType":"YulFunctionCall","src":"2480:45:26"},{"kind":"number","nodeType":"YulLiteral","src":"2527:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2476:3:26"},"nodeType":"YulFunctionCall","src":"2476:54:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2468:4:26"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2230:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2241:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2252:4:26","type":""}],"src":"2140:396:26"},{"body":{"nodeType":"YulBlock","src":"2649:101:26","statements":[{"nodeType":"YulAssignment","src":"2659:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2671:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2682:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2667:3:26"},"nodeType":"YulFunctionCall","src":"2667:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2659:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2701:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2716:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2724:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2712:3:26"},"nodeType":"YulFunctionCall","src":"2712:31:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2694:6:26"},"nodeType":"YulFunctionCall","src":"2694:50:26"},"nodeType":"YulExpressionStatement","src":"2694:50:26"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2618:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2629:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2640:4:26","type":""}],"src":"2541:209:26"},{"body":{"nodeType":"YulBlock","src":"2856:76:26","statements":[{"nodeType":"YulAssignment","src":"2866:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2878:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2889:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2874:3:26"},"nodeType":"YulFunctionCall","src":"2874:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2866:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2908:9:26"},{"name":"value0","nodeType":"YulIdentifier","src":"2919:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2901:6:26"},"nodeType":"YulFunctionCall","src":"2901:25:26"},"nodeType":"YulExpressionStatement","src":"2901:25:26"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2825:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2836:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2847:4:26","type":""}],"src":"2755:177:26"},{"body":{"nodeType":"YulBlock","src":"2969:95:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2986:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2993:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2998:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2989:3:26"},"nodeType":"YulFunctionCall","src":"2989:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2979:6:26"},"nodeType":"YulFunctionCall","src":"2979:31:26"},"nodeType":"YulExpressionStatement","src":"2979:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3026:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3029:4:26","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3019:6:26"},"nodeType":"YulFunctionCall","src":"3019:15:26"},"nodeType":"YulExpressionStatement","src":"3019:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3050:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3053:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3043:6:26"},"nodeType":"YulFunctionCall","src":"3043:15:26"},"nodeType":"YulExpressionStatement","src":"3043:15:26"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2937:127:26"},{"body":{"nodeType":"YulBlock","src":"3160:806:26","statements":[{"body":{"nodeType":"YulBlock","src":"3206:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3215:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3218:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3208:6:26"},"nodeType":"YulFunctionCall","src":"3208:12:26"},"nodeType":"YulExpressionStatement","src":"3208:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3181:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"3190:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3177:3:26"},"nodeType":"YulFunctionCall","src":"3177:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"3202:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3173:3:26"},"nodeType":"YulFunctionCall","src":"3173:32:26"},"nodeType":"YulIf","src":"3170:52:26"},{"nodeType":"YulVariableDeclaration","src":"3231:30:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3251:9:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3245:5:26"},"nodeType":"YulFunctionCall","src":"3245:16:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3235:6:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3270:28:26","value":{"kind":"number","nodeType":"YulLiteral","src":"3280:18:26","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3274:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3325:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3334:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3337:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3327:6:26"},"nodeType":"YulFunctionCall","src":"3327:12:26"},"nodeType":"YulExpressionStatement","src":"3327:12:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3313:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"3321:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3310:2:26"},"nodeType":"YulFunctionCall","src":"3310:14:26"},"nodeType":"YulIf","src":"3307:34:26"},{"nodeType":"YulVariableDeclaration","src":"3350:32:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3364:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3375:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3360:3:26"},"nodeType":"YulFunctionCall","src":"3360:22:26"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3354:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3430:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3439:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3442:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3432:6:26"},"nodeType":"YulFunctionCall","src":"3432:12:26"},"nodeType":"YulExpressionStatement","src":"3432:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3409:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"3413:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3405:3:26"},"nodeType":"YulFunctionCall","src":"3405:13:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3420:7:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3401:3:26"},"nodeType":"YulFunctionCall","src":"3401:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3394:6:26"},"nodeType":"YulFunctionCall","src":"3394:35:26"},"nodeType":"YulIf","src":"3391:55:26"},{"nodeType":"YulVariableDeclaration","src":"3455:19:26","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3471:2:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3465:5:26"},"nodeType":"YulFunctionCall","src":"3465:9:26"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3459:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3497:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3499:16:26"},"nodeType":"YulFunctionCall","src":"3499:18:26"},"nodeType":"YulExpressionStatement","src":"3499:18:26"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3489:2:26"},{"name":"_1","nodeType":"YulIdentifier","src":"3493:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3486:2:26"},"nodeType":"YulFunctionCall","src":"3486:10:26"},"nodeType":"YulIf","src":"3483:36:26"},{"nodeType":"YulVariableDeclaration","src":"3528:17:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3542:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3538:3:26"},"nodeType":"YulFunctionCall","src":"3538:7:26"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"3532:2:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3554:23:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3574:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3568:5:26"},"nodeType":"YulFunctionCall","src":"3568:9:26"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3558:6:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3586:71:26","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3608:6:26"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3632:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"3636:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3628:3:26"},"nodeType":"YulFunctionCall","src":"3628:13:26"},{"name":"_4","nodeType":"YulIdentifier","src":"3643:2:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3624:3:26"},"nodeType":"YulFunctionCall","src":"3624:22:26"},{"kind":"number","nodeType":"YulLiteral","src":"3648:2:26","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3620:3:26"},"nodeType":"YulFunctionCall","src":"3620:31:26"},{"name":"_4","nodeType":"YulIdentifier","src":"3653:2:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3616:3:26"},"nodeType":"YulFunctionCall","src":"3616:40:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3604:3:26"},"nodeType":"YulFunctionCall","src":"3604:53:26"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"3590:10:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3716:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3718:16:26"},"nodeType":"YulFunctionCall","src":"3718:18:26"},"nodeType":"YulExpressionStatement","src":"3718:18:26"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3675:10:26"},{"name":"_1","nodeType":"YulIdentifier","src":"3687:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3672:2:26"},"nodeType":"YulFunctionCall","src":"3672:18:26"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3695:10:26"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3707:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3692:2:26"},"nodeType":"YulFunctionCall","src":"3692:22:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3669:2:26"},"nodeType":"YulFunctionCall","src":"3669:46:26"},"nodeType":"YulIf","src":"3666:72:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3754:2:26","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3758:10:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3747:6:26"},"nodeType":"YulFunctionCall","src":"3747:22:26"},"nodeType":"YulExpressionStatement","src":"3747:22:26"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3785:6:26"},{"name":"_3","nodeType":"YulIdentifier","src":"3793:2:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3778:6:26"},"nodeType":"YulFunctionCall","src":"3778:18:26"},"nodeType":"YulExpressionStatement","src":"3778:18:26"},{"body":{"nodeType":"YulBlock","src":"3842:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3851:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3854:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3844:6:26"},"nodeType":"YulFunctionCall","src":"3844:12:26"},"nodeType":"YulExpressionStatement","src":"3844:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3819:2:26"},{"name":"_3","nodeType":"YulIdentifier","src":"3823:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3815:3:26"},"nodeType":"YulFunctionCall","src":"3815:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"3828:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3811:3:26"},"nodeType":"YulFunctionCall","src":"3811:20:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3833:7:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3808:2:26"},"nodeType":"YulFunctionCall","src":"3808:33:26"},"nodeType":"YulIf","src":"3805:53:26"},{"expression":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3906:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"3910:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3902:3:26"},"nodeType":"YulFunctionCall","src":"3902:11:26"},{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3919:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3927:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3915:3:26"},"nodeType":"YulFunctionCall","src":"3915:15:26"},{"name":"_3","nodeType":"YulIdentifier","src":"3932:2:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"3867:34:26"},"nodeType":"YulFunctionCall","src":"3867:68:26"},"nodeType":"YulExpressionStatement","src":"3867:68:26"},{"nodeType":"YulAssignment","src":"3944:16:26","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3954:6:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3944:6:26"}]}]},"name":"abi_decode_tuple_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3126:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3137:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3149:6:26","type":""}],"src":"3069:897:26"},{"body":{"nodeType":"YulBlock","src":"4200:212:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4210:27:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4230:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4224:5:26"},"nodeType":"YulFunctionCall","src":"4224:13:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4214:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4285:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"4293:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4281:3:26"},"nodeType":"YulFunctionCall","src":"4281:17:26"},{"name":"pos","nodeType":"YulIdentifier","src":"4300:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"4305:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"4246:34:26"},"nodeType":"YulFunctionCall","src":"4246:66:26"},"nodeType":"YulExpressionStatement","src":"4246:66:26"},{"nodeType":"YulVariableDeclaration","src":"4321:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4338:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"4343:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4334:3:26"},"nodeType":"YulFunctionCall","src":"4334:16:26"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"4325:5:26","type":""}]},{"expression":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"4366:5:26"},{"hexValue":"2c","kind":"string","nodeType":"YulLiteral","src":"4373:3:26","type":"","value":","}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4359:6:26"},"nodeType":"YulFunctionCall","src":"4359:18:26"},"nodeType":"YulExpressionStatement","src":"4359:18:26"},{"nodeType":"YulAssignment","src":"4386:20:26","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"4397:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"4404:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4393:3:26"},"nodeType":"YulFunctionCall","src":"4393:13:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4386:3:26"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb__to_t_string_memory_ptr_t_bytes1__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4176:3:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4181:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4192:3:26","type":""}],"src":"3971:441:26"},{"body":{"nodeType":"YulBlock","src":"4498:103:26","statements":[{"body":{"nodeType":"YulBlock","src":"4544:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4553:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4556:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4546:6:26"},"nodeType":"YulFunctionCall","src":"4546:12:26"},"nodeType":"YulExpressionStatement","src":"4546:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4519:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"4528:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4515:3:26"},"nodeType":"YulFunctionCall","src":"4515:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"4540:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4511:3:26"},"nodeType":"YulFunctionCall","src":"4511:32:26"},"nodeType":"YulIf","src":"4508:52:26"},{"nodeType":"YulAssignment","src":"4569:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4585:9:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4579:5:26"},"nodeType":"YulFunctionCall","src":"4579:16:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4569:6:26"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4464:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4475:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4487:6:26","type":""}],"src":"4417:184:26"},{"body":{"nodeType":"YulBlock","src":"4638:95:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4655:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4662:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4667:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4658:3:26"},"nodeType":"YulFunctionCall","src":"4658:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4648:6:26"},"nodeType":"YulFunctionCall","src":"4648:31:26"},"nodeType":"YulExpressionStatement","src":"4648:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4695:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4698:4:26","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4688:6:26"},"nodeType":"YulFunctionCall","src":"4688:15:26"},"nodeType":"YulExpressionStatement","src":"4688:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4719:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4722:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4712:6:26"},"nodeType":"YulFunctionCall","src":"4712:15:26"},"nodeType":"YulExpressionStatement","src":"4712:15:26"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"4606:127:26"},{"body":{"nodeType":"YulBlock","src":"4770:95:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4787:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4794:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4799:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4790:3:26"},"nodeType":"YulFunctionCall","src":"4790:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4780:6:26"},"nodeType":"YulFunctionCall","src":"4780:31:26"},"nodeType":"YulExpressionStatement","src":"4780:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4827:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4830:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4820:6:26"},"nodeType":"YulFunctionCall","src":"4820:15:26"},"nodeType":"YulExpressionStatement","src":"4820:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4851:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4854:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4844:6:26"},"nodeType":"YulFunctionCall","src":"4844:15:26"},"nodeType":"YulExpressionStatement","src":"4844:15:26"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"4738:127:26"},{"body":{"nodeType":"YulBlock","src":"4919:79:26","statements":[{"nodeType":"YulAssignment","src":"4929:17:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4941:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"4944:1:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4937:3:26"},"nodeType":"YulFunctionCall","src":"4937:9:26"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"4929:4:26"}]},{"body":{"nodeType":"YulBlock","src":"4970:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4972:16:26"},"nodeType":"YulFunctionCall","src":"4972:18:26"},"nodeType":"YulExpressionStatement","src":"4972:18:26"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"4961:4:26"},{"name":"x","nodeType":"YulIdentifier","src":"4967:1:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4958:2:26"},"nodeType":"YulFunctionCall","src":"4958:11:26"},"nodeType":"YulIf","src":"4955:37:26"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"4901:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"4904:1:26","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"4910:4:26","type":""}],"src":"4870:128:26"},{"body":{"nodeType":"YulBlock","src":"5190:309:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5200:27:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5220:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5214:5:26"},"nodeType":"YulFunctionCall","src":"5214:13:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5204:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5275:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"5283:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5271:3:26"},"nodeType":"YulFunctionCall","src":"5271:17:26"},{"name":"pos","nodeType":"YulIdentifier","src":"5290:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"5295:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"5236:34:26"},"nodeType":"YulFunctionCall","src":"5236:66:26"},"nodeType":"YulExpressionStatement","src":"5236:66:26"},{"nodeType":"YulVariableDeclaration","src":"5311:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5328:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"5333:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5324:3:26"},"nodeType":"YulFunctionCall","src":"5324:16:26"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"5315:5:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5349:29:26","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5371:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5365:5:26"},"nodeType":"YulFunctionCall","src":"5365:13:26"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"5353:8:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5426:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"5434:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5422:3:26"},"nodeType":"YulFunctionCall","src":"5422:17:26"},{"name":"end_1","nodeType":"YulIdentifier","src":"5441:5:26"},{"name":"length_1","nodeType":"YulIdentifier","src":"5448:8:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"5387:34:26"},"nodeType":"YulFunctionCall","src":"5387:70:26"},"nodeType":"YulExpressionStatement","src":"5387:70:26"},{"nodeType":"YulAssignment","src":"5466:27:26","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"5477:5:26"},{"name":"length_1","nodeType":"YulIdentifier","src":"5484:8:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5473:3:26"},"nodeType":"YulFunctionCall","src":"5473:20:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5466:3:26"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5158:3:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5163:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5171:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5182:3:26","type":""}],"src":"5003:496:26"},{"body":{"nodeType":"YulBlock","src":"5781:371:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5791:27:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5811:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5805:5:26"},"nodeType":"YulFunctionCall","src":"5805:13:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5795:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5866:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"5874:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5862:3:26"},"nodeType":"YulFunctionCall","src":"5862:17:26"},{"name":"pos","nodeType":"YulIdentifier","src":"5881:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"5886:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"5827:34:26"},"nodeType":"YulFunctionCall","src":"5827:66:26"},"nodeType":"YulExpressionStatement","src":"5827:66:26"},{"nodeType":"YulVariableDeclaration","src":"5902:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5919:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"5924:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5915:3:26"},"nodeType":"YulFunctionCall","src":"5915:16:26"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"5906:5:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5940:29:26","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5962:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5956:5:26"},"nodeType":"YulFunctionCall","src":"5956:13:26"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"5944:8:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"6017:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"6025:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6013:3:26"},"nodeType":"YulFunctionCall","src":"6013:17:26"},{"name":"end_1","nodeType":"YulIdentifier","src":"6032:5:26"},{"name":"length_1","nodeType":"YulIdentifier","src":"6039:8:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"5978:34:26"},"nodeType":"YulFunctionCall","src":"5978:70:26"},"nodeType":"YulExpressionStatement","src":"5978:70:26"},{"nodeType":"YulVariableDeclaration","src":"6057:33:26","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"6074:5:26"},{"name":"length_1","nodeType":"YulIdentifier","src":"6081:8:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6070:3:26"},"nodeType":"YulFunctionCall","src":"6070:20:26"},"variables":[{"name":"end_2","nodeType":"YulTypedName","src":"6061:5:26","type":""}]},{"expression":{"arguments":[{"name":"end_2","nodeType":"YulIdentifier","src":"6106:5:26"},{"hexValue":"2c","kind":"string","nodeType":"YulLiteral","src":"6113:3:26","type":"","value":","}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6099:6:26"},"nodeType":"YulFunctionCall","src":"6099:18:26"},"nodeType":"YulExpressionStatement","src":"6099:18:26"},{"nodeType":"YulAssignment","src":"6126:20:26","value":{"arguments":[{"name":"end_2","nodeType":"YulIdentifier","src":"6137:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"6144:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6133:3:26"},"nodeType":"YulFunctionCall","src":"6133:13:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6126:3:26"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr_t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb__to_t_string_memory_ptr_t_string_memory_ptr_t_bytes1__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5749:3:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5754:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5762:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5773:3:26","type":""}],"src":"5504:648:26"},{"body":{"nodeType":"YulBlock","src":"6204:88:26","statements":[{"body":{"nodeType":"YulBlock","src":"6235:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6237:16:26"},"nodeType":"YulFunctionCall","src":"6237:18:26"},"nodeType":"YulExpressionStatement","src":"6237:18:26"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6220:5:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6231:1:26","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6227:3:26"},"nodeType":"YulFunctionCall","src":"6227:6:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6217:2:26"},"nodeType":"YulFunctionCall","src":"6217:17:26"},"nodeType":"YulIf","src":"6214:43:26"},{"nodeType":"YulAssignment","src":"6266:20:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6277:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"6284:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6273:3:26"},"nodeType":"YulFunctionCall","src":"6273:13:26"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"6266:3:26"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6186:5:26","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"6196:3:26","type":""}],"src":"6157:135:26"},{"body":{"nodeType":"YulBlock","src":"6347:132:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6364:3:26"},{"hexValue":"68747470733a2f2f646961626c6f2e66616e646f6d2e636f6d2f77696b692f44","kind":"string","nodeType":"YulLiteral","src":"6369:34:26","type":"","value":"https://diablo.fandom.com/wiki/D"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6357:6:26"},"nodeType":"YulFunctionCall","src":"6357:47:26"},"nodeType":"YulExpressionStatement","src":"6357:47:26"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6424:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"6429:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6420:3:26"},"nodeType":"YulFunctionCall","src":"6420:12:26"},{"hexValue":"6961626c6f5f4949","kind":"string","nodeType":"YulLiteral","src":"6434:10:26","type":"","value":"iablo_II"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6413:6:26"},"nodeType":"YulFunctionCall","src":"6413:32:26"},"nodeType":"YulExpressionStatement","src":"6413:32:26"},{"nodeType":"YulAssignment","src":"6454:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6465:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"6470:2:26","type":"","value":"40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6461:3:26"},"nodeType":"YulFunctionCall","src":"6461:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6454:3:26"}]}]},"name":"abi_encode_stringliteral","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6331:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6339:3:26","type":""}],"src":"6297:182:26"},{"body":{"nodeType":"YulBlock","src":"6532:29:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6541:3:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6550:3:26","type":"","value":"249"},{"kind":"number","nodeType":"YulLiteral","src":"6555:2:26","type":"","value":"17"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6546:3:26"},"nodeType":"YulFunctionCall","src":"6546:12:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6534:6:26"},"nodeType":"YulFunctionCall","src":"6534:25:26"},"nodeType":"YulExpressionStatement","src":"6534:25:26"}]},"name":"abi_encode_stringliteral_6e9f","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6523:3:26","type":""}],"src":"6484:77:26"},{"body":{"nodeType":"YulBlock","src":"7624:996:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7641:3:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7650:3:26","type":"","value":"193"},{"kind":"number","nodeType":"YulLiteral","src":"7655:18:26","type":"","value":"0x113730b6b2911d11"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7646:3:26"},"nodeType":"YulFunctionCall","src":"7646:28:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7634:6:26"},"nodeType":"YulFunctionCall","src":"7634:41:26"},"nodeType":"YulExpressionStatement","src":"7634:41:26"},{"nodeType":"YulVariableDeclaration","src":"7684:27:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7704:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7698:5:26"},"nodeType":"YulFunctionCall","src":"7698:13:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7688:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7759:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"7767:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7755:3:26"},"nodeType":"YulFunctionCall","src":"7755:17:26"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7778:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"7783:1:26","type":"","value":"8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7774:3:26"},"nodeType":"YulFunctionCall","src":"7774:11:26"},{"name":"length","nodeType":"YulIdentifier","src":"7787:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7720:34:26"},"nodeType":"YulFunctionCall","src":"7720:74:26"},"nodeType":"YulExpressionStatement","src":"7720:74:26"},{"nodeType":"YulVariableDeclaration","src":"7803:26:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7817:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"7822:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7813:3:26"},"nodeType":"YulFunctionCall","src":"7813:16:26"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7807:2:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7838:24:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7852:3:26","type":"","value":"242"},{"kind":"number","nodeType":"YulLiteral","src":"7857:4:26","type":"","value":"2187"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7848:3:26"},"nodeType":"YulFunctionCall","src":"7848:14:26"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"7842:2:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"7882:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"7886:1:26","type":"","value":"8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7878:3:26"},"nodeType":"YulFunctionCall","src":"7878:10:26"},{"name":"_2","nodeType":"YulIdentifier","src":"7890:2:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7871:6:26"},"nodeType":"YulFunctionCall","src":"7871:22:26"},"nodeType":"YulExpressionStatement","src":"7871:22:26"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"7913:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"7917:2:26","type":"","value":"10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7909:3:26"},"nodeType":"YulFunctionCall","src":"7909:11:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7926:3:26","type":"","value":"137"},{"kind":"number","nodeType":"YulLiteral","src":"7931:32:26","type":"","value":"0x113232b9b1b934b83a34b7b7111d11"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7922:3:26"},"nodeType":"YulFunctionCall","src":"7922:42:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7902:6:26"},"nodeType":"YulFunctionCall","src":"7902:63:26"},"nodeType":"YulExpressionStatement","src":"7902:63:26"},{"nodeType":"YulVariableDeclaration","src":"7974:29:26","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7996:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7990:5:26"},"nodeType":"YulFunctionCall","src":"7990:13:26"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"7978:8:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8051:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"8059:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8047:3:26"},"nodeType":"YulFunctionCall","src":"8047:17:26"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"8070:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"8074:2:26","type":"","value":"25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8066:3:26"},"nodeType":"YulFunctionCall","src":"8066:11:26"},{"name":"length_1","nodeType":"YulIdentifier","src":"8079:8:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"8012:34:26"},"nodeType":"YulFunctionCall","src":"8012:76:26"},"nodeType":"YulExpressionStatement","src":"8012:76:26"},{"nodeType":"YulVariableDeclaration","src":"8097:27:26","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"8111:2:26"},{"name":"length_1","nodeType":"YulIdentifier","src":"8115:8:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8107:3:26"},"nodeType":"YulFunctionCall","src":"8107:17:26"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"8101:2:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"8144:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"8148:2:26","type":"","value":"25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8140:3:26"},"nodeType":"YulFunctionCall","src":"8140:11:26"},{"name":"_2","nodeType":"YulIdentifier","src":"8153:2:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8133:6:26"},"nodeType":"YulFunctionCall","src":"8133:23:26"},"nodeType":"YulExpressionStatement","src":"8133:23:26"},{"expression":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"8176:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"8180:2:26","type":"","value":"27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8172:3:26"},"nodeType":"YulFunctionCall","src":"8172:11:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8189:3:26","type":"","value":"185"},{"kind":"number","nodeType":"YulLiteral","src":"8194:20:26","type":"","value":"0x1134b6b0b3b2911d11"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8185:3:26"},"nodeType":"YulFunctionCall","src":"8185:30:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8165:6:26"},"nodeType":"YulFunctionCall","src":"8165:51:26"},"nodeType":"YulExpressionStatement","src":"8165:51:26"},{"nodeType":"YulVariableDeclaration","src":"8225:29:26","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"8247:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8241:5:26"},"nodeType":"YulFunctionCall","src":"8241:13:26"},"variables":[{"name":"length_2","nodeType":"YulTypedName","src":"8229:8:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"8302:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"8310:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8298:3:26"},"nodeType":"YulFunctionCall","src":"8298:17:26"},{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"8321:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"8325:2:26","type":"","value":"36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8317:3:26"},"nodeType":"YulFunctionCall","src":"8317:11:26"},{"name":"length_2","nodeType":"YulIdentifier","src":"8330:8:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"8263:34:26"},"nodeType":"YulFunctionCall","src":"8263:76:26"},"nodeType":"YulExpressionStatement","src":"8263:76:26"},{"nodeType":"YulVariableDeclaration","src":"8348:27:26","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"8362:2:26"},{"name":"length_2","nodeType":"YulIdentifier","src":"8366:8:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8358:3:26"},"nodeType":"YulFunctionCall","src":"8358:17:26"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"8352:2:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"8395:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"8399:2:26","type":"","value":"36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8391:3:26"},"nodeType":"YulFunctionCall","src":"8391:11:26"},{"name":"_2","nodeType":"YulIdentifier","src":"8404:2:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8384:6:26"},"nodeType":"YulFunctionCall","src":"8384:23:26"},"nodeType":"YulExpressionStatement","src":"8384:23:26"},{"expression":{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"8427:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"8431:2:26","type":"","value":"38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8423:3:26"},"nodeType":"YulFunctionCall","src":"8423:11:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8440:3:26","type":"","value":"129"},{"kind":"number","nodeType":"YulLiteral","src":"8445:34:26","type":"","value":"0x1132bc3a32b93730b62fbab936111d11"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8436:3:26"},"nodeType":"YulFunctionCall","src":"8436:44:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8416:6:26"},"nodeType":"YulFunctionCall","src":"8416:65:26"},"nodeType":"YulExpressionStatement","src":"8416:65:26"},{"nodeType":"YulVariableDeclaration","src":"8490:50:26","value":{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"8532:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"8536:2:26","type":"","value":"54"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8528:3:26"},"nodeType":"YulFunctionCall","src":"8528:11:26"}],"functionName":{"name":"abi_encode_stringliteral","nodeType":"YulIdentifier","src":"8503:24:26"},"nodeType":"YulFunctionCall","src":"8503:37:26"},"variables":[{"name":"pos_1","nodeType":"YulTypedName","src":"8494:5:26","type":""}]},{"expression":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"8579:5:26"}],"functionName":{"name":"abi_encode_stringliteral_6e9f","nodeType":"YulIdentifier","src":"8549:29:26"},"nodeType":"YulFunctionCall","src":"8549:36:26"},"nodeType":"YulExpressionStatement","src":"8549:36:26"},{"nodeType":"YulAssignment","src":"8594:20:26","value":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"8605:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"8612:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8601:3:26"},"nodeType":"YulFunctionCall","src":"8601:13:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8594:3:26"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_51367d69f1c3baff467b722249990cf2b0f92b1e50edd5a778b81ffc7191408f_t_string_memory_ptr_t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb_t_stringliteral_1f63d9db42efe217d85281c4ef6267f200cbdd8e8d6fd9a3e9d557ed86a373c7_t_string_memory_ptr_t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb_t_stringliteral_813a444dcf0b75d812ca8afb53e513b340ca828208f41bc16bdcde529c0ea551_t_string_memory_ptr_t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb_t_stringliteral_153dd7a4db1a16c0bc09459a32699b07f8a0722d62a40df6d0b30c2d78048b07_t_stringliteral_2484da87e67ecf7cddff1668c6da2fa017370cc0bcdf646dda519da55a336003_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0__to_t_bytes8_t_string_memory_ptr_t_bytes2_t_bytes15_t_string_memory_ptr_t_bytes2_t_bytes9_t_string_memory_ptr_t_bytes2_t_bytes16_t_string_memory_ptr_t_bytes1__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7584:3:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7589:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7597:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7605:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7616:3:26","type":""}],"src":"6566:2054:26"},{"body":{"nodeType":"YulBlock","src":"9173:507:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9190:3:26"},{"hexValue":"7b","kind":"string","nodeType":"YulLiteral","src":"9195:3:26","type":"","value":"{"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9183:6:26"},"nodeType":"YulFunctionCall","src":"9183:16:26"},"nodeType":"YulExpressionStatement","src":"9183:16:26"},{"nodeType":"YulVariableDeclaration","src":"9208:27:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9228:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9222:5:26"},"nodeType":"YulFunctionCall","src":"9222:13:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9212:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9283:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"9291:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9279:3:26"},"nodeType":"YulFunctionCall","src":"9279:17:26"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9302:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"9307:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9298:3:26"},"nodeType":"YulFunctionCall","src":"9298:11:26"},{"name":"length","nodeType":"YulIdentifier","src":"9311:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"9244:34:26"},"nodeType":"YulFunctionCall","src":"9244:74:26"},"nodeType":"YulExpressionStatement","src":"9244:74:26"},{"nodeType":"YulVariableDeclaration","src":"9327:26:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9341:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"9346:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9337:3:26"},"nodeType":"YulFunctionCall","src":"9337:16:26"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9331:2:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"9373:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"9377:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9369:3:26"},"nodeType":"YulFunctionCall","src":"9369:10:26"},{"hexValue":"2c","kind":"string","nodeType":"YulLiteral","src":"9381:3:26","type":"","value":","}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9362:6:26"},"nodeType":"YulFunctionCall","src":"9362:23:26"},"nodeType":"YulExpressionStatement","src":"9362:23:26"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"9405:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"9409:1:26","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9401:3:26"},"nodeType":"YulFunctionCall","src":"9401:10:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9417:3:26","type":"","value":"144"},{"kind":"number","nodeType":"YulLiteral","src":"9422:30:26","type":"","value":"0x2261747472696275746573223a5b"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9413:3:26"},"nodeType":"YulFunctionCall","src":"9413:40:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9394:6:26"},"nodeType":"YulFunctionCall","src":"9394:60:26"},"nodeType":"YulExpressionStatement","src":"9394:60:26"},{"nodeType":"YulVariableDeclaration","src":"9463:29:26","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9485:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9479:5:26"},"nodeType":"YulFunctionCall","src":"9479:13:26"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"9467:8:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9540:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"9548:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9536:3:26"},"nodeType":"YulFunctionCall","src":"9536:17:26"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"9559:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"9563:2:26","type":"","value":"16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9555:3:26"},"nodeType":"YulFunctionCall","src":"9555:11:26"},{"name":"length_1","nodeType":"YulIdentifier","src":"9568:8:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"9501:34:26"},"nodeType":"YulFunctionCall","src":"9501:76:26"},"nodeType":"YulExpressionStatement","src":"9501:76:26"},{"nodeType":"YulVariableDeclaration","src":"9586:27:26","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"9600:2:26"},{"name":"length_1","nodeType":"YulIdentifier","src":"9604:8:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9596:3:26"},"nodeType":"YulFunctionCall","src":"9596:17:26"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"9590:2:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"9633:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"9637:2:26","type":"","value":"16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9629:3:26"},"nodeType":"YulFunctionCall","src":"9629:11:26"},{"hexValue":"5d7d","kind":"string","nodeType":"YulLiteral","src":"9642:4:26","type":"","value":"]}"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9622:6:26"},"nodeType":"YulFunctionCall","src":"9622:25:26"},"nodeType":"YulExpressionStatement","src":"9622:25:26"},{"nodeType":"YulAssignment","src":"9656:18:26","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"9667:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"9671:2:26","type":"","value":"18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9663:3:26"},"nodeType":"YulFunctionCall","src":"9663:11:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9656:3:26"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_a91eddf639b0b768929589c1a9fd21dcb0107199bdd82e55c5348018a1572f52_t_string_memory_ptr_t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb_t_stringliteral_fae5f698d2c3462fc5dd818af0f930c00a691ac3968407e92c6f5d64f16b49da_t_string_memory_ptr_t_stringliteral_ab149d31dbf8c3ed1cc7ba15c88205185e426c492b6b350058945b7266ec7e76__to_t_bytes1_t_string_memory_ptr_t_bytes1_t_bytes14_t_string_memory_ptr_t_bytes2__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9141:3:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9146:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9154:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9165:3:26","type":""}],"src":"8625:1055:26"},{"body":{"nodeType":"YulBlock","src":"9915:221:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9932:3:26"},{"hexValue":"646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c","kind":"string","nodeType":"YulLiteral","src":"9937:31:26","type":"","value":"data:application/json;base64,"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9925:6:26"},"nodeType":"YulFunctionCall","src":"9925:44:26"},"nodeType":"YulExpressionStatement","src":"9925:44:26"},{"nodeType":"YulVariableDeclaration","src":"9978:27:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9998:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9992:5:26"},"nodeType":"YulFunctionCall","src":"9992:13:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9982:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10053:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"10061:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10049:3:26"},"nodeType":"YulFunctionCall","src":"10049:17:26"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10072:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"10077:2:26","type":"","value":"29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10068:3:26"},"nodeType":"YulFunctionCall","src":"10068:12:26"},{"name":"length","nodeType":"YulIdentifier","src":"10082:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"10014:34:26"},"nodeType":"YulFunctionCall","src":"10014:75:26"},"nodeType":"YulExpressionStatement","src":"10014:75:26"},{"nodeType":"YulAssignment","src":"10098:32:26","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10113:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"10118:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10109:3:26"},"nodeType":"YulFunctionCall","src":"10109:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"10127:2:26","type":"","value":"29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10105:3:26"},"nodeType":"YulFunctionCall","src":"10105:25:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10098:3:26"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_bccab2d885f86fda81bfd84dd4248d31f8073b473d187111d36536db073076fa_t_string_memory_ptr__to_t_bytes29_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9891:3:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9896:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9907:3:26","type":""}],"src":"9685:451:26"},{"body":{"nodeType":"YulBlock","src":"10270:145:26","statements":[{"nodeType":"YulAssignment","src":"10280:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10292:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"10303:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10288:3:26"},"nodeType":"YulFunctionCall","src":"10288:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10280:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10322:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10337:6:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10353:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"10358:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10349:3:26"},"nodeType":"YulFunctionCall","src":"10349:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"10362:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10345:3:26"},"nodeType":"YulFunctionCall","src":"10345:19:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10333:3:26"},"nodeType":"YulFunctionCall","src":"10333:32:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10315:6:26"},"nodeType":"YulFunctionCall","src":"10315:51:26"},"nodeType":"YulExpressionStatement","src":"10315:51:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10386:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"10397:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10382:3:26"},"nodeType":"YulFunctionCall","src":"10382:18:26"},{"name":"value1","nodeType":"YulIdentifier","src":"10402:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10375:6:26"},"nodeType":"YulFunctionCall","src":"10375:34:26"},"nodeType":"YulExpressionStatement","src":"10375:34:26"}]},"name":"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10231:9:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10242:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10250:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10261:4:26","type":""}],"src":"10141:274:26"},{"body":{"nodeType":"YulBlock","src":"10910:526:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10927:3:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10936:3:26","type":"","value":"129"},{"kind":"number","nodeType":"YulLiteral","src":"10941:34:26","type":"","value":"0x3d913a3930b4ba2fba3cb832911d1011"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10932:3:26"},"nodeType":"YulFunctionCall","src":"10932:44:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10920:6:26"},"nodeType":"YulFunctionCall","src":"10920:57:26"},"nodeType":"YulExpressionStatement","src":"10920:57:26"},{"nodeType":"YulVariableDeclaration","src":"10986:27:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11006:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11000:5:26"},"nodeType":"YulFunctionCall","src":"11000:13:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10990:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11061:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"11069:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11057:3:26"},"nodeType":"YulFunctionCall","src":"11057:17:26"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11080:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"11085:2:26","type":"","value":"16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11076:3:26"},"nodeType":"YulFunctionCall","src":"11076:12:26"},{"name":"length","nodeType":"YulIdentifier","src":"11090:6:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"11022:34:26"},"nodeType":"YulFunctionCall","src":"11022:75:26"},"nodeType":"YulExpressionStatement","src":"11022:75:26"},{"nodeType":"YulVariableDeclaration","src":"11106:26:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11120:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"11125:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11116:3:26"},"nodeType":"YulFunctionCall","src":"11116:16:26"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"11110:2:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"11152:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"11156:2:26","type":"","value":"16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11148:3:26"},"nodeType":"YulFunctionCall","src":"11148:11:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11165:3:26","type":"","value":"153"},{"kind":"number","nodeType":"YulLiteral","src":"11170:28:26","type":"","value":"0x111610113b30b63ab2911d1011"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11161:3:26"},"nodeType":"YulFunctionCall","src":"11161:38:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11141:6:26"},"nodeType":"YulFunctionCall","src":"11141:59:26"},"nodeType":"YulExpressionStatement","src":"11141:59:26"},{"nodeType":"YulVariableDeclaration","src":"11209:29:26","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11231:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11225:5:26"},"nodeType":"YulFunctionCall","src":"11225:13:26"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"11213:8:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11286:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"11294:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11282:3:26"},"nodeType":"YulFunctionCall","src":"11282:17:26"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"11305:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"11309:2:26","type":"","value":"29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11301:3:26"},"nodeType":"YulFunctionCall","src":"11301:11:26"},{"name":"length_1","nodeType":"YulIdentifier","src":"11314:8:26"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"11247:34:26"},"nodeType":"YulFunctionCall","src":"11247:76:26"},"nodeType":"YulExpressionStatement","src":"11247:76:26"},{"nodeType":"YulVariableDeclaration","src":"11332:27:26","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"11346:2:26"},{"name":"length_1","nodeType":"YulIdentifier","src":"11350:8:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11342:3:26"},"nodeType":"YulFunctionCall","src":"11342:17:26"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"11336:2:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"11379:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"11383:2:26","type":"","value":"29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11375:3:26"},"nodeType":"YulFunctionCall","src":"11375:11:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11392:3:26","type":"","value":"240"},{"kind":"number","nodeType":"YulLiteral","src":"11397:4:26","type":"","value":"8829"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11388:3:26"},"nodeType":"YulFunctionCall","src":"11388:14:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11368:6:26"},"nodeType":"YulFunctionCall","src":"11368:35:26"},"nodeType":"YulExpressionStatement","src":"11368:35:26"},{"nodeType":"YulAssignment","src":"11412:18:26","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"11423:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"11427:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11419:3:26"},"nodeType":"YulFunctionCall","src":"11419:11:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11412:3:26"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_0fad31bde8ef6d9d8631c2e7aa54975d5fec99408295f9e9645c87e9422727f9_t_string_memory_ptr_t_stringliteral_44d6c99d3e56b857c06a35864739b41fbb2e541a5d7d24712e21af15533261a5_t_string_memory_ptr_t_stringliteral_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10878:3:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10883:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10891:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10902:3:26","type":""}],"src":"10420:1016:26"},{"body":{"nodeType":"YulBlock","src":"11473:95:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11490:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11497:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"11502:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11493:3:26"},"nodeType":"YulFunctionCall","src":"11493:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11483:6:26"},"nodeType":"YulFunctionCall","src":"11483:31:26"},"nodeType":"YulExpressionStatement","src":"11483:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11530:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11533:4:26","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11523:6:26"},"nodeType":"YulFunctionCall","src":"11523:15:26"},"nodeType":"YulExpressionStatement","src":"11523:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11554:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11557:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11547:6:26"},"nodeType":"YulFunctionCall","src":"11547:15:26"},"nodeType":"YulExpressionStatement","src":"11547:15:26"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"11441:127:26"},{"body":{"nodeType":"YulBlock","src":"11621:77:26","statements":[{"nodeType":"YulAssignment","src":"11631:16:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11642:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"11645:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11638:3:26"},"nodeType":"YulFunctionCall","src":"11638:9:26"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"11631:3:26"}]},{"body":{"nodeType":"YulBlock","src":"11670:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11672:16:26"},"nodeType":"YulFunctionCall","src":"11672:18:26"},"nodeType":"YulExpressionStatement","src":"11672:18:26"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11662:1:26"},{"name":"sum","nodeType":"YulIdentifier","src":"11665:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11659:2:26"},"nodeType":"YulFunctionCall","src":"11659:10:26"},"nodeType":"YulIf","src":"11656:36:26"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11604:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"11607:1:26","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"11613:3:26","type":""}],"src":"11573:125:26"},{"body":{"nodeType":"YulBlock","src":"11749:171:26","statements":[{"body":{"nodeType":"YulBlock","src":"11780:111:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11801:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11808:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"11813:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11804:3:26"},"nodeType":"YulFunctionCall","src":"11804:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11794:6:26"},"nodeType":"YulFunctionCall","src":"11794:31:26"},"nodeType":"YulExpressionStatement","src":"11794:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11845:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11848:4:26","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11838:6:26"},"nodeType":"YulFunctionCall","src":"11838:15:26"},"nodeType":"YulExpressionStatement","src":"11838:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11873:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11876:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11866:6:26"},"nodeType":"YulFunctionCall","src":"11866:15:26"},"nodeType":"YulExpressionStatement","src":"11866:15:26"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11769:1:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11762:6:26"},"nodeType":"YulFunctionCall","src":"11762:9:26"},"nodeType":"YulIf","src":"11759:132:26"},{"nodeType":"YulAssignment","src":"11900:14:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11909:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"11912:1:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"11905:3:26"},"nodeType":"YulFunctionCall","src":"11905:9:26"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"11900:1:26"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11734:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"11737:1:26","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"11743:1:26","type":""}],"src":"11703:217:26"},{"body":{"nodeType":"YulBlock","src":"11977:116:26","statements":[{"nodeType":"YulAssignment","src":"11987:20:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12002:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"12005:1:26"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"11998:3:26"},"nodeType":"YulFunctionCall","src":"11998:9:26"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"11987:7:26"}]},{"body":{"nodeType":"YulBlock","src":"12065:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12067:16:26"},"nodeType":"YulFunctionCall","src":"12067:18:26"},"nodeType":"YulExpressionStatement","src":"12067:18:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12036:1:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12029:6:26"},"nodeType":"YulFunctionCall","src":"12029:9:26"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"12043:1:26"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"12050:7:26"},{"name":"x","nodeType":"YulIdentifier","src":"12059:1:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"12046:3:26"},"nodeType":"YulFunctionCall","src":"12046:15:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12040:2:26"},"nodeType":"YulFunctionCall","src":"12040:22:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"12026:2:26"},"nodeType":"YulFunctionCall","src":"12026:37:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12019:6:26"},"nodeType":"YulFunctionCall","src":"12019:45:26"},"nodeType":"YulIf","src":"12016:71:26"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11956:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"11959:1:26","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"11965:7:26","type":""}],"src":"11925:168:26"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffff))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := mload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(_2, 32), add(memPtr, 32), _3)\n        value0 := memPtr\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb__to_t_string_memory_ptr_t_bytes1__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        mstore(end_1, \",\")\n        end := add(end_1, 1)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr_t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb__to_t_string_memory_ptr_t_string_memory_ptr_t_bytes1__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        let end_2 := add(end_1, length_1)\n        mstore(end_2, \",\")\n        end := add(end_2, 1)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_stringliteral(pos) -> end\n    {\n        mstore(pos, \"https://diablo.fandom.com/wiki/D\")\n        mstore(add(pos, 32), \"iablo_II\")\n        end := add(pos, 40)\n    }\n    function abi_encode_stringliteral_6e9f(pos)\n    { mstore(pos, shl(249, 17)) }\n    function abi_encode_tuple_packed_t_stringliteral_51367d69f1c3baff467b722249990cf2b0f92b1e50edd5a778b81ffc7191408f_t_string_memory_ptr_t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb_t_stringliteral_1f63d9db42efe217d85281c4ef6267f200cbdd8e8d6fd9a3e9d557ed86a373c7_t_string_memory_ptr_t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb_t_stringliteral_813a444dcf0b75d812ca8afb53e513b340ca828208f41bc16bdcde529c0ea551_t_string_memory_ptr_t_stringliteral_24823e6fed9f46f380d33960e511caeb002037c5a4e9735154809fa36b166ffb_t_stringliteral_153dd7a4db1a16c0bc09459a32699b07f8a0722d62a40df6d0b30c2d78048b07_t_stringliteral_2484da87e67ecf7cddff1668c6da2fa017370cc0bcdf646dda519da55a336003_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0__to_t_bytes8_t_string_memory_ptr_t_bytes2_t_bytes15_t_string_memory_ptr_t_bytes2_t_bytes9_t_string_memory_ptr_t_bytes2_t_bytes16_t_string_memory_ptr_t_bytes1__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        mstore(pos, shl(193, 0x113730b6b2911d11))\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 8), length)\n        let _1 := add(pos, length)\n        let _2 := shl(242, 2187)\n        mstore(add(_1, 8), _2)\n        mstore(add(_1, 10), shl(137, 0x113232b9b1b934b83a34b7b7111d11))\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(_1, 25), length_1)\n        let _3 := add(_1, length_1)\n        mstore(add(_3, 25), _2)\n        mstore(add(_3, 27), shl(185, 0x1134b6b0b3b2911d11))\n        let length_2 := mload(value2)\n        copy_memory_to_memory_with_cleanup(add(value2, 0x20), add(_3, 36), length_2)\n        let _4 := add(_3, length_2)\n        mstore(add(_4, 36), _2)\n        mstore(add(_4, 38), shl(129, 0x1132bc3a32b93730b62fbab936111d11))\n        let pos_1 := abi_encode_stringliteral(add(_4, 54))\n        abi_encode_stringliteral_6e9f(pos_1)\n        end := add(pos_1, 1)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_a91eddf639b0b768929589c1a9fd21dcb0107199bdd82e55c5348018a1572f52_t_string_memory_ptr_t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb_t_stringliteral_fae5f698d2c3462fc5dd818af0f930c00a691ac3968407e92c6f5d64f16b49da_t_string_memory_ptr_t_stringliteral_ab149d31dbf8c3ed1cc7ba15c88205185e426c492b6b350058945b7266ec7e76__to_t_bytes1_t_string_memory_ptr_t_bytes1_t_bytes14_t_string_memory_ptr_t_bytes2__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"{\")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 1), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 1), \",\")\n        mstore(add(_1, 2), shl(144, 0x2261747472696275746573223a5b))\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(_1, 16), length_1)\n        let _2 := add(_1, length_1)\n        mstore(add(_2, 16), \"]}\")\n        end := add(_2, 18)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_bccab2d885f86fda81bfd84dd4248d31f8073b473d187111d36536db073076fa_t_string_memory_ptr__to_t_bytes29_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"data:application/json;base64,\")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 29), length)\n        end := add(add(pos, length), 29)\n    }\n    function abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_0fad31bde8ef6d9d8631c2e7aa54975d5fec99408295f9e9645c87e9422727f9_t_string_memory_ptr_t_stringliteral_44d6c99d3e56b857c06a35864739b41fbb2e541a5d7d24712e21af15533261a5_t_string_memory_ptr_t_stringliteral_835b459273672627bbafc3a2eded65187a632f4128bdc79e126c7ef579a27475__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, shl(129, 0x3d913a3930b4ba2fba3cb832911d1011))\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 16), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 16), shl(153, 0x111610113b30b63ab2911d1011))\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(_1, 29), length_1)\n        let _2 := add(_1, length_1)\n        mstore(add(_2, 29), shl(240, 8829))\n        end := add(_2, 31)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n}","id":26,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x137 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8456CB59 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xC87B56DD GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x2A2 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0xD9741275 EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0xE58378BB EQ PUSH2 0x30F JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0x324 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0x8F296759 EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x287 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3F4BA83A GT PUSH2 0xFF JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0x5ADAA492 EQ PUSH2 0x1E0 JUMPI DUP1 PUSH4 0x5C75CADB EQ PUSH2 0x1F3 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x21E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x164 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x185 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x384D10EE EQ PUSH2 0x1AD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14F PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0x1252 JUMP JUMPDEST PUSH2 0x339 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x177 PUSH2 0x172 CALLDATASIZE PUSH1 0x4 PUSH2 0x1283 JUMP JUMPDEST PUSH2 0x370 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15B JUMP JUMPDEST PUSH2 0x198 PUSH2 0x193 CALLDATASIZE PUSH1 0x4 PUSH2 0x12B8 JUMP JUMPDEST PUSH2 0x392 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x198 PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x12B8 JUMP JUMPDEST PUSH2 0x3B4 JUMP JUMPDEST PUSH1 0x32 SLOAD PUSH2 0x1C0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15B JUMP JUMPDEST PUSH2 0x198 PUSH2 0x3EC JUMP JUMPDEST PUSH2 0x198 PUSH2 0x1EE CALLDATASIZE PUSH1 0x4 PUSH2 0x12E4 JUMP JUMPDEST PUSH2 0x40F JUMP JUMPDEST PUSH2 0x198 PUSH2 0x201 CALLDATASIZE PUSH1 0x4 PUSH2 0x12E4 JUMP JUMPDEST PUSH2 0x44A JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1833 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND PUSH2 0x14F JUMP JUMPDEST PUSH2 0x177 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST PUSH2 0x198 PUSH2 0x485 JUMP JUMPDEST PUSH2 0x177 PUSH32 0x35AF5B5A3FB4C88A8CB5E26E8A68A53CC8F6CAFCC4000A1DB1AE5753E25A168E DUP2 JUMP JUMPDEST PUSH2 0x14F PUSH2 0x282 CALLDATASIZE PUSH1 0x4 PUSH2 0x12B8 JUMP JUMPDEST PUSH2 0x4A5 JUMP JUMPDEST PUSH2 0x177 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x198 PUSH2 0x29D CALLDATASIZE PUSH1 0x4 PUSH2 0x12E4 JUMP JUMPDEST PUSH2 0x4DD JUMP JUMPDEST PUSH2 0x2B5 PUSH2 0x2B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1283 JUMP JUMPDEST PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15B SWAP2 SWAP1 PUSH2 0x1323 JUMP JUMPDEST PUSH2 0x177 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST PUSH2 0x198 PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x12B8 JUMP JUMPDEST PUSH2 0x5F8 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH2 0x1C0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x177 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1793 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x177 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x17F3 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x36A JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1813 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x39B DUP3 PUSH2 0x370 JUMP JUMPDEST PUSH2 0x3A4 DUP2 PUSH2 0x614 JUMP JUMPDEST PUSH2 0x3AE DUP4 DUP4 PUSH2 0x61E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x3DD JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3E7 DUP3 DUP3 PUSH2 0x6C3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x17F3 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x404 DUP2 PUSH2 0x614 JUMP JUMPDEST PUSH2 0x40C PUSH2 0x73F JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1793 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x427 DUP2 PUSH2 0x614 JUMP JUMPDEST POP PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1793 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x462 DUP2 PUSH2 0x614 JUMP JUMPDEST POP PUSH1 0x32 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x17F3 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x49D DUP2 PUSH2 0x614 JUMP JUMPDEST PUSH2 0x40C PUSH2 0x79F JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1813 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x523 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x540 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x54E JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x56C JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x596 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH2 0x59F DUP7 PUSH2 0x7E8 JUMP JUMPDEST DUP4 ISZERO PUSH2 0x5E5 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x36A DUP3 PUSH2 0x8CA JUMP JUMPDEST PUSH2 0x601 DUP3 PUSH2 0x370 JUMP JUMPDEST PUSH2 0x60A DUP2 PUSH2 0x614 JUMP JUMPDEST PUSH2 0x3AE DUP4 DUP4 PUSH2 0x6C3 JUMP JUMPDEST PUSH2 0x40C DUP2 CALLER PUSH2 0xE08 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1813 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x639 DUP5 DUP5 PUSH2 0x4A5 JUMP JUMPDEST PUSH2 0x6B9 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x66F CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x36A JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x36A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1813 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x6DE DUP5 DUP5 PUSH2 0x4A5 JUMP JUMPDEST ISZERO PUSH2 0x6B9 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP8 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x36A JUMP JUMPDEST PUSH2 0x747 PUSH2 0xE45 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1833 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND DUP2 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x7A7 PUSH2 0xE77 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1833 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 CALLER PUSH2 0x781 JUMP JUMPDEST PUSH2 0x7F0 PUSH2 0xEA8 JUMP JUMPDEST PUSH2 0x7F8 PUSH2 0xEF1 JUMP JUMPDEST PUSH2 0x800 PUSH2 0xF01 JUMP JUMPDEST PUSH2 0x808 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0x813 PUSH1 0x0 DUP3 PUSH2 0x61E JUMP JUMPDEST POP PUSH2 0x82C PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x17F3 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0x61E JUMP JUMPDEST POP PUSH2 0x845 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1793 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0x61E JUMP JUMPDEST POP PUSH2 0x870 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP3 PUSH2 0x61E JUMP JUMPDEST POP PUSH2 0x89B PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP3 PUSH2 0x61E JUMP JUMPDEST POP PUSH2 0x8C6 PUSH32 0x35AF5B5A3FB4C88A8CB5E26E8A68A53CC8F6CAFCC4000A1DB1AE5753E25A168E DUP3 PUSH2 0x61E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x0 DUP3 MSTORE DUP3 MLOAD DUP1 DUP5 ADD DUP5 MSTORE PUSH1 0xF DUP2 MSTORE PUSH15 0x43686172616374657220436C617373 PUSH1 0x88 SHL SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x32 SLOAD SWAP3 MLOAD PUSH4 0x3DDFBD8B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x60 SWAP4 PUSH2 0x97B SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x3DDFBD8B SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x94E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x976 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x136C JUMP JUMPDEST PUSH2 0xF19 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x98B SWAP2 SWAP1 PUSH2 0x1419 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH1 0x33 SLOAD PUSH4 0x34045917 PUSH1 0xE2 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xD011645C SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9E8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA0C SWAP2 SWAP1 PUSH2 0x143E JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH4 0xC995A3B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xC995A3B3 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA5B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA7F SWAP2 SWAP1 PUSH2 0x143E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xA9B JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x5 SWAP2 DUP2 ADD SWAP2 DUP3 MSTORE PUSH5 0x13195D995B PUSH1 0xDA SHL PUSH1 0x60 DUP3 ADD MSTORE SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE DUP2 MLOAD SWAP2 SWAP3 POP SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0xB03 JUMPI PUSH2 0xB03 PUSH2 0x1457 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x587 PUSH1 0xF4 SHL DUP2 MSTORE POP DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xB50 JUMPI PUSH2 0xB50 PUSH2 0x1457 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xC35 JUMPI PUSH1 0x1 DUP3 MLOAD PUSH2 0xB75 SWAP2 SWAP1 PUSH2 0x1483 JUMP JUMPDEST DUP2 SUB PUSH2 0xBEA JUMPI DUP5 PUSH2 0xBC3 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xB91 JUMPI PUSH2 0xB91 PUSH2 0x1457 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH2 0x976 DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xBB2 JUMPI PUSH2 0xBB2 PUSH2 0x1457 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0xF45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xBD4 SWAP3 SWAP2 SWAP1 PUSH2 0x1496 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP5 POP PUSH2 0xC23 JUMP JUMPDEST DUP5 PUSH2 0xC00 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xB91 JUMPI PUSH2 0xB91 PUSH2 0x1457 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xC11 SWAP3 SWAP2 SWAP1 PUSH2 0x14C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP5 POP JUMPDEST DUP1 PUSH2 0xC2D DUP2 PUSH2 0x1500 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB5E JUMP JUMPDEST POP PUSH1 0x32 SLOAD PUSH1 0x40 MLOAD PUSH4 0xE725F877 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xE725F877 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC80 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xCA8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x136C JUMP JUMPDEST PUSH1 0x32 SLOAD PUSH1 0x40 MLOAD PUSH4 0x637973B PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x31BCB9D8 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCF1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xD19 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x136C JUMP JUMPDEST PUSH1 0x32 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2D537851 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x2D537851 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD62 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xD8A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x136C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xD9C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1519 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH1 0x0 DUP2 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xDC2 SWAP3 SWAP2 SWAP1 PUSH2 0x161E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0xDDC DUP2 PUSH2 0xFD8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xDEC SWAP2 SWAP1 PUSH2 0x168D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP7 POP POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE12 DUP3 DUP3 PUSH2 0x4A5 JUMP JUMPDEST PUSH2 0x8C6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1833 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND PUSH2 0xE75 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1833 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xE75 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0xE75 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xEF9 PUSH2 0xEA8 JUMP JUMPDEST PUSH2 0xE75 PUSH2 0x112B JUMP JUMPDEST PUSH2 0xE75 PUSH2 0xEA8 JUMP JUMPDEST PUSH2 0xF11 PUSH2 0xEA8 JUMP JUMPDEST PUSH2 0xE75 PUSH2 0x114C JUMP JUMPDEST PUSH1 0x60 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF2E SWAP3 SWAP2 SWAP1 PUSH2 0x16D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xF52 DUP4 PUSH2 0x117A JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF72 JUMPI PUSH2 0xF72 PUSH2 0x1356 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xF9C JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xFA6 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x0 SUB PUSH2 0xFF7 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x17B3 PUSH1 0x40 SWAP2 CODECOPY SWAP1 POP PUSH1 0x0 PUSH1 0x3 DUP5 MLOAD PUSH1 0x2 PUSH2 0x1026 SWAP2 SWAP1 PUSH2 0x1746 JUMP JUMPDEST PUSH2 0x1030 SWAP2 SWAP1 PUSH2 0x1759 JUMP JUMPDEST PUSH2 0x103B SWAP1 PUSH1 0x4 PUSH2 0x177B JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1053 JUMPI PUSH2 0x1053 PUSH2 0x1356 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x107D JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x1 DUP3 ADD PUSH1 0x20 DUP3 ADD DUP6 DUP7 MLOAD DUP8 ADD JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x10E9 JUMPI PUSH1 0x3 DUP3 ADD SWAP2 POP DUP2 MLOAD PUSH1 0x3F DUP2 PUSH1 0x12 SHR AND DUP6 ADD MLOAD DUP5 MSTORE8 PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH1 0x3F DUP2 PUSH1 0xC SHR AND DUP6 ADD MLOAD DUP5 MSTORE8 PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH1 0x3F DUP2 PUSH1 0x6 SHR AND DUP6 ADD MLOAD DUP5 MSTORE8 PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH1 0x3F DUP2 AND DUP6 ADD MLOAD DUP5 MSTORE8 POP PUSH1 0x1 DUP4 ADD SWAP3 POP PUSH2 0x108E JUMP JUMPDEST POP POP PUSH1 0x3 DUP7 MLOAD MOD PUSH1 0x1 DUP2 EQ PUSH2 0x1105 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x1118 JUMPI PUSH2 0x1120 JUMP JUMPDEST PUSH1 0x3D PUSH1 0x1 DUP4 SUB MSTORE8 PUSH1 0x3D PUSH1 0x2 DUP4 SUB MSTORE8 PUSH2 0x1120 JUMP JUMPDEST PUSH1 0x3D PUSH1 0x1 DUP4 SUB MSTORE8 JUMPDEST POP SWAP2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1133 PUSH2 0xEA8 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1833 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1154 PUSH2 0xEA8 JUMP JUMPDEST PUSH1 0x1 PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x11B9 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x11E5 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1203 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x121B JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x122F JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1241 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x36A JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1264 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x127C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x12B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x12DB PUSH1 0x20 DUP5 ADD PUSH2 0x129C JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x127C DUP3 PUSH2 0x129C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x131A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1302 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1342 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x12FF JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x137E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1396 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x13AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x13BC JUMPI PUSH2 0x13BC PUSH2 0x1356 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x13E4 JUMPI PUSH2 0x13E4 PUSH2 0x1356 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x13FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x140E DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x12FF JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x142B DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x12FF JUMP JUMPDEST PUSH1 0xB PUSH1 0xFA SHL SWAP3 ADD SWAP2 DUP3 MSTORE POP PUSH1 0x1 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1450 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x36A JUMPI PUSH2 0x36A PUSH2 0x146D JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x14A8 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x12FF JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x14BC DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x12FF JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x14D7 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x12FF JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x14EB DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x12FF JUMP JUMPDEST PUSH1 0xB PUSH1 0xFA SHL SWAP2 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1512 JUMPI PUSH2 0x1512 PUSH2 0x146D JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH8 0x113730B6B2911D11 PUSH1 0xC1 SHL DUP2 MSTORE DUP4 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x153D DUP2 PUSH1 0x8 DUP6 ADD PUSH1 0x20 DUP10 ADD PUSH2 0x12FF JUMP JUMPDEST PUSH2 0x88B PUSH1 0xF2 SHL PUSH1 0x8 SWAP2 DUP5 ADD SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE PUSH15 0x113232B9B1B934B83A34B7B7111D11 PUSH1 0x89 SHL PUSH1 0xA DUP4 ADD MSTORE DUP6 MLOAD PUSH2 0x1579 DUP2 PUSH1 0x19 DUP6 ADD PUSH1 0x20 DUP11 ADD PUSH2 0x12FF JUMP JUMPDEST PUSH1 0x19 SWAP3 ADD SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE PUSH9 0x1134B6B0B3B2911D11 PUSH1 0xB9 SHL PUSH1 0x1B DUP4 ADD MSTORE DUP5 MLOAD PUSH2 0x15A8 DUP2 PUSH1 0x24 DUP6 ADD PUSH1 0x20 DUP10 ADD PUSH2 0x12FF JUMP JUMPDEST PUSH1 0x24 SWAP3 ADD SWAP2 DUP3 ADD MSTORE PUSH16 0x1132BC3A32B93730B62FBAB936111D11 PUSH1 0x81 SHL PUSH1 0x26 DUP3 ADD MSTORE PUSH2 0x160A PUSH1 0x36 DUP3 ADD PUSH32 0x68747470733A2F2F646961626C6F2E66616E646F6D2E636F6D2F77696B692F44 DUP2 MSTORE PUSH8 0x6961626C6F5F4949 PUSH1 0xC0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x28 ADD SWAP1 JUMP JUMPDEST PUSH1 0x11 PUSH1 0xF9 SHL DUP2 MSTORE PUSH1 0x1 ADD SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x7B PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x163A DUP2 PUSH1 0x1 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x12FF JUMP JUMPDEST PUSH1 0xB PUSH1 0xFA SHL PUSH1 0x1 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE PUSH14 0x2261747472696275746573223A5B PUSH1 0x90 SHL PUSH1 0x2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x1672 DUP2 PUSH1 0x10 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x12FF JUMP JUMPDEST PUSH2 0x5D7D PUSH1 0xF0 SHL PUSH1 0x10 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE PUSH1 0x12 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x646174613A6170706C69636174696F6E2F6A736F6E3B6261736536342C000000 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x16C5 DUP2 PUSH1 0x1D DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x12FF JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1D ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH16 0x3D913A3930B4BA2FBA3CB832911D1011 PUSH1 0x81 SHL DUP2 MSTORE DUP3 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x16FE DUP2 PUSH1 0x10 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x12FF JUMP JUMPDEST PUSH13 0x111610113B30B63AB2911D1011 PUSH1 0x99 SHL PUSH1 0x10 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x172B DUP2 PUSH1 0x1D DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x12FF JUMP JUMPDEST PUSH2 0x227D PUSH1 0xF0 SHL PUSH1 0x1D SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE PUSH1 0x1F ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x36A JUMPI PUSH2 0x36A PUSH2 0x146D JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1776 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x36A JUMPI PUSH2 0x36A PUSH2 0x146D JUMP INVALID 0xB1 SWAP6 CHAINID 0xDF CREATE 0x1E DUP6 PUSH16 0xB3F010C267A7B1C60363CF8A4664E21C 0xC8 SWAP13 0x26 0x22 CHAINID KECCAK256 0x21 0x4E COINBASE TIMESTAMP NUMBER PREVRANDAO GASLIMIT CHAINID SELFBALANCE BASEFEE 0x49 0x4A 0x4B 0x4C 0x4D 0x4E 0x4F POP MLOAD MSTORE MSTORE8 SLOAD SSTORE JUMP JUMPI PC MSIZE GAS PUSH2 0x6263 PUSH5 0x6566676869 PUSH11 0x6B6C6D6E6F707172737475 PUSH23 0x7778797A303132333435363738392B2F65D7A28E3265B3 PUSH27 0x6474929F336521B332C1681B933F6CB9F3376673440D862A02DD7B 0xC7 0xDE 0xC4 0xDC 0xEE 0xDD 0xA7 PUSH22 0xE58DD541E08A116C6C53815C0BD028192F7B626800CD 0x5E 0xD1 0x5C PUSH15 0x187E77E9AEE88184C21F4F2182AB58 0x27 0xCB EXTCODESIZE PUSH31 0x7FBEDCD63F03300A26469706673582212207C0574B691DF93093D8DBED397 0xA6 SWAP3 0x2B TIMESTAMP SWAP3 0xDC EXTCODECOPY 0xD2 0xDE 0xC5 CALL 0xF SAR MSIZE 0xB5 PUSH20 0x3E557464736F6C63430008140033000000000000 ","sourceMap":"252:3756:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3443:202:0;;;;;;:::i;:::-;;:::i;:::-;;;470:14:26;;463:22;445:41;;433:2;418:18;3443:202:0;;;;;;;;4759:191;;;;;;:::i;:::-;;:::i;:::-;;;828:25:26;;;816:2;801:18;4759:191:0;682:177:26;5246:136:0;;;;;;:::i;:::-;;:::i;:::-;;6348:245;;;;;;:::i;:::-;;:::i;451:27:23:-;;;;;-1:-1:-1;;;;;451:27:23;;;;;;-1:-1:-1;;;;;1465:32:26;;;1447:51;;1435:2;1420:18;451:27:23;1301:203:26;1612:75:20;;;:::i;986:146:23:-;;;;;;:::i;:::-;;:::i;779:135::-;;;;;;:::i;:::-;;:::i;2692:145:3:-;-1:-1:-1;;;;;;;;;;;2821:9:3;;;2692:145;;739:60:20;;776:23;739:60;;1535:71;;;:::i;805:64::-;;844:25;805:64;;3732:207:0;;;;;;:::i;:::-;;:::i;2317:49::-;;2362:4;2317:49;;593:107:23;;;;;;:::i;:::-;;:::i;1203:114::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;671:62:20:-;;709:24;671:62;;5662:138:0;;;;;;:::i;:::-;;:::i;485:35:23:-;;;;;-1:-1:-1;;;;;485:35:23;;;537:60:20;;-1:-1:-1;;;;;;;;;;;537:60:20;;603:62;;-1:-1:-1;;;;;;;;;;;603:62:20;;3443:202:0;3528:4;-1:-1:-1;;;;;;3551:47:0;;-1:-1:-1;;;3551:47:0;;:87;;-1:-1:-1;;;;;;;;;;1133:40:5;;;3602:36:0;3544:94;3443:202;-1:-1:-1;;3443:202:0:o;4759:191::-;4824:7;4919:14;;;-1:-1:-1;;;;;;;;;;;4919:14:0;;;;;:24;;;;4759:191::o;5246:136::-;5320:18;5333:4;5320:12;:18::i;:::-;3191:16;3202:4;3191:10;:16::i;:::-;5350:25:::1;5361:4;5367:7;5350:10;:25::i;:::-;;5246:136:::0;;;:::o;6348:245::-;-1:-1:-1;;;;;6441:34:0;;966:10:2;6441:34:0;6437:102;;6498:30;;-1:-1:-1;;;6498:30:0;;;;;;;;;;;6437:102;6549:37;6561:4;6567:18;6549:11;:37::i;:::-;;6348:245;;:::o;1612:75:20:-;-1:-1:-1;;;;;;;;;;;3191:16:0;3202:4;3191:10;:16::i;:::-;1670:10:20::1;:8;:10::i;:::-;1612:75:::0;:::o;986:146:23:-;-1:-1:-1;;;;;;;;;;;3191:16:0;3202:4;3191:10;:16::i;:::-;-1:-1:-1;1088:20:23::1;:37:::0;;-1:-1:-1;;;;;;1088:37:23::1;-1:-1:-1::0;;;;;1088:37:23;;;::::1;::::0;;;::::1;::::0;;986:146::o;779:135::-;-1:-1:-1;;;;;;;;;;;3191:16:0;3202:4;3191:10;:16::i;:::-;-1:-1:-1;879:12:23::1;:28:::0;;-1:-1:-1;;;;;;879:28:23::1;-1:-1:-1::0;;;;;879:28:23;;;::::1;::::0;;;::::1;::::0;;779:135::o;1535:71:20:-;-1:-1:-1;;;;;;;;;;;3191:16:0;3202:4;3191:10;:16::i;:::-;1591:8:20::1;:6;:8::i;3732:207:0:-:0;3809:4;3901:14;;;-1:-1:-1;;;;;;;;;;;3901:14:0;;;;;;;;-1:-1:-1;;;;;3901:31:0;;;;;;;;;;;;;;;3732:207::o;593:107:23:-;8870:21:1;4302:15;;-1:-1:-1;;;4302:15:1;;;;4301:16;;4348:14;;4158:30;4726:16;;:34;;;;;4746:14;4726:34;4706:54;;4770:17;4790:11;:16;;4805:1;4790:16;:50;;;;-1:-1:-1;4818:4:1;4810:25;:30;4790:50;4770:70;;4856:12;4855:13;:30;;;;;4873:12;4872:13;4855:30;4851:91;;;4908:23;;-1:-1:-1;;;4908:23:1;;;;;;;;;;;4851:91;4951:18;;-1:-1:-1;;4951:18:1;4968:1;4951:18;;;4979:67;;;;5013:22;;-1:-1:-1;;;;5013:22:1;-1:-1:-1;;;5013:22:1;;;4979:67;664:29:23::1;680:12;664:15;:29::i;:::-;5070:14:1::0;5066:101;;;5100:23;;-1:-1:-1;;;;5100:23:1;;;5142:14;;-1:-1:-1;2694:50:26;;5142:14:1;;2682:2:26;2667:18;5142:14:1;;;;;;;5066:101;4092:1081;;;;;593:107:23;:::o;1203:114::-;1259:13;1291:19;1302:7;1291:10;:19::i;5662:138:0:-;5737:18;5750:4;5737:12;:18::i;:::-;3191:16;3202:4;3191:10;:16::i;:::-;5767:26:::1;5779:4;5785:7;5767:11;:26::i;4148:103::-:0;4214:30;4225:4;966:10:2;4214::0;:30::i;7270:387::-;7347:4;-1:-1:-1;;;;;;;;;;;7437:22:0;7445:4;7451:7;7437;:22::i;:::-;7432:219;;7475:8;:14;;;;;;;;;;;-1:-1:-1;;;;;7475:31:0;;;;;;;;;:38;;-1:-1:-1;;7475:38:0;7509:4;7475:38;;;7559:12;966:10:2;;887:96;7559:12:0;-1:-1:-1;;;;;7532:40:0;7550:7;-1:-1:-1;;;;;7532:40:0;7544:4;7532:40;;;;;;;;;;7593:4;7586:11;;;;;7432:219;7635:5;7628:12;;;;;7892:388;7970:4;-1:-1:-1;;;;;;;;;;;8059:22:0;8067:4;8073:7;8059;:22::i;:::-;8055:219;;;8131:5;8097:14;;;;;;;;;;;-1:-1:-1;;;;;8097:31:0;;;;;;;;;;:39;;-1:-1:-1;;8097:39:0;;;8155:40;966:10:2;;8097:14:0;;8155:40;;8131:5;8155:40;8216:4;8209:11;;;;;3674:178:3;2563:16;:14;:16::i;:::-;-1:-1:-1;;;;;;;;;;;3791:17:3;;-1:-1:-1;;3791:17:3::1;::::0;;3823:22:::1;966:10:2::0;3832:12:3::1;3823:22;::::0;-1:-1:-1;;;;;1465:32:26;;;1447:51;;1435:2;1420:18;3823:22:3::1;;;;;;;3722:130;3674:178::o:0;3366:176::-;2316:19;:17;:19::i;:::-;-1:-1:-1;;;;;;;;;;;3484:16:3;;-1:-1:-1;;3484:16:3::1;3496:4;3484:16;::::0;;3515:20:::1;966:10:2::0;3522:12:3::1;887:96:2::0;970:559:20;6931:20:1;:18;:20::i;:::-;1053:17:20::1;:15;:17::i;:::-;1080:22;:20;:22::i;:::-;1112:24;:22;:24::i;:::-;1199:44;2362:4:0;1230:12:20::0;1199:10:::1;:44::i;:::-;;1298:37;-1:-1:-1::0;;;;;;;;;;;1322:12:20::1;1298:10;:37::i;:::-;;1345:36;-1:-1:-1::0;;;;;;;;;;;1368:12:20::1;1345:10;:36::i;:::-;;1391:37;709:24;1415:12;1391:10;:37::i;:::-;;1438:36;776:23;1461:12;1438:10;:36::i;:::-;;1484:38;844:25;1509:12;1484:10;:38::i;:::-;;970:559:::0;:::o;1388:2226:23:-;1473:35;;;;;;;;;-1:-1:-1;1473:35:23;;1565:128;;;;;;;;;;-1:-1:-1;;;1565:128:23;;;;;;;1644:12;;1631:48;;-1:-1:-1;;;1631:48:23;;;;;828:25:26;;;1448:13:23;;1565:128;;;-1:-1:-1;;;;;1644:12:23;;;;1631:39;;801:18:26;;1631:48:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1631:48:23;;;;;;;;;;;;:::i;:::-;1565:13;:128::i;:::-;1538:182;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;1538:182:23;;;;;;;1753:20;;-1:-1:-1;;;1747:50:23;;;;;828:25:26;;;1538:182:23;;-1:-1:-1;1731:13:23;;-1:-1:-1;;;;;1753:20:23;;;;1747:41;;801:18:26;;1747:50:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1826:20;;1820:47;;-1:-1:-1;;;1820:47:23;;;;;828:25:26;;;1731:66:23;;-1:-1:-1;1807:10:23;;-1:-1:-1;;;;;1826:20:23;;;;1820:38;;801:18:26;;1820:47:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1910:18;;;1926:1;1910:18;;;;;;;;;1807:60;;-1:-1:-1;1878:29:23;;1910:18;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;1910:18:23;;;;;;;;;;;;-1:-1:-1;;1954:25:23;;;;;;;;;;;;;;;-1:-1:-1;;;1954:25:23;;;;;;;;;;;;;1938:13;;1878:50;;-1:-1:-1;1954:25:23;1878:50;;-1:-1:-1;;1938:13:23;;;;:::i;:::-;;;;;;:41;;;;2005:19;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2005:19:23;;;;;;;2021:2;2005:19;;;1989:10;2000:1;1989:13;;;;;;;;:::i;:::-;;;;;;:35;;;;2040:9;2035:705;2059:10;:17;2055:1;:21;2035:705;;;2126:1;2106:10;:17;:21;;;;:::i;:::-;2101:1;:26;2097:633;;2201:16;2239:142;2278:10;2289:1;2278:13;;;;;;;;:::i;:::-;;;;;;;:18;;;2322:37;2339:10;2350:1;2339:13;;;;;;;;:::i;:::-;;;;;;;:19;;;2322:16;:37::i;2239:142::-;2166:233;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2147:252;;2097:633;;;2492:16;2530:142;2569:10;2580:1;2569:13;;;;;;;;:::i;2530:142::-;2457:258;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2438:277;;2097:633;2078:3;;;;:::i;:::-;;;;2035:705;;;-1:-1:-1;2845:12:23;;2832:45;;-1:-1:-1;;;2832:45:23;;;;;828:25:26;;;2750:28:23;;-1:-1:-1;;;;;2845:12:23;;2832:36;;801:18:26;;2832:45:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2832:45:23;;;;;;;;;;;;:::i;:::-;2953:12;;2940:55;;-1:-1:-1;;;2940:55:23;;;;;828:25:26;;;-1:-1:-1;;;;;2953:12:23;;;;2940:46;;801:18:26;;2940:55:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2940:55:23;;;;;;;;;;;;:::i;:::-;3065:12;;3052:49;;-1:-1:-1;;;3052:49:23;;;;;828:25:26;;;-1:-1:-1;;;;;3065:12:23;;;;3052:40;;801:18:26;;3052:49:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3052:49:23;;;;;;;;;;;;:::i;:::-;2781:453;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2750:484;;3244:33;3324:14;3399:16;3280:163;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3244:199;;3552:41;3572:19;3552:13;:41::i;:::-;3472:135;;;;;;;;:::i;:::-;;;;;;;;;;;;;3453:154;;;;;;;;1388:2226;;;:::o;4381:197:0:-;4469:22;4477:4;4483:7;4469;:22::i;:::-;4464:108;;4514:47;;-1:-1:-1;;;4514:47:0;;-1:-1:-1;;;;;10333:32:26;;4514:47:0;;;10315:51:26;10382:18;;;10375:34;;;10288:18;;4514:47:0;;;;;;;3105:126:3;-1:-1:-1;;;;;;;;;;;2821:9:3;;;3163:62;;3199:15;;-1:-1:-1;;;3199:15:3;;;;;;;;;;;3163:62;3105:126::o;2905:128::-;-1:-1:-1;;;;;;;;;;;2821:9:3;;;2966:61;;;3001:15;;-1:-1:-1;;;3001:15:3;;;;;;;;;;;7084:141:1;8870:21;8560:40;-1:-1:-1;;;8560:40:1;;;;7146:73;;7191:17;;-1:-1:-1;;;7191:17:1;;;;;;;;;;;1836:97:3;6931:20:1;:18;:20::i;:::-;1899:27:3::1;:25;:27::i;3231:65:0:-:0;6931:20:1;:18;:20::i;2540:111:4:-;6931:20:1;:18;:20::i;:::-;2610:34:4::1;:32;:34::i;3620:386:23:-:0;3728:13;3874:3;3936:5;3796:189;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3753:246;;3620:386;;;;:::o;637:698:15:-;693:13;742:14;759:17;770:5;759:10;:17::i;:::-;779:1;759:21;742:38;;794:20;828:6;817:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;817:18:15;-1:-1:-1;794:41:15;-1:-1:-1;955:28:15;;;971:2;955:28;1010:282;-1:-1:-1;;1041:5:15;-1:-1:-1;;;1175:2:15;1164:14;;1159:32;1041:5;1146:46;1236:2;1227:11;;;-1:-1:-1;1256:21:15;1010:282;1256:21;-1:-1:-1;1312:6:15;637:698;-1:-1:-1;;;637:698:15:o;476:3026:13:-;534:13;766:4;:11;781:1;766:16;762:31;;-1:-1:-1;;784:9:13;;;;;;;;;-1:-1:-1;784:9:13;;;476:3026::o;762:31::-;843:19;865:6;;;;;;;;;;;;;;;;;843:28;;1274:20;1333:1;1314:4;:11;1328:1;1314:15;;;;:::i;:::-;1313:21;;;;:::i;:::-;1308:27;;:1;:27;:::i;:::-;1297:39;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1297:39:13;;1274:62;;1511:1;1504:5;1500:13;1612:2;1604:6;1600:15;1719:4;1770;1764:11;1758:4;1754:22;1682:1403;1803:6;1794:7;1791:19;1682:1403;;;1905:1;1896:7;1892:15;1881:26;;1943:7;1937:14;2586:4;2578:5;2574:2;2570:14;2566:25;2556:8;2552:40;2546:47;2535:9;2527:67;2639:1;2628:9;2624:17;2611:30;;2729:4;2721:5;2717:2;2713:14;2709:25;2699:8;2695:40;2689:47;2678:9;2670:67;2782:1;2771:9;2767:17;2754:30;;2871:4;2863:5;2860:1;2856:13;2852:24;2842:8;2838:39;2832:46;2821:9;2813:66;2924:1;2913:9;2909:17;2896:30;;3005:4;2998:5;2994:16;2984:8;2980:31;2974:38;2963:9;2955:58;;3058:1;3047:9;3043:17;3030:30;;1682:1403;;;1686:104;;3243:1;3236:4;3230:11;3226:19;3263:1;3258:120;;;;3396:1;3391:71;;;;3219:243;;3258:120;3310:4;3306:1;3295:9;3291:17;3283:32;3359:4;3355:1;3344:9;3340:17;3332:32;3258:120;;3391:71;3443:4;3439:1;3428:9;3424:17;3416:32;3219:243;-1:-1:-1;3489:6:13;;476:3026;-1:-1:-1;;;;;476:3026:13:o;1939:156:3:-;6931:20:1;:18;:20::i;:::-;-1:-1:-1;;;;;;;;;;;2071:17:3;;-1:-1:-1;;2071:17:3::1;::::0;;1939:156::o;2657:183:4:-;6931:20:1;:18;:20::i;:::-;1805:1:4::1;2388:30:::0;2810:23;2657:183::o;12214:916:18:-;12267:7;;-1:-1:-1;;;12342:17:18;;12338:103;;-1:-1:-1;;;12379:17:18;;;-1:-1:-1;12424:2:18;12414:12;12338:103;12467:8;12458:5;:17;12454:103;;12504:8;12495:17;;;-1:-1:-1;12540:2:18;12530:12;12454:103;12583:8;12574:5;:17;12570:103;;12620:8;12611:17;;;-1:-1:-1;12656:2:18;12646:12;12570:103;12699:7;12690:5;:16;12686:100;;12735:7;12726:16;;;-1:-1:-1;12770:1:18;12760:11;12686:100;12812:7;12803:5;:16;12799:100;;12848:7;12839:16;;;-1:-1:-1;12883:1:18;12873:11;12799:100;12925:7;12916:5;:16;12912:100;;12961:7;12952:16;;;-1:-1:-1;12996:1:18;12986:11;12912:100;13038:7;13029:5;:16;13025:66;;13075:1;13065:11;13117:6;12214:916;-1:-1:-1;;12214:916:18:o;14:286:26:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:26;;209:43;;199:71;;266:1;263;256:12;199:71;289:5;14:286;-1:-1:-1;;;14:286:26:o;497:180::-;556:6;609:2;597:9;588:7;584:23;580:32;577:52;;;625:1;622;615:12;577:52;-1:-1:-1;648:23:26;;497:180;-1:-1:-1;497:180:26:o;864:173::-;932:20;;-1:-1:-1;;;;;981:31:26;;971:42;;961:70;;1027:1;1024;1017:12;961:70;864:173;;;:::o;1042:254::-;1110:6;1118;1171:2;1159:9;1150:7;1146:23;1142:32;1139:52;;;1187:1;1184;1177:12;1139:52;1223:9;1210:23;1200:33;;1252:38;1286:2;1275:9;1271:18;1252:38;:::i;:::-;1242:48;;1042:254;;;;;:::o;1509:186::-;1568:6;1621:2;1609:9;1600:7;1596:23;1592:32;1589:52;;;1637:1;1634;1627:12;1589:52;1660:29;1679:9;1660:29;:::i;1885:250::-;1970:1;1980:113;1994:6;1991:1;1988:13;1980:113;;;2070:11;;;2064:18;2051:11;;;2044:39;2016:2;2009:10;1980:113;;;-1:-1:-1;;2127:1:26;2109:16;;2102:27;1885:250::o;2140:396::-;2289:2;2278:9;2271:21;2252:4;2321:6;2315:13;2364:6;2359:2;2348:9;2344:18;2337:34;2380:79;2452:6;2447:2;2436:9;2432:18;2427:2;2419:6;2415:15;2380:79;:::i;:::-;2520:2;2499:15;-1:-1:-1;;2495:29:26;2480:45;;;;2527:2;2476:54;;2140:396;-1:-1:-1;;2140:396:26:o;2937:127::-;2998:10;2993:3;2989:20;2986:1;2979:31;3029:4;3026:1;3019:15;3053:4;3050:1;3043:15;3069:897;3149:6;3202:2;3190:9;3181:7;3177:23;3173:32;3170:52;;;3218:1;3215;3208:12;3170:52;3251:9;3245:16;3280:18;3321:2;3313:6;3310:14;3307:34;;;3337:1;3334;3327:12;3307:34;3375:6;3364:9;3360:22;3350:32;;3420:7;3413:4;3409:2;3405:13;3401:27;3391:55;;3442:1;3439;3432:12;3391:55;3471:2;3465:9;3493:2;3489;3486:10;3483:36;;;3499:18;;:::i;:::-;3574:2;3568:9;3542:2;3628:13;;-1:-1:-1;;3624:22:26;;;3648:2;3620:31;3616:40;3604:53;;;3672:18;;;3692:22;;;3669:46;3666:72;;;3718:18;;:::i;:::-;3758:10;3754:2;3747:22;3793:2;3785:6;3778:18;3833:7;3828:2;3823;3819;3815:11;3811:20;3808:33;3805:53;;;3854:1;3851;3844:12;3805:53;3867:68;3932:2;3927;3919:6;3915:15;3910:2;3906;3902:11;3867:68;:::i;:::-;3954:6;3069:897;-1:-1:-1;;;;;;;3069:897:26:o;3971:441::-;4192:3;4230:6;4224:13;4246:66;4305:6;4300:3;4293:4;4285:6;4281:17;4246:66;:::i;:::-;-1:-1:-1;;;4334:16:26;;4359:18;;;-1:-1:-1;4404:1:26;4393:13;;3971:441;-1:-1:-1;3971:441:26:o;4417:184::-;4487:6;4540:2;4528:9;4519:7;4515:23;4511:32;4508:52;;;4556:1;4553;4546:12;4508:52;-1:-1:-1;4579:16:26;;4417:184;-1:-1:-1;4417:184:26:o;4606:127::-;4667:10;4662:3;4658:20;4655:1;4648:31;4698:4;4695:1;4688:15;4722:4;4719:1;4712:15;4738:127;4799:10;4794:3;4790:20;4787:1;4780:31;4830:4;4827:1;4820:15;4854:4;4851:1;4844:15;4870:128;4937:9;;;4958:11;;;4955:37;;;4972:18;;:::i;5003:496::-;5182:3;5220:6;5214:13;5236:66;5295:6;5290:3;5283:4;5275:6;5271:17;5236:66;:::i;:::-;5365:13;;5324:16;;;;5387:70;5365:13;5324:16;5434:4;5422:17;;5387:70;:::i;:::-;5473:20;;5003:496;-1:-1:-1;;;;5003:496:26:o;5504:648::-;5773:3;5811:6;5805:13;5827:66;5886:6;5881:3;5874:4;5866:6;5862:17;5827:66;:::i;:::-;5956:13;;5915:16;;;;5978:70;5956:13;5915:16;6025:4;6013:17;;5978:70;:::i;:::-;-1:-1:-1;;;6070:20:26;;6099:18;;;6144:1;6133:13;;5504:648;-1:-1:-1;;;;5504:648:26:o;6157:135::-;6196:3;6217:17;;;6214:43;;6237:18;;:::i;:::-;-1:-1:-1;6284:1:26;6273:13;;6157:135::o;6566:2054::-;-1:-1:-1;;;7634:41:26;;7698:13;;7616:3;;7720:74;7698:13;7783:1;7774:11;;7767:4;7755:17;;7720:74;:::i;:::-;-1:-1:-1;;;7886:1:26;7813:16;;;7878:10;;;7871:22;;;-1:-1:-1;;;7917:2:26;7909:11;;7902:63;7990:13;;8012:76;7990:13;8074:2;8066:11;;8059:4;8047:17;;8012:76;:::i;:::-;8148:2;8107:17;;8140:11;;;8133:23;;;-1:-1:-1;;;8180:2:26;8172:11;;8165:51;8241:13;;8263:76;8241:13;8325:2;8317:11;;8310:4;8298:17;;8263:76;:::i;:::-;8399:2;8358:17;;8391:11;;;8384:23;-1:-1:-1;;;8431:2:26;8423:11;;8416:65;8503:37;8536:2;8528:11;;6369:34;6357:47;;-1:-1:-1;;;6429:2:26;6420:12;;6413:32;6470:2;6461:12;;6297:182;8503:37;-1:-1:-1;;;6534:25:26;;8612:1;8601:13;;;-1:-1:-1;;;;;;6566:2054:26:o;8625:1055::-;-1:-1:-1;;;9190:3:26;9183:16;9165:3;9228:6;9222:13;9244:74;9311:6;9307:1;9302:3;9298:11;9291:4;9283:6;9279:17;9244:74;:::i;:::-;-1:-1:-1;;;9377:1:26;9337:16;;;9369:10;;;9362:23;-1:-1:-1;;;9409:1:26;9401:10;;9394:60;9479:13;;9501:76;9479:13;9563:2;9555:11;;9548:4;9536:17;;9501:76;:::i;:::-;-1:-1:-1;;;9637:2:26;9596:17;;;;9629:11;;;9622:25;9671:2;9663:11;;8625:1055;-1:-1:-1;;;;8625:1055:26:o;9685:451::-;9937:31;9932:3;9925:44;9907:3;9998:6;9992:13;10014:75;10082:6;10077:2;10072:3;10068:12;10061:4;10053:6;10049:17;10014:75;:::i;:::-;10109:16;;;;10127:2;10105:25;;9685:451;-1:-1:-1;;9685:451:26:o;10420:1016::-;-1:-1:-1;;;10920:57:26;;11000:13;;10902:3;;11022:75;11000:13;11085:2;11076:12;;11069:4;11057:17;;11022:75;:::i;:::-;-1:-1:-1;;;11156:2:26;11116:16;;;11148:11;;;11141:59;11225:13;;11247:76;11225:13;11309:2;11301:11;;11294:4;11282:17;;11247:76;:::i;:::-;-1:-1:-1;;;11383:2:26;11342:17;;;;11375:11;;;11368:35;11427:2;11419:11;;10420:1016;-1:-1:-1;;;;10420:1016:26:o;11573:125::-;11638:9;;;11659:10;;;11656:36;;;11672:18;;:::i;11703:217::-;11743:1;11769;11759:132;;11813:10;11808:3;11804:20;11801:1;11794:31;11848:4;11845:1;11838:15;11876:4;11873:1;11866:15;11759:132;-1:-1:-1;11905:9:26;;11703:217::o;11925:168::-;11998:9;;;12029;;12046:15;;;12040:22;;12026:37;12016:71;;12067:18;;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"1256000","executionCost":"1308","totalCost":"1257308"},"external":{"ADMIN_ROLE()":"306","DEFAULT_ADMIN_ROLE()":"284","MINTER_ROLE()":"239","OWNER_ROLE()":"infinite","PAUSER_ROLE()":"infinite","UTILITY_ROLE()":"240","characterNFT()":"2449","getRoleAdmin(bytes32)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"infinite","initialize(address)":"infinite","levelContractAddress()":"2425","pause()":"infinite","paused()":"infinite","renounceRole(bytes32,address)":"29190","revokeRole(bytes32,address)":"infinite","setCharacterNFT(address)":"infinite","setLevelContract(address)":"infinite","supportsInterface(bytes4)":"450","tokenURI(uint256)":"infinite","unpause()":"infinite"},"internal":{"_addAttribute(string memory,string memory)":"infinite","_createURI(uint256)":"infinite"}},"methodIdentifiers":{"ADMIN_ROLE()":"75b238fc","DEFAULT_ADMIN_ROLE()":"a217fddf","MINTER_ROLE()":"d5391393","OWNER_ROLE()":"e58378bb","PAUSER_ROLE()":"e63ab1e9","UTILITY_ROLE()":"8f296759","characterNFT()":"384d10ee","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","initialize(address)":"c4d66de8","levelContractAddress()":"d9741275","pause()":"8456cb59","paused()":"5c975abb","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","setCharacterNFT(address)":"5c75cadb","setLevelContract(address)":"5adaa492","supportsInterface(bytes4)":"01ffc9a7","tokenURI(uint256)":"c87b56dd","unpause()":"3f4ba83a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValues\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UTILITY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"characterNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levelContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_characterNFT\",\"type\":\"address\"}],\"name\":\"setCharacterNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_levelContract\",\"type\":\"address\"}],\"name\":\"setLevelContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setCharacterNFT(address)\":{\"details\":\"Set the address of the CharacterNFT contract\"},\"setLevelContract(address)\":{\"details\":\"Set the address of the Level contract\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the URI for a given token ID\"}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidValues()\":[{\"notice\":\"ERRORS *\"}]},\"kind\":\"user\",\"methods\":{\"OWNER_ROLE()\":{\"notice\":\"ROLES *\"},\"characterNFT()\":{\"notice\":\"VARIABLES *\"},\"initialize(address)\":{\"notice\":\"FUNCTIONS *\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/erc721/CharacterNFTTokenURI.sol\":\"CharacterNFTTokenURI\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x6f7014d688c4386c26e8c02371ecb7f7740d2542f1ecadffd5a3084511e2a344\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/BaseHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract BaseHelper is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    /** ROLES **/\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant UTILITY_ROLE = keccak256(\\\"UTILITY_ROLE\\\");\\n\\n    /** ERRORS **/\\n\\n    error InvalidValues();\\n\\n    /** MODIFIERS **/\\n\\n    /** FUNCTIONS **/\\n\\n    function _baseInitialize(address initialOwner) internal onlyInitializing {\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        // Grant default admin role to initialOwner\\n        _grantRole(DEFAULT_ADMIN_ROLE, initialOwner);\\n        // Grant pauser role to initialOwner\\n        _grantRole(PAUSER_ROLE, initialOwner);\\n        _grantRole(OWNER_ROLE, initialOwner);\\n        _grantRole(MINTER_ROLE, initialOwner);\\n        _grantRole(ADMIN_ROLE, initialOwner);\\n        _grantRole(UTILITY_ROLE, initialOwner);\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    // The gap is needed to avoid overwriting storage variables in future upgrades\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa7a00044dbab2a0f885e29248f5cd0d12fd4639169795202883ff28bee439756\",\"license\":\"MIT\"},\"contracts/erc721/CharacterNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./CharacterNFTManager.sol\\\";\\nimport \\\"./CharacterNFTTokenURI.sol\\\";\\n\\ncontract CharacterNFT is ERC721, AccessControl {\\n    using Strings for uint256;\\n\\n    /** VARIABLES **/\\n\\n    struct CharacterData {\\n        string className;\\n        string classImage;\\n        string classDescription;\\n    }\\n\\n    mapping(uint256 => CharacterData) public classIdToCharacterData;\\n    address public characterNFTManagerContract;\\n    address public tokenUriContract;\\n\\n    /** ROLES **/\\n\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n    /** ERRORS **/\\n\\n    error InvalidValues();\\n\\n    /** MODIFIERS **/\\n\\n    /** FUNCTIONS **/\\n\\n    constructor() ERC721(\\\"Diablo\\\", \\\"D2NFT\\\") {\\n        // DEFAULT_ADMIN_ROLE is a special role that acts as the default admin role for all roles\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(OWNER_ROLE, msg.sender);\\n        _grantRole(MINTER_ROLE, msg.sender);\\n        _grantRole(BURNER_ROLE, msg.sender);\\n\\n        classIdToCharacterData[1].className = \\\"BARBARIAN\\\";\\n        classIdToCharacterData[2].className = \\\"NECROMANCER\\\";\\n        classIdToCharacterData[3].className = \\\"PALADIN\\\";\\n        classIdToCharacterData[4].className = \\\"SORCERESS\\\";\\n        classIdToCharacterData[5].className = \\\"AMAZON\\\";\\n        classIdToCharacterData[6].className = \\\"ASSASSIN\\\";\\n        classIdToCharacterData[7].className = \\\"DRUID\\\";\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ERC721, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Set the address of the CharacterNFTManager contract\\n     */\\n    function setCharacterNFTManager(\\n        address characterNFTManagerAddress\\n    ) public onlyRole(OWNER_ROLE) {\\n        characterNFTManagerContract = characterNFTManagerAddress;\\n    }\\n\\n    /**\\n     * @dev Set the address of the CharacterNFTTokenURI contract\\n     */\\n    function setTokenUriContract(\\n        address tokenUriContractAddress\\n    ) public onlyRole(OWNER_ROLE) {\\n        tokenUriContract = tokenUriContractAddress;\\n    }\\n\\n    /**\\n     * @dev Returns the name of a given token ID\\n     */\\n    function tokenName(uint256 tokenId) public view returns (string memory) {\\n        uint256 classEnumValue = uint256(\\n            CharacterNFTManager(characterNFTManagerContract)\\n                .tokenIdToCharacterClass(tokenId)\\n        );\\n        string memory className = classIdToCharacterData[classEnumValue]\\n            .className;\\n        return string(abi.encodePacked(className, \\\" #\\\", tokenId.toString()));\\n    }\\n\\n    /**\\n     * @dev Returns the URI for a given token ID\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override returns (string memory) {\\n        _requireOwned(tokenId);\\n        if (tokenUriContract == address(0)) {\\n            return \\\"\\\";\\n        }\\n        return CharacterNFTTokenURI(tokenUriContract).tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Update the class names\\n     */\\n    function updateClassNames(\\n        uint256 classEnumValue,\\n        string memory classNames\\n    ) public onlyRole(OWNER_ROLE) {\\n        classIdToCharacterData[classEnumValue].className = classNames;\\n    }\\n\\n    /**\\n     * @dev Update the class images\\n     */\\n    function updateClassImages(\\n        uint256 classEnumValue,\\n        string memory classImages\\n    ) public onlyRole(OWNER_ROLE) {\\n        classIdToCharacterData[classEnumValue].classImage = classImages;\\n    }\\n\\n    /**\\n     * @dev Update the class descriptions\\n     */\\n    function updateClassDescriptions(\\n        uint256 classEnumValue,\\n        string memory classDescriptions\\n    ) public onlyRole(OWNER_ROLE) {\\n        classIdToCharacterData[classEnumValue]\\n            .classDescription = classDescriptions;\\n    }\\n\\n    /**\\n     * @dev Mint a new token, only a minter can call this function\\n     */\\n    function mint(uint256 tokenId, address to) public onlyRole(MINTER_ROLE) {\\n        if (tokenId == 0 || to == address(0)) {\\n            revert InvalidValues();\\n        }\\n        _safeMint(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Burn a token, only a burner can call this function\\n     */\\n    function burn(uint256 tokenId) public onlyRole(BURNER_ROLE) {\\n        if (tokenId == 0) {\\n            revert InvalidValues();\\n        }\\n        _burn(tokenId);\\n    }\\n\\n    function getClassDescription(\\n        uint256 tokenId\\n    ) public view returns (string memory) {\\n        uint256 classEnumValue = uint256(\\n            CharacterNFTManager(characterNFTManagerContract)\\n                .tokenIdToCharacterClass(tokenId)\\n        );\\n        return classIdToCharacterData[classEnumValue].classDescription;\\n    }\\n\\n    function getClassImage(\\n        uint256 tokenId\\n    ) public view returns (string memory) {\\n        uint256 classEnumValue = uint256(\\n            CharacterNFTManager(characterNFTManagerContract)\\n                .tokenIdToCharacterClass(tokenId)\\n        );\\n        return classIdToCharacterData[classEnumValue].classImage;\\n    }\\n\\n    function getClassName(uint256 tokenId) public view returns (string memory) {\\n        uint256 classEnumValue = uint256(\\n            CharacterNFTManager(characterNFTManagerContract)\\n                .tokenIdToCharacterClass(tokenId)\\n        );\\n        return classIdToCharacterData[classEnumValue].className;\\n    }\\n}\\n\",\"keccak256\":\"0xbcbce91362dda57eb5f22ea6986e9153fa70254ac36401c8b425f61c2898118f\",\"license\":\"MIT\"},\"contracts/erc721/CharacterNFTManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../BaseHelper.sol\\\";\\nimport \\\"./CharacterNFT.sol\\\";\\n\\ncontract CharacterNFTManager is BaseHelper {\\n    /** ENUMS **/\\n    enum CharacterClass {\\n        NULL,\\n        BARBARIAN,\\n        NECROMANCER,\\n        PALADIN,\\n        SORCERESS,\\n        AMAZON,\\n        ASSASSIN,\\n        DRUID\\n    }\\n\\n    /** VARIABLES **/\\n\\n    // Track the last token ID minted\\n    uint256 public tokenIdCounter;\\n    // Track the character class of each token ID\\n    mapping(uint256 => CharacterClass) public tokenIdToCharacterClass;\\n    // Price per mint\\n    uint256 public pricePerMint;\\n    // CharacterNFT contract\\n    address public characterNFT;\\n\\n    /** ERRORS **/\\n\\n    error InsufficientFunds(uint256 pricePerMint, uint256 amount);\\n    error InvalidCharacterClass();\\n\\n    /** MODIFIERS **/\\n\\n    /** FUNCTIONS **/\\n\\n    function initialize(address initialOwner) public initializer {\\n        _baseInitialize(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Set the price per mint\\n     */\\n    function setPricePerMint(\\n        uint256 _pricePerMint\\n    ) public onlyRole(OWNER_ROLE) {\\n        pricePerMint = _pricePerMint;\\n    }\\n\\n    /**\\n     * @dev Set the address of the CharacterNFT contract\\n     */\\n    function setCharacterNFT(\\n        address _characterNFT\\n    ) public onlyRole(OWNER_ROLE) {\\n        characterNFT = _characterNFT;\\n    }\\n\\n    /**\\n     * @dev Withdraw the contract balance\\n     */\\n    function withdraw() public onlyRole(OWNER_ROLE) {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @dev Mint a character NFT, open for public use, requires payment\\n     */\\n    function mintCharacterPublic(\\n        uint256 amount,\\n        CharacterClass charType\\n    ) public payable whenNotPaused nonReentrant {\\n        if (charType == CharacterClass.NULL) {\\n            revert InvalidCharacterClass();\\n        }\\n        if (amount == 0) {\\n            revert InvalidValues();\\n        }\\n        if (msg.value < pricePerMint * amount) {\\n            revert InsufficientFunds(pricePerMint, amount);\\n        }\\n        for (uint256 i = 0; i < amount; i++) {\\n            tokenIdCounter++;\\n            uint256 newTokenId = tokenIdCounter;\\n            tokenIdToCharacterClass[newTokenId] = charType;\\n            CharacterNFT(characterNFT).mint(newTokenId, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Mint a character NFT, only for MINTER use, no payment required\\n     */\\n    function mintCharacterPrivate(\\n        uint256 amount,\\n        address to,\\n        CharacterClass charType\\n    ) public onlyRole(MINTER_ROLE) {\\n        _mintChar(amount, to, charType);\\n    }\\n\\n    /**\\n     * @dev Mint a batch of character NFTs, only for owner use, no payment required\\n     */\\n    function mintBatch(\\n        uint256[] calldata amounts,\\n        address[] calldata toAddresses,\\n        CharacterClass[] calldata charTypes\\n    ) public onlyRole(MINTER_ROLE) {\\n        if (\\n            amounts.length != toAddresses.length ||\\n            amounts.length != charTypes.length\\n        ) {\\n            revert InvalidValues();\\n        }\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            _mintChar(amounts[i], toAddresses[i], charTypes[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal mint helper\\n     */\\n    function _mintChar(\\n        uint256 amount,\\n        address to,\\n        CharacterClass charType\\n    ) internal {\\n        if (\\n            charType == CharacterClass.NULL || amount == 0 || to == address(0)\\n        ) {\\n            revert InvalidValues();\\n        }\\n\\n        for (uint256 i = 0; i < amount; i++) {\\n            tokenIdCounter++;\\n            uint256 newTokenId = tokenIdCounter;\\n            tokenIdToCharacterClass[newTokenId] = charType;\\n            CharacterNFT(characterNFT).mint(newTokenId, to);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc637dd0e44d9f5bc39d0708eb915b1c46758678dfb568e8ac094e2f866166996\",\"license\":\"MIT\"},\"contracts/erc721/CharacterNFTTokenURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\nimport \\\"../BaseHelper.sol\\\";\\nimport \\\"./CharacterNFT.sol\\\";\\nimport \\\"../leveling/Level.sol\\\";\\n\\ncontract CharacterNFTTokenURI is BaseHelper {\\n    using Strings for uint256;\\n    /** STRUCTS **/\\n\\n    struct Attribute {\\n        string name;\\n        uint256 value;\\n    }\\n\\n    /** VARIABLES **/\\n\\n    address public characterNFT;\\n\\n    address public levelContractAddress;\\n\\n    /** ERRORS **/\\n\\n    /** MODIFIERS **/\\n\\n    /** FUNCTIONS **/\\n\\n    function initialize(address initialOwner) public initializer {\\n        _baseInitialize(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Set the address of the CharacterNFT contract\\n     */\\n    function setCharacterNFT(\\n        address _characterNFT\\n    ) public onlyRole(OWNER_ROLE) {\\n        characterNFT = _characterNFT;\\n    }\\n\\n    /**\\n     * @dev Set the address of the Level contract\\n     */\\n    function setLevelContract(\\n        address _levelContract\\n    ) public onlyRole(OWNER_ROLE) {\\n        levelContractAddress = _levelContract;\\n    }\\n\\n    /**\\n     * @dev Returns the URI for a given token ID\\n     */\\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\\n        return _createURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Creates the URI for a given token ID\\n     */\\n    function _createURI(uint256 tokenId) internal view returns (string memory) {\\n        string memory attributesString = \\\"\\\";\\n\\n        attributesString = string.concat(\\n            _addAttribute(\\n                \\\"Character Class\\\",\\n                CharacterNFT(characterNFT).getClassName(tokenId)\\n            ),\\n            \\\",\\\"\\n        );\\n\\n        uint256 level = Level(levelContractAddress).getTokenLevel(tokenId);\\n        uint256 xp = Level(levelContractAddress).getTokenXp(tokenId);\\n\\n        Attribute[] memory attributes = new Attribute[](2);\\n        attributes[0] = Attribute(\\\"Level\\\", level);\\n        attributes[1] = Attribute(\\\"Xp\\\", xp);\\n\\n        for (uint256 i = 0; i < attributes.length; i++) {\\n            if (i == attributes.length - 1) {\\n                attributesString = string.concat(\\n                    attributesString,\\n                    _addAttribute(\\n                        attributes[i].name,\\n                        Strings.toString(attributes[i].value)\\n                    )\\n                );\\n            } else {\\n                attributesString = string.concat(\\n                    attributesString,\\n                    _addAttribute(\\n                        attributes[i].name,\\n                        Strings.toString(attributes[i].value)\\n                    ),\\n                    \\\",\\\"\\n                );\\n            }\\n        }\\n\\n        string memory propertiesJSON = string.concat(\\n            '\\\"name\\\":\\\"',\\n            CharacterNFT(characterNFT).tokenName(tokenId),\\n            '\\\",',\\n            '\\\"description\\\":\\\"',\\n            CharacterNFT(characterNFT).getClassDescription(tokenId),\\n            '\\\",',\\n            '\\\"image\\\":\\\"',\\n            CharacterNFT(characterNFT).getClassImage(tokenId),\\n            '\\\",',\\n            '\\\"external_url\\\":\\\"',\\n            \\\"https://diablo.fandom.com/wiki/Diablo_II\\\",\\n            '\\\"'\\n        );\\n        string memory fullOpenSeaMetadata = string.concat(\\n            \\\"{\\\",\\n            propertiesJSON,\\n            \\\",\\\",\\n            '\\\"attributes\\\":[',\\n            attributesString,\\n            \\\"]}\\\"\\n        );\\n        return\\n            string.concat(\\n                \\\"data:application/json;base64,\\\",\\n                Base64.encode(bytes(fullOpenSeaMetadata))\\n            );\\n    }\\n\\n    function _addAttribute(\\n        string memory key,\\n        string memory value\\n    ) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"trait_type\\\": \\\"',\\n                    key,\\n                    '\\\", \\\"value\\\": \\\"',\\n                    value,\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x6c7957aec1ce587a77f3ab32c169991f70983e33ddd72f83267a15e20537c74b\",\"license\":\"MIT\"},\"contracts/leveling/Level.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"../BaseHelper.sol\\\";\\n\\ncontract Level is BaseHelper {\\n    /** STRUCTS **/\\n\\n    // Packed struct\\n    struct LevelData {\\n        uint128 level;\\n        uint128 xp;\\n    }\\n\\n    /** VARIABLES **/\\n\\n    // Track the Level and Xp of each token ID\\n    mapping(uint256 => LevelData) public tokenIdToLevelData;\\n\\n    // Each level has an xp requirement\\n    uint256[] public xpPerLevel;\\n\\n    // CharacterNFT contract\\n    address public characterNFT;\\n\\n    /** ERRORS **/\\n\\n    error MaxLevelReached();\\n\\n    /** MODIFIERS **/\\n\\n    /** EVENTS **/\\n\\n    /// @notice An event emitted when a character gets xp\\n    event LevelUp(uint256 indexed tokenId, uint256 level, uint256 xp);\\n\\n    /** FUNCTIONS **/\\n\\n    function initialize(address initialOwner) public initializer {\\n        _baseInitialize(initialOwner);\\n        // Each level has an xp requirement, start with 10 levels, we can add more later\\n        xpPerLevel.push(0); // Ignore the 0 index\\n        xpPerLevel.push(0); // Everyone starts at level 1 with 0 xp so index 1 is 0\\n        xpPerLevel.push(100); // Level 2 is 100 xp\\n        xpPerLevel.push(200); // Level 3 is 200 xp\\n        xpPerLevel.push(300); // Level 4 is 300 xp\\n        xpPerLevel.push(400); // Level 5 is 400 xp\\n        xpPerLevel.push(500); // Level 6 is 500 xp\\n        xpPerLevel.push(600); // Level 7 is 600 xp\\n        xpPerLevel.push(700); // Level 8 is 700 xp\\n        xpPerLevel.push(800); // Level 9 is 800 xp\\n        xpPerLevel.push(1000); // Level 10 is 1000 xp\\n    }\\n\\n    /**\\n     * @dev Update the XpPerLevel array if needed\\n     */\\n    function updateXpPerLevelArray(\\n        uint256[] memory _xpPerLevel\\n    ) external onlyRole(ADMIN_ROLE) {\\n        xpPerLevel = _xpPerLevel;\\n    }\\n\\n    /**\\n     * @dev Set the address of the CharacterNFT contract\\n     */\\n    function setCharacterNFT(\\n        address _characterNFT\\n    ) public onlyRole(OWNER_ROLE) {\\n        characterNFT = _characterNFT;\\n    }\\n\\n    /**\\n     * @dev Utility-contract only. Grant the user experience and increase their level if valid\\n     */\\n    function gainExperience(\\n        uint256 tokenId,\\n        uint256 xp\\n    ) public onlyRole(UTILITY_ROLE) {\\n        // Make sure the token ID is valid\\n        require(\\n            IERC721(characterNFT).ownerOf(tokenId) != address(0),\\n            \\\"Invalid token ID\\\"\\n        );\\n        LevelData storage levelData = tokenIdToLevelData[tokenId];\\n        // Update the users xp\\n        levelData.xp += uint128(xp);\\n        // Make sure user cannot go past max level\\n        if (levelData.level >= xpPerLevel.length - 1) {\\n            revert MaxLevelReached();\\n        }\\n        // User xp cannot surpass level 10\\n        if (levelData.xp > xpPerLevel[xpPerLevel.length - 1]) {\\n            revert MaxLevelReached();\\n        }\\n        uint256 currentLevel = levelData.level;\\n        // Update the level if the new xp falls with the range\\n        for (uint256 i = currentLevel + 1; i < xpPerLevel.length; i++) {\\n            if (levelData.xp >= xpPerLevel[i]) {\\n                levelData.level = uint128(i);\\n                emit LevelUp(tokenId, i, levelData.xp);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper view function returns just the level\\n     */\\n    function getTokenLevel(uint256 tokenId) public view returns (uint256) {\\n        if (tokenIdToLevelData[tokenId].level == 0) {\\n            return 1;\\n        } else {\\n            return tokenIdToLevelData[tokenId].level;\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper view function returns just the xp\\n     */\\n    function getTokenXp(uint256 tokenId) public view returns (uint256) {\\n        return tokenIdToLevelData[tokenId].xp;\\n    }\\n}\\n\",\"keccak256\":\"0x0664a492fbd955da4e2c9fceae699f88de3f96d414b2d64861e32f0053a1973f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4337,"contract":"contracts/erc721/CharacterNFTTokenURI.sol:CharacterNFTTokenURI","label":"__gap","offset":0,"slot":"0","type":"t_array(t_uint256)50_storage"},{"astId":5116,"contract":"contracts/erc721/CharacterNFTTokenURI.sol:CharacterNFTTokenURI","label":"characterNFT","offset":0,"slot":"50","type":"t_address"},{"astId":5118,"contract":"contracts/erc721/CharacterNFTTokenURI.sol:CharacterNFTTokenURI","label":"levelContractAddress","offset":0,"slot":"51","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"InvalidValues()":[{"notice":"ERRORS *"}]},"kind":"user","methods":{"OWNER_ROLE()":{"notice":"ROLES *"},"characterNFT()":{"notice":"VARIABLES *"},"initialize(address)":{"notice":"FUNCTIONS *"}},"version":1}}},"contracts/leveling/Level.sol":{"Level":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"InvalidValues","type":"error"},{"inputs":[],"name":"MaxLevelReached","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"level","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"xp","type":"uint256"}],"name":"LevelUp","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OWNER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"UTILITY_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"characterNFT","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"xp","type":"uint256"}],"name":"gainExperience","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getTokenLevel","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getTokenXp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"initialOwner","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_characterNFT","type":"address"}],"name":"setCharacterNFT","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tokenIdToLevelData","outputs":[{"internalType":"uint128","name":"level","type":"uint128"},{"internalType":"uint128","name":"xp","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"_xpPerLevel","type":"uint256[]"}],"name":"updateXpPerLevelArray","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"xpPerLevel","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}],"EnforcedPause()":[{"details":"The operation failed because the contract is paused."}],"ExpectedPause()":[{"details":"The operation failed because the contract is not paused."}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"gainExperience(uint256,uint256)":{"details":"Utility-contract only. Grant the user experience and increase their level if valid"},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getTokenLevel(uint256)":{"details":"Helper view function returns just the level"},"getTokenXp(uint256)":{"details":"Helper view function returns just the xp"},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setCharacterNFT(address)":{"details":"Set the address of the CharacterNFT contract"},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"updateXpPerLevelArray(uint256[])":{"details":"Update the XpPerLevel array if needed"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50611219806100206000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806391d14854116100c3578063d011645c1161007c578063d011645c1461035a578063d53913931461036d578063d547741f14610394578063e58378bb146103a7578063e63ab1e9146103ce578063eca83c03146103e357600080fd5b806391d1485414610295578063953b6a91146102a8578063a217fddf146102bb578063c2118451146102c3578063c4d66de814610317578063c995a3b31461032a57600080fd5b806354b526741161011557806354b52674146102015780635c75cadb146102145780635c975abb1461022757806375b238fc1461023f5780638456cb59146102665780638f2967591461026e57600080fd5b806301ffc9a71461015d578063248a9ca3146101855780632f2ff15d146101a657806336568abe146101bb578063384d10ee146101ce5780633f4ba83a146101f9575b600080fd5b61017061016b366004610f39565b6103f6565b60405190151581526020015b60405180910390f35b610198610193366004610f6a565b61042d565b60405190815260200161017c565b6101b96101b4366004610f98565b61044f565b005b6101b96101c9366004610f98565b610471565b6034546101e1906001600160a01b031681565b6040516001600160a01b03909116815260200161017c565b6101b96104a9565b61019861020f366004610f6a565b6104cc565b6101b9610222366004610fc8565b6104ed565b6000805160206111c48339815191525460ff16610170565b6101987fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6101b961053a565b6101987f35af5b5a3fb4c88a8cb5e26e8a68a53cc8f6cafcc4000a1db1ae5753e25a168e81565b6101706102a3366004610f98565b61055a565b6101b96102b6366004610fe5565b610592565b610198600081565b6102f76102d1366004610f6a565b6032602052600090815260409020546001600160801b0380821691600160801b90041682565b604080516001600160801b0393841681529290911660208301520161017c565b6101b9610325366004610fc8565b610847565b610198610338366004610f6a565b600090815260326020526040902054600160801b90046001600160801b031690565b610198610368366004610f6a565b610a13565b6101987f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6101b96103a2366004610f98565b610a55565b6101987fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e81565b61019860008051602061118483398151915281565b6101b96103f136600461101d565b610a71565b60006001600160e01b03198216637965db0b60e01b148061042757506301ffc9a760e01b6001600160e01b03198316145b92915050565b60009081526000805160206111a4833981519152602052604090206001015490565b6104588261042d565b61046181610aae565b61046b8383610ab8565b50505050565b6001600160a01b038116331461049a5760405163334bd91960e11b815260040160405180910390fd5b6104a48282610b64565b505050565b6000805160206111848339815191526104c181610aae565b6104c9610be0565b50565b603381815481106104dc57600080fd5b600091825260209091200154905081565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e61051781610aae565b50603480546001600160a01b0319166001600160a01b0392909216919091179055565b60008051602061118483398151915261055281610aae565b6104c9610c40565b60009182526000805160206111a4833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b7f35af5b5a3fb4c88a8cb5e26e8a68a53cc8f6cafcc4000a1db1ae5753e25a168e6105bc81610aae565b6034546040516331a9108f60e11b8152600481018590526000916001600160a01b031690636352211e90602401602060405180830381865afa158015610606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062a91906110db565b6001600160a01b0316036106785760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b60448201526064015b60405180910390fd5b60008381526032602052604090208054839082906010906106aa908490600160801b90046001600160801b031661110e565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555060016033805490506106e0919061112e565b81546001600160801b0316106107095760405163921c7d5f60e01b815260040160405180910390fd5b603380546107199060019061112e565b8154811061072957610729611141565b6000918252602090912001548154600160801b90046001600160801b031611156107665760405163921c7d5f60e01b815260040160405180910390fd5b80546001600160801b0316600061077e826001611157565b90505b60335481101561083f576033818154811061079e5761079e611141565b6000918252602090912001548354600160801b90046001600160801b03161061082d5782546fffffffffffffffffffffffffffffffff19166001600160801b038281169190911780855560408051848152600160801b909204909216602082015287917f66833f6d7d7a01eaed9fb21eb9cc54f0fb9497fa9251a6c0773372c8d3e0aa0c910160405180910390a25b806108378161116a565b915050610781565b505050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff1660008115801561088d5750825b905060008267ffffffffffffffff1660011480156108aa5750303b155b9050811580156108b8575080155b156108d65760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561090057845460ff60401b1916600160401b1785555b61090986610c89565b603380546001818101835560008381527f82a75bdeeae8604d839476ae9efd8b0e15aa447e21bfd7f41283bb54e22c9a8292830181905583548083018555830155825480820184556064908301558254808201845560c8908301558254808201845561012c908301558254808201845561019090830155825480820184556101f4908301558254808201845561025890830155825480820184556102bc90830155825480820184556103209083015582549081019092556103e8910155831561083f57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a1505050505050565b6000818152603260205260408120546001600160801b03168103610a3957506001919050565b506000908152603260205260409020546001600160801b031690565b610a5e8261042d565b610a6781610aae565b61046b8383610b64565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610a9b81610aae565b81516104a4906033906020850190610ed9565b6104c98133610d7d565b60006000805160206111a4833981519152610ad3848461055a565b610b53576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055610b093390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610427565b6000915050610427565b5092915050565b60006000805160206111a4833981519152610b7f848461055a565b15610b53576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46001915050610427565b610be8610db6565b6000805160206111c4833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b610c48610de8565b6000805160206111c4833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833610c22565b610c91610e19565b610c99610e62565b610ca1610e72565b610ca9610e7a565b610cb4600082610ab8565b50610ccd60008051602061118483398151915282610ab8565b50610cf87fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e82610ab8565b50610d237f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a682610ab8565b50610d4e7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582610ab8565b50610d797f35af5b5a3fb4c88a8cb5e26e8a68a53cc8f6cafcc4000a1db1ae5753e25a168e82610ab8565b5050565b610d87828261055a565b610d795760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161066f565b6000805160206111c48339815191525460ff16610de657604051638dfc202b60e01b815260040160405180910390fd5b565b6000805160206111c48339815191525460ff1615610de65760405163d93c066560e01b815260040160405180910390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610de657604051631afcd79f60e31b815260040160405180910390fd5b610e6a610e19565b610de6610e8a565b610de6610e19565b610e82610e19565b610de6610eab565b610e92610e19565b6000805160206111c4833981519152805460ff19169055565b610eb3610e19565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b828054828255906000526020600020908101928215610f14579160200282015b82811115610f14578251825591602001919060010190610ef9565b50610f20929150610f24565b5090565b5b80821115610f205760008155600101610f25565b600060208284031215610f4b57600080fd5b81356001600160e01b031981168114610f6357600080fd5b9392505050565b600060208284031215610f7c57600080fd5b5035919050565b6001600160a01b03811681146104c957600080fd5b60008060408385031215610fab57600080fd5b823591506020830135610fbd81610f83565b809150509250929050565b600060208284031215610fda57600080fd5b8135610f6381610f83565b60008060408385031215610ff857600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561103057600080fd5b823567ffffffffffffffff8082111561104857600080fd5b818501915085601f83011261105c57600080fd5b81358181111561106e5761106e611007565b8060051b604051601f19603f8301168101818110858211171561109357611093611007565b6040529182528482019250838101850191888311156110b157600080fd5b938501935b828510156110cf578435845293850193928501926110b6565b98975050505050505050565b6000602082840312156110ed57600080fd5b8151610f6381610f83565b634e487b7160e01b600052601160045260246000fd5b6001600160801b03818116838216019080821115610b5d57610b5d6110f8565b81810381811115610427576104276110f8565b634e487b7160e01b600052603260045260246000fd5b80820180821115610427576104276110f8565b60006001820161117c5761117c6110f8565b506001019056fe65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300a2646970667358221220cd63e355603c16913abe85f6af86804f3b8fb2dd8f3a368f0f57135ca24d849664736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1219 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x158 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x91D14854 GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xD011645C GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xD011645C EQ PUSH2 0x35A JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x36D JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x394 JUMPI DUP1 PUSH4 0xE58378BB EQ PUSH2 0x3A7 JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0x3CE JUMPI DUP1 PUSH4 0xECA83C03 EQ PUSH2 0x3E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x91D14854 EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x953B6A91 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0xC2118451 EQ PUSH2 0x2C3 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x317 JUMPI DUP1 PUSH4 0xC995A3B3 EQ PUSH2 0x32A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x54B52674 GT PUSH2 0x115 JUMPI DUP1 PUSH4 0x54B52674 EQ PUSH2 0x201 JUMPI DUP1 PUSH4 0x5C75CADB EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x23F JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x266 JUMPI DUP1 PUSH4 0x8F296759 EQ PUSH2 0x26E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x185 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x384D10EE EQ PUSH2 0x1CE JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x1F9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x170 PUSH2 0x16B CALLDATASIZE PUSH1 0x4 PUSH2 0xF39 JUMP JUMPDEST PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x198 PUSH2 0x193 CALLDATASIZE PUSH1 0x4 PUSH2 0xF6A JUMP JUMPDEST PUSH2 0x42D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x17C JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x1B4 CALLDATASIZE PUSH1 0x4 PUSH2 0xF98 JUMP JUMPDEST PUSH2 0x44F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B9 PUSH2 0x1C9 CALLDATASIZE PUSH1 0x4 PUSH2 0xF98 JUMP JUMPDEST PUSH2 0x471 JUMP JUMPDEST PUSH1 0x34 SLOAD PUSH2 0x1E1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x17C JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x4A9 JUMP JUMPDEST PUSH2 0x198 PUSH2 0x20F CALLDATASIZE PUSH1 0x4 PUSH2 0xF6A JUMP JUMPDEST PUSH2 0x4CC JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x222 CALLDATASIZE PUSH1 0x4 PUSH2 0xFC8 JUMP JUMPDEST PUSH2 0x4ED JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11C4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND PUSH2 0x170 JUMP JUMPDEST PUSH2 0x198 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x53A JUMP JUMPDEST PUSH2 0x198 PUSH32 0x35AF5B5A3FB4C88A8CB5E26E8A68A53CC8F6CAFCC4000A1DB1AE5753E25A168E DUP2 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x2A3 CALLDATASIZE PUSH1 0x4 PUSH2 0xF98 JUMP JUMPDEST PUSH2 0x55A JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x2B6 CALLDATASIZE PUSH1 0x4 PUSH2 0xFE5 JUMP JUMPDEST PUSH2 0x592 JUMP JUMPDEST PUSH2 0x198 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x2F7 PUSH2 0x2D1 CALLDATASIZE PUSH1 0x4 PUSH2 0xF6A JUMP JUMPDEST PUSH1 0x32 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP1 DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV AND DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x17C JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x325 CALLDATASIZE PUSH1 0x4 PUSH2 0xFC8 JUMP JUMPDEST PUSH2 0x847 JUMP JUMPDEST PUSH2 0x198 PUSH2 0x338 CALLDATASIZE PUSH1 0x4 PUSH2 0xF6A JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x32 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x198 PUSH2 0x368 CALLDATASIZE PUSH1 0x4 PUSH2 0xF6A JUMP JUMPDEST PUSH2 0xA13 JUMP JUMPDEST PUSH2 0x198 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x3A2 CALLDATASIZE PUSH1 0x4 PUSH2 0xF98 JUMP JUMPDEST PUSH2 0xA55 JUMP JUMPDEST PUSH2 0x198 PUSH32 0xB19546DFF01E856FB3F010C267A7B1C60363CF8A4664E21CC89C26224620214E DUP2 JUMP JUMPDEST PUSH2 0x198 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1184 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x3F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x101D JUMP JUMPDEST PUSH2 0xA71 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x427 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11A4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x458 DUP3 PUSH2 0x42D JUMP JUMPDEST PUSH2 0x461 DUP2 PUSH2 0xAAE JUMP JUMPDEST PUSH2 0x46B DUP4 DUP4 PUSH2 0xAB8 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x49A JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4A4 DUP3 DUP3 PUSH2 0xB64 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1184 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x4C1 DUP2 PUSH2 0xAAE JUMP JUMPDEST PUSH2 0x4C9 PUSH2 0xBE0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x33 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x4DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH32 0xB19546DFF01E856FB3F010C267A7B1C60363CF8A4664E21CC89C26224620214E PUSH2 0x517 DUP2 PUSH2 0xAAE JUMP JUMPDEST POP PUSH1 0x34 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1184 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x552 DUP2 PUSH2 0xAAE JUMP JUMPDEST PUSH2 0x4C9 PUSH2 0xC40 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11A4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH32 0x35AF5B5A3FB4C88A8CB5E26E8A68A53CC8F6CAFCC4000A1DB1AE5753E25A168E PUSH2 0x5BC DUP2 PUSH2 0xAAE JUMP JUMPDEST PUSH1 0x34 SLOAD PUSH1 0x40 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x606 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x62A SWAP2 SWAP1 PUSH2 0x10DB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x678 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x125B9D985B1A59081D1BDAD95B881251 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x32 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP4 SWAP1 DUP3 SWAP1 PUSH1 0x10 SWAP1 PUSH2 0x6AA SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x110E JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x33 DUP1 SLOAD SWAP1 POP PUSH2 0x6E0 SWAP2 SWAP1 PUSH2 0x112E JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT PUSH2 0x709 JUMPI PUSH1 0x40 MLOAD PUSH4 0x921C7D5F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH2 0x719 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x112E JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x729 JUMPI PUSH2 0x729 PUSH2 0x1141 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD DUP2 SLOAD PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT ISZERO PUSH2 0x766 JUMPI PUSH1 0x40 MLOAD PUSH4 0x921C7D5F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x0 PUSH2 0x77E DUP3 PUSH1 0x1 PUSH2 0x1157 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x33 SLOAD DUP2 LT ISZERO PUSH2 0x83F JUMPI PUSH1 0x33 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x79E JUMPI PUSH2 0x79E PUSH2 0x1141 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD DUP4 SLOAD PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT PUSH2 0x82D JUMPI DUP3 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP3 DUP2 AND SWAP2 SWAP1 SWAP2 OR DUP1 DUP6 SSTORE PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x80 SHL SWAP1 SWAP3 DIV SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE DUP8 SWAP2 PUSH32 0x66833F6D7D7A01EAED9FB21EB9CC54F0FB9497FA9251A6C0773372C8D3E0AA0C SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST DUP1 PUSH2 0x837 DUP2 PUSH2 0x116A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x781 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x88D JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x8AA JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x8B8 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x8D6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x900 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH2 0x909 DUP7 PUSH2 0xC89 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP4 SSTORE PUSH1 0x0 DUP4 DUP2 MSTORE PUSH32 0x82A75BDEEAE8604D839476AE9EFD8B0E15AA447E21BFD7F41283BB54E22C9A82 SWAP3 DUP4 ADD DUP2 SWAP1 SSTORE DUP4 SLOAD DUP1 DUP4 ADD DUP6 SSTORE DUP4 ADD SSTORE DUP3 SLOAD DUP1 DUP3 ADD DUP5 SSTORE PUSH1 0x64 SWAP1 DUP4 ADD SSTORE DUP3 SLOAD DUP1 DUP3 ADD DUP5 SSTORE PUSH1 0xC8 SWAP1 DUP4 ADD SSTORE DUP3 SLOAD DUP1 DUP3 ADD DUP5 SSTORE PUSH2 0x12C SWAP1 DUP4 ADD SSTORE DUP3 SLOAD DUP1 DUP3 ADD DUP5 SSTORE PUSH2 0x190 SWAP1 DUP4 ADD SSTORE DUP3 SLOAD DUP1 DUP3 ADD DUP5 SSTORE PUSH2 0x1F4 SWAP1 DUP4 ADD SSTORE DUP3 SLOAD DUP1 DUP3 ADD DUP5 SSTORE PUSH2 0x258 SWAP1 DUP4 ADD SSTORE DUP3 SLOAD DUP1 DUP3 ADD DUP5 SSTORE PUSH2 0x2BC SWAP1 DUP4 ADD SSTORE DUP3 SLOAD DUP1 DUP3 ADD DUP5 SSTORE PUSH2 0x320 SWAP1 DUP4 ADD SSTORE DUP3 SLOAD SWAP1 DUP2 ADD SWAP1 SWAP3 SSTORE PUSH2 0x3E8 SWAP2 ADD SSTORE DUP4 ISZERO PUSH2 0x83F JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x32 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 SUB PUSH2 0xA39 JUMPI POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x32 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xA5E DUP3 PUSH2 0x42D JUMP JUMPDEST PUSH2 0xA67 DUP2 PUSH2 0xAAE JUMP JUMPDEST PUSH2 0x46B DUP4 DUP4 PUSH2 0xB64 JUMP JUMPDEST PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 PUSH2 0xA9B DUP2 PUSH2 0xAAE JUMP JUMPDEST DUP2 MLOAD PUSH2 0x4A4 SWAP1 PUSH1 0x33 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0xED9 JUMP JUMPDEST PUSH2 0x4C9 DUP2 CALLER PUSH2 0xD7D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11A4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xAD3 DUP5 DUP5 PUSH2 0x55A JUMP JUMPDEST PUSH2 0xB53 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xB09 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x427 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x427 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11A4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xB7F DUP5 DUP5 PUSH2 0x55A JUMP JUMPDEST ISZERO PUSH2 0xB53 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP8 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x427 JUMP JUMPDEST PUSH2 0xBE8 PUSH2 0xDB6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11C4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND DUP2 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0xC48 PUSH2 0xDE8 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11C4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 CALLER PUSH2 0xC22 JUMP JUMPDEST PUSH2 0xC91 PUSH2 0xE19 JUMP JUMPDEST PUSH2 0xC99 PUSH2 0xE62 JUMP JUMPDEST PUSH2 0xCA1 PUSH2 0xE72 JUMP JUMPDEST PUSH2 0xCA9 PUSH2 0xE7A JUMP JUMPDEST PUSH2 0xCB4 PUSH1 0x0 DUP3 PUSH2 0xAB8 JUMP JUMPDEST POP PUSH2 0xCCD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1184 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0xAB8 JUMP JUMPDEST POP PUSH2 0xCF8 PUSH32 0xB19546DFF01E856FB3F010C267A7B1C60363CF8A4664E21CC89C26224620214E DUP3 PUSH2 0xAB8 JUMP JUMPDEST POP PUSH2 0xD23 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP3 PUSH2 0xAB8 JUMP JUMPDEST POP PUSH2 0xD4E PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP3 PUSH2 0xAB8 JUMP JUMPDEST POP PUSH2 0xD79 PUSH32 0x35AF5B5A3FB4C88A8CB5E26E8A68A53CC8F6CAFCC4000A1DB1AE5753E25A168E DUP3 PUSH2 0xAB8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xD87 DUP3 DUP3 PUSH2 0x55A JUMP JUMPDEST PUSH2 0xD79 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x66F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11C4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND PUSH2 0xDE6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11C4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xDE6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0xDE6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE6A PUSH2 0xE19 JUMP JUMPDEST PUSH2 0xDE6 PUSH2 0xE8A JUMP JUMPDEST PUSH2 0xDE6 PUSH2 0xE19 JUMP JUMPDEST PUSH2 0xE82 PUSH2 0xE19 JUMP JUMPDEST PUSH2 0xDE6 PUSH2 0xEAB JUMP JUMPDEST PUSH2 0xE92 PUSH2 0xE19 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11C4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xEB3 PUSH2 0xE19 JUMP JUMPDEST PUSH1 0x1 PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 SSTORE JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0xF14 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xF14 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xEF9 JUMP JUMPDEST POP PUSH2 0xF20 SWAP3 SWAP2 POP PUSH2 0xF24 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xF20 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xF25 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xF63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xFBD DUP2 PUSH2 0xF83 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xF63 DUP2 PUSH2 0xF83 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1030 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1048 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x105C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x106E JUMPI PUSH2 0x106E PUSH2 0x1007 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x1093 JUMPI PUSH2 0x1093 PUSH2 0x1007 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x10B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x10CF JUMPI DUP5 CALLDATALOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x10B6 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xF63 DUP2 PUSH2 0xF83 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0xB5D JUMPI PUSH2 0xB5D PUSH2 0x10F8 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x427 JUMPI PUSH2 0x427 PUSH2 0x10F8 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x427 JUMPI PUSH2 0x427 PUSH2 0x10F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x117C JUMPI PUSH2 0x117C PUSH2 0x10F8 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID PUSH6 0xD7A28E3265B3 PUSH27 0x6474929F336521B332C1681B933F6CB9F3376673440D862A02DD7B 0xC7 0xDE 0xC4 0xDC 0xEE 0xDD 0xA7 PUSH22 0xE58DD541E08A116C6C53815C0BD028192F7B626800CD 0x5E 0xD1 0x5C PUSH15 0x187E77E9AEE88184C21F4F2182AB58 0x27 0xCB EXTCODESIZE PUSH31 0x7FBEDCD63F03300A2646970667358221220CD63E355603C16913ABE85F6AF DUP7 DUP1 0x4F EXTCODESIZE DUP16 0xB2 0xDD DUP16 GASPRICE CALLDATASIZE DUP16 0xF JUMPI SGT 0x5C LOG2 0x4D DUP5 SWAP7 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"145:3600:24:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ADMIN_ROLE_4257":{"entryPoint":null,"id":4257,"parameterSlots":0,"returnSlots":0},"@DEFAULT_ADMIN_ROLE_28":{"entryPoint":null,"id":28,"parameterSlots":0,"returnSlots":0},"@MINTER_ROLE_4252":{"entryPoint":null,"id":4252,"parameterSlots":0,"returnSlots":0},"@OWNER_ROLE_4242":{"entryPoint":null,"id":4242,"parameterSlots":0,"returnSlots":0},"@PAUSER_ROLE_4247":{"entryPoint":null,"id":4247,"parameterSlots":0,"returnSlots":0},"@UTILITY_ROLE_4262":{"entryPoint":null,"id":4262,"parameterSlots":0,"returnSlots":0},"@__AccessControl_init_63":{"entryPoint":3698,"id":63,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_714":{"entryPoint":3682,"id":714,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_732":{"entryPoint":3722,"id":732,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_878":{"entryPoint":3706,"id":878,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_unchained_896":{"entryPoint":3755,"id":896,"parameterSlots":0,"returnSlots":0},"@_baseInitialize_4313":{"entryPoint":3209,"id":4313,"parameterSlots":1,"returnSlots":0},"@_checkInitializing_538":{"entryPoint":3609,"id":538,"parameterSlots":0,"returnSlots":0},"@_checkRole_129":{"entryPoint":2734,"id":129,"parameterSlots":1,"returnSlots":0},"@_checkRole_150":{"entryPoint":3453,"id":150,"parameterSlots":2,"returnSlots":0},"@_getAccessControlStorage_46":{"entryPoint":null,"id":46,"parameterSlots":0,"returnSlots":1},"@_getInitializableStorage_615":{"entryPoint":null,"id":615,"parameterSlots":0,"returnSlots":1},"@_getPausableStorage_688":{"entryPoint":null,"id":688,"parameterSlots":0,"returnSlots":1},"@_getReentrancyGuardStorage_866":{"entryPoint":null,"id":866,"parameterSlots":0,"returnSlots":1},"@_grantRole_315":{"entryPoint":2744,"id":315,"parameterSlots":2,"returnSlots":1},"@_isInitializing_606":{"entryPoint":null,"id":606,"parameterSlots":0,"returnSlots":1},"@_msgSender_644":{"entryPoint":null,"id":644,"parameterSlots":0,"returnSlots":1},"@_pause_813":{"entryPoint":3136,"id":813,"parameterSlots":0,"returnSlots":0},"@_requireNotPaused_776":{"entryPoint":3560,"id":776,"parameterSlots":0,"returnSlots":0},"@_requirePaused_789":{"entryPoint":3510,"id":789,"parameterSlots":0,"returnSlots":0},"@_revokeRole_361":{"entryPoint":2916,"id":361,"parameterSlots":2,"returnSlots":1},"@_unpause_837":{"entryPoint":3040,"id":837,"parameterSlots":0,"returnSlots":0},"@characterNFT_5421":{"entryPoint":null,"id":5421,"parameterSlots":0,"returnSlots":0},"@gainExperience_5654":{"entryPoint":1426,"id":5654,"parameterSlots":2,"returnSlots":0},"@getRoleAdmin_171":{"entryPoint":1069,"id":171,"parameterSlots":1,"returnSlots":1},"@getTokenLevel_5679":{"entryPoint":2579,"id":5679,"parameterSlots":1,"returnSlots":1},"@getTokenXp_5693":{"entryPoint":null,"id":5693,"parameterSlots":1,"returnSlots":1},"@grantRole_190":{"entryPoint":1103,"id":190,"parameterSlots":2,"returnSlots":0},"@hasRole_116":{"entryPoint":1370,"id":116,"parameterSlots":2,"returnSlots":1},"@initialize_5512":{"entryPoint":2119,"id":5512,"parameterSlots":1,"returnSlots":0},"@pause_4323":{"entryPoint":1338,"id":4323,"parameterSlots":0,"returnSlots":0},"@paused_764":{"entryPoint":null,"id":764,"parameterSlots":0,"returnSlots":1},"@renounceRole_232":{"entryPoint":1137,"id":232,"parameterSlots":2,"returnSlots":0},"@revokeRole_209":{"entryPoint":2645,"id":209,"parameterSlots":2,"returnSlots":0},"@setCharacterNFT_5541":{"entryPoint":1261,"id":5541,"parameterSlots":1,"returnSlots":0},"@supportsInterface_1006":{"entryPoint":null,"id":1006,"parameterSlots":1,"returnSlots":1},"@supportsInterface_91":{"entryPoint":1014,"id":91,"parameterSlots":1,"returnSlots":1},"@tokenIdToLevelData_5416":{"entryPoint":null,"id":5416,"parameterSlots":0,"returnSlots":0},"@unpause_4333":{"entryPoint":1193,"id":4333,"parameterSlots":0,"returnSlots":0},"@updateXpPerLevelArray_5527":{"entryPoint":2673,"id":5527,"parameterSlots":1,"returnSlots":0},"@xpPerLevel_5419":{"entryPoint":1228,"id":5419,"parameterSlots":0,"returnSlots":0},"abi_decode_tuple_t_address":{"entryPoint":4040,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":4315,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":4125,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":3946,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":3992,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":3897,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":4069,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b44e5a2e76d616f71f124d91f8560c46215c55a45ba6a1b6e492edf2295dcc48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint128_t_uint128__to_t_uint128_t_uint128__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint128__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"checked_add_t_uint128":{"entryPoint":4366,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4439,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4398,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":4458,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4344,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4417,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":4103,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":3971,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:6230:26","statements":[{"nodeType":"YulBlock","src":"6:3:26","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:217:26","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:26"},"nodeType":"YulFunctionCall","src":"131:12:26"},"nodeType":"YulExpressionStatement","src":"131:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:26"},"nodeType":"YulFunctionCall","src":"100:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:26"},"nodeType":"YulFunctionCall","src":"96:32:26"},"nodeType":"YulIf","src":"93:52:26"},{"nodeType":"YulVariableDeclaration","src":"154:36:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:26"},"nodeType":"YulFunctionCall","src":"167:23:26"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"254:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"263:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"266:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"256:6:26"},"nodeType":"YulFunctionCall","src":"256:12:26"},"nodeType":"YulExpressionStatement","src":"256:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"234:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"239:10:26","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"230:3:26"},"nodeType":"YulFunctionCall","src":"230:20:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:26"},"nodeType":"YulFunctionCall","src":"219:32:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:26"},"nodeType":"YulFunctionCall","src":"209:43:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:26"},"nodeType":"YulFunctionCall","src":"202:51:26"},"nodeType":"YulIf","src":"199:71:26"},{"nodeType":"YulAssignment","src":"279:15:26","value":{"name":"value","nodeType":"YulIdentifier","src":"289:5:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"279:6:26"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:26","type":""}],"src":"14:286:26"},{"body":{"nodeType":"YulBlock","src":"400:92:26","statements":[{"nodeType":"YulAssignment","src":"410:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"422:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"433:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"418:3:26"},"nodeType":"YulFunctionCall","src":"418:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"410:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"452:9:26"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"477:6:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"470:6:26"},"nodeType":"YulFunctionCall","src":"470:14:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"463:6:26"},"nodeType":"YulFunctionCall","src":"463:22:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"445:6:26"},"nodeType":"YulFunctionCall","src":"445:41:26"},"nodeType":"YulExpressionStatement","src":"445:41:26"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"369:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"380:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"391:4:26","type":""}],"src":"305:187:26"},{"body":{"nodeType":"YulBlock","src":"567:110:26","statements":[{"body":{"nodeType":"YulBlock","src":"613:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"622:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"625:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"615:6:26"},"nodeType":"YulFunctionCall","src":"615:12:26"},"nodeType":"YulExpressionStatement","src":"615:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"588:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"597:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"584:3:26"},"nodeType":"YulFunctionCall","src":"584:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"609:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"580:3:26"},"nodeType":"YulFunctionCall","src":"580:32:26"},"nodeType":"YulIf","src":"577:52:26"},{"nodeType":"YulAssignment","src":"638:33:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"661:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"648:12:26"},"nodeType":"YulFunctionCall","src":"648:23:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"638:6:26"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"533:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"544:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"556:6:26","type":""}],"src":"497:180:26"},{"body":{"nodeType":"YulBlock","src":"783:76:26","statements":[{"nodeType":"YulAssignment","src":"793:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"805:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"816:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"801:3:26"},"nodeType":"YulFunctionCall","src":"801:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"793:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"835:9:26"},{"name":"value0","nodeType":"YulIdentifier","src":"846:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"828:6:26"},"nodeType":"YulFunctionCall","src":"828:25:26"},"nodeType":"YulExpressionStatement","src":"828:25:26"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"752:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"763:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"774:4:26","type":""}],"src":"682:177:26"},{"body":{"nodeType":"YulBlock","src":"909:86:26","statements":[{"body":{"nodeType":"YulBlock","src":"973:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"982:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"985:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"975:6:26"},"nodeType":"YulFunctionCall","src":"975:12:26"},"nodeType":"YulExpressionStatement","src":"975:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"932:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"943:5:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"958:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"963:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"954:3:26"},"nodeType":"YulFunctionCall","src":"954:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"967:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"950:3:26"},"nodeType":"YulFunctionCall","src":"950:19:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"939:3:26"},"nodeType":"YulFunctionCall","src":"939:31:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"929:2:26"},"nodeType":"YulFunctionCall","src":"929:42:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"922:6:26"},"nodeType":"YulFunctionCall","src":"922:50:26"},"nodeType":"YulIf","src":"919:70:26"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"898:5:26","type":""}],"src":"864:131:26"},{"body":{"nodeType":"YulBlock","src":"1087:228:26","statements":[{"body":{"nodeType":"YulBlock","src":"1133:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1142:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1145:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1135:6:26"},"nodeType":"YulFunctionCall","src":"1135:12:26"},"nodeType":"YulExpressionStatement","src":"1135:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1108:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"1117:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1104:3:26"},"nodeType":"YulFunctionCall","src":"1104:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"1129:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1100:3:26"},"nodeType":"YulFunctionCall","src":"1100:32:26"},"nodeType":"YulIf","src":"1097:52:26"},{"nodeType":"YulAssignment","src":"1158:33:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1181:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1168:12:26"},"nodeType":"YulFunctionCall","src":"1168:23:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1158:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"1200:45:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1230:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1241:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1226:3:26"},"nodeType":"YulFunctionCall","src":"1226:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1213:12:26"},"nodeType":"YulFunctionCall","src":"1213:32:26"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1204:5:26","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1279:5:26"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"1254:24:26"},"nodeType":"YulFunctionCall","src":"1254:31:26"},"nodeType":"YulExpressionStatement","src":"1254:31:26"},{"nodeType":"YulAssignment","src":"1294:15:26","value":{"name":"value","nodeType":"YulIdentifier","src":"1304:5:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1294:6:26"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1045:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1056:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1068:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1076:6:26","type":""}],"src":"1000:315:26"},{"body":{"nodeType":"YulBlock","src":"1421:102:26","statements":[{"nodeType":"YulAssignment","src":"1431:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1443:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1454:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1439:3:26"},"nodeType":"YulFunctionCall","src":"1439:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1431:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1473:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1488:6:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1504:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1509:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1500:3:26"},"nodeType":"YulFunctionCall","src":"1500:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"1513:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1496:3:26"},"nodeType":"YulFunctionCall","src":"1496:19:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1484:3:26"},"nodeType":"YulFunctionCall","src":"1484:32:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1466:6:26"},"nodeType":"YulFunctionCall","src":"1466:51:26"},"nodeType":"YulExpressionStatement","src":"1466:51:26"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1390:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1401:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1412:4:26","type":""}],"src":"1320:203:26"},{"body":{"nodeType":"YulBlock","src":"1598:110:26","statements":[{"body":{"nodeType":"YulBlock","src":"1644:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1653:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1656:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1646:6:26"},"nodeType":"YulFunctionCall","src":"1646:12:26"},"nodeType":"YulExpressionStatement","src":"1646:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1619:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"1628:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1615:3:26"},"nodeType":"YulFunctionCall","src":"1615:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"1640:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1611:3:26"},"nodeType":"YulFunctionCall","src":"1611:32:26"},"nodeType":"YulIf","src":"1608:52:26"},{"nodeType":"YulAssignment","src":"1669:33:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1692:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1679:12:26"},"nodeType":"YulFunctionCall","src":"1679:23:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1669:6:26"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1564:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1575:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1587:6:26","type":""}],"src":"1528:180:26"},{"body":{"nodeType":"YulBlock","src":"1814:76:26","statements":[{"nodeType":"YulAssignment","src":"1824:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1836:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1847:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1832:3:26"},"nodeType":"YulFunctionCall","src":"1832:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1824:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1866:9:26"},{"name":"value0","nodeType":"YulIdentifier","src":"1877:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1859:6:26"},"nodeType":"YulFunctionCall","src":"1859:25:26"},"nodeType":"YulExpressionStatement","src":"1859:25:26"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1783:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1794:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1805:4:26","type":""}],"src":"1713:177:26"},{"body":{"nodeType":"YulBlock","src":"1965:177:26","statements":[{"body":{"nodeType":"YulBlock","src":"2011:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2020:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2023:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2013:6:26"},"nodeType":"YulFunctionCall","src":"2013:12:26"},"nodeType":"YulExpressionStatement","src":"2013:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1986:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"1995:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1982:3:26"},"nodeType":"YulFunctionCall","src":"1982:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"2007:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1978:3:26"},"nodeType":"YulFunctionCall","src":"1978:32:26"},"nodeType":"YulIf","src":"1975:52:26"},{"nodeType":"YulVariableDeclaration","src":"2036:36:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2062:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2049:12:26"},"nodeType":"YulFunctionCall","src":"2049:23:26"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2040:5:26","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2106:5:26"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2081:24:26"},"nodeType":"YulFunctionCall","src":"2081:31:26"},"nodeType":"YulExpressionStatement","src":"2081:31:26"},{"nodeType":"YulAssignment","src":"2121:15:26","value":{"name":"value","nodeType":"YulIdentifier","src":"2131:5:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2121:6:26"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1931:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1942:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1954:6:26","type":""}],"src":"1895:247:26"},{"body":{"nodeType":"YulBlock","src":"2234:161:26","statements":[{"body":{"nodeType":"YulBlock","src":"2280:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2289:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2292:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2282:6:26"},"nodeType":"YulFunctionCall","src":"2282:12:26"},"nodeType":"YulExpressionStatement","src":"2282:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2255:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2264:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2251:3:26"},"nodeType":"YulFunctionCall","src":"2251:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"2276:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2247:3:26"},"nodeType":"YulFunctionCall","src":"2247:32:26"},"nodeType":"YulIf","src":"2244:52:26"},{"nodeType":"YulAssignment","src":"2305:33:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2328:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2315:12:26"},"nodeType":"YulFunctionCall","src":"2315:23:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2305:6:26"}]},{"nodeType":"YulAssignment","src":"2347:42:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2374:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2385:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2370:3:26"},"nodeType":"YulFunctionCall","src":"2370:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2357:12:26"},"nodeType":"YulFunctionCall","src":"2357:32:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2347:6:26"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2192:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2203:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2215:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2223:6:26","type":""}],"src":"2147:248:26"},{"body":{"nodeType":"YulBlock","src":"2529:190:26","statements":[{"nodeType":"YulAssignment","src":"2539:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2551:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2562:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2547:3:26"},"nodeType":"YulFunctionCall","src":"2547:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2539:4:26"}]},{"nodeType":"YulVariableDeclaration","src":"2574:44:26","value":{"kind":"number","nodeType":"YulLiteral","src":"2584:34:26","type":"","value":"0xffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2578:2:26","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2634:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2649:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"2657:2:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2645:3:26"},"nodeType":"YulFunctionCall","src":"2645:15:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2627:6:26"},"nodeType":"YulFunctionCall","src":"2627:34:26"},"nodeType":"YulExpressionStatement","src":"2627:34:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2681:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2692:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2677:3:26"},"nodeType":"YulFunctionCall","src":"2677:18:26"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2701:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"2709:2:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2697:3:26"},"nodeType":"YulFunctionCall","src":"2697:15:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2670:6:26"},"nodeType":"YulFunctionCall","src":"2670:43:26"},"nodeType":"YulExpressionStatement","src":"2670:43:26"}]},"name":"abi_encode_tuple_t_uint128_t_uint128__to_t_uint128_t_uint128__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2490:9:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2501:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2509:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2520:4:26","type":""}],"src":"2400:319:26"},{"body":{"nodeType":"YulBlock","src":"2756:95:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2773:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2780:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2785:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2776:3:26"},"nodeType":"YulFunctionCall","src":"2776:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2766:6:26"},"nodeType":"YulFunctionCall","src":"2766:31:26"},"nodeType":"YulExpressionStatement","src":"2766:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2813:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2816:4:26","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2806:6:26"},"nodeType":"YulFunctionCall","src":"2806:15:26"},"nodeType":"YulExpressionStatement","src":"2806:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2837:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2840:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2830:6:26"},"nodeType":"YulFunctionCall","src":"2830:15:26"},"nodeType":"YulExpressionStatement","src":"2830:15:26"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2724:127:26"},{"body":{"nodeType":"YulBlock","src":"2951:1020:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2961:12:26","value":{"kind":"number","nodeType":"YulLiteral","src":"2971:2:26","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2965:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3018:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3027:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3030:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3020:6:26"},"nodeType":"YulFunctionCall","src":"3020:12:26"},"nodeType":"YulExpressionStatement","src":"3020:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2993:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"3002:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2989:3:26"},"nodeType":"YulFunctionCall","src":"2989:23:26"},{"name":"_1","nodeType":"YulIdentifier","src":"3014:2:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2985:3:26"},"nodeType":"YulFunctionCall","src":"2985:32:26"},"nodeType":"YulIf","src":"2982:52:26"},{"nodeType":"YulVariableDeclaration","src":"3043:37:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3070:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3057:12:26"},"nodeType":"YulFunctionCall","src":"3057:23:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3047:6:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3089:28:26","value":{"kind":"number","nodeType":"YulLiteral","src":"3099:18:26","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3093:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3144:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3153:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3156:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3146:6:26"},"nodeType":"YulFunctionCall","src":"3146:12:26"},"nodeType":"YulExpressionStatement","src":"3146:12:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3132:6:26"},{"name":"_2","nodeType":"YulIdentifier","src":"3140:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3129:2:26"},"nodeType":"YulFunctionCall","src":"3129:14:26"},"nodeType":"YulIf","src":"3126:34:26"},{"nodeType":"YulVariableDeclaration","src":"3169:32:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3183:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3194:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3179:3:26"},"nodeType":"YulFunctionCall","src":"3179:22:26"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3173:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3249:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3258:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3261:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3251:6:26"},"nodeType":"YulFunctionCall","src":"3251:12:26"},"nodeType":"YulExpressionStatement","src":"3251:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3228:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"3232:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3224:3:26"},"nodeType":"YulFunctionCall","src":"3224:13:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3239:7:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3220:3:26"},"nodeType":"YulFunctionCall","src":"3220:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3213:6:26"},"nodeType":"YulFunctionCall","src":"3213:35:26"},"nodeType":"YulIf","src":"3210:55:26"},{"nodeType":"YulVariableDeclaration","src":"3274:26:26","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3297:2:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3284:12:26"},"nodeType":"YulFunctionCall","src":"3284:16:26"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"3278:2:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3323:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3325:16:26"},"nodeType":"YulFunctionCall","src":"3325:18:26"},"nodeType":"YulExpressionStatement","src":"3325:18:26"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"3315:2:26"},{"name":"_2","nodeType":"YulIdentifier","src":"3319:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3312:2:26"},"nodeType":"YulFunctionCall","src":"3312:10:26"},"nodeType":"YulIf","src":"3309:36:26"},{"nodeType":"YulVariableDeclaration","src":"3354:20:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3368:1:26","type":"","value":"5"},{"name":"_4","nodeType":"YulIdentifier","src":"3371:2:26"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3364:3:26"},"nodeType":"YulFunctionCall","src":"3364:10:26"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"3358:2:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3383:23:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3403:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3397:5:26"},"nodeType":"YulFunctionCall","src":"3397:9:26"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3387:6:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3415:56:26","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3437:6:26"},{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"3453:2:26"},{"kind":"number","nodeType":"YulLiteral","src":"3457:2:26","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3449:3:26"},"nodeType":"YulFunctionCall","src":"3449:11:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3466:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3462:3:26"},"nodeType":"YulFunctionCall","src":"3462:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3445:3:26"},"nodeType":"YulFunctionCall","src":"3445:25:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3433:3:26"},"nodeType":"YulFunctionCall","src":"3433:38:26"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"3419:10:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3530:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3532:16:26"},"nodeType":"YulFunctionCall","src":"3532:18:26"},"nodeType":"YulExpressionStatement","src":"3532:18:26"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3489:10:26"},{"name":"_2","nodeType":"YulIdentifier","src":"3501:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3486:2:26"},"nodeType":"YulFunctionCall","src":"3486:18:26"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3509:10:26"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3521:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3506:2:26"},"nodeType":"YulFunctionCall","src":"3506:22:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3483:2:26"},"nodeType":"YulFunctionCall","src":"3483:46:26"},"nodeType":"YulIf","src":"3480:72:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3568:2:26","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3572:10:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3561:6:26"},"nodeType":"YulFunctionCall","src":"3561:22:26"},"nodeType":"YulExpressionStatement","src":"3561:22:26"},{"nodeType":"YulVariableDeclaration","src":"3592:17:26","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3603:6:26"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3596:3:26","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3625:6:26"},{"name":"_4","nodeType":"YulIdentifier","src":"3633:2:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3618:6:26"},"nodeType":"YulFunctionCall","src":"3618:18:26"},"nodeType":"YulExpressionStatement","src":"3618:18:26"},{"nodeType":"YulAssignment","src":"3645:22:26","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3656:6:26"},{"name":"_1","nodeType":"YulIdentifier","src":"3664:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3652:3:26"},"nodeType":"YulFunctionCall","src":"3652:15:26"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3645:3:26"}]},{"nodeType":"YulVariableDeclaration","src":"3676:34:26","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3698:2:26"},{"name":"_5","nodeType":"YulIdentifier","src":"3702:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3694:3:26"},"nodeType":"YulFunctionCall","src":"3694:11:26"},{"name":"_1","nodeType":"YulIdentifier","src":"3707:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3690:3:26"},"nodeType":"YulFunctionCall","src":"3690:20:26"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3680:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3742:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3751:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3754:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3744:6:26"},"nodeType":"YulFunctionCall","src":"3744:12:26"},"nodeType":"YulExpressionStatement","src":"3744:12:26"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3725:6:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3733:7:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3722:2:26"},"nodeType":"YulFunctionCall","src":"3722:19:26"},"nodeType":"YulIf","src":"3719:39:26"},{"nodeType":"YulVariableDeclaration","src":"3767:22:26","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3782:2:26"},{"name":"_1","nodeType":"YulIdentifier","src":"3786:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3778:3:26"},"nodeType":"YulFunctionCall","src":"3778:11:26"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3771:3:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3854:86:26","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3875:3:26"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3893:3:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3880:12:26"},"nodeType":"YulFunctionCall","src":"3880:17:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3868:6:26"},"nodeType":"YulFunctionCall","src":"3868:30:26"},"nodeType":"YulExpressionStatement","src":"3868:30:26"},{"nodeType":"YulAssignment","src":"3911:19:26","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3922:3:26"},{"name":"_1","nodeType":"YulIdentifier","src":"3927:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3918:3:26"},"nodeType":"YulFunctionCall","src":"3918:12:26"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3911:3:26"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3809:3:26"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3814:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3806:2:26"},"nodeType":"YulFunctionCall","src":"3806:15:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3822:23:26","statements":[{"nodeType":"YulAssignment","src":"3824:19:26","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3835:3:26"},{"name":"_1","nodeType":"YulIdentifier","src":"3840:2:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3831:3:26"},"nodeType":"YulFunctionCall","src":"3831:12:26"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3824:3:26"}]}]},"pre":{"nodeType":"YulBlock","src":"3802:3:26","statements":[]},"src":"3798:142:26"},{"nodeType":"YulAssignment","src":"3949:16:26","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3959:6:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3949:6:26"}]}]},"name":"abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2917:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2928:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2940:6:26","type":""}],"src":"2856:1115:26"},{"body":{"nodeType":"YulBlock","src":"4057:170:26","statements":[{"body":{"nodeType":"YulBlock","src":"4103:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4112:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4115:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4105:6:26"},"nodeType":"YulFunctionCall","src":"4105:12:26"},"nodeType":"YulExpressionStatement","src":"4105:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4078:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"4087:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4074:3:26"},"nodeType":"YulFunctionCall","src":"4074:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"4099:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4070:3:26"},"nodeType":"YulFunctionCall","src":"4070:32:26"},"nodeType":"YulIf","src":"4067:52:26"},{"nodeType":"YulVariableDeclaration","src":"4128:29:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4147:9:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4141:5:26"},"nodeType":"YulFunctionCall","src":"4141:16:26"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4132:5:26","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4191:5:26"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4166:24:26"},"nodeType":"YulFunctionCall","src":"4166:31:26"},"nodeType":"YulExpressionStatement","src":"4166:31:26"},{"nodeType":"YulAssignment","src":"4206:15:26","value":{"name":"value","nodeType":"YulIdentifier","src":"4216:5:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4206:6:26"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4023:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4034:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4046:6:26","type":""}],"src":"3976:251:26"},{"body":{"nodeType":"YulBlock","src":"4406:166:26","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4423:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4434:2:26","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4416:6:26"},"nodeType":"YulFunctionCall","src":"4416:21:26"},"nodeType":"YulExpressionStatement","src":"4416:21:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4457:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4468:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4453:3:26"},"nodeType":"YulFunctionCall","src":"4453:18:26"},{"kind":"number","nodeType":"YulLiteral","src":"4473:2:26","type":"","value":"16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4446:6:26"},"nodeType":"YulFunctionCall","src":"4446:30:26"},"nodeType":"YulExpressionStatement","src":"4446:30:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4496:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4507:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4492:3:26"},"nodeType":"YulFunctionCall","src":"4492:18:26"},{"hexValue":"496e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"4512:18:26","type":"","value":"Invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4485:6:26"},"nodeType":"YulFunctionCall","src":"4485:46:26"},"nodeType":"YulExpressionStatement","src":"4485:46:26"},{"nodeType":"YulAssignment","src":"4540:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4552:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4563:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4548:3:26"},"nodeType":"YulFunctionCall","src":"4548:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4540:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_b44e5a2e76d616f71f124d91f8560c46215c55a45ba6a1b6e492edf2295dcc48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4383:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4397:4:26","type":""}],"src":"4232:340:26"},{"body":{"nodeType":"YulBlock","src":"4609:95:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4626:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4633:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4638:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4629:3:26"},"nodeType":"YulFunctionCall","src":"4629:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4619:6:26"},"nodeType":"YulFunctionCall","src":"4619:31:26"},"nodeType":"YulExpressionStatement","src":"4619:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4666:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4669:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4659:6:26"},"nodeType":"YulFunctionCall","src":"4659:15:26"},"nodeType":"YulExpressionStatement","src":"4659:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4690:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4693:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4683:6:26"},"nodeType":"YulFunctionCall","src":"4683:15:26"},"nodeType":"YulExpressionStatement","src":"4683:15:26"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"4577:127:26"},{"body":{"nodeType":"YulBlock","src":"4757:149:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4767:44:26","value":{"kind":"number","nodeType":"YulLiteral","src":"4777:34:26","type":"","value":"0xffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4771:2:26","type":""}]},{"nodeType":"YulAssignment","src":"4820:34:26","value":{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4835:1:26"},{"name":"_1","nodeType":"YulIdentifier","src":"4838:2:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4831:3:26"},"nodeType":"YulFunctionCall","src":"4831:10:26"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"4847:1:26"},{"name":"_1","nodeType":"YulIdentifier","src":"4850:2:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4843:3:26"},"nodeType":"YulFunctionCall","src":"4843:10:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4827:3:26"},"nodeType":"YulFunctionCall","src":"4827:27:26"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"4820:3:26"}]},{"body":{"nodeType":"YulBlock","src":"4878:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4880:16:26"},"nodeType":"YulFunctionCall","src":"4880:18:26"},"nodeType":"YulExpressionStatement","src":"4880:18:26"}]},"condition":{"arguments":[{"name":"sum","nodeType":"YulIdentifier","src":"4869:3:26"},{"name":"_1","nodeType":"YulIdentifier","src":"4874:2:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4866:2:26"},"nodeType":"YulFunctionCall","src":"4866:11:26"},"nodeType":"YulIf","src":"4863:37:26"}]},"name":"checked_add_t_uint128","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"4740:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"4743:1:26","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"4749:3:26","type":""}],"src":"4709:197:26"},{"body":{"nodeType":"YulBlock","src":"4960:79:26","statements":[{"nodeType":"YulAssignment","src":"4970:17:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4982:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"4985:1:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4978:3:26"},"nodeType":"YulFunctionCall","src":"4978:9:26"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"4970:4:26"}]},{"body":{"nodeType":"YulBlock","src":"5011:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5013:16:26"},"nodeType":"YulFunctionCall","src":"5013:18:26"},"nodeType":"YulExpressionStatement","src":"5013:18:26"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"5002:4:26"},{"name":"x","nodeType":"YulIdentifier","src":"5008:1:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4999:2:26"},"nodeType":"YulFunctionCall","src":"4999:11:26"},"nodeType":"YulIf","src":"4996:37:26"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"4942:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"4945:1:26","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"4951:4:26","type":""}],"src":"4911:128:26"},{"body":{"nodeType":"YulBlock","src":"5076:95:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5093:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5100:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5105:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5096:3:26"},"nodeType":"YulFunctionCall","src":"5096:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5086:6:26"},"nodeType":"YulFunctionCall","src":"5086:31:26"},"nodeType":"YulExpressionStatement","src":"5086:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5133:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5136:4:26","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5126:6:26"},"nodeType":"YulFunctionCall","src":"5126:15:26"},"nodeType":"YulExpressionStatement","src":"5126:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5157:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5160:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5150:6:26"},"nodeType":"YulFunctionCall","src":"5150:15:26"},"nodeType":"YulExpressionStatement","src":"5150:15:26"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"5044:127:26"},{"body":{"nodeType":"YulBlock","src":"5224:77:26","statements":[{"nodeType":"YulAssignment","src":"5234:16:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5245:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"5248:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5241:3:26"},"nodeType":"YulFunctionCall","src":"5241:9:26"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"5234:3:26"}]},{"body":{"nodeType":"YulBlock","src":"5273:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5275:16:26"},"nodeType":"YulFunctionCall","src":"5275:18:26"},"nodeType":"YulExpressionStatement","src":"5275:18:26"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5265:1:26"},{"name":"sum","nodeType":"YulIdentifier","src":"5268:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5262:2:26"},"nodeType":"YulFunctionCall","src":"5262:10:26"},"nodeType":"YulIf","src":"5259:36:26"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5207:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"5210:1:26","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"5216:3:26","type":""}],"src":"5176:125:26"},{"body":{"nodeType":"YulBlock","src":"5435:160:26","statements":[{"nodeType":"YulAssignment","src":"5445:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5457:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"5468:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5453:3:26"},"nodeType":"YulFunctionCall","src":"5453:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5445:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5487:9:26"},{"name":"value0","nodeType":"YulIdentifier","src":"5498:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5480:6:26"},"nodeType":"YulFunctionCall","src":"5480:25:26"},"nodeType":"YulExpressionStatement","src":"5480:25:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5525:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"5536:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5521:3:26"},"nodeType":"YulFunctionCall","src":"5521:18:26"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5545:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"5553:34:26","type":"","value":"0xffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5541:3:26"},"nodeType":"YulFunctionCall","src":"5541:47:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5514:6:26"},"nodeType":"YulFunctionCall","src":"5514:75:26"},"nodeType":"YulExpressionStatement","src":"5514:75:26"}]},"name":"abi_encode_tuple_t_uint256_t_uint128__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5396:9:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5407:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5415:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5426:4:26","type":""}],"src":"5306:289:26"},{"body":{"nodeType":"YulBlock","src":"5647:88:26","statements":[{"body":{"nodeType":"YulBlock","src":"5678:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5680:16:26"},"nodeType":"YulFunctionCall","src":"5680:18:26"},"nodeType":"YulExpressionStatement","src":"5680:18:26"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5663:5:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5674:1:26","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5670:3:26"},"nodeType":"YulFunctionCall","src":"5670:6:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5660:2:26"},"nodeType":"YulFunctionCall","src":"5660:17:26"},"nodeType":"YulIf","src":"5657:43:26"},{"nodeType":"YulAssignment","src":"5709:20:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5720:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"5727:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5716:3:26"},"nodeType":"YulFunctionCall","src":"5716:13:26"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5709:3:26"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5629:5:26","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5639:3:26","type":""}],"src":"5600:135:26"},{"body":{"nodeType":"YulBlock","src":"5848:101:26","statements":[{"nodeType":"YulAssignment","src":"5858:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5870:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"5881:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5866:3:26"},"nodeType":"YulFunctionCall","src":"5866:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5858:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5900:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5915:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"5923:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5911:3:26"},"nodeType":"YulFunctionCall","src":"5911:31:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5893:6:26"},"nodeType":"YulFunctionCall","src":"5893:50:26"},"nodeType":"YulExpressionStatement","src":"5893:50:26"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5817:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5828:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5839:4:26","type":""}],"src":"5740:209:26"},{"body":{"nodeType":"YulBlock","src":"6083:145:26","statements":[{"nodeType":"YulAssignment","src":"6093:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6105:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"6116:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6101:3:26"},"nodeType":"YulFunctionCall","src":"6101:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6093:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6135:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6150:6:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6166:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"6171:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6162:3:26"},"nodeType":"YulFunctionCall","src":"6162:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"6175:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6158:3:26"},"nodeType":"YulFunctionCall","src":"6158:19:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6146:3:26"},"nodeType":"YulFunctionCall","src":"6146:32:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6128:6:26"},"nodeType":"YulFunctionCall","src":"6128:51:26"},"nodeType":"YulExpressionStatement","src":"6128:51:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6199:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"6210:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6195:3:26"},"nodeType":"YulFunctionCall","src":"6195:18:26"},{"name":"value1","nodeType":"YulIdentifier","src":"6215:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6188:6:26"},"nodeType":"YulFunctionCall","src":"6188:34:26"},"nodeType":"YulExpressionStatement","src":"6188:34:26"}]},"name":"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6044:9:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6055:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6063:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6074:4:26","type":""}],"src":"5954:274:26"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint128_t_uint128__to_t_uint128_t_uint128__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), not(31)))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _4)\n        dst := add(memPtr, _1)\n        let srcEnd := add(add(_3, _5), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _1)\n        }\n        value0 := memPtr\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_b44e5a2e76d616f71f124d91f8560c46215c55a45ba6a1b6e492edf2295dcc48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Invalid token ID\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint128(x, y) -> sum\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffff\n        sum := add(and(x, _1), and(y, _1))\n        if gt(sum, _1) { panic_error_0x11() }\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_uint256_t_uint128__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffff))\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n}","id":26,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101585760003560e01c806391d14854116100c3578063d011645c1161007c578063d011645c1461035a578063d53913931461036d578063d547741f14610394578063e58378bb146103a7578063e63ab1e9146103ce578063eca83c03146103e357600080fd5b806391d1485414610295578063953b6a91146102a8578063a217fddf146102bb578063c2118451146102c3578063c4d66de814610317578063c995a3b31461032a57600080fd5b806354b526741161011557806354b52674146102015780635c75cadb146102145780635c975abb1461022757806375b238fc1461023f5780638456cb59146102665780638f2967591461026e57600080fd5b806301ffc9a71461015d578063248a9ca3146101855780632f2ff15d146101a657806336568abe146101bb578063384d10ee146101ce5780633f4ba83a146101f9575b600080fd5b61017061016b366004610f39565b6103f6565b60405190151581526020015b60405180910390f35b610198610193366004610f6a565b61042d565b60405190815260200161017c565b6101b96101b4366004610f98565b61044f565b005b6101b96101c9366004610f98565b610471565b6034546101e1906001600160a01b031681565b6040516001600160a01b03909116815260200161017c565b6101b96104a9565b61019861020f366004610f6a565b6104cc565b6101b9610222366004610fc8565b6104ed565b6000805160206111c48339815191525460ff16610170565b6101987fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6101b961053a565b6101987f35af5b5a3fb4c88a8cb5e26e8a68a53cc8f6cafcc4000a1db1ae5753e25a168e81565b6101706102a3366004610f98565b61055a565b6101b96102b6366004610fe5565b610592565b610198600081565b6102f76102d1366004610f6a565b6032602052600090815260409020546001600160801b0380821691600160801b90041682565b604080516001600160801b0393841681529290911660208301520161017c565b6101b9610325366004610fc8565b610847565b610198610338366004610f6a565b600090815260326020526040902054600160801b90046001600160801b031690565b610198610368366004610f6a565b610a13565b6101987f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6101b96103a2366004610f98565b610a55565b6101987fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e81565b61019860008051602061118483398151915281565b6101b96103f136600461101d565b610a71565b60006001600160e01b03198216637965db0b60e01b148061042757506301ffc9a760e01b6001600160e01b03198316145b92915050565b60009081526000805160206111a4833981519152602052604090206001015490565b6104588261042d565b61046181610aae565b61046b8383610ab8565b50505050565b6001600160a01b038116331461049a5760405163334bd91960e11b815260040160405180910390fd5b6104a48282610b64565b505050565b6000805160206111848339815191526104c181610aae565b6104c9610be0565b50565b603381815481106104dc57600080fd5b600091825260209091200154905081565b7fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e61051781610aae565b50603480546001600160a01b0319166001600160a01b0392909216919091179055565b60008051602061118483398151915261055281610aae565b6104c9610c40565b60009182526000805160206111a4833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b7f35af5b5a3fb4c88a8cb5e26e8a68a53cc8f6cafcc4000a1db1ae5753e25a168e6105bc81610aae565b6034546040516331a9108f60e11b8152600481018590526000916001600160a01b031690636352211e90602401602060405180830381865afa158015610606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062a91906110db565b6001600160a01b0316036106785760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081d1bdad95b88125160821b60448201526064015b60405180910390fd5b60008381526032602052604090208054839082906010906106aa908490600160801b90046001600160801b031661110e565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555060016033805490506106e0919061112e565b81546001600160801b0316106107095760405163921c7d5f60e01b815260040160405180910390fd5b603380546107199060019061112e565b8154811061072957610729611141565b6000918252602090912001548154600160801b90046001600160801b031611156107665760405163921c7d5f60e01b815260040160405180910390fd5b80546001600160801b0316600061077e826001611157565b90505b60335481101561083f576033818154811061079e5761079e611141565b6000918252602090912001548354600160801b90046001600160801b03161061082d5782546fffffffffffffffffffffffffffffffff19166001600160801b038281169190911780855560408051848152600160801b909204909216602082015287917f66833f6d7d7a01eaed9fb21eb9cc54f0fb9497fa9251a6c0773372c8d3e0aa0c910160405180910390a25b806108378161116a565b915050610781565b505050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff1660008115801561088d5750825b905060008267ffffffffffffffff1660011480156108aa5750303b155b9050811580156108b8575080155b156108d65760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561090057845460ff60401b1916600160401b1785555b61090986610c89565b603380546001818101835560008381527f82a75bdeeae8604d839476ae9efd8b0e15aa447e21bfd7f41283bb54e22c9a8292830181905583548083018555830155825480820184556064908301558254808201845560c8908301558254808201845561012c908301558254808201845561019090830155825480820184556101f4908301558254808201845561025890830155825480820184556102bc90830155825480820184556103209083015582549081019092556103e8910155831561083f57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a1505050505050565b6000818152603260205260408120546001600160801b03168103610a3957506001919050565b506000908152603260205260409020546001600160801b031690565b610a5e8261042d565b610a6781610aae565b61046b8383610b64565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610a9b81610aae565b81516104a4906033906020850190610ed9565b6104c98133610d7d565b60006000805160206111a4833981519152610ad3848461055a565b610b53576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055610b093390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610427565b6000915050610427565b5092915050565b60006000805160206111a4833981519152610b7f848461055a565b15610b53576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46001915050610427565b610be8610db6565b6000805160206111c4833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b610c48610de8565b6000805160206111c4833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833610c22565b610c91610e19565b610c99610e62565b610ca1610e72565b610ca9610e7a565b610cb4600082610ab8565b50610ccd60008051602061118483398151915282610ab8565b50610cf87fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e82610ab8565b50610d237f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a682610ab8565b50610d4e7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582610ab8565b50610d797f35af5b5a3fb4c88a8cb5e26e8a68a53cc8f6cafcc4000a1db1ae5753e25a168e82610ab8565b5050565b610d87828261055a565b610d795760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161066f565b6000805160206111c48339815191525460ff16610de657604051638dfc202b60e01b815260040160405180910390fd5b565b6000805160206111c48339815191525460ff1615610de65760405163d93c066560e01b815260040160405180910390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610de657604051631afcd79f60e31b815260040160405180910390fd5b610e6a610e19565b610de6610e8a565b610de6610e19565b610e82610e19565b610de6610eab565b610e92610e19565b6000805160206111c4833981519152805460ff19169055565b610eb3610e19565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b828054828255906000526020600020908101928215610f14579160200282015b82811115610f14578251825591602001919060010190610ef9565b50610f20929150610f24565b5090565b5b80821115610f205760008155600101610f25565b600060208284031215610f4b57600080fd5b81356001600160e01b031981168114610f6357600080fd5b9392505050565b600060208284031215610f7c57600080fd5b5035919050565b6001600160a01b03811681146104c957600080fd5b60008060408385031215610fab57600080fd5b823591506020830135610fbd81610f83565b809150509250929050565b600060208284031215610fda57600080fd5b8135610f6381610f83565b60008060408385031215610ff857600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561103057600080fd5b823567ffffffffffffffff8082111561104857600080fd5b818501915085601f83011261105c57600080fd5b81358181111561106e5761106e611007565b8060051b604051601f19603f8301168101818110858211171561109357611093611007565b6040529182528482019250838101850191888311156110b157600080fd5b938501935b828510156110cf578435845293850193928501926110b6565b98975050505050505050565b6000602082840312156110ed57600080fd5b8151610f6381610f83565b634e487b7160e01b600052601160045260246000fd5b6001600160801b03818116838216019080821115610b5d57610b5d6110f8565b81810381811115610427576104276110f8565b634e487b7160e01b600052603260045260246000fd5b80820180821115610427576104276110f8565b60006001820161117c5761117c6110f8565b506001019056fe65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300a2646970667358221220cd63e355603c16913abe85f6af86804f3b8fb2dd8f3a368f0f57135ca24d849664736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x158 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x91D14854 GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xD011645C GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xD011645C EQ PUSH2 0x35A JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x36D JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x394 JUMPI DUP1 PUSH4 0xE58378BB EQ PUSH2 0x3A7 JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0x3CE JUMPI DUP1 PUSH4 0xECA83C03 EQ PUSH2 0x3E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x91D14854 EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x953B6A91 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0xC2118451 EQ PUSH2 0x2C3 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x317 JUMPI DUP1 PUSH4 0xC995A3B3 EQ PUSH2 0x32A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x54B52674 GT PUSH2 0x115 JUMPI DUP1 PUSH4 0x54B52674 EQ PUSH2 0x201 JUMPI DUP1 PUSH4 0x5C75CADB EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x23F JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x266 JUMPI DUP1 PUSH4 0x8F296759 EQ PUSH2 0x26E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x185 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x384D10EE EQ PUSH2 0x1CE JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x1F9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x170 PUSH2 0x16B CALLDATASIZE PUSH1 0x4 PUSH2 0xF39 JUMP JUMPDEST PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x198 PUSH2 0x193 CALLDATASIZE PUSH1 0x4 PUSH2 0xF6A JUMP JUMPDEST PUSH2 0x42D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x17C JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x1B4 CALLDATASIZE PUSH1 0x4 PUSH2 0xF98 JUMP JUMPDEST PUSH2 0x44F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B9 PUSH2 0x1C9 CALLDATASIZE PUSH1 0x4 PUSH2 0xF98 JUMP JUMPDEST PUSH2 0x471 JUMP JUMPDEST PUSH1 0x34 SLOAD PUSH2 0x1E1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x17C JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x4A9 JUMP JUMPDEST PUSH2 0x198 PUSH2 0x20F CALLDATASIZE PUSH1 0x4 PUSH2 0xF6A JUMP JUMPDEST PUSH2 0x4CC JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x222 CALLDATASIZE PUSH1 0x4 PUSH2 0xFC8 JUMP JUMPDEST PUSH2 0x4ED JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11C4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND PUSH2 0x170 JUMP JUMPDEST PUSH2 0x198 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x53A JUMP JUMPDEST PUSH2 0x198 PUSH32 0x35AF5B5A3FB4C88A8CB5E26E8A68A53CC8F6CAFCC4000A1DB1AE5753E25A168E DUP2 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x2A3 CALLDATASIZE PUSH1 0x4 PUSH2 0xF98 JUMP JUMPDEST PUSH2 0x55A JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x2B6 CALLDATASIZE PUSH1 0x4 PUSH2 0xFE5 JUMP JUMPDEST PUSH2 0x592 JUMP JUMPDEST PUSH2 0x198 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x2F7 PUSH2 0x2D1 CALLDATASIZE PUSH1 0x4 PUSH2 0xF6A JUMP JUMPDEST PUSH1 0x32 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP1 DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV AND DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x17C JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x325 CALLDATASIZE PUSH1 0x4 PUSH2 0xFC8 JUMP JUMPDEST PUSH2 0x847 JUMP JUMPDEST PUSH2 0x198 PUSH2 0x338 CALLDATASIZE PUSH1 0x4 PUSH2 0xF6A JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x32 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x198 PUSH2 0x368 CALLDATASIZE PUSH1 0x4 PUSH2 0xF6A JUMP JUMPDEST PUSH2 0xA13 JUMP JUMPDEST PUSH2 0x198 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x3A2 CALLDATASIZE PUSH1 0x4 PUSH2 0xF98 JUMP JUMPDEST PUSH2 0xA55 JUMP JUMPDEST PUSH2 0x198 PUSH32 0xB19546DFF01E856FB3F010C267A7B1C60363CF8A4664E21CC89C26224620214E DUP2 JUMP JUMPDEST PUSH2 0x198 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1184 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x3F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x101D JUMP JUMPDEST PUSH2 0xA71 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x427 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11A4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x458 DUP3 PUSH2 0x42D JUMP JUMPDEST PUSH2 0x461 DUP2 PUSH2 0xAAE JUMP JUMPDEST PUSH2 0x46B DUP4 DUP4 PUSH2 0xAB8 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x49A JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4A4 DUP3 DUP3 PUSH2 0xB64 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1184 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x4C1 DUP2 PUSH2 0xAAE JUMP JUMPDEST PUSH2 0x4C9 PUSH2 0xBE0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x33 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x4DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH32 0xB19546DFF01E856FB3F010C267A7B1C60363CF8A4664E21CC89C26224620214E PUSH2 0x517 DUP2 PUSH2 0xAAE JUMP JUMPDEST POP PUSH1 0x34 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1184 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x552 DUP2 PUSH2 0xAAE JUMP JUMPDEST PUSH2 0x4C9 PUSH2 0xC40 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11A4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH32 0x35AF5B5A3FB4C88A8CB5E26E8A68A53CC8F6CAFCC4000A1DB1AE5753E25A168E PUSH2 0x5BC DUP2 PUSH2 0xAAE JUMP JUMPDEST PUSH1 0x34 SLOAD PUSH1 0x40 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x606 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x62A SWAP2 SWAP1 PUSH2 0x10DB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x678 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x125B9D985B1A59081D1BDAD95B881251 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x32 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP4 SWAP1 DUP3 SWAP1 PUSH1 0x10 SWAP1 PUSH2 0x6AA SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x110E JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x33 DUP1 SLOAD SWAP1 POP PUSH2 0x6E0 SWAP2 SWAP1 PUSH2 0x112E JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT PUSH2 0x709 JUMPI PUSH1 0x40 MLOAD PUSH4 0x921C7D5F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH2 0x719 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x112E JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x729 JUMPI PUSH2 0x729 PUSH2 0x1141 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD DUP2 SLOAD PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT ISZERO PUSH2 0x766 JUMPI PUSH1 0x40 MLOAD PUSH4 0x921C7D5F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x0 PUSH2 0x77E DUP3 PUSH1 0x1 PUSH2 0x1157 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x33 SLOAD DUP2 LT ISZERO PUSH2 0x83F JUMPI PUSH1 0x33 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x79E JUMPI PUSH2 0x79E PUSH2 0x1141 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD DUP4 SLOAD PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT PUSH2 0x82D JUMPI DUP3 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP3 DUP2 AND SWAP2 SWAP1 SWAP2 OR DUP1 DUP6 SSTORE PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x80 SHL SWAP1 SWAP3 DIV SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE DUP8 SWAP2 PUSH32 0x66833F6D7D7A01EAED9FB21EB9CC54F0FB9497FA9251A6C0773372C8D3E0AA0C SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST DUP1 PUSH2 0x837 DUP2 PUSH2 0x116A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x781 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x88D JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x8AA JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x8B8 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x8D6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x900 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH2 0x909 DUP7 PUSH2 0xC89 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP4 SSTORE PUSH1 0x0 DUP4 DUP2 MSTORE PUSH32 0x82A75BDEEAE8604D839476AE9EFD8B0E15AA447E21BFD7F41283BB54E22C9A82 SWAP3 DUP4 ADD DUP2 SWAP1 SSTORE DUP4 SLOAD DUP1 DUP4 ADD DUP6 SSTORE DUP4 ADD SSTORE DUP3 SLOAD DUP1 DUP3 ADD DUP5 SSTORE PUSH1 0x64 SWAP1 DUP4 ADD SSTORE DUP3 SLOAD DUP1 DUP3 ADD DUP5 SSTORE PUSH1 0xC8 SWAP1 DUP4 ADD SSTORE DUP3 SLOAD DUP1 DUP3 ADD DUP5 SSTORE PUSH2 0x12C SWAP1 DUP4 ADD SSTORE DUP3 SLOAD DUP1 DUP3 ADD DUP5 SSTORE PUSH2 0x190 SWAP1 DUP4 ADD SSTORE DUP3 SLOAD DUP1 DUP3 ADD DUP5 SSTORE PUSH2 0x1F4 SWAP1 DUP4 ADD SSTORE DUP3 SLOAD DUP1 DUP3 ADD DUP5 SSTORE PUSH2 0x258 SWAP1 DUP4 ADD SSTORE DUP3 SLOAD DUP1 DUP3 ADD DUP5 SSTORE PUSH2 0x2BC SWAP1 DUP4 ADD SSTORE DUP3 SLOAD DUP1 DUP3 ADD DUP5 SSTORE PUSH2 0x320 SWAP1 DUP4 ADD SSTORE DUP3 SLOAD SWAP1 DUP2 ADD SWAP1 SWAP3 SSTORE PUSH2 0x3E8 SWAP2 ADD SSTORE DUP4 ISZERO PUSH2 0x83F JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x32 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 SUB PUSH2 0xA39 JUMPI POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x32 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xA5E DUP3 PUSH2 0x42D JUMP JUMPDEST PUSH2 0xA67 DUP2 PUSH2 0xAAE JUMP JUMPDEST PUSH2 0x46B DUP4 DUP4 PUSH2 0xB64 JUMP JUMPDEST PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 PUSH2 0xA9B DUP2 PUSH2 0xAAE JUMP JUMPDEST DUP2 MLOAD PUSH2 0x4A4 SWAP1 PUSH1 0x33 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0xED9 JUMP JUMPDEST PUSH2 0x4C9 DUP2 CALLER PUSH2 0xD7D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11A4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xAD3 DUP5 DUP5 PUSH2 0x55A JUMP JUMPDEST PUSH2 0xB53 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xB09 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x427 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x427 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11A4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xB7F DUP5 DUP5 PUSH2 0x55A JUMP JUMPDEST ISZERO PUSH2 0xB53 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP8 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x427 JUMP JUMPDEST PUSH2 0xBE8 PUSH2 0xDB6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11C4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND DUP2 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0xC48 PUSH2 0xDE8 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11C4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 CALLER PUSH2 0xC22 JUMP JUMPDEST PUSH2 0xC91 PUSH2 0xE19 JUMP JUMPDEST PUSH2 0xC99 PUSH2 0xE62 JUMP JUMPDEST PUSH2 0xCA1 PUSH2 0xE72 JUMP JUMPDEST PUSH2 0xCA9 PUSH2 0xE7A JUMP JUMPDEST PUSH2 0xCB4 PUSH1 0x0 DUP3 PUSH2 0xAB8 JUMP JUMPDEST POP PUSH2 0xCCD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1184 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0xAB8 JUMP JUMPDEST POP PUSH2 0xCF8 PUSH32 0xB19546DFF01E856FB3F010C267A7B1C60363CF8A4664E21CC89C26224620214E DUP3 PUSH2 0xAB8 JUMP JUMPDEST POP PUSH2 0xD23 PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP3 PUSH2 0xAB8 JUMP JUMPDEST POP PUSH2 0xD4E PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP3 PUSH2 0xAB8 JUMP JUMPDEST POP PUSH2 0xD79 PUSH32 0x35AF5B5A3FB4C88A8CB5E26E8A68A53CC8F6CAFCC4000A1DB1AE5753E25A168E DUP3 PUSH2 0xAB8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xD87 DUP3 DUP3 PUSH2 0x55A JUMP JUMPDEST PUSH2 0xD79 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x66F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11C4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND PUSH2 0xDE6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11C4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xDE6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0xDE6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE6A PUSH2 0xE19 JUMP JUMPDEST PUSH2 0xDE6 PUSH2 0xE8A JUMP JUMPDEST PUSH2 0xDE6 PUSH2 0xE19 JUMP JUMPDEST PUSH2 0xE82 PUSH2 0xE19 JUMP JUMPDEST PUSH2 0xDE6 PUSH2 0xEAB JUMP JUMPDEST PUSH2 0xE92 PUSH2 0xE19 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11C4 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xEB3 PUSH2 0xE19 JUMP JUMPDEST PUSH1 0x1 PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 SSTORE JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0xF14 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xF14 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xEF9 JUMP JUMPDEST POP PUSH2 0xF20 SWAP3 SWAP2 POP PUSH2 0xF24 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xF20 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xF25 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xF63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xFBD DUP2 PUSH2 0xF83 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xF63 DUP2 PUSH2 0xF83 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1030 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1048 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x105C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x106E JUMPI PUSH2 0x106E PUSH2 0x1007 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x1093 JUMPI PUSH2 0x1093 PUSH2 0x1007 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x10B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x10CF JUMPI DUP5 CALLDATALOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x10B6 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xF63 DUP2 PUSH2 0xF83 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0xB5D JUMPI PUSH2 0xB5D PUSH2 0x10F8 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x427 JUMPI PUSH2 0x427 PUSH2 0x10F8 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x427 JUMPI PUSH2 0x427 PUSH2 0x10F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x117C JUMPI PUSH2 0x117C PUSH2 0x10F8 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID PUSH6 0xD7A28E3265B3 PUSH27 0x6474929F336521B332C1681B933F6CB9F3376673440D862A02DD7B 0xC7 0xDE 0xC4 0xDC 0xEE 0xDD 0xA7 PUSH22 0xE58DD541E08A116C6C53815C0BD028192F7B626800CD 0x5E 0xD1 0x5C PUSH15 0x187E77E9AEE88184C21F4F2182AB58 0x27 0xCB EXTCODESIZE PUSH31 0x7FBEDCD63F03300A2646970667358221220CD63E355603C16913ABE85F6AF DUP7 DUP1 0x4F EXTCODESIZE DUP16 0xB2 0xDD DUP16 GASPRICE CALLDATASIZE DUP16 0xF JUMPI SGT 0x5C LOG2 0x4D DUP5 SWAP7 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"145:3600:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3443:202:0;;;;;;:::i;:::-;;:::i;:::-;;;470:14:26;;463:22;445:41;;433:2;418:18;3443:202:0;;;;;;;;4759:191;;;;;;:::i;:::-;;:::i;:::-;;;828:25:26;;;816:2;801:18;4759:191:0;682:177:26;5246:136:0;;;;;;:::i;:::-;;:::i;:::-;;6348:245;;;;;;:::i;:::-;;:::i;530:27:24:-;;;;;-1:-1:-1;;;;;530:27:24;;;;;;-1:-1:-1;;;;;1484:32:26;;;1466:51;;1454:2;1439:18;530:27:24;1320:203:26;1612:75:20;;;:::i;467:27:24:-;;;;;;:::i;:::-;;:::i;1899:135::-;;;;;;:::i;:::-;;:::i;2692:145:3:-;-1:-1:-1;;;;;;;;;;;2821:9:3;;;2692:145;;739:60:20;;776:23;739:60;;1535:71;;;:::i;805:64::-;;844:25;805:64;;3732:207:0;;;;;;:::i;:::-;;:::i;2151:1084:24:-;;;;;;:::i;:::-;;:::i;2317:49:0:-;;2362:4;2317:49;;365:55:24;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;365:55:24;;;;-1:-1:-1;;;365:55:24;;;;;;;;;-1:-1:-1;;;;;2645:15:26;;;2627:34;;2697:15;;;;2692:2;2677:18;;2670:43;2547:18;365:55:24;2400:319:26;810:792:24;;;;;;:::i;:::-;;:::i;3622:121::-;;;;;;:::i;:::-;3680:7;3706:27;;;:18;:27;;;;;:30;-1:-1:-1;;;3706:30:24;;-1:-1:-1;;;;;3706:30:24;;3622:121;3313:234;;;;;;:::i;:::-;;:::i;671:62:20:-;;709:24;671:62;;5662:138:0;;;;;;:::i;:::-;;:::i;537:60:20:-;;574:23;537:60;;603:62;;-1:-1:-1;;;;;;;;;;;603:62:20;;1674:146:24;;;;;;:::i;:::-;;:::i;3443:202:0:-;3528:4;-1:-1:-1;;;;;;3551:47:0;;-1:-1:-1;;;3551:47:0;;:87;;-1:-1:-1;;;;;;;;;;1133:40:5;;;3602:36:0;3544:94;3443:202;-1:-1:-1;;3443:202:0:o;4759:191::-;4824:7;4919:14;;;-1:-1:-1;;;;;;;;;;;4919:14:0;;;;;:24;;;;4759:191::o;5246:136::-;5320:18;5333:4;5320:12;:18::i;:::-;3191:16;3202:4;3191:10;:16::i;:::-;5350:25:::1;5361:4;5367:7;5350:10;:25::i;:::-;;5246:136:::0;;;:::o;6348:245::-;-1:-1:-1;;;;;6441:34:0;;966:10:2;6441:34:0;6437:102;;6498:30;;-1:-1:-1;;;6498:30:0;;;;;;;;;;;6437:102;6549:37;6561:4;6567:18;6549:11;:37::i;:::-;;6348:245;;:::o;1612:75:20:-;-1:-1:-1;;;;;;;;;;;3191:16:0;3202:4;3191:10;:16::i;:::-;1670:10:20::1;:8;:10::i;:::-;1612:75:::0;:::o;467:27:24:-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;467:27:24;:::o;1899:135::-;574:23:20;3191:16:0;3202:4;3191:10;:16::i;:::-;-1:-1:-1;1999:12:24::1;:28:::0;;-1:-1:-1;;;;;;1999:28:24::1;-1:-1:-1::0;;;;;1999:28:24;;;::::1;::::0;;;::::1;::::0;;1899:135::o;1535:71:20:-;-1:-1:-1;;;;;;;;;;;3191:16:0;3202:4;3191:10;:16::i;:::-;1591:8:20::1;:6;:8::i;3732:207:0:-:0;3809:4;3901:14;;;-1:-1:-1;;;;;;;;;;;3901:14:0;;;;;;;;-1:-1:-1;;;;;3901:31:0;;;;;;;;;;;;;;;3732:207::o;2151:1084:24:-;844:25:20;3191:16:0;3202:4;3191:10;:16::i;:::-;2338:12:24::1;::::0;2330:38:::1;::::0;-1:-1:-1;;;2330:38:24;;::::1;::::0;::::1;828:25:26::0;;;2380:1:24::1;::::0;-1:-1:-1;;;;;2338:12:24::1;::::0;2330:29:::1;::::0;801:18:26;;2330:38:24::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;2330:52:24::1;::::0;2309:115:::1;;;::::0;-1:-1:-1;;;2309:115:24;;4434:2:26;2309:115:24::1;::::0;::::1;4416:21:26::0;4473:2;4453:18;;;4446:30;-1:-1:-1;;;4492:18:26;;;4485:46;4548:18;;2309:115:24::1;;;;;;;;;2434:27;2464::::0;;;:18:::1;:27;::::0;;;;2532;;2556:2;;2464:27;;2532:12:::1;::::0;:27:::1;::::0;2556:2;;-1:-1:-1;;;2532:27:24;::::1;-1:-1:-1::0;;;;;2532:27:24::1;;:::i;:::-;;;;;;;;-1:-1:-1::0;;;;;2532:27:24::1;;;;;-1:-1:-1::0;;;;;2532:27:24::1;;;;;;2663:1;2643:10;:17;;;;:21;;;;:::i;:::-;2624:15:::0;;-1:-1:-1;;;;;2624:15:24::1;:40;2620:95;;2687:17;;-1:-1:-1::0;;;2687:17:24::1;;;;;;;;;;;2620:95;2786:10;2797:17:::0;;:21:::1;::::0;2817:1:::1;::::0;2797:21:::1;:::i;:::-;2786:33;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;::::1;::::0;2771:12;;-1:-1:-1;;;2771:12:24;::::1;-1:-1:-1::0;;;;;2771:12:24::1;:48;2767:103;;;2842:17;;-1:-1:-1::0;;;2842:17:24::1;;;;;;;;;;;2767:103;2902:15:::0;;-1:-1:-1;;;;;2902:15:24::1;2879:20;3007:16;2902:15:::0;;3007:16:::1;:::i;:::-;2995:28;;2990:239;3029:10;:17:::0;3025:21;::::1;2990:239;;;3087:10;3098:1;3087:13;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;::::1;::::0;3071:12;;-1:-1:-1;;;3071:12:24;::::1;-1:-1:-1::0;;;;;3071:12:24::1;:29;3067:152;;3120:28:::0;;-1:-1:-1;;3120:28:24::1;-1:-1:-1::0;;;;;3120:28:24;;::::1;::::0;;;::::1;::::0;;;3171:33:::1;::::0;;5480:25:26;;;-1:-1:-1;;;3191:12:24;;::::1;::::0;;::::1;5536:2:26::0;5521:18;;5514:75;3179:7:24;;3171:33:::1;::::0;5453:18:26;3171:33:24::1;;;;;;;3067:152;3048:3:::0;::::1;::::0;::::1;:::i;:::-;;;;2990:239;;;;2256:979;;2151:1084:::0;;;:::o;810:792::-;8870:21:1;4302:15;;-1:-1:-1;;;4302:15:1;;;;4301:16;;4348:14;;4158:30;4726:16;;:34;;;;;4746:14;4726:34;4706:54;;4770:17;4790:11;:16;;4805:1;4790:16;:50;;;;-1:-1:-1;4818:4:1;4810:25;:30;4790:50;4770:70;;4856:12;4855:13;:30;;;;;4873:12;4872:13;4855:30;4851:91;;;4908:23;;-1:-1:-1;;;4908:23:1;;;;;;;;;;;4851:91;4951:18;;-1:-1:-1;;4951:18:1;4968:1;4951:18;;;4979:67;;;;5013:22;;-1:-1:-1;;;;5013:22:1;-1:-1:-1;;;5013:22:1;;;4979:67;881:29:24::1;897:12;881:15;:29::i;:::-;1009:10;:18:::0;;::::1;::::0;;::::1;::::0;;1025:1:::1;1009:18:::0;;;;;;::::1;::::0;;;1059;;;;::::1;::::0;;;::::1;::::0;1143:20;;;;::::1;::::0;;1159:3:::1;1143:20:::0;;::::1;::::0;1194;;;;::::1;::::0;;1210:3:::1;1194:20:::0;;::::1;::::0;1245;;;;::::1;::::0;;1261:3:::1;1245:20:::0;;::::1;::::0;1296;;;;::::1;::::0;;1312:3:::1;1296:20:::0;;::::1;::::0;1347;;;;::::1;::::0;;1363:3:::1;1347:20:::0;;::::1;::::0;1398;;;;::::1;::::0;;1414:3:::1;1398:20:::0;;::::1;::::0;1449;;;;::::1;::::0;;1465:3:::1;1449:20:::0;;::::1;::::0;1500;;;;::::1;::::0;;1516:3:::1;1500:20:::0;;::::1;::::0;1551:21;;;;::::1;::::0;;;1567:4:::1;1551:21:::0;::::1;::::0;5066:101:1;;;;5100:23;;-1:-1:-1;;;;5100:23:1;;;5142:14;;-1:-1:-1;5893:50:26;;5142:14:1;;5881:2:26;5866:18;5142:14:1;;;;;;;4092:1081;;;;;810:792:24;:::o;3313:234::-;3374:7;3397:27;;;:18;:27;;;;;:33;-1:-1:-1;;;;;3397:33:24;:38;;3393:148;;-1:-1:-1;3458:1:24;;3313:234;-1:-1:-1;3313:234:24:o;3393:148::-;-1:-1:-1;3497:27:24;;;;:18;:27;;;;;:33;-1:-1:-1;;;;;3497:33:24;;3313:234::o;5662:138:0:-;5737:18;5750:4;5737:12;:18::i;:::-;3191:16;3202:4;3191:10;:16::i;:::-;5767:26:::1;5779:4;5785:7;5767:11;:26::i;1674:146:24:-:0;776:23:20;3191:16:0;3202:4;3191:10;:16::i;:::-;1789:24:24;;::::1;::::0;:10:::1;::::0;:24:::1;::::0;::::1;::::0;::::1;:::i;4148:103:0:-:0;4214:30;4225:4;966:10:2;4214::0;:30::i;7270:387::-;7347:4;-1:-1:-1;;;;;;;;;;;7437:22:0;7445:4;7451:7;7437;:22::i;:::-;7432:219;;7475:8;:14;;;;;;;;;;;-1:-1:-1;;;;;7475:31:0;;;;;;;;;:38;;-1:-1:-1;;7475:38:0;7509:4;7475:38;;;7559:12;966:10:2;;887:96;7559:12:0;-1:-1:-1;;;;;7532:40:0;7550:7;-1:-1:-1;;;;;7532:40:0;7544:4;7532:40;;;;;;;;;;7593:4;7586:11;;;;;7432:219;7635:5;7628:12;;;;;7432:219;7353:304;7270:387;;;;:::o;7892:388::-;7970:4;-1:-1:-1;;;;;;;;;;;8059:22:0;8067:4;8073:7;8059;:22::i;:::-;8055:219;;;8131:5;8097:14;;;;;;;;;;;-1:-1:-1;;;;;8097:31:0;;;;;;;;;;:39;;-1:-1:-1;;8097:39:0;;;8155:40;966:10:2;;8097:14:0;;8155:40;;8131:5;8155:40;8216:4;8209:11;;;;;3674:178:3;2563:16;:14;:16::i;:::-;-1:-1:-1;;;;;;;;;;;3791:17:3;;-1:-1:-1;;3791:17:3::1;::::0;;3823:22:::1;966:10:2::0;3832:12:3::1;3823:22;::::0;-1:-1:-1;;;;;1484:32:26;;;1466:51;;1454:2;1439:18;3823:22:3::1;;;;;;;3722:130;3674:178::o:0;3366:176::-;2316:19;:17;:19::i;:::-;-1:-1:-1;;;;;;;;;;;3484:16:3;;-1:-1:-1;;3484:16:3::1;3496:4;3484:16;::::0;;3515:20:::1;966:10:2::0;3522:12:3::1;887:96:2::0;970:559:20;6931:20:1;:18;:20::i;:::-;1053:17:20::1;:15;:17::i;:::-;1080:22;:20;:22::i;:::-;1112:24;:22;:24::i;:::-;1199:44;2362:4:0;1230:12:20::0;1199:10:::1;:44::i;:::-;;1298:37;-1:-1:-1::0;;;;;;;;;;;1322:12:20::1;1298:10;:37::i;:::-;;1345:36;574:23;1368:12;1345:10;:36::i;:::-;;1391:37;709:24;1415:12;1391:10;:37::i;:::-;;1438:36;776:23;1461:12;1438:10;:36::i;:::-;;1484:38;844:25;1509:12;1484:10;:38::i;:::-;;970:559:::0;:::o;4381:197:0:-;4469:22;4477:4;4483:7;4469;:22::i;:::-;4464:108;;4514:47;;-1:-1:-1;;;4514:47:0;;-1:-1:-1;;;;;6146:32:26;;4514:47:0;;;6128:51:26;6195:18;;;6188:34;;;6101:18;;4514:47:0;5954:274:26;3105:126:3;-1:-1:-1;;;;;;;;;;;2821:9:3;;;3163:62;;3199:15;;-1:-1:-1;;;3199:15:3;;;;;;;;;;;3163:62;3105:126::o;2905:128::-;-1:-1:-1;;;;;;;;;;;2821:9:3;;;2966:61;;;3001:15;;-1:-1:-1;;;3001:15:3;;;;;;;;;;;7084:141:1;8870:21;8560:40;-1:-1:-1;;;8560:40:1;;;;7146:73;;7191:17;;-1:-1:-1;;;7191:17:1;;;;;;;;;;;1836:97:3;6931:20:1;:18;:20::i;:::-;1899:27:3::1;:25;:27::i;3231:65:0:-:0;6931:20:1;:18;:20::i;2540:111:4:-;6931:20:1;:18;:20::i;:::-;2610:34:4::1;:32;:34::i;1939:156:3:-:0;6931:20:1;:18;:20::i;:::-;-1:-1:-1;;;;;;;;;;;2071:17:3;;-1:-1:-1;;2071:17:3::1;::::0;;1939:156::o;2657:183:4:-;6931:20:1;:18;:20::i;:::-;1805:1:4::1;2388:30:::0;2810:23;2657:183::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:286:26;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:26;;209:43;;199:71;;266:1;263;256:12;199:71;289:5;14:286;-1:-1:-1;;;14:286:26:o;497:180::-;556:6;609:2;597:9;588:7;584:23;580:32;577:52;;;625:1;622;615:12;577:52;-1:-1:-1;648:23:26;;497:180;-1:-1:-1;497:180:26:o;864:131::-;-1:-1:-1;;;;;939:31:26;;929:42;;919:70;;985:1;982;975:12;1000:315;1068:6;1076;1129:2;1117:9;1108:7;1104:23;1100:32;1097:52;;;1145:1;1142;1135:12;1097:52;1181:9;1168:23;1158:33;;1241:2;1230:9;1226:18;1213:32;1254:31;1279:5;1254:31;:::i;:::-;1304:5;1294:15;;;1000:315;;;;;:::o;1895:247::-;1954:6;2007:2;1995:9;1986:7;1982:23;1978:32;1975:52;;;2023:1;2020;2013:12;1975:52;2062:9;2049:23;2081:31;2106:5;2081:31;:::i;2147:248::-;2215:6;2223;2276:2;2264:9;2255:7;2251:23;2247:32;2244:52;;;2292:1;2289;2282:12;2244:52;-1:-1:-1;;2315:23:26;;;2385:2;2370:18;;;2357:32;;-1:-1:-1;2147:248:26:o;2724:127::-;2785:10;2780:3;2776:20;2773:1;2766:31;2816:4;2813:1;2806:15;2840:4;2837:1;2830:15;2856:1115;2940:6;2971:2;3014;3002:9;2993:7;2989:23;2985:32;2982:52;;;3030:1;3027;3020:12;2982:52;3070:9;3057:23;3099:18;3140:2;3132:6;3129:14;3126:34;;;3156:1;3153;3146:12;3126:34;3194:6;3183:9;3179:22;3169:32;;3239:7;3232:4;3228:2;3224:13;3220:27;3210:55;;3261:1;3258;3251:12;3210:55;3297:2;3284:16;3319:2;3315;3312:10;3309:36;;;3325:18;;:::i;:::-;3371:2;3368:1;3364:10;3403:2;3397:9;3466:2;3462:7;3457:2;3453;3449:11;3445:25;3437:6;3433:38;3521:6;3509:10;3506:22;3501:2;3489:10;3486:18;3483:46;3480:72;;;3532:18;;:::i;:::-;3568:2;3561:22;3618:18;;;3652:15;;;;-1:-1:-1;3694:11:26;;;3690:20;;;3722:19;;;3719:39;;;3754:1;3751;3744:12;3719:39;3778:11;;;;3798:142;3814:6;3809:3;3806:15;3798:142;;;3880:17;;3868:30;;3831:12;;;;3918;;;;3798:142;;;3959:6;2856:1115;-1:-1:-1;;;;;;;;2856:1115:26:o;3976:251::-;4046:6;4099:2;4087:9;4078:7;4074:23;4070:32;4067:52;;;4115:1;4112;4105:12;4067:52;4147:9;4141:16;4166:31;4191:5;4166:31;:::i;4577:127::-;4638:10;4633:3;4629:20;4626:1;4619:31;4669:4;4666:1;4659:15;4693:4;4690:1;4683:15;4709:197;-1:-1:-1;;;;;4831:10:26;;;4843;;;4827:27;;4866:11;;;4863:37;;;4880:18;;:::i;4911:128::-;4978:9;;;4999:11;;;4996:37;;;5013:18;;:::i;5044:127::-;5105:10;5100:3;5096:20;5093:1;5086:31;5136:4;5133:1;5126:15;5160:4;5157:1;5150:15;5176:125;5241:9;;;5262:10;;;5259:36;;;5275:18;;:::i;5600:135::-;5639:3;5660:17;;;5657:43;;5680:18;;:::i;:::-;-1:-1:-1;5727:1:26;5716:13;;5600:135::o"},"gasEstimates":{"creation":{"codeDepositCost":"926600","executionCost":"962","totalCost":"927562"},"external":{"ADMIN_ROLE()":"284","DEFAULT_ADMIN_ROLE()":"262","MINTER_ROLE()":"239","OWNER_ROLE()":"283","PAUSER_ROLE()":"infinite","UTILITY_ROLE()":"328","characterNFT()":"2449","gainExperience(uint256,uint256)":"infinite","getRoleAdmin(bytes32)":"infinite","getTokenLevel(uint256)":"4699","getTokenXp(uint256)":"2606","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"infinite","initialize(address)":"infinite","pause()":"infinite","paused()":"infinite","renounceRole(bytes32,address)":"29189","revokeRole(bytes32,address)":"infinite","setCharacterNFT(address)":"infinite","supportsInterface(bytes4)":"450","tokenIdToLevelData(uint256)":"2622","unpause()":"infinite","updateXpPerLevelArray(uint256[])":"infinite","xpPerLevel(uint256)":"4598"}},"methodIdentifiers":{"ADMIN_ROLE()":"75b238fc","DEFAULT_ADMIN_ROLE()":"a217fddf","MINTER_ROLE()":"d5391393","OWNER_ROLE()":"e58378bb","PAUSER_ROLE()":"e63ab1e9","UTILITY_ROLE()":"8f296759","characterNFT()":"384d10ee","gainExperience(uint256,uint256)":"953b6a91","getRoleAdmin(bytes32)":"248a9ca3","getTokenLevel(uint256)":"d011645c","getTokenXp(uint256)":"c995a3b3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","initialize(address)":"c4d66de8","pause()":"8456cb59","paused()":"5c975abb","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","setCharacterNFT(address)":"5c75cadb","supportsInterface(bytes4)":"01ffc9a7","tokenIdToLevelData(uint256)":"c2118451","unpause()":"3f4ba83a","updateXpPerLevelArray(uint256[])":"eca83c03","xpPerLevel(uint256)":"54b52674"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValues\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxLevelReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xp\",\"type\":\"uint256\"}],\"name\":\"LevelUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UTILITY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"characterNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xp\",\"type\":\"uint256\"}],\"name\":\"gainExperience\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenXp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_characterNFT\",\"type\":\"address\"}],\"name\":\"setCharacterNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToLevelData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"level\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"xp\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_xpPerLevel\",\"type\":\"uint256[]\"}],\"name\":\"updateXpPerLevelArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"xpPerLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"gainExperience(uint256,uint256)\":{\"details\":\"Utility-contract only. Grant the user experience and increase their level if valid\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTokenLevel(uint256)\":{\"details\":\"Helper view function returns just the level\"},\"getTokenXp(uint256)\":{\"details\":\"Helper view function returns just the xp\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setCharacterNFT(address)\":{\"details\":\"Set the address of the CharacterNFT contract\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateXpPerLevelArray(uint256[])\":{\"details\":\"Update the XpPerLevel array if needed\"}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidValues()\":[{\"notice\":\"ERRORS *\"}],\"MaxLevelReached()\":[{\"notice\":\"ERRORS *\"}]},\"events\":{\"LevelUp(uint256,uint256,uint256)\":{\"notice\":\"An event emitted when a character gets xp\"}},\"kind\":\"user\",\"methods\":{\"OWNER_ROLE()\":{\"notice\":\"ROLES *\"},\"initialize(address)\":{\"notice\":\"FUNCTIONS *\"},\"tokenIdToLevelData(uint256)\":{\"notice\":\"VARIABLES *\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/leveling/Level.sol\":\"Level\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/BaseHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract BaseHelper is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    /** ROLES **/\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant UTILITY_ROLE = keccak256(\\\"UTILITY_ROLE\\\");\\n\\n    /** ERRORS **/\\n\\n    error InvalidValues();\\n\\n    /** MODIFIERS **/\\n\\n    /** FUNCTIONS **/\\n\\n    function _baseInitialize(address initialOwner) internal onlyInitializing {\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        // Grant default admin role to initialOwner\\n        _grantRole(DEFAULT_ADMIN_ROLE, initialOwner);\\n        // Grant pauser role to initialOwner\\n        _grantRole(PAUSER_ROLE, initialOwner);\\n        _grantRole(OWNER_ROLE, initialOwner);\\n        _grantRole(MINTER_ROLE, initialOwner);\\n        _grantRole(ADMIN_ROLE, initialOwner);\\n        _grantRole(UTILITY_ROLE, initialOwner);\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    // The gap is needed to avoid overwriting storage variables in future upgrades\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa7a00044dbab2a0f885e29248f5cd0d12fd4639169795202883ff28bee439756\",\"license\":\"MIT\"},\"contracts/leveling/Level.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"../BaseHelper.sol\\\";\\n\\ncontract Level is BaseHelper {\\n    /** STRUCTS **/\\n\\n    // Packed struct\\n    struct LevelData {\\n        uint128 level;\\n        uint128 xp;\\n    }\\n\\n    /** VARIABLES **/\\n\\n    // Track the Level and Xp of each token ID\\n    mapping(uint256 => LevelData) public tokenIdToLevelData;\\n\\n    // Each level has an xp requirement\\n    uint256[] public xpPerLevel;\\n\\n    // CharacterNFT contract\\n    address public characterNFT;\\n\\n    /** ERRORS **/\\n\\n    error MaxLevelReached();\\n\\n    /** MODIFIERS **/\\n\\n    /** EVENTS **/\\n\\n    /// @notice An event emitted when a character gets xp\\n    event LevelUp(uint256 indexed tokenId, uint256 level, uint256 xp);\\n\\n    /** FUNCTIONS **/\\n\\n    function initialize(address initialOwner) public initializer {\\n        _baseInitialize(initialOwner);\\n        // Each level has an xp requirement, start with 10 levels, we can add more later\\n        xpPerLevel.push(0); // Ignore the 0 index\\n        xpPerLevel.push(0); // Everyone starts at level 1 with 0 xp so index 1 is 0\\n        xpPerLevel.push(100); // Level 2 is 100 xp\\n        xpPerLevel.push(200); // Level 3 is 200 xp\\n        xpPerLevel.push(300); // Level 4 is 300 xp\\n        xpPerLevel.push(400); // Level 5 is 400 xp\\n        xpPerLevel.push(500); // Level 6 is 500 xp\\n        xpPerLevel.push(600); // Level 7 is 600 xp\\n        xpPerLevel.push(700); // Level 8 is 700 xp\\n        xpPerLevel.push(800); // Level 9 is 800 xp\\n        xpPerLevel.push(1000); // Level 10 is 1000 xp\\n    }\\n\\n    /**\\n     * @dev Update the XpPerLevel array if needed\\n     */\\n    function updateXpPerLevelArray(\\n        uint256[] memory _xpPerLevel\\n    ) external onlyRole(ADMIN_ROLE) {\\n        xpPerLevel = _xpPerLevel;\\n    }\\n\\n    /**\\n     * @dev Set the address of the CharacterNFT contract\\n     */\\n    function setCharacterNFT(\\n        address _characterNFT\\n    ) public onlyRole(OWNER_ROLE) {\\n        characterNFT = _characterNFT;\\n    }\\n\\n    /**\\n     * @dev Utility-contract only. Grant the user experience and increase their level if valid\\n     */\\n    function gainExperience(\\n        uint256 tokenId,\\n        uint256 xp\\n    ) public onlyRole(UTILITY_ROLE) {\\n        // Make sure the token ID is valid\\n        require(\\n            IERC721(characterNFT).ownerOf(tokenId) != address(0),\\n            \\\"Invalid token ID\\\"\\n        );\\n        LevelData storage levelData = tokenIdToLevelData[tokenId];\\n        // Update the users xp\\n        levelData.xp += uint128(xp);\\n        // Make sure user cannot go past max level\\n        if (levelData.level >= xpPerLevel.length - 1) {\\n            revert MaxLevelReached();\\n        }\\n        // User xp cannot surpass level 10\\n        if (levelData.xp > xpPerLevel[xpPerLevel.length - 1]) {\\n            revert MaxLevelReached();\\n        }\\n        uint256 currentLevel = levelData.level;\\n        // Update the level if the new xp falls with the range\\n        for (uint256 i = currentLevel + 1; i < xpPerLevel.length; i++) {\\n            if (levelData.xp >= xpPerLevel[i]) {\\n                levelData.level = uint128(i);\\n                emit LevelUp(tokenId, i, levelData.xp);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper view function returns just the level\\n     */\\n    function getTokenLevel(uint256 tokenId) public view returns (uint256) {\\n        if (tokenIdToLevelData[tokenId].level == 0) {\\n            return 1;\\n        } else {\\n            return tokenIdToLevelData[tokenId].level;\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper view function returns just the xp\\n     */\\n    function getTokenXp(uint256 tokenId) public view returns (uint256) {\\n        return tokenIdToLevelData[tokenId].xp;\\n    }\\n}\\n\",\"keccak256\":\"0x0664a492fbd955da4e2c9fceae699f88de3f96d414b2d64861e32f0053a1973f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4337,"contract":"contracts/leveling/Level.sol:Level","label":"__gap","offset":0,"slot":"0","type":"t_array(t_uint256)50_storage"},{"astId":5416,"contract":"contracts/leveling/Level.sol:Level","label":"tokenIdToLevelData","offset":0,"slot":"50","type":"t_mapping(t_uint256,t_struct(LevelData)5410_storage)"},{"astId":5419,"contract":"contracts/leveling/Level.sol:Level","label":"xpPerLevel","offset":0,"slot":"51","type":"t_array(t_uint256)dyn_storage"},{"astId":5421,"contract":"contracts/leveling/Level.sol:Level","label":"characterNFT","offset":0,"slot":"52","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_mapping(t_uint256,t_struct(LevelData)5410_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct Level.LevelData)","numberOfBytes":"32","value":"t_struct(LevelData)5410_storage"},"t_struct(LevelData)5410_storage":{"encoding":"inplace","label":"struct Level.LevelData","members":[{"astId":5407,"contract":"contracts/leveling/Level.sol:Level","label":"level","offset":0,"slot":"0","type":"t_uint128"},{"astId":5409,"contract":"contracts/leveling/Level.sol:Level","label":"xp","offset":16,"slot":"0","type":"t_uint128"}],"numberOfBytes":"32"},"t_uint128":{"encoding":"inplace","label":"uint128","numberOfBytes":"16"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"InvalidValues()":[{"notice":"ERRORS *"}],"MaxLevelReached()":[{"notice":"ERRORS *"}]},"events":{"LevelUp(uint256,uint256,uint256)":{"notice":"An event emitted when a character gets xp"}},"kind":"user","methods":{"OWNER_ROLE()":{"notice":"ROLES *"},"initialize(address)":{"notice":"FUNCTIONS *"},"tokenIdToLevelData(uint256)":{"notice":"VARIABLES *"}},"version":1}}},"contracts/skills/SkillTree.sol":{"SkillTree":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"InvalidValues","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[],"name":"SkillNotAllowed","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OWNER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAUSER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"UTILITY_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"skillChosen","type":"uint256"}],"name":"canUseSkill","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"charClassToSkills","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"characterNFTManager","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"initialOwner","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"levelContractAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_characterNFTManager","type":"address"}],"name":"setCharacterNFTManager","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_levelContract","type":"address"}],"name":"setLevelContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}],"EnforcedPause()":[{"details":"The operation failed because the contract is paused."}],"ExpectedPause()":[{"details":"The operation failed because the contract is not paused."}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"canUseSkill(uint256,uint256)":{"details":"Check that the character class and skill chosen are valid"},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"setCharacterNFTManager(address)":{"details":"Set the address of the CharacterNFTManager contract"},"setLevelContract(address)":{"details":"Set the address of the Level contract"},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50611267806100206000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80638456cb59116100b8578063c4d66de81161007c578063c4d66de8146102c0578063d5391393146102d3578063d547741f146102fa578063d97412751461030d578063e58378bb14610320578063e63ab1e91461033557600080fd5b80638456cb59146102635780638f2967591461026b57806391d148541461029257806394dd3215146102a5578063a217fddf146102b857600080fd5b80633f4ba83a1161010a5780633f4ba83a146101e35780634deb1934146101eb5780635adaa492146101fe5780635c975abb146102115780635d1b973a1461022957806375b238fc1461023c57600080fd5b806301ffc9a7146101475780631c6031921461016f578063248a9ca31461019a5780632f2ff15d146101bb57806336568abe146101d0575b600080fd5b61015a61015536600461107c565b61034a565b60405190151581526020015b60405180910390f35b603454610182906001600160a01b031681565b6040516001600160a01b039091168152602001610166565b6101ad6101a83660046110ad565b610381565b604051908152602001610166565b6101ce6101c93660046110e2565b6103a3565b005b6101ce6101de3660046110e2565b6103c5565b6101ce6103fd565b6101ad6101f936600461110e565b610420565b6101ce61020c366004611130565b610451565b6000805160206112128339815191525460ff1661015a565b6101ce61023736600461110e565b61048c565b6101ad7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6101ce61062d565b6101ad7f35af5b5a3fb4c88a8cb5e26e8a68a53cc8f6cafcc4000a1db1ae5753e25a168e81565b61015a6102a03660046110e2565b61064d565b6101ce6102b3366004611130565b610685565b6101ad600081565b6101ce6102ce366004611130565b6106c0565b6101ad7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6101ce6103083660046110e2565b610be5565b603354610182906001600160a01b031681565b6101ad6000805160206111b283398151915281565b6101ad6000805160206111d283398151915281565b60006001600160e01b03198216637965db0b60e01b148061037b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60009081526000805160206111f2833981519152602052604090206001015490565b6103ac82610381565b6103b581610c01565b6103bf8383610c0b565b50505050565b6001600160a01b03811633146103ee5760405163334bd91960e11b815260040160405180910390fd5b6103f88282610cb0565b505050565b6000805160206111d283398151915261041581610c01565b61041d610d2c565b50565b6032602052816000526040600020818154811061043c57600080fd5b90600052602060002001600091509150505481565b6000805160206111b283398151915261046981610c01565b50603380546001600160a01b0319166001600160a01b0392909216919091179055565b603454604051633de9d8f160e21b8152600481018490526001600160a01b0390911690600090829063f7a763c490602401602060405180830381865afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe919061114b565b603354604051633404591760e21b8152600481018790529192506001600160a01b031690600090829063d011645c90602401602060405180830381865afa15801561054d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610571919061116c565b905060006032600085600781111561058b5761058b611185565b81526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156105e357602002820191906000526020600020905b8154815260200190600101908083116105cf575b505050505090508082815181106105fc576105fc61119b565b602002602001015186111561062457604051636b47a4a960e01b815260040160405180910390fd5b50505050505050565b6000805160206111d283398151915261064581610c01565b61041d610d8c565b60009182526000805160206111f2833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206111b283398151915261069d81610c01565b50603480546001600160a01b0319166001600160a01b0392909216919091179055565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156107065750825b905060008267ffffffffffffffff1660011480156107235750303b155b905081158015610731575080155b1561074f5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561077957845460ff60401b1916600160401b1785555b61078286610dd5565b60408051610160810182526000808252600160208084018290526002948401949094526003606084015260046080840152600560a0840152600660c0840152600760e084015260086101008401526009610120840152600a61014084015290526032909152610814907f0d07fe408fa264e656a9c06e272928e4d4bb400d93cd5b5e74ac592f6170c2fd90600b611017565b5060408051610160810182526000808252600160208084019190915260029383018490526003606084015260046080840152600560a0840152600660c0840152600760e084015260086101008401526009610120840152600a61014084015292905260329091526108a8907f9ff19f865638bb86eeeae31c2a9ec896d92141edd461fe8f31e9e7484e4d2bb590600b611017565b5060408051610160810182526000808252600160208084019190915260029383019390935260036060830181905260046080840152600560a0840152600660c0840152600760e084015260086101008401526009610120840152600a6101408401529052603290915261093e907f1f20ec30f5e9c102cf5806d0bb8118b98c797a37ea4ca5b5c306ba879366c77c90600b611017565b5060408051610160810182526000808252600160208084019190915260029383019390935260036060830152600460808301819052600560a0840152600660c0840152600760e084015260086101008401526009610120840152600a610140840152905260329091526109d4907f3f52cf82629296489b84e1dbb72f035157400392aa100335795b652755f8cdda90600b611017565b506040805161016081018252600080825260016020808401919091526002938301939093526003606083015260046080830152600560a08301819052600660c0840152600760e084015260086101008401526009610120840152600a61014084015290526032909152610a6a907ff1229d5c96a3de3bdb5814fe87c3432b211770fda268ddcd390c87c4a4feb8e790600b611017565b506040805161016081018252600080825260016020808401919091526002938301939093526003606083015260046080830152600560a0830152600660c08301819052600760e084015260086101008401526009610120840152600a61014084015290526032909152610b00907f125f38041639e32c103ab47aba064e25405a1fb08d2d6ee74cd07eb22ba6e04090600b611017565b506040805161016081018252600080825260016020808401919091526002938301939093526003606083015260046080830152600560a0830152600660c0830152600760e0830181905260086101008401526009610120840152600a61014084015290526032909152610b96907f46bf7effec7da617c09fb0f99690c7f788a904e44d0053fc402fa3db73b3672590600b611017565b508315610bdd57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b610bee82610381565b610bf781610c01565b6103bf8383610cb0565b61041d8133610eb7565b60006000805160206111f2833981519152610c26848461064d565b610ca6576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055610c5c3390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600191505061037b565b600091505061037b565b60006000805160206111f2833981519152610ccb848461064d565b15610ca6576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4600191505061037b565b610d34610ef4565b600080516020611212833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b610d94610f26565b600080516020611212833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833610d6e565b610ddd610f57565b610de5610fa0565b610ded610fb0565b610df5610fb8565b610e00600082610c0b565b50610e196000805160206111d283398151915282610c0b565b50610e326000805160206111b283398151915282610c0b565b50610e5d7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a682610c0b565b50610e887fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582610c0b565b50610eb37f35af5b5a3fb4c88a8cb5e26e8a68a53cc8f6cafcc4000a1db1ae5753e25a168e82610c0b565b5050565b610ec1828261064d565b610eb35760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440160405180910390fd5b6000805160206112128339815191525460ff16610f2457604051638dfc202b60e01b815260040160405180910390fd5b565b6000805160206112128339815191525460ff1615610f245760405163d93c066560e01b815260040160405180910390fd5b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16610f2457604051631afcd79f60e31b815260040160405180910390fd5b610fa8610f57565b610f24610fc8565b610f24610f57565b610fc0610f57565b610f24610fe9565b610fd0610f57565b600080516020611212833981519152805460ff19169055565b610ff1610f57565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b828054828255906000526020600020908101928215611057579160200282015b82811115611057578251829060ff16905591602001919060010190611037565b50611063929150611067565b5090565b5b808211156110635760008155600101611068565b60006020828403121561108e57600080fd5b81356001600160e01b0319811681146110a657600080fd5b9392505050565b6000602082840312156110bf57600080fd5b5035919050565b80356001600160a01b03811681146110dd57600080fd5b919050565b600080604083850312156110f557600080fd5b82359150611105602084016110c6565b90509250929050565b6000806040838503121561112157600080fd5b50508035926020909101359150565b60006020828403121561114257600080fd5b6110a6826110c6565b60006020828403121561115d57600080fd5b8151600881106110a657600080fd5b60006020828403121561117e57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300a264697066735822122036ef747118ccf178a883ee05f13279e81f9825a21aec381f582318d49d3f36be64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1267 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8456CB59 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xC4D66DE8 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x2D3 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x2FA JUMPI DUP1 PUSH4 0xD9741275 EQ PUSH2 0x30D JUMPI DUP1 PUSH4 0xE58378BB EQ PUSH2 0x320 JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0x335 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x263 JUMPI DUP1 PUSH4 0x8F296759 EQ PUSH2 0x26B JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x292 JUMPI DUP1 PUSH4 0x94DD3215 EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x2B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3F4BA83A GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0x4DEB1934 EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0x5ADAA492 EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x211 JUMPI DUP1 PUSH4 0x5D1B973A EQ PUSH2 0x229 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x23C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x1C603192 EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1D0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15A PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0x107C JUMP JUMPDEST PUSH2 0x34A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x34 SLOAD PUSH2 0x182 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x166 JUMP JUMPDEST PUSH2 0x1AD PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x10AD JUMP JUMPDEST PUSH2 0x381 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x166 JUMP JUMPDEST PUSH2 0x1CE PUSH2 0x1C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x10E2 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1CE PUSH2 0x1DE CALLDATASIZE PUSH1 0x4 PUSH2 0x10E2 JUMP JUMPDEST PUSH2 0x3C5 JUMP JUMPDEST PUSH2 0x1CE PUSH2 0x3FD JUMP JUMPDEST PUSH2 0x1AD PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x110E JUMP JUMPDEST PUSH2 0x420 JUMP JUMPDEST PUSH2 0x1CE PUSH2 0x20C CALLDATASIZE PUSH1 0x4 PUSH2 0x1130 JUMP JUMPDEST PUSH2 0x451 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1212 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND PUSH2 0x15A JUMP JUMPDEST PUSH2 0x1CE PUSH2 0x237 CALLDATASIZE PUSH1 0x4 PUSH2 0x110E JUMP JUMPDEST PUSH2 0x48C JUMP JUMPDEST PUSH2 0x1AD PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST PUSH2 0x1CE PUSH2 0x62D JUMP JUMPDEST PUSH2 0x1AD PUSH32 0x35AF5B5A3FB4C88A8CB5E26E8A68A53CC8F6CAFCC4000A1DB1AE5753E25A168E DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x2A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x10E2 JUMP JUMPDEST PUSH2 0x64D JUMP JUMPDEST PUSH2 0x1CE PUSH2 0x2B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1130 JUMP JUMPDEST PUSH2 0x685 JUMP JUMPDEST PUSH2 0x1AD PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1CE PUSH2 0x2CE CALLDATASIZE PUSH1 0x4 PUSH2 0x1130 JUMP JUMPDEST PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0x1AD PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST PUSH2 0x1CE PUSH2 0x308 CALLDATASIZE PUSH1 0x4 PUSH2 0x10E2 JUMP JUMPDEST PUSH2 0xBE5 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH2 0x182 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x1AD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11B2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x1AD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11D2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x37B JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11F2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x3AC DUP3 PUSH2 0x381 JUMP JUMPDEST PUSH2 0x3B5 DUP2 PUSH2 0xC01 JUMP JUMPDEST PUSH2 0x3BF DUP4 DUP4 PUSH2 0xC0B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x3EE JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3F8 DUP3 DUP3 PUSH2 0xCB0 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11D2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x415 DUP2 PUSH2 0xC01 JUMP JUMPDEST PUSH2 0x41D PUSH2 0xD2C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x32 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x43C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11B2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x469 DUP2 PUSH2 0xC01 JUMP JUMPDEST POP PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x34 SLOAD PUSH1 0x40 MLOAD PUSH4 0x3DE9D8F1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH4 0xF7A763C4 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4DA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4FE SWAP2 SWAP1 PUSH2 0x114B JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH4 0x34045917 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH4 0xD011645C SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x54D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x571 SWAP2 SWAP1 PUSH2 0x116C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x32 PUSH1 0x0 DUP6 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x58B JUMPI PUSH2 0x58B PUSH2 0x1185 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x5E3 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x5CF JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP DUP1 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5FC JUMPI PUSH2 0x5FC PUSH2 0x119B JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 GT ISZERO PUSH2 0x624 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6B47A4A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11D2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x645 DUP2 PUSH2 0xC01 JUMP JUMPDEST PUSH2 0x41D PUSH2 0xD8C JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11F2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11B2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x69D DUP2 PUSH2 0xC01 JUMP JUMPDEST POP PUSH1 0x34 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x706 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x723 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x731 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x74F JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x779 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH2 0x782 DUP7 PUSH2 0xDD5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x160 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP1 DUP5 ADD DUP3 SWAP1 MSTORE PUSH1 0x2 SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x3 PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x7 PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x8 PUSH2 0x100 DUP5 ADD MSTORE PUSH1 0x9 PUSH2 0x120 DUP5 ADD MSTORE PUSH1 0xA PUSH2 0x140 DUP5 ADD MSTORE SWAP1 MSTORE PUSH1 0x32 SWAP1 SWAP2 MSTORE PUSH2 0x814 SWAP1 PUSH32 0xD07FE408FA264E656A9C06E272928E4D4BB400D93CD5B5E74AC592F6170C2FD SWAP1 PUSH1 0xB PUSH2 0x1017 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x160 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP4 DUP4 ADD DUP5 SWAP1 MSTORE PUSH1 0x3 PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x7 PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x8 PUSH2 0x100 DUP5 ADD MSTORE PUSH1 0x9 PUSH2 0x120 DUP5 ADD MSTORE PUSH1 0xA PUSH2 0x140 DUP5 ADD MSTORE SWAP3 SWAP1 MSTORE PUSH1 0x32 SWAP1 SWAP2 MSTORE PUSH2 0x8A8 SWAP1 PUSH32 0x9FF19F865638BB86EEEAE31C2A9EC896D92141EDD461FE8F31E9E7484E4D2BB5 SWAP1 PUSH1 0xB PUSH2 0x1017 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x160 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 PUSH1 0x60 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x4 PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x7 PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x8 PUSH2 0x100 DUP5 ADD MSTORE PUSH1 0x9 PUSH2 0x120 DUP5 ADD MSTORE PUSH1 0xA PUSH2 0x140 DUP5 ADD MSTORE SWAP1 MSTORE PUSH1 0x32 SWAP1 SWAP2 MSTORE PUSH2 0x93E SWAP1 PUSH32 0x1F20EC30F5E9C102CF5806D0BB8118B98C797A37EA4CA5B5C306BA879366C77C SWAP1 PUSH1 0xB PUSH2 0x1017 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x160 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x4 PUSH1 0x80 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x5 PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x7 PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x8 PUSH2 0x100 DUP5 ADD MSTORE PUSH1 0x9 PUSH2 0x120 DUP5 ADD MSTORE PUSH1 0xA PUSH2 0x140 DUP5 ADD MSTORE SWAP1 MSTORE PUSH1 0x32 SWAP1 SWAP2 MSTORE PUSH2 0x9D4 SWAP1 PUSH32 0x3F52CF82629296489B84E1DBB72F035157400392AA100335795B652755F8CDDA SWAP1 PUSH1 0xB PUSH2 0x1017 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x160 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x4 PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x5 PUSH1 0xA0 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x6 PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x7 PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x8 PUSH2 0x100 DUP5 ADD MSTORE PUSH1 0x9 PUSH2 0x120 DUP5 ADD MSTORE PUSH1 0xA PUSH2 0x140 DUP5 ADD MSTORE SWAP1 MSTORE PUSH1 0x32 SWAP1 SWAP2 MSTORE PUSH2 0xA6A SWAP1 PUSH32 0xF1229D5C96A3DE3BDB5814FE87C3432B211770FDA268DDCD390C87C4A4FEB8E7 SWAP1 PUSH1 0xB PUSH2 0x1017 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x160 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x4 PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x5 PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x6 PUSH1 0xC0 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x7 PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x8 PUSH2 0x100 DUP5 ADD MSTORE PUSH1 0x9 PUSH2 0x120 DUP5 ADD MSTORE PUSH1 0xA PUSH2 0x140 DUP5 ADD MSTORE SWAP1 MSTORE PUSH1 0x32 SWAP1 SWAP2 MSTORE PUSH2 0xB00 SWAP1 PUSH32 0x125F38041639E32C103AB47ABA064E25405A1FB08D2D6EE74CD07EB22BA6E040 SWAP1 PUSH1 0xB PUSH2 0x1017 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x160 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x4 PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x5 PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x6 PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x7 PUSH1 0xE0 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x8 PUSH2 0x100 DUP5 ADD MSTORE PUSH1 0x9 PUSH2 0x120 DUP5 ADD MSTORE PUSH1 0xA PUSH2 0x140 DUP5 ADD MSTORE SWAP1 MSTORE PUSH1 0x32 SWAP1 SWAP2 MSTORE PUSH2 0xB96 SWAP1 PUSH32 0x46BF7EFFEC7DA617C09FB0F99690C7F788A904E44D0053FC402FA3DB73B36725 SWAP1 PUSH1 0xB PUSH2 0x1017 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0xBDD JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xBEE DUP3 PUSH2 0x381 JUMP JUMPDEST PUSH2 0xBF7 DUP2 PUSH2 0xC01 JUMP JUMPDEST PUSH2 0x3BF DUP4 DUP4 PUSH2 0xCB0 JUMP JUMPDEST PUSH2 0x41D DUP2 CALLER PUSH2 0xEB7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11F2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xC26 DUP5 DUP5 PUSH2 0x64D JUMP JUMPDEST PUSH2 0xCA6 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xC5C CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x37B JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x37B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11F2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xCCB DUP5 DUP5 PUSH2 0x64D JUMP JUMPDEST ISZERO PUSH2 0xCA6 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP8 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x37B JUMP JUMPDEST PUSH2 0xD34 PUSH2 0xEF4 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1212 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND DUP2 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0xD94 PUSH2 0xF26 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1212 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 CALLER PUSH2 0xD6E JUMP JUMPDEST PUSH2 0xDDD PUSH2 0xF57 JUMP JUMPDEST PUSH2 0xDE5 PUSH2 0xFA0 JUMP JUMPDEST PUSH2 0xDED PUSH2 0xFB0 JUMP JUMPDEST PUSH2 0xDF5 PUSH2 0xFB8 JUMP JUMPDEST PUSH2 0xE00 PUSH1 0x0 DUP3 PUSH2 0xC0B JUMP JUMPDEST POP PUSH2 0xE19 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11D2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0xC0B JUMP JUMPDEST POP PUSH2 0xE32 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11B2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0xC0B JUMP JUMPDEST POP PUSH2 0xE5D PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP3 PUSH2 0xC0B JUMP JUMPDEST POP PUSH2 0xE88 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP3 PUSH2 0xC0B JUMP JUMPDEST POP PUSH2 0xEB3 PUSH32 0x35AF5B5A3FB4C88A8CB5E26E8A68A53CC8F6CAFCC4000A1DB1AE5753E25A168E DUP3 PUSH2 0xC0B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xEC1 DUP3 DUP3 PUSH2 0x64D JUMP JUMPDEST PUSH2 0xEB3 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1212 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND PUSH2 0xF24 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1212 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xF24 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0xF24 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xFA8 PUSH2 0xF57 JUMP JUMPDEST PUSH2 0xF24 PUSH2 0xFC8 JUMP JUMPDEST PUSH2 0xF24 PUSH2 0xF57 JUMP JUMPDEST PUSH2 0xFC0 PUSH2 0xF57 JUMP JUMPDEST PUSH2 0xF24 PUSH2 0xFE9 JUMP JUMPDEST PUSH2 0xFD0 PUSH2 0xF57 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1212 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xFF1 PUSH2 0xF57 JUMP JUMPDEST PUSH1 0x1 PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 SSTORE JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x1057 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1057 JUMPI DUP3 MLOAD DUP3 SWAP1 PUSH1 0xFF AND SWAP1 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1037 JUMP JUMPDEST POP PUSH2 0x1063 SWAP3 SWAP2 POP PUSH2 0x1067 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1063 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1068 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x108E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x10A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x10DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1105 PUSH1 0x20 DUP5 ADD PUSH2 0x10C6 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1121 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1142 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10A6 DUP3 PUSH2 0x10C6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x115D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x8 DUP2 LT PUSH2 0x10A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x117E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID 0xB1 SWAP6 CHAINID 0xDF CREATE 0x1E DUP6 PUSH16 0xB3F010C267A7B1C60363CF8A4664E21C 0xC8 SWAP13 0x26 0x22 CHAINID KECCAK256 0x21 0x4E PUSH6 0xD7A28E3265B3 PUSH27 0x6474929F336521B332C1681B933F6CB9F3376673440D862A02DD7B 0xC7 0xDE 0xC4 0xDC 0xEE 0xDD 0xA7 PUSH22 0xE58DD541E08A116C6C53815C0BD028192F7B626800CD 0x5E 0xD1 0x5C PUSH15 0x187E77E9AEE88184C21F4F2182AB58 0x27 0xCB EXTCODESIZE PUSH31 0x7FBEDCD63F03300A264697066735822122036EF747118CCF178A883EE05F1 ORIGIN PUSH26 0xE81F9825A21AEC381F582318D49D3F36BE64736F6C6343000814 STOP CALLER ","sourceMap":"261:2496:25:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ADMIN_ROLE_4257":{"entryPoint":null,"id":4257,"parameterSlots":0,"returnSlots":0},"@DEFAULT_ADMIN_ROLE_28":{"entryPoint":null,"id":28,"parameterSlots":0,"returnSlots":0},"@MINTER_ROLE_4252":{"entryPoint":null,"id":4252,"parameterSlots":0,"returnSlots":0},"@OWNER_ROLE_4242":{"entryPoint":null,"id":4242,"parameterSlots":0,"returnSlots":0},"@PAUSER_ROLE_4247":{"entryPoint":null,"id":4247,"parameterSlots":0,"returnSlots":0},"@UTILITY_ROLE_4262":{"entryPoint":null,"id":4262,"parameterSlots":0,"returnSlots":0},"@__AccessControl_init_63":{"entryPoint":4016,"id":63,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_714":{"entryPoint":4000,"id":714,"parameterSlots":0,"returnSlots":0},"@__Pausable_init_unchained_732":{"entryPoint":4040,"id":732,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_878":{"entryPoint":4024,"id":878,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_unchained_896":{"entryPoint":4073,"id":896,"parameterSlots":0,"returnSlots":0},"@_baseInitialize_4313":{"entryPoint":3541,"id":4313,"parameterSlots":1,"returnSlots":0},"@_checkInitializing_538":{"entryPoint":3927,"id":538,"parameterSlots":0,"returnSlots":0},"@_checkRole_129":{"entryPoint":3073,"id":129,"parameterSlots":1,"returnSlots":0},"@_checkRole_150":{"entryPoint":3767,"id":150,"parameterSlots":2,"returnSlots":0},"@_getAccessControlStorage_46":{"entryPoint":null,"id":46,"parameterSlots":0,"returnSlots":1},"@_getInitializableStorage_615":{"entryPoint":null,"id":615,"parameterSlots":0,"returnSlots":1},"@_getPausableStorage_688":{"entryPoint":null,"id":688,"parameterSlots":0,"returnSlots":1},"@_getReentrancyGuardStorage_866":{"entryPoint":null,"id":866,"parameterSlots":0,"returnSlots":1},"@_grantRole_315":{"entryPoint":3083,"id":315,"parameterSlots":2,"returnSlots":1},"@_isInitializing_606":{"entryPoint":null,"id":606,"parameterSlots":0,"returnSlots":1},"@_msgSender_644":{"entryPoint":null,"id":644,"parameterSlots":0,"returnSlots":1},"@_pause_813":{"entryPoint":3468,"id":813,"parameterSlots":0,"returnSlots":0},"@_requireNotPaused_776":{"entryPoint":3878,"id":776,"parameterSlots":0,"returnSlots":0},"@_requirePaused_789":{"entryPoint":3828,"id":789,"parameterSlots":0,"returnSlots":0},"@_revokeRole_361":{"entryPoint":3248,"id":361,"parameterSlots":2,"returnSlots":1},"@_unpause_837":{"entryPoint":3372,"id":837,"parameterSlots":0,"returnSlots":0},"@canUseSkill_5939":{"entryPoint":1164,"id":5939,"parameterSlots":2,"returnSlots":0},"@charClassToSkills_5710":{"entryPoint":1056,"id":5710,"parameterSlots":0,"returnSlots":0},"@characterNFTManager_5714":{"entryPoint":null,"id":5714,"parameterSlots":0,"returnSlots":0},"@getRoleAdmin_171":{"entryPoint":897,"id":171,"parameterSlots":1,"returnSlots":1},"@grantRole_190":{"entryPoint":931,"id":190,"parameterSlots":2,"returnSlots":0},"@hasRole_116":{"entryPoint":1613,"id":116,"parameterSlots":2,"returnSlots":1},"@initialize_5849":{"entryPoint":1728,"id":5849,"parameterSlots":1,"returnSlots":0},"@levelContractAddress_5712":{"entryPoint":null,"id":5712,"parameterSlots":0,"returnSlots":0},"@pause_4323":{"entryPoint":1581,"id":4323,"parameterSlots":0,"returnSlots":0},"@paused_764":{"entryPoint":null,"id":764,"parameterSlots":0,"returnSlots":1},"@renounceRole_232":{"entryPoint":965,"id":232,"parameterSlots":2,"returnSlots":0},"@revokeRole_209":{"entryPoint":3045,"id":209,"parameterSlots":2,"returnSlots":0},"@setCharacterNFTManager_5863":{"entryPoint":1669,"id":5863,"parameterSlots":1,"returnSlots":0},"@setLevelContract_5877":{"entryPoint":1105,"id":5877,"parameterSlots":1,"returnSlots":0},"@supportsInterface_1006":{"entryPoint":null,"id":1006,"parameterSlots":1,"returnSlots":1},"@supportsInterface_91":{"entryPoint":842,"id":91,"parameterSlots":1,"returnSlots":1},"@unpause_4333":{"entryPoint":1021,"id":4333,"parameterSlots":0,"returnSlots":0},"abi_decode_address":{"entryPoint":4294,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":4400,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":4269,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":4322,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":4220,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_enum$_CharacterClass_$4788_fromMemory":{"entryPoint":4427,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":4460,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":4366,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x21":{"entryPoint":4485,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4507,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3362:26","statements":[{"nodeType":"YulBlock","src":"6:3:26","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:217:26","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:26"},"nodeType":"YulFunctionCall","src":"131:12:26"},"nodeType":"YulExpressionStatement","src":"131:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:26"},"nodeType":"YulFunctionCall","src":"100:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:26"},"nodeType":"YulFunctionCall","src":"96:32:26"},"nodeType":"YulIf","src":"93:52:26"},{"nodeType":"YulVariableDeclaration","src":"154:36:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:26"},"nodeType":"YulFunctionCall","src":"167:23:26"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"254:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"263:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"266:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"256:6:26"},"nodeType":"YulFunctionCall","src":"256:12:26"},"nodeType":"YulExpressionStatement","src":"256:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"234:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"239:10:26","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"230:3:26"},"nodeType":"YulFunctionCall","src":"230:20:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:26"},"nodeType":"YulFunctionCall","src":"219:32:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:26"},"nodeType":"YulFunctionCall","src":"209:43:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:26"},"nodeType":"YulFunctionCall","src":"202:51:26"},"nodeType":"YulIf","src":"199:71:26"},{"nodeType":"YulAssignment","src":"279:15:26","value":{"name":"value","nodeType":"YulIdentifier","src":"289:5:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"279:6:26"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:26","type":""}],"src":"14:286:26"},{"body":{"nodeType":"YulBlock","src":"400:92:26","statements":[{"nodeType":"YulAssignment","src":"410:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"422:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"433:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"418:3:26"},"nodeType":"YulFunctionCall","src":"418:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"410:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"452:9:26"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"477:6:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"470:6:26"},"nodeType":"YulFunctionCall","src":"470:14:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"463:6:26"},"nodeType":"YulFunctionCall","src":"463:22:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"445:6:26"},"nodeType":"YulFunctionCall","src":"445:41:26"},"nodeType":"YulExpressionStatement","src":"445:41:26"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"369:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"380:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"391:4:26","type":""}],"src":"305:187:26"},{"body":{"nodeType":"YulBlock","src":"598:102:26","statements":[{"nodeType":"YulAssignment","src":"608:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"620:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"631:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"616:3:26"},"nodeType":"YulFunctionCall","src":"616:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"608:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"650:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"665:6:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"681:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"686:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"677:3:26"},"nodeType":"YulFunctionCall","src":"677:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"690:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"673:3:26"},"nodeType":"YulFunctionCall","src":"673:19:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"661:3:26"},"nodeType":"YulFunctionCall","src":"661:32:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"643:6:26"},"nodeType":"YulFunctionCall","src":"643:51:26"},"nodeType":"YulExpressionStatement","src":"643:51:26"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"567:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"578:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"589:4:26","type":""}],"src":"497:203:26"},{"body":{"nodeType":"YulBlock","src":"775:110:26","statements":[{"body":{"nodeType":"YulBlock","src":"821:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"830:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"833:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"823:6:26"},"nodeType":"YulFunctionCall","src":"823:12:26"},"nodeType":"YulExpressionStatement","src":"823:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"796:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"805:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"792:3:26"},"nodeType":"YulFunctionCall","src":"792:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"817:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"788:3:26"},"nodeType":"YulFunctionCall","src":"788:32:26"},"nodeType":"YulIf","src":"785:52:26"},{"nodeType":"YulAssignment","src":"846:33:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"869:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"856:12:26"},"nodeType":"YulFunctionCall","src":"856:23:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"846:6:26"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"741:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"752:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"764:6:26","type":""}],"src":"705:180:26"},{"body":{"nodeType":"YulBlock","src":"991:76:26","statements":[{"nodeType":"YulAssignment","src":"1001:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1013:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1024:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1009:3:26"},"nodeType":"YulFunctionCall","src":"1009:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1001:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1043:9:26"},{"name":"value0","nodeType":"YulIdentifier","src":"1054:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1036:6:26"},"nodeType":"YulFunctionCall","src":"1036:25:26"},"nodeType":"YulExpressionStatement","src":"1036:25:26"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"960:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"971:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"982:4:26","type":""}],"src":"890:177:26"},{"body":{"nodeType":"YulBlock","src":"1121:124:26","statements":[{"nodeType":"YulAssignment","src":"1131:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1153:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1140:12:26"},"nodeType":"YulFunctionCall","src":"1140:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1131:5:26"}]},{"body":{"nodeType":"YulBlock","src":"1223:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1232:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1235:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1225:6:26"},"nodeType":"YulFunctionCall","src":"1225:12:26"},"nodeType":"YulExpressionStatement","src":"1225:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1182:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1193:5:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1208:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1213:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1204:3:26"},"nodeType":"YulFunctionCall","src":"1204:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"1217:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1200:3:26"},"nodeType":"YulFunctionCall","src":"1200:19:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1189:3:26"},"nodeType":"YulFunctionCall","src":"1189:31:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1179:2:26"},"nodeType":"YulFunctionCall","src":"1179:42:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1172:6:26"},"nodeType":"YulFunctionCall","src":"1172:50:26"},"nodeType":"YulIf","src":"1169:70:26"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1100:6:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1111:5:26","type":""}],"src":"1072:173:26"},{"body":{"nodeType":"YulBlock","src":"1337:167:26","statements":[{"body":{"nodeType":"YulBlock","src":"1383:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1392:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1395:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1385:6:26"},"nodeType":"YulFunctionCall","src":"1385:12:26"},"nodeType":"YulExpressionStatement","src":"1385:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1358:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"1367:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1354:3:26"},"nodeType":"YulFunctionCall","src":"1354:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"1379:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1350:3:26"},"nodeType":"YulFunctionCall","src":"1350:32:26"},"nodeType":"YulIf","src":"1347:52:26"},{"nodeType":"YulAssignment","src":"1408:33:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1431:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1418:12:26"},"nodeType":"YulFunctionCall","src":"1418:23:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1408:6:26"}]},{"nodeType":"YulAssignment","src":"1450:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1483:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1494:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1479:3:26"},"nodeType":"YulFunctionCall","src":"1479:18:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1460:18:26"},"nodeType":"YulFunctionCall","src":"1460:38:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1450:6:26"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1295:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1306:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1318:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1326:6:26","type":""}],"src":"1250:254:26"},{"body":{"nodeType":"YulBlock","src":"1596:161:26","statements":[{"body":{"nodeType":"YulBlock","src":"1642:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1651:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1654:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1644:6:26"},"nodeType":"YulFunctionCall","src":"1644:12:26"},"nodeType":"YulExpressionStatement","src":"1644:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1617:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"1626:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1613:3:26"},"nodeType":"YulFunctionCall","src":"1613:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"1638:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1609:3:26"},"nodeType":"YulFunctionCall","src":"1609:32:26"},"nodeType":"YulIf","src":"1606:52:26"},{"nodeType":"YulAssignment","src":"1667:33:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1690:9:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1677:12:26"},"nodeType":"YulFunctionCall","src":"1677:23:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1667:6:26"}]},{"nodeType":"YulAssignment","src":"1709:42:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1736:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1747:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1732:3:26"},"nodeType":"YulFunctionCall","src":"1732:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1719:12:26"},"nodeType":"YulFunctionCall","src":"1719:32:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1709:6:26"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1554:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1565:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1577:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1585:6:26","type":""}],"src":"1509:248:26"},{"body":{"nodeType":"YulBlock","src":"1863:76:26","statements":[{"nodeType":"YulAssignment","src":"1873:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1885:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1896:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1881:3:26"},"nodeType":"YulFunctionCall","src":"1881:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1873:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1915:9:26"},{"name":"value0","nodeType":"YulIdentifier","src":"1926:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1908:6:26"},"nodeType":"YulFunctionCall","src":"1908:25:26"},"nodeType":"YulExpressionStatement","src":"1908:25:26"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1832:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1843:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1854:4:26","type":""}],"src":"1762:177:26"},{"body":{"nodeType":"YulBlock","src":"2014:116:26","statements":[{"body":{"nodeType":"YulBlock","src":"2060:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2069:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2072:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2062:6:26"},"nodeType":"YulFunctionCall","src":"2062:12:26"},"nodeType":"YulExpressionStatement","src":"2062:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2035:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2044:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2031:3:26"},"nodeType":"YulFunctionCall","src":"2031:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"2056:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2027:3:26"},"nodeType":"YulFunctionCall","src":"2027:32:26"},"nodeType":"YulIf","src":"2024:52:26"},{"nodeType":"YulAssignment","src":"2085:39:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2114:9:26"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2095:18:26"},"nodeType":"YulFunctionCall","src":"2095:29:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2085:6:26"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1980:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1991:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2003:6:26","type":""}],"src":"1944:186:26"},{"body":{"nodeType":"YulBlock","src":"2235:179:26","statements":[{"body":{"nodeType":"YulBlock","src":"2281:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2290:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2293:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2283:6:26"},"nodeType":"YulFunctionCall","src":"2283:12:26"},"nodeType":"YulExpressionStatement","src":"2283:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2256:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2265:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2252:3:26"},"nodeType":"YulFunctionCall","src":"2252:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"2277:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2248:3:26"},"nodeType":"YulFunctionCall","src":"2248:32:26"},"nodeType":"YulIf","src":"2245:52:26"},{"nodeType":"YulVariableDeclaration","src":"2306:29:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2325:9:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2319:5:26"},"nodeType":"YulFunctionCall","src":"2319:16:26"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2310:5:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"2368:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2377:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2380:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2370:6:26"},"nodeType":"YulFunctionCall","src":"2370:12:26"},"nodeType":"YulExpressionStatement","src":"2370:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2357:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"2364:1:26","type":"","value":"8"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2354:2:26"},"nodeType":"YulFunctionCall","src":"2354:12:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2347:6:26"},"nodeType":"YulFunctionCall","src":"2347:20:26"},"nodeType":"YulIf","src":"2344:40:26"},{"nodeType":"YulAssignment","src":"2393:15:26","value":{"name":"value","nodeType":"YulIdentifier","src":"2403:5:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2393:6:26"}]}]},"name":"abi_decode_tuple_t_enum$_CharacterClass_$4788_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2201:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2212:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2224:6:26","type":""}],"src":"2135:279:26"},{"body":{"nodeType":"YulBlock","src":"2500:103:26","statements":[{"body":{"nodeType":"YulBlock","src":"2546:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2555:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2558:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2548:6:26"},"nodeType":"YulFunctionCall","src":"2548:12:26"},"nodeType":"YulExpressionStatement","src":"2548:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2521:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2530:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2517:3:26"},"nodeType":"YulFunctionCall","src":"2517:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"2542:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2513:3:26"},"nodeType":"YulFunctionCall","src":"2513:32:26"},"nodeType":"YulIf","src":"2510:52:26"},{"nodeType":"YulAssignment","src":"2571:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2587:9:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2581:5:26"},"nodeType":"YulFunctionCall","src":"2581:16:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2571:6:26"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2466:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2477:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2489:6:26","type":""}],"src":"2419:184:26"},{"body":{"nodeType":"YulBlock","src":"2640:95:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2657:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2664:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2669:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2660:3:26"},"nodeType":"YulFunctionCall","src":"2660:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2650:6:26"},"nodeType":"YulFunctionCall","src":"2650:31:26"},"nodeType":"YulExpressionStatement","src":"2650:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2697:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2700:4:26","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2690:6:26"},"nodeType":"YulFunctionCall","src":"2690:15:26"},"nodeType":"YulExpressionStatement","src":"2690:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2721:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2724:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2714:6:26"},"nodeType":"YulFunctionCall","src":"2714:15:26"},"nodeType":"YulExpressionStatement","src":"2714:15:26"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"2608:127:26"},{"body":{"nodeType":"YulBlock","src":"2772:95:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2789:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2796:3:26","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2801:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2792:3:26"},"nodeType":"YulFunctionCall","src":"2792:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2782:6:26"},"nodeType":"YulFunctionCall","src":"2782:31:26"},"nodeType":"YulExpressionStatement","src":"2782:31:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2829:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2832:4:26","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2822:6:26"},"nodeType":"YulFunctionCall","src":"2822:15:26"},"nodeType":"YulExpressionStatement","src":"2822:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2853:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2856:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2846:6:26"},"nodeType":"YulFunctionCall","src":"2846:15:26"},"nodeType":"YulExpressionStatement","src":"2846:15:26"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"2740:127:26"},{"body":{"nodeType":"YulBlock","src":"2980:101:26","statements":[{"nodeType":"YulAssignment","src":"2990:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3002:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3013:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2998:3:26"},"nodeType":"YulFunctionCall","src":"2998:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2990:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3032:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3047:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3055:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3043:3:26"},"nodeType":"YulFunctionCall","src":"3043:31:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3025:6:26"},"nodeType":"YulFunctionCall","src":"3025:50:26"},"nodeType":"YulExpressionStatement","src":"3025:50:26"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2949:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2960:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2971:4:26","type":""}],"src":"2872:209:26"},{"body":{"nodeType":"YulBlock","src":"3215:145:26","statements":[{"nodeType":"YulAssignment","src":"3225:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3237:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3248:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3233:3:26"},"nodeType":"YulFunctionCall","src":"3233:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3225:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3267:9:26"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3282:6:26"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3298:3:26","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"3303:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3294:3:26"},"nodeType":"YulFunctionCall","src":"3294:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"3307:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3290:3:26"},"nodeType":"YulFunctionCall","src":"3290:19:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3278:3:26"},"nodeType":"YulFunctionCall","src":"3278:32:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3260:6:26"},"nodeType":"YulFunctionCall","src":"3260:51:26"},"nodeType":"YulExpressionStatement","src":"3260:51:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3331:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3342:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3327:3:26"},"nodeType":"YulFunctionCall","src":"3327:18:26"},{"name":"value1","nodeType":"YulIdentifier","src":"3347:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3320:6:26"},"nodeType":"YulFunctionCall","src":"3320:34:26"},"nodeType":"YulExpressionStatement","src":"3320:34:26"}]},"name":"abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3176:9:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3187:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3195:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3206:4:26","type":""}],"src":"3086:274:26"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_enum$_CharacterClass_$4788_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(lt(value, 8)) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_bytes32__to_t_address_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n}","id":26,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8456CB59 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xC4D66DE8 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x2D3 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x2FA JUMPI DUP1 PUSH4 0xD9741275 EQ PUSH2 0x30D JUMPI DUP1 PUSH4 0xE58378BB EQ PUSH2 0x320 JUMPI DUP1 PUSH4 0xE63AB1E9 EQ PUSH2 0x335 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x263 JUMPI DUP1 PUSH4 0x8F296759 EQ PUSH2 0x26B JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x292 JUMPI DUP1 PUSH4 0x94DD3215 EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x2B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3F4BA83A GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0x4DEB1934 EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0x5ADAA492 EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x211 JUMPI DUP1 PUSH4 0x5D1B973A EQ PUSH2 0x229 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x23C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x1C603192 EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1D0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15A PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0x107C JUMP JUMPDEST PUSH2 0x34A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x34 SLOAD PUSH2 0x182 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x166 JUMP JUMPDEST PUSH2 0x1AD PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x10AD JUMP JUMPDEST PUSH2 0x381 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x166 JUMP JUMPDEST PUSH2 0x1CE PUSH2 0x1C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x10E2 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1CE PUSH2 0x1DE CALLDATASIZE PUSH1 0x4 PUSH2 0x10E2 JUMP JUMPDEST PUSH2 0x3C5 JUMP JUMPDEST PUSH2 0x1CE PUSH2 0x3FD JUMP JUMPDEST PUSH2 0x1AD PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x110E JUMP JUMPDEST PUSH2 0x420 JUMP JUMPDEST PUSH2 0x1CE PUSH2 0x20C CALLDATASIZE PUSH1 0x4 PUSH2 0x1130 JUMP JUMPDEST PUSH2 0x451 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1212 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND PUSH2 0x15A JUMP JUMPDEST PUSH2 0x1CE PUSH2 0x237 CALLDATASIZE PUSH1 0x4 PUSH2 0x110E JUMP JUMPDEST PUSH2 0x48C JUMP JUMPDEST PUSH2 0x1AD PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST PUSH2 0x1CE PUSH2 0x62D JUMP JUMPDEST PUSH2 0x1AD PUSH32 0x35AF5B5A3FB4C88A8CB5E26E8A68A53CC8F6CAFCC4000A1DB1AE5753E25A168E DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x2A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x10E2 JUMP JUMPDEST PUSH2 0x64D JUMP JUMPDEST PUSH2 0x1CE PUSH2 0x2B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1130 JUMP JUMPDEST PUSH2 0x685 JUMP JUMPDEST PUSH2 0x1AD PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1CE PUSH2 0x2CE CALLDATASIZE PUSH1 0x4 PUSH2 0x1130 JUMP JUMPDEST PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0x1AD PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP2 JUMP JUMPDEST PUSH2 0x1CE PUSH2 0x308 CALLDATASIZE PUSH1 0x4 PUSH2 0x10E2 JUMP JUMPDEST PUSH2 0xBE5 JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH2 0x182 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x1AD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11B2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH2 0x1AD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11D2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x37B JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11F2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x3AC DUP3 PUSH2 0x381 JUMP JUMPDEST PUSH2 0x3B5 DUP2 PUSH2 0xC01 JUMP JUMPDEST PUSH2 0x3BF DUP4 DUP4 PUSH2 0xC0B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x3EE JUMPI PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3F8 DUP3 DUP3 PUSH2 0xCB0 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11D2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x415 DUP2 PUSH2 0xC01 JUMP JUMPDEST PUSH2 0x41D PUSH2 0xD2C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x32 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x43C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11B2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x469 DUP2 PUSH2 0xC01 JUMP JUMPDEST POP PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x34 SLOAD PUSH1 0x40 MLOAD PUSH4 0x3DE9D8F1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH4 0xF7A763C4 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4DA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4FE SWAP2 SWAP1 PUSH2 0x114B JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH4 0x34045917 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH4 0xD011645C SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x54D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x571 SWAP2 SWAP1 PUSH2 0x116C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x32 PUSH1 0x0 DUP6 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x58B JUMPI PUSH2 0x58B PUSH2 0x1185 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x5E3 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x5CF JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP DUP1 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5FC JUMPI PUSH2 0x5FC PUSH2 0x119B JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 GT ISZERO PUSH2 0x624 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6B47A4A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11D2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x645 DUP2 PUSH2 0xC01 JUMP JUMPDEST PUSH2 0x41D PUSH2 0xD8C JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11F2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11B2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x69D DUP2 PUSH2 0xC01 JUMP JUMPDEST POP PUSH1 0x34 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x706 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x723 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x731 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x74F JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x779 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH2 0x782 DUP7 PUSH2 0xDD5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x160 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP1 DUP5 ADD DUP3 SWAP1 MSTORE PUSH1 0x2 SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x3 PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x7 PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x8 PUSH2 0x100 DUP5 ADD MSTORE PUSH1 0x9 PUSH2 0x120 DUP5 ADD MSTORE PUSH1 0xA PUSH2 0x140 DUP5 ADD MSTORE SWAP1 MSTORE PUSH1 0x32 SWAP1 SWAP2 MSTORE PUSH2 0x814 SWAP1 PUSH32 0xD07FE408FA264E656A9C06E272928E4D4BB400D93CD5B5E74AC592F6170C2FD SWAP1 PUSH1 0xB PUSH2 0x1017 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x160 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP4 DUP4 ADD DUP5 SWAP1 MSTORE PUSH1 0x3 PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x7 PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x8 PUSH2 0x100 DUP5 ADD MSTORE PUSH1 0x9 PUSH2 0x120 DUP5 ADD MSTORE PUSH1 0xA PUSH2 0x140 DUP5 ADD MSTORE SWAP3 SWAP1 MSTORE PUSH1 0x32 SWAP1 SWAP2 MSTORE PUSH2 0x8A8 SWAP1 PUSH32 0x9FF19F865638BB86EEEAE31C2A9EC896D92141EDD461FE8F31E9E7484E4D2BB5 SWAP1 PUSH1 0xB PUSH2 0x1017 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x160 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 PUSH1 0x60 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x4 PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x7 PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x8 PUSH2 0x100 DUP5 ADD MSTORE PUSH1 0x9 PUSH2 0x120 DUP5 ADD MSTORE PUSH1 0xA PUSH2 0x140 DUP5 ADD MSTORE SWAP1 MSTORE PUSH1 0x32 SWAP1 SWAP2 MSTORE PUSH2 0x93E SWAP1 PUSH32 0x1F20EC30F5E9C102CF5806D0BB8118B98C797A37EA4CA5B5C306BA879366C77C SWAP1 PUSH1 0xB PUSH2 0x1017 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x160 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x4 PUSH1 0x80 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x5 PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x7 PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x8 PUSH2 0x100 DUP5 ADD MSTORE PUSH1 0x9 PUSH2 0x120 DUP5 ADD MSTORE PUSH1 0xA PUSH2 0x140 DUP5 ADD MSTORE SWAP1 MSTORE PUSH1 0x32 SWAP1 SWAP2 MSTORE PUSH2 0x9D4 SWAP1 PUSH32 0x3F52CF82629296489B84E1DBB72F035157400392AA100335795B652755F8CDDA SWAP1 PUSH1 0xB PUSH2 0x1017 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x160 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x4 PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x5 PUSH1 0xA0 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x6 PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0x7 PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x8 PUSH2 0x100 DUP5 ADD MSTORE PUSH1 0x9 PUSH2 0x120 DUP5 ADD MSTORE PUSH1 0xA PUSH2 0x140 DUP5 ADD MSTORE SWAP1 MSTORE PUSH1 0x32 SWAP1 SWAP2 MSTORE PUSH2 0xA6A SWAP1 PUSH32 0xF1229D5C96A3DE3BDB5814FE87C3432B211770FDA268DDCD390C87C4A4FEB8E7 SWAP1 PUSH1 0xB PUSH2 0x1017 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x160 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x4 PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x5 PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x6 PUSH1 0xC0 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x7 PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x8 PUSH2 0x100 DUP5 ADD MSTORE PUSH1 0x9 PUSH2 0x120 DUP5 ADD MSTORE PUSH1 0xA PUSH2 0x140 DUP5 ADD MSTORE SWAP1 MSTORE PUSH1 0x32 SWAP1 SWAP2 MSTORE PUSH2 0xB00 SWAP1 PUSH32 0x125F38041639E32C103AB47ABA064E25405A1FB08D2D6EE74CD07EB22BA6E040 SWAP1 PUSH1 0xB PUSH2 0x1017 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x160 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP4 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x4 PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x5 PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x6 PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x7 PUSH1 0xE0 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x8 PUSH2 0x100 DUP5 ADD MSTORE PUSH1 0x9 PUSH2 0x120 DUP5 ADD MSTORE PUSH1 0xA PUSH2 0x140 DUP5 ADD MSTORE SWAP1 MSTORE PUSH1 0x32 SWAP1 SWAP2 MSTORE PUSH2 0xB96 SWAP1 PUSH32 0x46BF7EFFEC7DA617C09FB0F99690C7F788A904E44D0053FC402FA3DB73B36725 SWAP1 PUSH1 0xB PUSH2 0x1017 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0xBDD JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xBEE DUP3 PUSH2 0x381 JUMP JUMPDEST PUSH2 0xBF7 DUP2 PUSH2 0xC01 JUMP JUMPDEST PUSH2 0x3BF DUP4 DUP4 PUSH2 0xCB0 JUMP JUMPDEST PUSH2 0x41D DUP2 CALLER PUSH2 0xEB7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11F2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xC26 DUP5 DUP5 PUSH2 0x64D JUMP JUMPDEST PUSH2 0xCA6 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xC5C CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x37B JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP PUSH2 0x37B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11F2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xCCB DUP5 DUP5 PUSH2 0x64D JUMP JUMPDEST ISZERO PUSH2 0xCA6 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP8 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 PUSH1 0x1 SWAP2 POP POP PUSH2 0x37B JUMP JUMPDEST PUSH2 0xD34 PUSH2 0xEF4 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1212 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND DUP2 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0xD94 PUSH2 0xF26 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1212 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 CALLER PUSH2 0xD6E JUMP JUMPDEST PUSH2 0xDDD PUSH2 0xF57 JUMP JUMPDEST PUSH2 0xDE5 PUSH2 0xFA0 JUMP JUMPDEST PUSH2 0xDED PUSH2 0xFB0 JUMP JUMPDEST PUSH2 0xDF5 PUSH2 0xFB8 JUMP JUMPDEST PUSH2 0xE00 PUSH1 0x0 DUP3 PUSH2 0xC0B JUMP JUMPDEST POP PUSH2 0xE19 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11D2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0xC0B JUMP JUMPDEST POP PUSH2 0xE32 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x11B2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 PUSH2 0xC0B JUMP JUMPDEST POP PUSH2 0xE5D PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 DUP3 PUSH2 0xC0B JUMP JUMPDEST POP PUSH2 0xE88 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP3 PUSH2 0xC0B JUMP JUMPDEST POP PUSH2 0xEB3 PUSH32 0x35AF5B5A3FB4C88A8CB5E26E8A68A53CC8F6CAFCC4000A1DB1AE5753E25A168E DUP3 PUSH2 0xC0B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xEC1 DUP3 DUP3 PUSH2 0x64D JUMP JUMPDEST PUSH2 0xEB3 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1212 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND PUSH2 0xF24 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1212 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xF24 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0xF24 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xFA8 PUSH2 0xF57 JUMP JUMPDEST PUSH2 0xF24 PUSH2 0xFC8 JUMP JUMPDEST PUSH2 0xF24 PUSH2 0xF57 JUMP JUMPDEST PUSH2 0xFC0 PUSH2 0xF57 JUMP JUMPDEST PUSH2 0xF24 PUSH2 0xFE9 JUMP JUMPDEST PUSH2 0xFD0 PUSH2 0xF57 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1212 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xFF1 PUSH2 0xF57 JUMP JUMPDEST PUSH1 0x1 PUSH32 0x9B779B17422D0DF92223018B32B4D1FA46E071723D6817E2486D003BECC55F00 SSTORE JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x1057 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x1057 JUMPI DUP3 MLOAD DUP3 SWAP1 PUSH1 0xFF AND SWAP1 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1037 JUMP JUMPDEST POP PUSH2 0x1063 SWAP3 SWAP2 POP PUSH2 0x1067 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1063 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1068 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x108E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x10A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x10DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1105 PUSH1 0x20 DUP5 ADD PUSH2 0x10C6 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1121 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1142 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10A6 DUP3 PUSH2 0x10C6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x115D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x8 DUP2 LT PUSH2 0x10A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x117E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID 0xB1 SWAP6 CHAINID 0xDF CREATE 0x1E DUP6 PUSH16 0xB3F010C267A7B1C60363CF8A4664E21C 0xC8 SWAP13 0x26 0x22 CHAINID KECCAK256 0x21 0x4E PUSH6 0xD7A28E3265B3 PUSH27 0x6474929F336521B332C1681B933F6CB9F3376673440D862A02DD7B 0xC7 0xDE 0xC4 0xDC 0xEE 0xDD 0xA7 PUSH22 0xE58DD541E08A116C6C53815C0BD028192F7B626800CD 0x5E 0xD1 0x5C PUSH15 0x187E77E9AEE88184C21F4F2182AB58 0x27 0xCB EXTCODESIZE PUSH31 0x7FBEDCD63F03300A264697066735822122036EF747118CCF178A883EE05F1 ORIGIN PUSH26 0xE81F9825A21AEC381F582318D49D3F36BE64736F6C6343000814 STOP CALLER ","sourceMap":"261:2496:25:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3443:202:0;;;;;;:::i;:::-;;:::i;:::-;;;470:14:26;;463:22;445:41;;433:2;418:18;3443:202:0;;;;;;;;522:34:25;;;;;-1:-1:-1;;;;;522:34:25;;;;;;-1:-1:-1;;;;;661:32:26;;;643:51;;631:2;616:18;522:34:25;497:203:26;4759:191:0;;;;;;:::i;:::-;;:::i;:::-;;;1036:25:26;;;1024:2;1009:18;4759:191:0;890:177:26;5246:136:0;;;;;;:::i;:::-;;:::i;:::-;;6348:245;;;;;;:::i;:::-;;:::i;1612:75:20:-;;;:::i;389:54:25:-;;;;;;:::i;:::-;;:::i;1733:146::-;;;;;;:::i;:::-;;:::i;2692:145:3:-;-1:-1:-1;;;;;;;;;;;2821:9:3;;;2692:145;;1971:784:25;;;;;;:::i;:::-;;:::i;739:60:20:-;;776:23;739:60;;1535:71;;;:::i;805:64::-;;844:25;805:64;;3732:207:0;;;;;;:::i;:::-;;:::i;1498:163:25:-;;;;;;:::i;:::-;;:::i;2317:49:0:-;;2362:4;2317:49;;679:733:25;;;;;;:::i;:::-;;:::i;671:62:20:-;;709:24;671:62;;5662:138:0;;;;;;:::i;:::-;;:::i;472:35:25:-;;;;;-1:-1:-1;;;;;472:35:25;;;537:60:20;;-1:-1:-1;;;;;;;;;;;537:60:20;;603:62;;-1:-1:-1;;;;;;;;;;;603:62:20;;3443:202:0;3528:4;-1:-1:-1;;;;;;3551:47:0;;-1:-1:-1;;;3551:47:0;;:87;;-1:-1:-1;;;;;;;;;;1133:40:5;;;3602:36:0;3544:94;3443:202;-1:-1:-1;;3443:202:0:o;4759:191::-;4824:7;4919:14;;;-1:-1:-1;;;;;;;;;;;4919:14:0;;;;;:24;;;;4759:191::o;5246:136::-;5320:18;5333:4;5320:12;:18::i;:::-;3191:16;3202:4;3191:10;:16::i;:::-;5350:25:::1;5361:4;5367:7;5350:10;:25::i;:::-;;5246:136:::0;;;:::o;6348:245::-;-1:-1:-1;;;;;6441:34:0;;966:10:2;6441:34:0;6437:102;;6498:30;;-1:-1:-1;;;6498:30:0;;;;;;;;;;;6437:102;6549:37;6561:4;6567:18;6549:11;:37::i;:::-;;6348:245;;:::o;1612:75:20:-;-1:-1:-1;;;;;;;;;;;3191:16:0;3202:4;3191:10;:16::i;:::-;1670:10:20::1;:8;:10::i;:::-;1612:75:::0;:::o;389:54:25:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1733:146::-;-1:-1:-1;;;;;;;;;;;3191:16:0;3202:4;3191:10;:16::i;:::-;-1:-1:-1;1835:20:25::1;:37:::0;;-1:-1:-1;;;;;;1835:37:25::1;-1:-1:-1::0;;;;;1835:37:25;;;::::1;::::0;;;::::1;::::0;;1733:146::o;1971:784::-;2186:19;;2277:77;;-1:-1:-1;;;2277:77:25;;;;;1036:25:26;;;-1:-1:-1;;;;;2186:19:25;;;;2103:47;;2186:19;;2277:68;;1009:18:26;;2277:77:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2433:20;;2487:36;;-1:-1:-1;;;2487:36:25;;;;;1036:25:26;;;2225:129:25;;-1:-1:-1;;;;;;2433:20:25;;2405:19;;2433:20;;2487:27;;1009:18:26;;2487:36:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2464:59;;2582:23;2608:17;:42;2634:14;2626:23;;;;;;;;:::i;:::-;2608:42;;;;;;;;;;;2582:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2678:6;2685:12;2678:20;;;;;;;;:::i;:::-;;;;;;;2664:11;:34;2660:89;;;2721:17;;-1:-1:-1;;;2721:17:25;;;;;;;;;;;2660:89;2042:713;;;;;1971:784;;:::o;1535:71:20:-;-1:-1:-1;;;;;;;;;;;3191:16:0;3202:4;3191:10;:16::i;:::-;1591:8:20::1;:6;:8::i;3732:207:0:-:0;3809:4;3901:14;;;-1:-1:-1;;;;;;;;;;;3901:14:0;;;;;;;;-1:-1:-1;;;;;3901:31:0;;;;;;;;;;;;;;;3732:207::o;1498:163:25:-;-1:-1:-1;;;;;;;;;;;3191:16:0;3202:4;3191:10;:16::i;:::-;-1:-1:-1;1612:19:25::1;:42:::0;;-1:-1:-1;;;;;;1612:42:25::1;-1:-1:-1::0;;;;;1612:42:25;;;::::1;::::0;;;::::1;::::0;;1498:163::o;679:733::-;8870:21:1;4302:15;;-1:-1:-1;;;4302:15:1;;;;4301:16;;4348:14;;4158:30;4726:16;;:34;;;;;4746:14;4726:34;4706:54;;4770:17;4790:11;:16;;4805:1;4790:16;:50;;;;-1:-1:-1;4818:4:1;4810:25;:30;4790:50;4770:70;;4856:12;4855:13;:30;;;;;4873:12;4872:13;4855:30;4851:91;;;4908:23;;-1:-1:-1;;;4908:23:1;;;;;;;;;;;4851:91;4951:18;;-1:-1:-1;;4951:18:1;4968:1;4951:18;;;4979:67;;;;5013:22;;-1:-1:-1;;;;5013:22:1;-1:-1:-1;;;5013:22:1;;;4979:67;750:29:25::1;766:12;750:15;:29::i;:::-;863:57;::::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;863:57:25;;;890:1:::1;863:57;::::0;;::::1;::::0;;;893:1:::1;863:57:::0;;;;;;;896:1:::1;863:57:::0;;;;899:1:::1;863:57:::0;;;;902:1:::1;863:57:::0;;;;905:1:::1;863:57:::0;;;;908:1:::1;863:57:::0;;;;911:1:::1;863:57:::0;;;;914:1:::1;863:57:::0;;;;917:2:::1;863:57:::0;;;;:20;;:17:::1;:20:::0;;;:57:::1;::::0;:20;;:57:::1;;:::i;:::-;-1:-1:-1::0;943:57:25::1;::::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;943:57:25;;;970:1:::1;943:57;::::0;;::::1;::::0;;;;973:1:::1;943:57:::0;;;;;;976:1:::1;943:57:::0;;;;979:1:::1;943:57:::0;;;;982:1:::1;943:57:::0;;;;985:1:::1;943:57:::0;;;;988:1:::1;943:57:::0;;;;991:1:::1;943:57:::0;;;;994:1:::1;943:57:::0;;;;997:2:::1;943:57:::0;;;;:20;;;:17:::1;:20:::0;;;:57:::1;::::0;:20;;:57:::1;;:::i;:::-;-1:-1:-1::0;1025:57:25::1;::::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;1025:57:25;;;1052:1:::1;1025:57;::::0;;::::1;::::0;;;;1055:1:::1;1025:57:::0;;;;;;;1058:1:::1;1025:57:::0;;;;;;1061:1:::1;1025:57:::0;;;;1064:1:::1;1025:57:::0;;;;1067:1:::1;1025:57:::0;;;;1070:1:::1;1025:57:::0;;;;1073:1:::1;1025:57:::0;;;;1076:1:::1;1025:57:::0;;;;1079:2:::1;1025:57:::0;;;;:20;;:17:::1;:20:::0;;;:57:::1;::::0;:20;;:57:::1;;:::i;:::-;-1:-1:-1::0;1103:57:25::1;::::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;1103:57:25;;;1130:1:::1;1103:57;::::0;;::::1;::::0;;;;1133:1:::1;1103:57:::0;;;;;;;1136:1:::1;1103:57:::0;;;;1139:1:::1;1103:57:::0;;;;;;1142:1:::1;1103:57:::0;;;;1145:1:::1;1103:57:::0;;;;1148:1:::1;1103:57:::0;;;;1151:1:::1;1103:57:::0;;;;1154:1:::1;1103:57:::0;;;;1157:2:::1;1103:57:::0;;;;:20;;:17:::1;:20:::0;;;:57:::1;::::0;:20;;:57:::1;;:::i;:::-;-1:-1:-1::0;1183:57:25::1;::::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;1183:57:25;;;1210:1:::1;1183:57;::::0;;::::1;::::0;;;;1213:1:::1;1183:57:::0;;;;;;;1216:1:::1;1183:57:::0;;;;1219:1:::1;1183:57:::0;;;;1222:1:::1;1183:57:::0;;;;;;1225:1:::1;1183:57:::0;;;;1228:1:::1;1183:57:::0;;;;1231:1:::1;1183:57:::0;;;;1234:1:::1;1183:57:::0;;;;1237:2:::1;1183:57:::0;;;;:20;;:17:::1;:20:::0;;;:57:::1;::::0;:20;;:57:::1;;:::i;:::-;-1:-1:-1::0;1260:57:25::1;::::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;1260:57:25;;;1287:1:::1;1260:57;::::0;;::::1;::::0;;;;1290:1:::1;1260:57:::0;;;;;;;1293:1:::1;1260:57:::0;;;;1296:1:::1;1260:57:::0;;;;1299:1:::1;1260:57:::0;;;;1302:1:::1;1260:57:::0;;;;;;1305:1:::1;1260:57:::0;;;;1308:1:::1;1260:57:::0;;;;1311:1:::1;1260:57:::0;;;;1314:2:::1;1260:57:::0;;;;:20;;:17:::1;:20:::0;;;:57:::1;::::0;:20;;:57:::1;;:::i;:::-;-1:-1:-1::0;1339:57:25::1;::::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;1339:57:25;;;1366:1:::1;1339:57;::::0;;::::1;::::0;;;;1369:1:::1;1339:57:::0;;;;;;;1372:1:::1;1339:57:::0;;;;1375:1:::1;1339:57:::0;;;;1378:1:::1;1339:57:::0;;;;1381:1:::1;1339:57:::0;;;;1384:1:::1;1339:57:::0;;;;;;1387:1:::1;1339:57:::0;;;;1390:1:::1;1339:57:::0;;;;1393:2:::1;1339:57:::0;;;;:20;;:17:::1;:20:::0;;;:57:::1;::::0;:20;;:57:::1;;:::i;:::-;;5070:14:1::0;5066:101;;;5100:23;;-1:-1:-1;;;;5100:23:1;;;5142:14;;-1:-1:-1;3025:50:26;;5142:14:1;;3013:2:26;2998:18;5142:14:1;;;;;;;5066:101;4092:1081;;;;;679:733:25;:::o;5662:138:0:-;5737:18;5750:4;5737:12;:18::i;:::-;3191:16;3202:4;3191:10;:16::i;:::-;5767:26:::1;5779:4;5785:7;5767:11;:26::i;4148:103::-:0;4214:30;4225:4;966:10:2;4214::0;:30::i;7270:387::-;7347:4;-1:-1:-1;;;;;;;;;;;7437:22:0;7445:4;7451:7;7437;:22::i;:::-;7432:219;;7475:8;:14;;;;;;;;;;;-1:-1:-1;;;;;7475:31:0;;;;;;;;;:38;;-1:-1:-1;;7475:38:0;7509:4;7475:38;;;7559:12;966:10:2;;887:96;7559:12:0;-1:-1:-1;;;;;7532:40:0;7550:7;-1:-1:-1;;;;;7532:40:0;7544:4;7532:40;;;;;;;;;;7593:4;7586:11;;;;;7432:219;7635:5;7628:12;;;;;7892:388;7970:4;-1:-1:-1;;;;;;;;;;;8059:22:0;8067:4;8073:7;8059;:22::i;:::-;8055:219;;;8131:5;8097:14;;;;;;;;;;;-1:-1:-1;;;;;8097:31:0;;;;;;;;;;:39;;-1:-1:-1;;8097:39:0;;;8155:40;966:10:2;;8097:14:0;;8155:40;;8131:5;8155:40;8216:4;8209:11;;;;;3674:178:3;2563:16;:14;:16::i;:::-;-1:-1:-1;;;;;;;;;;;3791:17:3;;-1:-1:-1;;3791:17:3::1;::::0;;3823:22:::1;966:10:2::0;3832:12:3::1;3823:22;::::0;-1:-1:-1;;;;;661:32:26;;;643:51;;631:2;616:18;3823:22:3::1;;;;;;;3722:130;3674:178::o:0;3366:176::-;2316:19;:17;:19::i;:::-;-1:-1:-1;;;;;;;;;;;3484:16:3;;-1:-1:-1;;3484:16:3::1;3496:4;3484:16;::::0;;3515:20:::1;966:10:2::0;3522:12:3::1;887:96:2::0;970:559:20;6931:20:1;:18;:20::i;:::-;1053:17:20::1;:15;:17::i;:::-;1080:22;:20;:22::i;:::-;1112:24;:22;:24::i;:::-;1199:44;2362:4:0;1230:12:20::0;1199:10:::1;:44::i;:::-;;1298:37;-1:-1:-1::0;;;;;;;;;;;1322:12:20::1;1298:10;:37::i;:::-;;1345:36;-1:-1:-1::0;;;;;;;;;;;1368:12:20::1;1345:10;:36::i;:::-;;1391:37;709:24;1415:12;1391:10;:37::i;:::-;;1438:36;776:23;1461:12;1438:10;:36::i;:::-;;1484:38;844:25;1509:12;1484:10;:38::i;:::-;;970:559:::0;:::o;4381:197:0:-;4469:22;4477:4;4483:7;4469;:22::i;:::-;4464:108;;4514:47;;-1:-1:-1;;;4514:47:0;;-1:-1:-1;;;;;3278:32:26;;4514:47:0;;;3260:51:26;3327:18;;;3320:34;;;3233:18;;4514:47:0;;;;;;;3105:126:3;-1:-1:-1;;;;;;;;;;;2821:9:3;;;3163:62;;3199:15;;-1:-1:-1;;;3199:15:3;;;;;;;;;;;3163:62;3105:126::o;2905:128::-;-1:-1:-1;;;;;;;;;;;2821:9:3;;;2966:61;;;3001:15;;-1:-1:-1;;;3001:15:3;;;;;;;;;;;7084:141:1;8870:21;8560:40;-1:-1:-1;;;8560:40:1;;;;7146:73;;7191:17;;-1:-1:-1;;;7191:17:1;;;;;;;;;;;1836:97:3;6931:20:1;:18;:20::i;:::-;1899:27:3::1;:25;:27::i;3231:65:0:-:0;6931:20:1;:18;:20::i;2540:111:4:-;6931:20:1;:18;:20::i;:::-;2610:34:4::1;:32;:34::i;1939:156:3:-:0;6931:20:1;:18;:20::i;:::-;-1:-1:-1;;;;;;;;;;;2071:17:3;;-1:-1:-1;;2071:17:3::1;::::0;;1939:156::o;2657:183:4:-;6931:20:1;:18;:20::i;:::-;1805:1:4::1;2388:30:::0;2810:23;2657:183::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:286:26;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:26;;209:43;;199:71;;266:1;263;256:12;199:71;289:5;14:286;-1:-1:-1;;;14:286:26:o;705:180::-;764:6;817:2;805:9;796:7;792:23;788:32;785:52;;;833:1;830;823:12;785:52;-1:-1:-1;856:23:26;;705:180;-1:-1:-1;705:180:26:o;1072:173::-;1140:20;;-1:-1:-1;;;;;1189:31:26;;1179:42;;1169:70;;1235:1;1232;1225:12;1169:70;1072:173;;;:::o;1250:254::-;1318:6;1326;1379:2;1367:9;1358:7;1354:23;1350:32;1347:52;;;1395:1;1392;1385:12;1347:52;1431:9;1418:23;1408:33;;1460:38;1494:2;1483:9;1479:18;1460:38;:::i;:::-;1450:48;;1250:254;;;;;:::o;1509:248::-;1577:6;1585;1638:2;1626:9;1617:7;1613:23;1609:32;1606:52;;;1654:1;1651;1644:12;1606:52;-1:-1:-1;;1677:23:26;;;1747:2;1732:18;;;1719:32;;-1:-1:-1;1509:248:26:o;1944:186::-;2003:6;2056:2;2044:9;2035:7;2031:23;2027:32;2024:52;;;2072:1;2069;2062:12;2024:52;2095:29;2114:9;2095:29;:::i;2135:279::-;2224:6;2277:2;2265:9;2256:7;2252:23;2248:32;2245:52;;;2293:1;2290;2283:12;2245:52;2325:9;2319:16;2364:1;2357:5;2354:12;2344:40;;2380:1;2377;2370:12;2419:184;2489:6;2542:2;2530:9;2521:7;2517:23;2513:32;2510:52;;;2558:1;2555;2548:12;2510:52;-1:-1:-1;2581:16:26;;2419:184;-1:-1:-1;2419:184:26:o;2608:127::-;2669:10;2664:3;2660:20;2657:1;2650:31;2700:4;2697:1;2690:15;2724:4;2721:1;2714:15;2740:127;2801:10;2796:3;2792:20;2789:1;2782:31;2832:4;2829:1;2822:15;2856:4;2853:1;2846:15"},"gasEstimates":{"creation":{"codeDepositCost":"942200","executionCost":"981","totalCost":"943181"},"external":{"ADMIN_ROLE()":"328","DEFAULT_ADMIN_ROLE()":"306","MINTER_ROLE()":"239","OWNER_ROLE()":"infinite","PAUSER_ROLE()":"infinite","UTILITY_ROLE()":"240","canUseSkill(uint256,uint256)":"infinite","charClassToSkills(uint256,uint256)":"4710","characterNFTManager()":"2383","getRoleAdmin(bytes32)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"infinite","initialize(address)":"infinite","levelContractAddress()":"2425","pause()":"infinite","paused()":"infinite","renounceRole(bytes32,address)":"29212","revokeRole(bytes32,address)":"infinite","setCharacterNFTManager(address)":"infinite","setLevelContract(address)":"infinite","supportsInterface(bytes4)":"450","unpause()":"infinite"}},"methodIdentifiers":{"ADMIN_ROLE()":"75b238fc","DEFAULT_ADMIN_ROLE()":"a217fddf","MINTER_ROLE()":"d5391393","OWNER_ROLE()":"e58378bb","PAUSER_ROLE()":"e63ab1e9","UTILITY_ROLE()":"8f296759","canUseSkill(uint256,uint256)":"5d1b973a","charClassToSkills(uint256,uint256)":"4deb1934","characterNFTManager()":"1c603192","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","initialize(address)":"c4d66de8","levelContractAddress()":"d9741275","pause()":"8456cb59","paused()":"5c975abb","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","setCharacterNFTManager(address)":"94dd3215","setLevelContract(address)":"5adaa492","supportsInterface(bytes4)":"01ffc9a7","unpause()":"3f4ba83a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValues\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SkillNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UTILITY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"skillChosen\",\"type\":\"uint256\"}],\"name\":\"canUseSkill\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"charClassToSkills\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"characterNFTManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levelContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_characterNFTManager\",\"type\":\"address\"}],\"name\":\"setCharacterNFTManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_levelContract\",\"type\":\"address\"}],\"name\":\"setLevelContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"canUseSkill(uint256,uint256)\":{\"details\":\"Check that the character class and skill chosen are valid\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setCharacterNFTManager(address)\":{\"details\":\"Set the address of the CharacterNFTManager contract\"},\"setLevelContract(address)\":{\"details\":\"Set the address of the Level contract\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidValues()\":[{\"notice\":\"ERRORS *\"}],\"SkillNotAllowed()\":[{\"notice\":\"ERRORS *\"}]},\"kind\":\"user\",\"methods\":{\"OWNER_ROLE()\":{\"notice\":\"ROLES *\"},\"charClassToSkills(uint256,uint256)\":{\"notice\":\"VARIABLES *\"},\"initialize(address)\":{\"notice\":\"FUNCTIONS *\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/skills/SkillTree.sol\":\"SkillTree\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x6f7014d688c4386c26e8c02371ecb7f7740d2542f1ecadffd5a3084511e2a344\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/BaseHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract BaseHelper is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    /** ROLES **/\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant UTILITY_ROLE = keccak256(\\\"UTILITY_ROLE\\\");\\n\\n    /** ERRORS **/\\n\\n    error InvalidValues();\\n\\n    /** MODIFIERS **/\\n\\n    /** FUNCTIONS **/\\n\\n    function _baseInitialize(address initialOwner) internal onlyInitializing {\\n        __Pausable_init();\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n\\n        // Grant default admin role to initialOwner\\n        _grantRole(DEFAULT_ADMIN_ROLE, initialOwner);\\n        // Grant pauser role to initialOwner\\n        _grantRole(PAUSER_ROLE, initialOwner);\\n        _grantRole(OWNER_ROLE, initialOwner);\\n        _grantRole(MINTER_ROLE, initialOwner);\\n        _grantRole(ADMIN_ROLE, initialOwner);\\n        _grantRole(UTILITY_ROLE, initialOwner);\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    // The gap is needed to avoid overwriting storage variables in future upgrades\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa7a00044dbab2a0f885e29248f5cd0d12fd4639169795202883ff28bee439756\",\"license\":\"MIT\"},\"contracts/erc721/CharacterNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./CharacterNFTManager.sol\\\";\\nimport \\\"./CharacterNFTTokenURI.sol\\\";\\n\\ncontract CharacterNFT is ERC721, AccessControl {\\n    using Strings for uint256;\\n\\n    /** VARIABLES **/\\n\\n    struct CharacterData {\\n        string className;\\n        string classImage;\\n        string classDescription;\\n    }\\n\\n    mapping(uint256 => CharacterData) public classIdToCharacterData;\\n    address public characterNFTManagerContract;\\n    address public tokenUriContract;\\n\\n    /** ROLES **/\\n\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n    /** ERRORS **/\\n\\n    error InvalidValues();\\n\\n    /** MODIFIERS **/\\n\\n    /** FUNCTIONS **/\\n\\n    constructor() ERC721(\\\"Diablo\\\", \\\"D2NFT\\\") {\\n        // DEFAULT_ADMIN_ROLE is a special role that acts as the default admin role for all roles\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(OWNER_ROLE, msg.sender);\\n        _grantRole(MINTER_ROLE, msg.sender);\\n        _grantRole(BURNER_ROLE, msg.sender);\\n\\n        classIdToCharacterData[1].className = \\\"BARBARIAN\\\";\\n        classIdToCharacterData[2].className = \\\"NECROMANCER\\\";\\n        classIdToCharacterData[3].className = \\\"PALADIN\\\";\\n        classIdToCharacterData[4].className = \\\"SORCERESS\\\";\\n        classIdToCharacterData[5].className = \\\"AMAZON\\\";\\n        classIdToCharacterData[6].className = \\\"ASSASSIN\\\";\\n        classIdToCharacterData[7].className = \\\"DRUID\\\";\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ERC721, AccessControl) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Set the address of the CharacterNFTManager contract\\n     */\\n    function setCharacterNFTManager(\\n        address characterNFTManagerAddress\\n    ) public onlyRole(OWNER_ROLE) {\\n        characterNFTManagerContract = characterNFTManagerAddress;\\n    }\\n\\n    /**\\n     * @dev Set the address of the CharacterNFTTokenURI contract\\n     */\\n    function setTokenUriContract(\\n        address tokenUriContractAddress\\n    ) public onlyRole(OWNER_ROLE) {\\n        tokenUriContract = tokenUriContractAddress;\\n    }\\n\\n    /**\\n     * @dev Returns the name of a given token ID\\n     */\\n    function tokenName(uint256 tokenId) public view returns (string memory) {\\n        uint256 classEnumValue = uint256(\\n            CharacterNFTManager(characterNFTManagerContract)\\n                .tokenIdToCharacterClass(tokenId)\\n        );\\n        string memory className = classIdToCharacterData[classEnumValue]\\n            .className;\\n        return string(abi.encodePacked(className, \\\" #\\\", tokenId.toString()));\\n    }\\n\\n    /**\\n     * @dev Returns the URI for a given token ID\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override returns (string memory) {\\n        _requireOwned(tokenId);\\n        if (tokenUriContract == address(0)) {\\n            return \\\"\\\";\\n        }\\n        return CharacterNFTTokenURI(tokenUriContract).tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Update the class names\\n     */\\n    function updateClassNames(\\n        uint256 classEnumValue,\\n        string memory classNames\\n    ) public onlyRole(OWNER_ROLE) {\\n        classIdToCharacterData[classEnumValue].className = classNames;\\n    }\\n\\n    /**\\n     * @dev Update the class images\\n     */\\n    function updateClassImages(\\n        uint256 classEnumValue,\\n        string memory classImages\\n    ) public onlyRole(OWNER_ROLE) {\\n        classIdToCharacterData[classEnumValue].classImage = classImages;\\n    }\\n\\n    /**\\n     * @dev Update the class descriptions\\n     */\\n    function updateClassDescriptions(\\n        uint256 classEnumValue,\\n        string memory classDescriptions\\n    ) public onlyRole(OWNER_ROLE) {\\n        classIdToCharacterData[classEnumValue]\\n            .classDescription = classDescriptions;\\n    }\\n\\n    /**\\n     * @dev Mint a new token, only a minter can call this function\\n     */\\n    function mint(uint256 tokenId, address to) public onlyRole(MINTER_ROLE) {\\n        if (tokenId == 0 || to == address(0)) {\\n            revert InvalidValues();\\n        }\\n        _safeMint(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Burn a token, only a burner can call this function\\n     */\\n    function burn(uint256 tokenId) public onlyRole(BURNER_ROLE) {\\n        if (tokenId == 0) {\\n            revert InvalidValues();\\n        }\\n        _burn(tokenId);\\n    }\\n\\n    function getClassDescription(\\n        uint256 tokenId\\n    ) public view returns (string memory) {\\n        uint256 classEnumValue = uint256(\\n            CharacterNFTManager(characterNFTManagerContract)\\n                .tokenIdToCharacterClass(tokenId)\\n        );\\n        return classIdToCharacterData[classEnumValue].classDescription;\\n    }\\n\\n    function getClassImage(\\n        uint256 tokenId\\n    ) public view returns (string memory) {\\n        uint256 classEnumValue = uint256(\\n            CharacterNFTManager(characterNFTManagerContract)\\n                .tokenIdToCharacterClass(tokenId)\\n        );\\n        return classIdToCharacterData[classEnumValue].classImage;\\n    }\\n\\n    function getClassName(uint256 tokenId) public view returns (string memory) {\\n        uint256 classEnumValue = uint256(\\n            CharacterNFTManager(characterNFTManagerContract)\\n                .tokenIdToCharacterClass(tokenId)\\n        );\\n        return classIdToCharacterData[classEnumValue].className;\\n    }\\n}\\n\",\"keccak256\":\"0xbcbce91362dda57eb5f22ea6986e9153fa70254ac36401c8b425f61c2898118f\",\"license\":\"MIT\"},\"contracts/erc721/CharacterNFTManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../BaseHelper.sol\\\";\\nimport \\\"./CharacterNFT.sol\\\";\\n\\ncontract CharacterNFTManager is BaseHelper {\\n    /** ENUMS **/\\n    enum CharacterClass {\\n        NULL,\\n        BARBARIAN,\\n        NECROMANCER,\\n        PALADIN,\\n        SORCERESS,\\n        AMAZON,\\n        ASSASSIN,\\n        DRUID\\n    }\\n\\n    /** VARIABLES **/\\n\\n    // Track the last token ID minted\\n    uint256 public tokenIdCounter;\\n    // Track the character class of each token ID\\n    mapping(uint256 => CharacterClass) public tokenIdToCharacterClass;\\n    // Price per mint\\n    uint256 public pricePerMint;\\n    // CharacterNFT contract\\n    address public characterNFT;\\n\\n    /** ERRORS **/\\n\\n    error InsufficientFunds(uint256 pricePerMint, uint256 amount);\\n    error InvalidCharacterClass();\\n\\n    /** MODIFIERS **/\\n\\n    /** FUNCTIONS **/\\n\\n    function initialize(address initialOwner) public initializer {\\n        _baseInitialize(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Set the price per mint\\n     */\\n    function setPricePerMint(\\n        uint256 _pricePerMint\\n    ) public onlyRole(OWNER_ROLE) {\\n        pricePerMint = _pricePerMint;\\n    }\\n\\n    /**\\n     * @dev Set the address of the CharacterNFT contract\\n     */\\n    function setCharacterNFT(\\n        address _characterNFT\\n    ) public onlyRole(OWNER_ROLE) {\\n        characterNFT = _characterNFT;\\n    }\\n\\n    /**\\n     * @dev Withdraw the contract balance\\n     */\\n    function withdraw() public onlyRole(OWNER_ROLE) {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @dev Mint a character NFT, open for public use, requires payment\\n     */\\n    function mintCharacterPublic(\\n        uint256 amount,\\n        CharacterClass charType\\n    ) public payable whenNotPaused nonReentrant {\\n        if (charType == CharacterClass.NULL) {\\n            revert InvalidCharacterClass();\\n        }\\n        if (amount == 0) {\\n            revert InvalidValues();\\n        }\\n        if (msg.value < pricePerMint * amount) {\\n            revert InsufficientFunds(pricePerMint, amount);\\n        }\\n        for (uint256 i = 0; i < amount; i++) {\\n            tokenIdCounter++;\\n            uint256 newTokenId = tokenIdCounter;\\n            tokenIdToCharacterClass[newTokenId] = charType;\\n            CharacterNFT(characterNFT).mint(newTokenId, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Mint a character NFT, only for MINTER use, no payment required\\n     */\\n    function mintCharacterPrivate(\\n        uint256 amount,\\n        address to,\\n        CharacterClass charType\\n    ) public onlyRole(MINTER_ROLE) {\\n        _mintChar(amount, to, charType);\\n    }\\n\\n    /**\\n     * @dev Mint a batch of character NFTs, only for owner use, no payment required\\n     */\\n    function mintBatch(\\n        uint256[] calldata amounts,\\n        address[] calldata toAddresses,\\n        CharacterClass[] calldata charTypes\\n    ) public onlyRole(MINTER_ROLE) {\\n        if (\\n            amounts.length != toAddresses.length ||\\n            amounts.length != charTypes.length\\n        ) {\\n            revert InvalidValues();\\n        }\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            _mintChar(amounts[i], toAddresses[i], charTypes[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal mint helper\\n     */\\n    function _mintChar(\\n        uint256 amount,\\n        address to,\\n        CharacterClass charType\\n    ) internal {\\n        if (\\n            charType == CharacterClass.NULL || amount == 0 || to == address(0)\\n        ) {\\n            revert InvalidValues();\\n        }\\n\\n        for (uint256 i = 0; i < amount; i++) {\\n            tokenIdCounter++;\\n            uint256 newTokenId = tokenIdCounter;\\n            tokenIdToCharacterClass[newTokenId] = charType;\\n            CharacterNFT(characterNFT).mint(newTokenId, to);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc637dd0e44d9f5bc39d0708eb915b1c46758678dfb568e8ac094e2f866166996\",\"license\":\"MIT\"},\"contracts/erc721/CharacterNFTTokenURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\nimport \\\"../BaseHelper.sol\\\";\\nimport \\\"./CharacterNFT.sol\\\";\\nimport \\\"../leveling/Level.sol\\\";\\n\\ncontract CharacterNFTTokenURI is BaseHelper {\\n    using Strings for uint256;\\n    /** STRUCTS **/\\n\\n    struct Attribute {\\n        string name;\\n        uint256 value;\\n    }\\n\\n    /** VARIABLES **/\\n\\n    address public characterNFT;\\n\\n    address public levelContractAddress;\\n\\n    /** ERRORS **/\\n\\n    /** MODIFIERS **/\\n\\n    /** FUNCTIONS **/\\n\\n    function initialize(address initialOwner) public initializer {\\n        _baseInitialize(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Set the address of the CharacterNFT contract\\n     */\\n    function setCharacterNFT(\\n        address _characterNFT\\n    ) public onlyRole(OWNER_ROLE) {\\n        characterNFT = _characterNFT;\\n    }\\n\\n    /**\\n     * @dev Set the address of the Level contract\\n     */\\n    function setLevelContract(\\n        address _levelContract\\n    ) public onlyRole(OWNER_ROLE) {\\n        levelContractAddress = _levelContract;\\n    }\\n\\n    /**\\n     * @dev Returns the URI for a given token ID\\n     */\\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\\n        return _createURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Creates the URI for a given token ID\\n     */\\n    function _createURI(uint256 tokenId) internal view returns (string memory) {\\n        string memory attributesString = \\\"\\\";\\n\\n        attributesString = string.concat(\\n            _addAttribute(\\n                \\\"Character Class\\\",\\n                CharacterNFT(characterNFT).getClassName(tokenId)\\n            ),\\n            \\\",\\\"\\n        );\\n\\n        uint256 level = Level(levelContractAddress).getTokenLevel(tokenId);\\n        uint256 xp = Level(levelContractAddress).getTokenXp(tokenId);\\n\\n        Attribute[] memory attributes = new Attribute[](2);\\n        attributes[0] = Attribute(\\\"Level\\\", level);\\n        attributes[1] = Attribute(\\\"Xp\\\", xp);\\n\\n        for (uint256 i = 0; i < attributes.length; i++) {\\n            if (i == attributes.length - 1) {\\n                attributesString = string.concat(\\n                    attributesString,\\n                    _addAttribute(\\n                        attributes[i].name,\\n                        Strings.toString(attributes[i].value)\\n                    )\\n                );\\n            } else {\\n                attributesString = string.concat(\\n                    attributesString,\\n                    _addAttribute(\\n                        attributes[i].name,\\n                        Strings.toString(attributes[i].value)\\n                    ),\\n                    \\\",\\\"\\n                );\\n            }\\n        }\\n\\n        string memory propertiesJSON = string.concat(\\n            '\\\"name\\\":\\\"',\\n            CharacterNFT(characterNFT).tokenName(tokenId),\\n            '\\\",',\\n            '\\\"description\\\":\\\"',\\n            CharacterNFT(characterNFT).getClassDescription(tokenId),\\n            '\\\",',\\n            '\\\"image\\\":\\\"',\\n            CharacterNFT(characterNFT).getClassImage(tokenId),\\n            '\\\",',\\n            '\\\"external_url\\\":\\\"',\\n            \\\"https://diablo.fandom.com/wiki/Diablo_II\\\",\\n            '\\\"'\\n        );\\n        string memory fullOpenSeaMetadata = string.concat(\\n            \\\"{\\\",\\n            propertiesJSON,\\n            \\\",\\\",\\n            '\\\"attributes\\\":[',\\n            attributesString,\\n            \\\"]}\\\"\\n        );\\n        return\\n            string.concat(\\n                \\\"data:application/json;base64,\\\",\\n                Base64.encode(bytes(fullOpenSeaMetadata))\\n            );\\n    }\\n\\n    function _addAttribute(\\n        string memory key,\\n        string memory value\\n    ) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"trait_type\\\": \\\"',\\n                    key,\\n                    '\\\", \\\"value\\\": \\\"',\\n                    value,\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x6c7957aec1ce587a77f3ab32c169991f70983e33ddd72f83267a15e20537c74b\",\"license\":\"MIT\"},\"contracts/leveling/Level.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"../BaseHelper.sol\\\";\\n\\ncontract Level is BaseHelper {\\n    /** STRUCTS **/\\n\\n    // Packed struct\\n    struct LevelData {\\n        uint128 level;\\n        uint128 xp;\\n    }\\n\\n    /** VARIABLES **/\\n\\n    // Track the Level and Xp of each token ID\\n    mapping(uint256 => LevelData) public tokenIdToLevelData;\\n\\n    // Each level has an xp requirement\\n    uint256[] public xpPerLevel;\\n\\n    // CharacterNFT contract\\n    address public characterNFT;\\n\\n    /** ERRORS **/\\n\\n    error MaxLevelReached();\\n\\n    /** MODIFIERS **/\\n\\n    /** EVENTS **/\\n\\n    /// @notice An event emitted when a character gets xp\\n    event LevelUp(uint256 indexed tokenId, uint256 level, uint256 xp);\\n\\n    /** FUNCTIONS **/\\n\\n    function initialize(address initialOwner) public initializer {\\n        _baseInitialize(initialOwner);\\n        // Each level has an xp requirement, start with 10 levels, we can add more later\\n        xpPerLevel.push(0); // Ignore the 0 index\\n        xpPerLevel.push(0); // Everyone starts at level 1 with 0 xp so index 1 is 0\\n        xpPerLevel.push(100); // Level 2 is 100 xp\\n        xpPerLevel.push(200); // Level 3 is 200 xp\\n        xpPerLevel.push(300); // Level 4 is 300 xp\\n        xpPerLevel.push(400); // Level 5 is 400 xp\\n        xpPerLevel.push(500); // Level 6 is 500 xp\\n        xpPerLevel.push(600); // Level 7 is 600 xp\\n        xpPerLevel.push(700); // Level 8 is 700 xp\\n        xpPerLevel.push(800); // Level 9 is 800 xp\\n        xpPerLevel.push(1000); // Level 10 is 1000 xp\\n    }\\n\\n    /**\\n     * @dev Update the XpPerLevel array if needed\\n     */\\n    function updateXpPerLevelArray(\\n        uint256[] memory _xpPerLevel\\n    ) external onlyRole(ADMIN_ROLE) {\\n        xpPerLevel = _xpPerLevel;\\n    }\\n\\n    /**\\n     * @dev Set the address of the CharacterNFT contract\\n     */\\n    function setCharacterNFT(\\n        address _characterNFT\\n    ) public onlyRole(OWNER_ROLE) {\\n        characterNFT = _characterNFT;\\n    }\\n\\n    /**\\n     * @dev Utility-contract only. Grant the user experience and increase their level if valid\\n     */\\n    function gainExperience(\\n        uint256 tokenId,\\n        uint256 xp\\n    ) public onlyRole(UTILITY_ROLE) {\\n        // Make sure the token ID is valid\\n        require(\\n            IERC721(characterNFT).ownerOf(tokenId) != address(0),\\n            \\\"Invalid token ID\\\"\\n        );\\n        LevelData storage levelData = tokenIdToLevelData[tokenId];\\n        // Update the users xp\\n        levelData.xp += uint128(xp);\\n        // Make sure user cannot go past max level\\n        if (levelData.level >= xpPerLevel.length - 1) {\\n            revert MaxLevelReached();\\n        }\\n        // User xp cannot surpass level 10\\n        if (levelData.xp > xpPerLevel[xpPerLevel.length - 1]) {\\n            revert MaxLevelReached();\\n        }\\n        uint256 currentLevel = levelData.level;\\n        // Update the level if the new xp falls with the range\\n        for (uint256 i = currentLevel + 1; i < xpPerLevel.length; i++) {\\n            if (levelData.xp >= xpPerLevel[i]) {\\n                levelData.level = uint128(i);\\n                emit LevelUp(tokenId, i, levelData.xp);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper view function returns just the level\\n     */\\n    function getTokenLevel(uint256 tokenId) public view returns (uint256) {\\n        if (tokenIdToLevelData[tokenId].level == 0) {\\n            return 1;\\n        } else {\\n            return tokenIdToLevelData[tokenId].level;\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper view function returns just the xp\\n     */\\n    function getTokenXp(uint256 tokenId) public view returns (uint256) {\\n        return tokenIdToLevelData[tokenId].xp;\\n    }\\n}\\n\",\"keccak256\":\"0x0664a492fbd955da4e2c9fceae699f88de3f96d414b2d64861e32f0053a1973f\",\"license\":\"MIT\"},\"contracts/skills/SkillTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"../BaseHelper.sol\\\";\\nimport {CharacterNFTManager} from \\\"../erc721/CharacterNFTManager.sol\\\";\\nimport {Level} from \\\"../leveling/Level.sol\\\";\\n\\ncontract SkillTree is BaseHelper {\\n    /** STRUCTS **/\\n\\n    /** VARIABLES **/\\n\\n    // Character class to skill tree mapping\\n    mapping(uint256 => uint256[]) public charClassToSkills;\\n\\n    // Level contract\\n    address public levelContractAddress;\\n    // C\\n    address public characterNFTManager;\\n\\n    /** ERRORS **/\\n\\n    error SkillNotAllowed();\\n\\n    /** MODIFIERS **/\\n\\n    /** EVENTS **/\\n\\n    /** FUNCTIONS **/\\n\\n    function initialize(address initialOwner) public initializer {\\n        _baseInitialize(initialOwner);\\n        // Each character type has an array of skills that match to level\\n        charClassToSkills[1] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // Barbarian\\n        charClassToSkills[2] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // Necromancer\\n        charClassToSkills[3] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // Paladin\\n        charClassToSkills[4] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // Sorceress\\n        charClassToSkills[5] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // Amazon\\n        charClassToSkills[6] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // Assassin\\n        charClassToSkills[7] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // Druid\\n    }\\n\\n    /**\\n     * @dev Set the address of the CharacterNFTManager contract\\n     */\\n    function setCharacterNFTManager(\\n        address _characterNFTManager\\n    ) public onlyRole(OWNER_ROLE) {\\n        characterNFTManager = _characterNFTManager;\\n    }\\n\\n    /**\\n     * @dev Set the address of the Level contract\\n     */\\n    function setLevelContract(\\n        address _levelContract\\n    ) public onlyRole(OWNER_ROLE) {\\n        levelContractAddress = _levelContract;\\n    }\\n\\n    /**\\n     * @dev Check that the character class and skill chosen are valid\\n     */\\n    function canUseSkill(uint256 tokenId, uint256 skillChosen) public view {\\n        // Get the character class of the token ID\\n        CharacterNFTManager characterNFTManagerContract = CharacterNFTManager(\\n            characterNFTManager\\n        );\\n        CharacterNFTManager.CharacterClass classEnumValue = characterNFTManagerContract\\n                .tokenIdToCharacterClass(tokenId);\\n        // Get the level of the token ID\\n        Level levelContract = Level(levelContractAddress);\\n        uint256 tokenIdLevel = levelContract.getTokenLevel(tokenId);\\n        // Get the skills of the character class\\n        uint256[] memory skills = charClassToSkills[uint256(classEnumValue)];\\n        if (skillChosen > skills[tokenIdLevel]) {\\n            revert SkillNotAllowed();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32bbd5331109865db0c59f581a2b6f1a7e77d8c9d3d0a448c9f1d01f25e1dfcf\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4337,"contract":"contracts/skills/SkillTree.sol:SkillTree","label":"__gap","offset":0,"slot":"0","type":"t_array(t_uint256)50_storage"},{"astId":5710,"contract":"contracts/skills/SkillTree.sol:SkillTree","label":"charClassToSkills","offset":0,"slot":"50","type":"t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"},{"astId":5712,"contract":"contracts/skills/SkillTree.sol:SkillTree","label":"levelContractAddress","offset":0,"slot":"51","type":"t_address"},{"astId":5714,"contract":"contracts/skills/SkillTree.sol:SkillTree","label":"characterNFTManager","offset":0,"slot":"52","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_mapping(t_uint256,t_array(t_uint256)dyn_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256[])","numberOfBytes":"32","value":"t_array(t_uint256)dyn_storage"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"InvalidValues()":[{"notice":"ERRORS *"}],"SkillNotAllowed()":[{"notice":"ERRORS *"}]},"kind":"user","methods":{"OWNER_ROLE()":{"notice":"ROLES *"},"charClassToSkills(uint256,uint256)":{"notice":"VARIABLES *"},"initialize(address)":{"notice":"FUNCTIONS *"}},"version":1}}}}}}